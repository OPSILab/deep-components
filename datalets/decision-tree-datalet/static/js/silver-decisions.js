(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.SilverDecisions || (g.SilverDecisions = {})).App = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var copy             = require('es5-ext/object/copy')
  , normalizeOptions = require('es5-ext/object/normalize-options')
  , ensureCallable   = require('es5-ext/object/valid-callable')
  , map              = require('es5-ext/object/map')
  , callable         = require('es5-ext/object/valid-callable')
  , validValue       = require('es5-ext/object/valid-value')

  , bind = Function.prototype.bind, defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, options) {
	var value = validValue(desc) && callable(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, options*/) {
	var options = normalizeOptions(arguments[1]);
	if (options.resolveContext != null) ensureCallable(options.resolveContext);
	return map(props, function (desc, name) { return define(name, desc, options); });
};

},{"es5-ext/object/copy":24,"es5-ext/object/map":33,"es5-ext/object/normalize-options":34,"es5-ext/object/valid-callable":38,"es5-ext/object/valid-value":39}],2:[function(require,module,exports){
'use strict';

var assign        = require('es5-ext/object/assign')
  , normalizeOpts = require('es5-ext/object/normalize-options')
  , isCallable    = require('es5-ext/object/is-callable')
  , contains      = require('es5-ext/string/#/contains')

  , d;

d = module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if ((arguments.length < 2) || (typeof dscr !== 'string')) {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (dscr == null) {
		c = w = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
		w = contains.call(dscr, 'w');
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== 'string') {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (get == null) {
		get = undefined;
	} else if (!isCallable(get)) {
		options = get;
		get = set = undefined;
	} else if (set == null) {
		set = undefined;
	} else if (!isCallable(set)) {
		options = set;
		set = undefined;
	}
	if (dscr == null) {
		c = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

},{"es5-ext/object/assign":21,"es5-ext/object/is-callable":27,"es5-ext/object/normalize-options":34,"es5-ext/string/#/contains":40}],3:[function(require,module,exports){
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear

"use strict";

var value = require("../../object/valid-value");

module.exports = function () {
	value(this).length = 0;
	return this;
};

},{"../../object/valid-value":39}],4:[function(require,module,exports){
"use strict";

var numberIsNaN       = require("../../number/is-nan")
  , toPosInt          = require("../../number/to-pos-integer")
  , value             = require("../../object/valid-value")
  , indexOf           = Array.prototype.indexOf
  , objHasOwnProperty = Object.prototype.hasOwnProperty
  , abs               = Math.abs
  , floor             = Math.floor;

module.exports = function (searchElement /*, fromIndex*/) {
	var i, length, fromIndex, val;
	if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);

	length = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < length; ++i) {
		if (objHasOwnProperty.call(this, i)) {
			val = this[i];
			if (numberIsNaN(val)) return i; // Jslint: ignore
		}
	}
	return -1;
};

},{"../../number/is-nan":15,"../../number/to-pos-integer":19,"../../object/valid-value":39}],5:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? Array.from
	: require("./shim");

},{"./is-implemented":6,"./shim":7}],6:[function(require,module,exports){
"use strict";

module.exports = function () {
	var from = Array.from, arr, result;
	if (typeof from !== "function") return false;
	arr = ["raz", "dwa"];
	result = from(arr);
	return Boolean(result && (result !== arr) && (result[1] === "dwa"));
};

},{}],7:[function(require,module,exports){
"use strict";

var iteratorSymbol = require("es6-symbol").iterator
  , isArguments    = require("../../function/is-arguments")
  , isFunction     = require("../../function/is-function")
  , toPosInt       = require("../../number/to-pos-integer")
  , callable       = require("../../object/valid-callable")
  , validValue     = require("../../object/valid-value")
  , isValue        = require("../../object/is-value")
  , isString       = require("../../string/is-string")
  , isArray        = Array.isArray
  , call           = Function.prototype.call
  , desc           = { configurable: true, enumerable: true, writable: true, value: null }
  , defineProperty = Object.defineProperty;

// eslint-disable-next-line complexity
module.exports = function (arrayLike /*, mapFn, thisArg*/) {
	var mapFn = arguments[1]
	  , thisArg = arguments[2]
	  , Context
	  , i
	  , j
	  , arr
	  , length
	  , code
	  , iterator
	  , result
	  , getIterator
	  , value;

	arrayLike = Object(validValue(arrayLike));

	if (isValue(mapFn)) callable(mapFn);
	if (!this || this === Array || !isFunction(this)) {
		// Result: Plain array
		if (!mapFn) {
			if (isArguments(arrayLike)) {
				// Source: Arguments
				length = arrayLike.length;
				if (length !== 1) return Array.apply(null, arrayLike);
				arr = new Array(1);
				arr[0] = arrayLike[0];
				return arr;
			}
			if (isArray(arrayLike)) {
				// Source: Array
				arr = new Array(length = arrayLike.length);
				for (i = 0; i < length; ++i) arr[i] = arrayLike[i];
				return arr;
			}
		}
		arr = [];
	} else {
		// Result: Non plain array
		Context = this;
	}

	if (!isArray(arrayLike)) {
		if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {
			// Source: Iterator
			iterator = callable(getIterator).call(arrayLike);
			if (Context) arr = new Context();
			result = iterator.next();
			i = 0;
			while (!result.done) {
				value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, i, desc);
				} else {
					arr[i] = value;
				}
				result = iterator.next();
				++i;
			}
			length = i;
		} else if (isString(arrayLike)) {
			// Source: String
			length = arrayLike.length;
			if (Context) arr = new Context();
			for (i = 0, j = 0; i < length; ++i) {
				value = arrayLike[i];
				if (i + 1 < length) {
					code = value.charCodeAt(0);
					// eslint-disable-next-line max-depth
					if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];
				}
				value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, j, desc);
				} else {
					arr[j] = value;
				}
				++j;
			}
			length = j;
		}
	}
	if (length === undefined) {
		// Source: array or array-like
		length = toPosInt(arrayLike.length);
		if (Context) arr = new Context(length);
		for (i = 0; i < length; ++i) {
			value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
			if (Context) {
				desc.value = value;
				defineProperty(arr, i, desc);
			} else {
				arr[i] = value;
			}
		}
	}
	if (Context) {
		desc.value = null;
		arr.length = length;
	}
	return arr;
};

},{"../../function/is-arguments":8,"../../function/is-function":9,"../../number/to-pos-integer":19,"../../object/is-value":29,"../../object/valid-callable":38,"../../object/valid-value":39,"../../string/is-string":43,"es6-symbol":56}],8:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString
  , id = objToString.call(
	(function () {
		return arguments;
	})()
);

module.exports = function (value) {
	return objToString.call(value) === id;
};

},{}],9:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString, id = objToString.call(require("./noop"));

module.exports = function (value) {
	return typeof value === "function" && objToString.call(value) === id;
};

},{"./noop":10}],10:[function(require,module,exports){
"use strict";

// eslint-disable-next-line no-empty-function
module.exports = function () {};

},{}],11:[function(require,module,exports){
/* eslint strict: "off" */

module.exports = (function () {
	return this;
}());

},{}],12:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? Math.sign
	: require("./shim");

},{"./is-implemented":13,"./shim":14}],13:[function(require,module,exports){
"use strict";

module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== "function") return false;
	return (sign(10) === 1) && (sign(-20) === -1);
};

},{}],14:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || (value === 0)) return value;
	return value > 0 ? 1 : -1;
};

},{}],15:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? Number.isNaN
	: require("./shim");

},{"./is-implemented":16,"./shim":17}],16:[function(require,module,exports){
"use strict";

module.exports = function () {
	var numberIsNaN = Number.isNaN;
	if (typeof numberIsNaN !== "function") return false;
	return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
};

},{}],17:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	// eslint-disable-next-line no-self-compare
	return value !== value;
};

},{}],18:[function(require,module,exports){
"use strict";

var sign = require("../math/sign")

  , abs = Math.abs, floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if ((value === 0) || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};

},{"../math/sign":12}],19:[function(require,module,exports){
"use strict";

var toInteger = require("./to-integer")

  , max = Math.max;

module.exports = function (value) {
 return max(0, toInteger(value));
};

},{"./to-integer":18}],20:[function(require,module,exports){
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order

"use strict";

var callable                = require("./valid-callable")
  , value                   = require("./valid-value")
  , bind                    = Function.prototype.bind
  , call                    = Function.prototype.call
  , keys                    = Object.keys
  , objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb /*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== "function") method = list[method];
		return call.call(method, list, function (key, index) {
			if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};

},{"./valid-callable":38,"./valid-value":39}],21:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? Object.assign
	: require("./shim");

},{"./is-implemented":22,"./shim":23}],22:[function(require,module,exports){
"use strict";

module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== "function") return false;
	obj = { foo: "raz" };
	assign(obj, { bar: "dwa" }, { trzy: "trzy" });
	return (obj.foo + obj.bar + obj.trzy) === "razdwatrzy";
};

},{}],23:[function(require,module,exports){
"use strict";

var keys  = require("../keys")
  , value = require("../valid-value")
  , max   = Math.max;

module.exports = function (dest, src /*, …srcn*/) {
	var error, i, length = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try {
			dest[key] = src[key];
		} catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < length; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};

},{"../keys":30,"../valid-value":39}],24:[function(require,module,exports){
"use strict";

var aFrom  = require("../array/from")
  , assign = require("./assign")
  , value  = require("./valid-value");

module.exports = function (obj/*, propertyNames, options*/) {
	var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
	if (copy !== obj && !propertyNames) return copy;
	var result = {};
	if (propertyNames) {
		aFrom(propertyNames, function (propertyName) {
			if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];
		});
	} else {
		assign(result, obj);
	}
	return result;
};

},{"../array/from":5,"./assign":21,"./valid-value":39}],25:[function(require,module,exports){
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804

"use strict";

var create = Object.create, shim;

if (!require("./set-prototype-of/is-implemented")()) {
	shim = require("./set-prototype-of/shim");
}

module.exports = (function () {
	var nullObject, polyProps, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	polyProps = {};
	desc = {
		configurable: false,
		enumerable: false,
		writable: true,
		value: undefined
	};
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === "__proto__") {
			polyProps[name] = {
				configurable: true,
				enumerable: false,
				writable: true,
				value: undefined
			};
			return;
		}
		polyProps[name] = desc;
	});
	Object.defineProperties(nullObject, polyProps);

	Object.defineProperty(shim, "nullPolyfill", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: nullObject
	});

	return function (prototype, props) {
		return create(prototype === null ? nullObject : prototype, props);
	};
}());

},{"./set-prototype-of/is-implemented":36,"./set-prototype-of/shim":37}],26:[function(require,module,exports){
"use strict";

module.exports = require("./_iterate")("forEach");

},{"./_iterate":20}],27:[function(require,module,exports){
// Deprecated

"use strict";

module.exports = function (obj) {
 return typeof obj === "function";
};

},{}],28:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

var map = { function: true, object: true };

module.exports = function (value) {
	return (isValue(value) && map[typeof value]) || false;
};

},{"./is-value":29}],29:[function(require,module,exports){
"use strict";

var _undefined = require("../function/noop")(); // Support ES3 engines

module.exports = function (val) {
 return (val !== _undefined) && (val !== null);
};

},{"../function/noop":10}],30:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? Object.keys
	: require("./shim");

},{"./is-implemented":31,"./shim":32}],31:[function(require,module,exports){
"use strict";

module.exports = function () {
	try {
		Object.keys("primitive");
		return true;
	} catch (e) {
 return false;
}
};

},{}],32:[function(require,module,exports){
"use strict";

var isValue = require("../is-value");

var keys = Object.keys;

module.exports = function (object) {
	return keys(isValue(object) ? Object(object) : object);
};

},{"../is-value":29}],33:[function(require,module,exports){
"use strict";

var callable = require("./valid-callable")
  , forEach  = require("./for-each")
  , call     = Function.prototype.call;

module.exports = function (obj, cb /*, thisArg*/) {
	var result = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, targetObj, index) {
		result[key] = call.call(cb, thisArg, value, key, targetObj, index);
	});
	return result;
};

},{"./for-each":26,"./valid-callable":38}],34:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

// eslint-disable-next-line no-unused-vars
module.exports = function (opts1 /*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (!isValue(options)) return;
		process(Object(options), result);
	});
	return result;
};

},{"./is-value":29}],35:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? Object.setPrototypeOf
	: require("./shim");

},{"./is-implemented":36,"./shim":37}],36:[function(require,module,exports){
"use strict";

var create = Object.create, getPrototypeOf = Object.getPrototypeOf, plainObject = {};

module.exports = function (/* CustomCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== "function") return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
};

},{}],37:[function(require,module,exports){
/* eslint no-proto: "off" */

// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554

"use strict";

var isObject        = require("../is-object")
  , value           = require("../valid-value")
  , objIsPrototypOf = Object.prototype.isPrototypeOf
  , defineProperty  = Object.defineProperty
  , nullDesc        = {
	configurable: true,
	enumerable: false,
	writable: true,
	value: undefined
}
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if (prototype === null || isObject(prototype)) return obj;
	throw new TypeError("Prototype must be null or an object");
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = objIsPrototypOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, "__proto__", nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, "level", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: status.level
	});
}(
	(function () {
		var tmpObj1 = Object.create(null)
		  , tmpObj2 = {}
		  , set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(tmpObj1, tmpObj2);
			} catch (ignore) {}
			if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set: set, level: 2 };
		}

		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };

		tmpObj1 = {};
		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };

		return false;
	})()
));

require("../create");

},{"../create":25,"../is-object":28,"../valid-value":39}],38:[function(require,module,exports){
"use strict";

module.exports = function (fn) {
	if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
	return fn;
};

},{}],39:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

module.exports = function (value) {
	if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
	return value;
};

},{"./is-value":29}],40:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? String.prototype.contains
	: require("./shim");

},{"./is-implemented":41,"./shim":42}],41:[function(require,module,exports){
"use strict";

var str = "razdwatrzy";

module.exports = function () {
	if (typeof str.contains !== "function") return false;
	return (str.contains("dwa") === true) && (str.contains("foo") === false);
};

},{}],42:[function(require,module,exports){
"use strict";

var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};

},{}],43:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString, id = objToString.call("");

module.exports = function (value) {
	return (
		typeof value === "string" ||
		(value &&
			typeof value === "object" &&
			(value instanceof String || objToString.call(value) === id)) ||
		false
	);
};

},{}],44:[function(require,module,exports){
"use strict";

var setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , contains       = require("es5-ext/string/#/contains")
  , d              = require("d")
  , Symbol         = require("es6-symbol")
  , Iterator       = require("./");

var defineProperty = Object.defineProperty, ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) throw new TypeError("Constructor requires 'new'");
	Iterator.call(this, arr);
	if (!kind) kind = "value";
	else if (contains.call(kind, "key+value")) kind = "key+value";
	else if (contains.call(kind, "key")) kind = "key";
	else kind = "value";
	defineProperty(this, "__kind__", d("", kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete ArrayIterator.prototype.constructor;

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	_resolve: d(function (i) {
		if (this.__kind__ === "value") return this.__list__[i];
		if (this.__kind__ === "key+value") return [i, this.__list__[i]];
		return i;
	})
});
defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d("c", "Array Iterator"));

},{"./":47,"d":2,"es5-ext/object/set-prototype-of":35,"es5-ext/string/#/contains":40,"es6-symbol":56}],45:[function(require,module,exports){
"use strict";

var isArguments = require("es5-ext/function/is-arguments")
  , callable    = require("es5-ext/object/valid-callable")
  , isString    = require("es5-ext/string/is-string")
  , get         = require("./get");

var isArray = Array.isArray, call = Function.prototype.call, some = Array.prototype.some;

module.exports = function (iterable, cb /*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, length, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = "array";
	else if (isString(iterable)) mode = "string";
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () {
		broken = true;
	};
	if (mode === "array") {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			return broken;
		});
		return;
	}
	if (mode === "string") {
		length = iterable.length;
		for (i = 0; i < length; ++i) {
			char = iterable[i];
			if (i + 1 < length) {
				code = char.charCodeAt(0);
				if (code >= 0xd800 && code <= 0xdbff) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};

},{"./get":46,"es5-ext/function/is-arguments":8,"es5-ext/object/valid-callable":38,"es5-ext/string/is-string":43}],46:[function(require,module,exports){
"use strict";

var isArguments    = require("es5-ext/function/is-arguments")
  , isString       = require("es5-ext/string/is-string")
  , ArrayIterator  = require("./array")
  , StringIterator = require("./string")
  , iterable       = require("./valid-iterable")
  , iteratorSymbol = require("es6-symbol").iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === "function") return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};

},{"./array":44,"./string":49,"./valid-iterable":50,"es5-ext/function/is-arguments":8,"es5-ext/string/is-string":43,"es6-symbol":56}],47:[function(require,module,exports){
"use strict";

var clear    = require("es5-ext/array/#/clear")
  , assign   = require("es5-ext/object/assign")
  , callable = require("es5-ext/object/valid-callable")
  , value    = require("es5-ext/object/valid-value")
  , d        = require("d")
  , autoBind = require("d/auto-bind")
  , Symbol   = require("es6-symbol");

var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) throw new TypeError("Constructor requires 'new'");
	defineProperties(this, {
		__list__: d("w", value(list)),
		__context__: d("w", context),
		__nextIndex__: d("w", 0)
	});
	if (!context) return;
	callable(context.on);
	context.on("_add", this._onAdd);
	context.on("_delete", this._onDelete);
	context.on("_clear", this._onClear);
};

// Internal %IteratorPrototype% doesn't expose its constructor
delete Iterator.prototype.constructor;

defineProperties(
	Iterator.prototype,
	assign(
		{
			_next: d(function () {
				var i;
				if (!this.__list__) return undefined;
				if (this.__redo__) {
					i = this.__redo__.shift();
					if (i !== undefined) return i;
				}
				if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
				this._unBind();
				return undefined;
			}),
			next: d(function () {
				return this._createResult(this._next());
			}),
			_createResult: d(function (i) {
				if (i === undefined) return { done: true, value: undefined };
				return { done: false, value: this._resolve(i) };
			}),
			_resolve: d(function (i) {
				return this.__list__[i];
			}),
			_unBind: d(function () {
				this.__list__ = null;
				delete this.__redo__;
				if (!this.__context__) return;
				this.__context__.off("_add", this._onAdd);
				this.__context__.off("_delete", this._onDelete);
				this.__context__.off("_clear", this._onClear);
				this.__context__ = null;
			}),
			toString: d(function () {
				return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
			})
		},
		autoBind({
			_onAdd: d(function (index) {
				if (index >= this.__nextIndex__) return;
				++this.__nextIndex__;
				if (!this.__redo__) {
					defineProperty(this, "__redo__", d("c", [index]));
					return;
				}
				this.__redo__.forEach(function (redo, i) {
					if (redo >= index) this.__redo__[i] = ++redo;
				}, this);
				this.__redo__.push(index);
			}),
			_onDelete: d(function (index) {
				var i;
				if (index >= this.__nextIndex__) return;
				--this.__nextIndex__;
				if (!this.__redo__) return;
				i = this.__redo__.indexOf(index);
				if (i !== -1) this.__redo__.splice(i, 1);
				this.__redo__.forEach(function (redo, j) {
					if (redo > index) this.__redo__[j] = --redo;
				}, this);
			}),
			_onClear: d(function () {
				if (this.__redo__) clear.call(this.__redo__);
				this.__nextIndex__ = 0;
			})
		})
	)
);

defineProperty(
	Iterator.prototype,
	Symbol.iterator,
	d(function () {
		return this;
	})
);

},{"d":2,"d/auto-bind":1,"es5-ext/array/#/clear":3,"es5-ext/object/assign":21,"es5-ext/object/valid-callable":38,"es5-ext/object/valid-value":39,"es6-symbol":56}],48:[function(require,module,exports){
"use strict";

var isArguments = require("es5-ext/function/is-arguments")
  , isValue     = require("es5-ext/object/is-value")
  , isString    = require("es5-ext/string/is-string");

var iteratorSymbol = require("es6-symbol").iterator
  , isArray        = Array.isArray;

module.exports = function (value) {
	if (!isValue(value)) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return typeof value[iteratorSymbol] === "function";
};

},{"es5-ext/function/is-arguments":8,"es5-ext/object/is-value":29,"es5-ext/string/is-string":43,"es6-symbol":56}],49:[function(require,module,exports){
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols

"use strict";

var setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , d              = require("d")
  , Symbol         = require("es6-symbol")
  , Iterator       = require("./");

var defineProperty = Object.defineProperty, StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) throw new TypeError("Constructor requires 'new'");
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, "__length__", d("", str.length));
};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete StringIterator.prototype.constructor;

StringIterator.prototype = Object.create(Iterator.prototype, {
	_next: d(function () {
		if (!this.__list__) return undefined;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
		return undefined;
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if (code >= 0xd800 && code <= 0xdbff) return char + this.__list__[this.__nextIndex__++];
		return char;
	})
});
defineProperty(StringIterator.prototype, Symbol.toStringTag, d("c", "String Iterator"));

},{"./":47,"d":2,"es5-ext/object/set-prototype-of":35,"es6-symbol":56}],50:[function(require,module,exports){
"use strict";

var isIterable = require("./is-iterable");

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};

},{"./is-iterable":48}],51:[function(require,module,exports){
'use strict';

if (!require('./is-implemented')()) {
	Object.defineProperty(require('es5-ext/global'), 'Set',
		{ value: require('./polyfill'), configurable: true, enumerable: false,
			writable: true });
}

},{"./is-implemented":52,"./polyfill":55,"es5-ext/global":11}],52:[function(require,module,exports){
'use strict';

module.exports = function () {
	var set, iterator, result;
	if (typeof Set !== 'function') return false;
	set = new Set(['raz', 'dwa', 'trzy']);
	if (String(set) !== '[object Set]') return false;
	if (set.size !== 3) return false;
	if (typeof set.add !== 'function') return false;
	if (typeof set.clear !== 'function') return false;
	if (typeof set.delete !== 'function') return false;
	if (typeof set.entries !== 'function') return false;
	if (typeof set.forEach !== 'function') return false;
	if (typeof set.has !== 'function') return false;
	if (typeof set.keys !== 'function') return false;
	if (typeof set.values !== 'function') return false;

	iterator = set.values();
	result = iterator.next();
	if (result.done !== false) return false;
	if (result.value !== 'raz') return false;

	return true;
};

},{}],53:[function(require,module,exports){
// Exports true if environment provides native `Set` implementation,
// whatever that is.

'use strict';

module.exports = (function () {
	if (typeof Set === 'undefined') return false;
	return (Object.prototype.toString.call(Set.prototype) === '[object Set]');
}());

},{}],54:[function(require,module,exports){
'use strict';

var setPrototypeOf    = require('es5-ext/object/set-prototype-of')
  , contains          = require('es5-ext/string/#/contains')
  , d                 = require('d')
  , Iterator          = require('es6-iterator')
  , toStringTagSymbol = require('es6-symbol').toStringTag

  , defineProperty = Object.defineProperty
  , SetIterator;

SetIterator = module.exports = function (set, kind) {
	if (!(this instanceof SetIterator)) return new SetIterator(set, kind);
	Iterator.call(this, set.__setData__, set);
	if (!kind) kind = 'value';
	else if (contains.call(kind, 'key+value')) kind = 'key+value';
	else kind = 'value';
	defineProperty(this, '__kind__', d('', kind));
};
if (setPrototypeOf) setPrototypeOf(SetIterator, Iterator);

SetIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(SetIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__list__[i];
		return [this.__list__[i], this.__list__[i]];
	}),
	toString: d(function () { return '[object Set Iterator]'; })
});
defineProperty(SetIterator.prototype, toStringTagSymbol, d('c', 'Set Iterator'));

},{"d":2,"es5-ext/object/set-prototype-of":35,"es5-ext/string/#/contains":40,"es6-iterator":47,"es6-symbol":56}],55:[function(require,module,exports){
'use strict';

var clear          = require('es5-ext/array/#/clear')
  , eIndexOf       = require('es5-ext/array/#/e-index-of')
  , setPrototypeOf = require('es5-ext/object/set-prototype-of')
  , callable       = require('es5-ext/object/valid-callable')
  , d              = require('d')
  , ee             = require('event-emitter')
  , Symbol         = require('es6-symbol')
  , iterator       = require('es6-iterator/valid-iterable')
  , forOf          = require('es6-iterator/for-of')
  , Iterator       = require('./lib/iterator')
  , isNative       = require('./is-native-implemented')

  , call = Function.prototype.call
  , defineProperty = Object.defineProperty, getPrototypeOf = Object.getPrototypeOf
  , SetPoly, getValues, NativeSet;

if (isNative) NativeSet = Set;

module.exports = SetPoly = function Set(/*iterable*/) {
	var iterable = arguments[0], self;
	if (!(this instanceof SetPoly)) throw new TypeError('Constructor requires \'new\'');
	if (isNative && setPrototypeOf) self = setPrototypeOf(new NativeSet(), getPrototypeOf(this));
	else self = this;
	if (iterable != null) iterator(iterable);
	defineProperty(self, '__setData__', d('c', []));
	if (!iterable) return self;
	forOf(iterable, function (value) {
		if (eIndexOf.call(this, value) !== -1) return;
		this.push(value);
	}, self.__setData__);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(SetPoly, NativeSet);
	SetPoly.prototype = Object.create(NativeSet.prototype, { constructor: d(SetPoly) });
}

ee(Object.defineProperties(SetPoly.prototype, {
	add: d(function (value) {
		if (this.has(value)) return this;
		this.emit('_add', this.__setData__.push(value) - 1, value);
		return this;
	}),
	clear: d(function () {
		if (!this.__setData__.length) return;
		clear.call(this.__setData__);
		this.emit('_clear');
	}),
	delete: d(function (value) {
		var index = eIndexOf.call(this.__setData__, value);
		if (index === -1) return false;
		this.__setData__.splice(index, 1);
		this.emit('_delete', index, value);
		return true;
	}),
	entries: d(function () { return new Iterator(this, 'key+value'); }),
	forEach: d(function (cb/*, thisArg*/) {
		var thisArg = arguments[1], iterator, result, value;
		callable(cb);
		iterator = this.values();
		result = iterator._next();
		while (result !== undefined) {
			value = iterator._resolve(result);
			call.call(cb, thisArg, value, value, this);
			result = iterator._next();
		}
	}),
	has: d(function (value) {
		return (eIndexOf.call(this.__setData__, value) !== -1);
	}),
	keys: d(getValues = function () { return this.values(); }),
	size: d.gs(function () { return this.__setData__.length; }),
	values: d(function () { return new Iterator(this); }),
	toString: d(function () { return '[object Set]'; })
}));
defineProperty(SetPoly.prototype, Symbol.iterator, d(getValues));
defineProperty(SetPoly.prototype, Symbol.toStringTag, d('c', 'Set'));

},{"./is-native-implemented":53,"./lib/iterator":54,"d":2,"es5-ext/array/#/clear":3,"es5-ext/array/#/e-index-of":4,"es5-ext/object/set-prototype-of":35,"es5-ext/object/valid-callable":38,"es6-iterator/for-of":45,"es6-iterator/valid-iterable":50,"es6-symbol":56,"event-emitter":61}],56:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')() ? Symbol : require('./polyfill');

},{"./is-implemented":57,"./polyfill":59}],57:[function(require,module,exports){
'use strict';

var validTypes = { object: true, symbol: true };

module.exports = function () {
	var symbol;
	if (typeof Symbol !== 'function') return false;
	symbol = Symbol('test symbol');
	try { String(symbol); } catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};

},{}],58:[function(require,module,exports){
'use strict';

module.exports = function (x) {
	if (!x) return false;
	if (typeof x === 'symbol') return true;
	if (!x.constructor) return false;
	if (x.constructor.name !== 'Symbol') return false;
	return (x[x.constructor.toStringTag] === 'Symbol');
};

},{}],59:[function(require,module,exports){
// ES2015 Symbol polyfill for environments that do not (or partially) support it

'use strict';

var d              = require('d')
  , validateSymbol = require('./validate-symbol')

  , create = Object.create, defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty, objPrototype = Object.prototype
  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null)
  , isNativeSafe;

if (typeof Symbol === 'function') {
	NativeSymbol = Symbol;
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
}

var generateName = (function () {
	var created = create(null);
	return function (desc) {
		var postfix = 0, name, ie11BugWorkaround;
		while (created[desc + (postfix || '')]) ++postfix;
		desc += (postfix || '');
		created[desc] = true;
		name = '@@' + desc;
		defineProperty(objPrototype, name, d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		}));
		return name;
	};
}());

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError('Symbol is not a constructor');
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError('Symbol is not a constructor');
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = (description === undefined ? '' : String(description));
	return defineProperties(symbol, {
		__description__: d('', description),
		__name__: d('', generateName(description))
	});
};
defineProperties(SymbolPolyfill, {
	for: d(function (key) {
		if (globalSymbols[key]) return globalSymbols[key];
		return (globalSymbols[key] = SymbolPolyfill(String(key)));
	}),
	keyFor: d(function (s) {
		var key;
		validateSymbol(s);
		for (key in globalSymbols) if (globalSymbols[key] === s) return key;
	}),

	// To ensure proper interoperability with other native functions (e.g. Array.from)
	// fallback to eventual native implementation of given symbol
	hasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),
	isConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||
		SymbolPolyfill('isConcatSpreadable')),
	iterator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),
	match: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),
	replace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),
	search: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),
	species: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),
	split: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),
	toPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),
	toStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),
	unscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))
});

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d('', function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {
	var symbol = validateSymbol(this);
	if (typeof symbol === 'symbol') return symbol;
	return symbol.toString();
}));
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));

},{"./validate-symbol":60,"d":2}],60:[function(require,module,exports){
'use strict';

var isSymbol = require('./is-symbol');

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};

},{"./is-symbol":58}],61:[function(require,module,exports){
'use strict';

var d        = require('d')
  , callable = require('es5-ext/object/valid-callable')

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;

},{"d":2,"es5-ext/object/valid-callable":38}],62:[function(require,module,exports){
/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/

( function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery", "./version" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} ( function( $ ) {
return $.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );
} ) );

},{}],63:[function(require,module,exports){
module.exports={
  "name": "silver-decisions",
  "version": "1.0.0",
  "description": "Software for creating and analyzing decision trees.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SilverDecisions/SilverDecisions.git"
  },
  "author": "Michał Wasiluk, Bogumił Kamiński, Przemysław Szufel",
  "license": "LGPL-3.0",
  "bugs": {
    "url": "https://github.com/SilverDecisions/SilverDecisions/issues"
  },
  "homepage": "https://github.com/SilverDecisions/SilverDecisions#readme",
  "browserify": {
    "transform": [
      [
        "babelify",
        {
          "presets": [
            "es2015"
          ],
          "plugins": [
            ["transform-class-properties", { "spec": true }],
            "transform-object-assign",
            "transform-es2015-spread",
            "transform-object-rest-spread",
            [
              "babel-plugin-transform-builtin-extend",
              {
                "globals": [
                  "Error"
                ]
              }
            ]
          ]
        }
      ]
    ]
  },
  "devDependencies": {
    "babel-plugin-transform-builtin-extend": "^1.1.2",
    "babel-plugin-transform-class-properties": "^6.11.5",
    "babel-plugin-transform-es2015-spread": "^6.22.0",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-preset-es2015": "^6.14.0",
    "babelify": "^7.3.0",
    "browser-sync": "^2.13.0",
    "browserify": "^14.5.0",
    "browserify-resolutions": "^1.1.0",
    "browserify-shim": "^3.8.13",
    "chalk": "^2.3.0",
    "del": "^3.0.0",
    "es6-set": "^0.1.5",
    "gulp": "^3.9.1",
    "gulp-concat": "^2.6.0",
    "gulp-filelist": "^1.0.0",
    "gulp-html2js": "^0.4.2",
    "gulp-load-plugins": "^1.2.4",
    "gulp-minify-css": "^1.2.4",
    "gulp-plumber": "^1.1.0",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.6.1",
    "gulp-sass": "^3.1.0",
    "gulp-sourcemaps": "^2.6.1",
    "gulp-strip-debug": "^1.1.0",
    "gulp-template": "^4.0.0",
    "gulp-uglify": "^3.0.0",
    "gulp-util": "^3.0.7",
    "jasmine": "^2.5.2",
    "jasmine-jquery": "^2.1.1",
    "karma": "^1.7.0",
    "karma-browserify": "^5.1.1",
    "karma-chrome-launcher": "^2.0.0",
    "karma-intl-shim": "^1.0.3",
    "karma-jasmine": "^1.0.2",
    "merge-stream": "^1.0.0",
    "odc-d3": "^1.1.6",
    "run-sequence": "^2.0.0",
    "stringify": "^5.1.0",
    "svg2pdf.js": "^1.1.1",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "yargs": "^10.0.3"
  },
  "dependencies": {
    "autosize": "^4.0.0",
    "blueimp-canvas-to-blob": "^3.3.0",
    "d3-array": "^1.0.1",
    "d3-dispatch": "^1.0.1",
    "d3-drag": "^1.0.1",
    "d3-scale": "^1.0.3",
    "d3-selection": "^1.0.2",
    "d3-time-format": "^2.0.2",
    "file-saver": "^1.3.2",
    "hammerjs": "^2.0.8",
    "i18next": "^10.0.3",
    "jquery": "^3.1.1",
    "jquery-ui": "^1.12.1",
    "pivottable": "^2.11.0",
    "sd-computations": "0.3.6",
    "sd-model": "0.3.0",
    "sd-utils": "0.1.11",
    "sd-tree-designer": "0.1.8"
  }
}

},{}],64:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AppUtils = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

var _autosize = require("autosize");

var autosize = _interopRequireWildcard(_autosize);

var _templates = require("./templates");

var _i18n = require("./i18n/i18n");

var _sdUtils = require("sd-utils");

var _sdTreeDesigner = require("sd-tree-designer");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var AppUtils = exports.AppUtils = function (_TdUtils) {
    _inherits(AppUtils, _TdUtils);

    function AppUtils() {
        _classCallCheck(this, AppUtils);

        return _possibleConstructorReturn(this, (AppUtils.__proto__ || Object.getPrototypeOf(AppUtils)).apply(this, arguments));
    }

    _createClass(AppUtils, null, [{
        key: "updateInputClass",
        value: function updateInputClass(selection) {
            var value = selection.node().value;
            selection.classed('empty', value !== 0 && !value);
            return selection;
        }
    }, {
        key: "autoResizeTextarea",
        value: function autoResizeTextarea(element) {
            setTimeout(function () {
                element.style.width = "";
                var width = element.getBoundingClientRect().width;
                if (width) {
                    element.style.width = width + 'px';
                }
                autosize.update(element);
            }, 10);
        }
    }, {
        key: "elasticTextarea",
        value: function elasticTextarea(selection) {
            setTimeout(function () {
                selection.style('width', undefined);
                var width = selection.node().getBoundingClientRect().width;
                if (width) {
                    selection.style('width', width + 'px');
                }
                autosize.default(selection.node());
            }, 10);
        }
    }, {
        key: "postByForm",
        value: function postByForm(url, data) {
            var name, form;

            // create the form
            form = AppUtils.createElement('form', AppUtils.mergeDeep({
                method: 'post',
                action: url,
                enctype: 'multipart/form-data'
            }), document.body);

            for (name in data) {
                if (data.hasOwnProperty(name)) {
                    AppUtils.createElement('input', {
                        type: 'hidden',
                        name: name,
                        value: data[name]
                    }, form);
                }
            }

            form.submit();

            AppUtils.removeElement(form);
        }
    }, {
        key: "showFullScreenPopup",
        value: function showFullScreenPopup(title, html, closeCallback) {
            var popup = d3.select("body").selectOrAppend("div.sd-full-screen-popup-container").html(_templates.Templates.get('fullscreenPopup', { title: title, body: html }));
            popup.select('.sd-close-popup').on('click', function () {
                popup.remove();
                if (closeCallback) {
                    closeCallback();
                }
            });
        }
    }]);

    return AppUtils;
}(_sdTreeDesigner.AppUtils);

},{"./d3":67,"./i18n/i18n":80,"./templates":96,"autosize":"autosize","sd-tree-designer":131,"sd-utils":"sd-utils"}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.App = exports.AppConfig = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

var _i18n = require("./i18n/i18n");

var _sdUtils = require("sd-utils");

var _appUtils = require("./app-utils");

var _sdModel = require("sd-model");

var model = _interopRequireWildcard(_sdModel);

var _sdTreeDesigner = require("sd-tree-designer");

var _templates = require("./templates");

var _sidebar = require("./sidebar");

var _toolbar = require("./toolbar");

var _settingsDialog = require("./dialogs/settings-dialog");

var _aboutDialog = require("./dialogs/about-dialog");

var _exporter = require("./exporter");

var _definitionsDialog = require("./dialogs/definitions-dialog");

var _sdComputations = require("sd-computations");

var _sensitivityAnalysisDialog = require("./dialogs/sensitivity-analysis-dialog");

var _loadingIndicator = require("./loading-indicator");

var _leagueTableDialog = require("./league-table/league-table-dialog");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var buildConfig = require('../tmp/build-config.js');

var AppConfig =

//https://github.com/d3/d3-format/blob/master/README.md#format

exports.AppConfig = function AppConfig(custom) {
    _classCallCheck(this, AppConfig);

    this.readOnly = false;
    this.logLevel = 'warn';
    this.workerUrl = null;
    this.jobRepositoryType = 'idb';
    this.clearRepository = false;
    this.buttons = {
        new: true,
        save: true,
        open: true,
        exportToPng: true,
        exportToSvg: true,
        exportToPdf: true
    };
    this.exports = {
        show: true,
        serverUrl: 'http://export.highcharts.com', //url of the export server
        pdf: {
            mode: 'server' // available options: 'client', 'server', 'fallback',
        },
        png: {
            mode: 'fallback' // available options: 'client', 'server', 'fallback',
        }
    };
    this.showDetails = true;
    this.showDefinitions = true;
    this.jsonFileDownload = true;
    this.width = undefined;
    this.height = undefined;
    this.rule = "expected-value-maximization";
    this.lng = 'en';
    this.format = { // NumberFormat  options
        locales: 'en',
        payoff1: {
            style: 'currency',
            currency: 'USD',
            currencyDisplay: 'symbol',
            minimumFractionDigits: 0,
            maximumFractionDigits: 2,
            // minimumSignificantDigits: 1,
            useGrouping: true
        },
        payoff2: {
            style: 'decimal',
            currency: 'USD',
            currencyDisplay: 'symbol',
            minimumFractionDigits: 0,
            maximumFractionDigits: 2,
            // minimumSignificantDigits: 1,
            useGrouping: true
        },
        probability: { // NumberFormat  options
            style: 'decimal',
            minimumFractionDigits: 2,
            maximumFractionDigits: 3,
            useGrouping: true
        }
    };
    this.title = '';
    this.description = '';
    this.treeDesigner = {};
    this.leagueTable = {
        plot: {
            maxWidth: "800px",
            groups: {
                'highlighted': {
                    color: '#008000'
                },
                'highlighted-default': {
                    color: '#00bd00'
                },
                'extended-dominated': {
                    color: '#ffa500'
                },
                'dominated': {
                    color: '#ff0000'
                },
                'default': {
                    color: '#000000'
                }
            }
        }
    };

    if (custom) {
        _sdUtils.Utils.deepExtend(this, custom);
    }
};

var App = exports.App = function () {
    //Data model manager
    function App(containerIdOrElem, config, diagramData) {
        var _this = this;

        _classCallCheck(this, App);

        this.viewModes = [];
        this.payoffsMaximization = [true, false];

        var p = Promise.resolve();
        this.setConfig(config);
        this.initI18n();
        this.initContainer(containerIdOrElem);
        this.initViewModes();
        this.initDataModel();
        p = this.initComputationsManager();
        this.initProbabilityNumberFormat();
        this.initPayoffNumberFormat();
        this.initTreeDesigner();
        this.initSidebar();
        this.initSettingsDialog();
        this.initAboutDialog();
        this.initDefinitionsDialog();
        this.initSensitivityAnalysisDialog();
        this.initLeagueTableDialog();
        this.initOnBeforeUnload();
        this.initKeyCodes();
        p.then(function () {
            _this.initToolbar();
            if (diagramData) {
                _this.openDiagram(diagramData);
            } else {
                _this.updateView();
            }
        }).catch(function (e) {
            _sdUtils.log.error(e);
        });
    } // version is set from package.json


    _createClass(App, [{
        key: "setConfig",
        value: function setConfig(config) {
            if (!config) {
                this.config = new AppConfig();
            } else {
                this.config = new AppConfig(config);
            }
            this.setLogLevel(this.config.logLevel);
            return this;
        }
    }, {
        key: "setLogLevel",
        value: function setLogLevel(level) {
            _sdUtils.log.setLevel(level);
        }
    }, {
        key: "initContainer",
        value: function initContainer(containerIdOrElem) {

            if (_sdUtils.Utils.isString(containerIdOrElem)) {
                var selector = containerIdOrElem.trim();

                if (!_sdUtils.Utils.startsWith(selector, '#') && !_sdUtils.Utils.startsWith(selector, '.')) {
                    selector = '#' + selector;
                }
                this.container = d3.select(selector);
            } else {
                this.container = d3.select(containerIdOrElem);
            }
            var self = this;

            var html = _templates.Templates.get('main', {
                version: App.version,
                buildTimestamp: App.buildTimestamp,
                'lng': self.config.lng
            });
            this.container.html(html);

            this.container.select('#silver-decisions').classed('sd-read-only', this.config.readOnly);
        }
    }, {
        key: "initI18n",
        value: function initI18n() {
            _i18n.i18n.init(this.config.lng);
        }
    }, {
        key: "initDataModel",
        value: function initDataModel() {
            var _this2 = this;

            var self = this;
            this.dataModel = new model.DataModel();
            // this.dataModel.nodeAddedCallback = this.dataModel.nodeRemovedCallback = ()=>self.onNodeAddedOrRemoved();
            this.dataModel.nodeAddedCallback = this.dataModel.nodeRemovedCallback = function (node) {
                return _sdUtils.Utils.waitForFinalEvent(function () {
                    return _this2.onNodeAddedOrRemoved();
                }, 'onNodeAddedOrRemoved', 5);
            };

            this.dataModel.textAddedCallback = function (text) {
                return _sdUtils.Utils.waitForFinalEvent(function () {
                    return _this2.onTextAdded(text);
                }, 'onTextAdded');
            };
            this.dataModel.textRemovedCallback = function (text) {
                return _sdUtils.Utils.waitForFinalEvent(function () {
                    return _this2.onTextRemoved(text);
                }, 'onTextAdded');
            };
        }
    }, {
        key: "initComputationsManager",
        value: function initComputationsManager() {
            this.computationsManager = new _sdComputations.ComputationsManager({
                ruleName: this.config.ruleName,
                worker: {
                    url: this.config.workerUrl
                },
                jobRepositoryType: this.config.jobRepositoryType,
                clearRepository: this.config.clearRepository
            }, this.dataModel);
            this.expressionEngine = this.computationsManager.expressionEngine;
            return this.checkValidityAndRecomputeObjective(false, false, false, true);
        }
    }, {
        key: "initSidebar",
        value: function initSidebar() {
            this.sidebar = new _sidebar.Sidebar(this.container.select('#sd-sidebar'), this);
        }
    }, {
        key: "initSettingsDialog",
        value: function initSettingsDialog() {
            this.settingsDialog = new _settingsDialog.SettingsDialog(this);
        }
    }, {
        key: "initAboutDialog",
        value: function initAboutDialog() {
            this.aboutDialog = new _aboutDialog.AboutDialog(this);
        }
    }, {
        key: "initDefinitionsDialog",
        value: function initDefinitionsDialog() {
            var _this3 = this;

            this.definitionsDialog = new _definitionsDialog.DefinitionsDialog(this);
            this.definitionsDialog.onClosed = function () {
                return _this3.recompute(true, true);
            };
        }
    }, {
        key: "initLeagueTableDialog",
        value: function initLeagueTableDialog() {
            this.leagueTableDialog = new _leagueTableDialog.LeagueTableDialog(this);
        }
    }, {
        key: "isLeagueTableAvailable",
        value: function isLeagueTableAvailable() {
            return this.isMultipleCriteria() && this.dataModel.getRoots().length === 1 && this.computationsManager.isValid() && this.leagueTableDialog.validateParams();
        }
    }, {
        key: "initSensitivityAnalysisDialog",
        value: function initSensitivityAnalysisDialog() {
            this.sensitivityAnalysisDialog = new _sensitivityAnalysisDialog.SensitivityAnalysisDialog(this);
        }
    }, {
        key: "isSensitivityAnalysisAvailable",
        value: function isSensitivityAnalysisAvailable() {
            return !this.isMultipleCriteria() && this.dataModel.getRoots().length === 1 && this.computationsManager.isValid() && this.dataModel.getGlobalVariableNames(true).length;
        }
    }, {
        key: "initToolbar",
        value: function initToolbar() {
            this.toolbar = new _toolbar.Toolbar(this.container.select('#sd-toolbar'), this);
        }
    }, {
        key: "initPayoffNumberFormat",
        value: function initPayoffNumberFormat() {

            this.payoffNumberFormat = [new Intl.NumberFormat(this.config.format.locales, this.config.format.payoff1), new Intl.NumberFormat(this.config.format.locales, this.config.format.payoff2)];
        }
    }, {
        key: "initProbabilityNumberFormat",
        value: function initProbabilityNumberFormat() {
            this.probabilityNumberFormat = new Intl.NumberFormat(this.config.format.locales, this.config.format.probability);
        }
    }, {
        key: "initTreeDesigner",
        value: function initTreeDesigner() {
            var self = this;
            var config = this.getTreeDesignerInitialConfig();
            var container2 = this.container.select('#tree-designer-container');

            this.treeDesigner = new _sdTreeDesigner.TreeDesigner(container2, this.dataModel, config);
        }
    }, {
        key: "getTreeDesignerInitialConfig",
        value: function getTreeDesignerInitialConfig() {
            var self = this;

            return _sdUtils.Utils.deepExtend({
                lng: self.config.lng,
                readOnly: self.config.readOnly,
                onNodeSelected: function onNodeSelected(node) {
                    self.onObjectSelected(node);
                },
                onEdgeSelected: function onEdgeSelected(edge) {
                    self.onObjectSelected(edge);
                },
                onTextSelected: function onTextSelected(text) {
                    self.onObjectSelected(text);
                },
                onSelectionCleared: function onSelectionCleared() {
                    self.onSelectionCleared();
                },
                payoffNumberFormatter: function payoffNumberFormatter(v, i) {
                    var prefix = '';
                    if (self.currentViewMode.multiCriteria) {
                        prefix = self.dataModel.payoffNames[i].charAt(0) + ': ';
                    }

                    return prefix + self.payoffNumberFormat[i || self.currentViewMode.payoffIndex || 0].format(v);
                },
                probabilityNumberFormatter: function probabilityNumberFormatter(v) {
                    return self.probabilityNumberFormat.format(v);
                },
                operationsForObject: function operationsForObject(o) {
                    return self.computationsManager.operationsForObject(o);
                }
            }, self.config.treeDesigner);
        }
    }, {
        key: "onObjectSelected",
        value: function onObjectSelected(object) {
            var self = this;
            if (this.selectedObject === object) {
                return;
            }
            this.selectedObject = object;
            setTimeout(function () {
                self.sidebar.updateObjectPropertiesView(self.selectedObject);
                self.updateVariableDefinitions();
                self.treeDesigner.updatePlottingRegionSize();
            }, 10);
        }
    }, {
        key: "onSelectionCleared",
        value: function onSelectionCleared() {
            var self = this;
            this.selectedObject = null;
            this.sidebar.hideObjectProperties();
            setTimeout(function () {
                self.updateVariableDefinitions();
                self.treeDesigner.updatePlottingRegionSize();
            }, 10);
            // console.log();
        }
    }, {
        key: "getCurrentVariableDefinitionsSourceObject",
        value: function getCurrentVariableDefinitionsSourceObject() {
            if (this.selectedObject) {
                if (this.selectedObject instanceof model.domain.Node) {
                    return this.selectedObject;
                }
                if (this.selectedObject instanceof model.domain.Edge) {
                    return this.selectedObject.parentNode;
                }
            }
            return this.dataModel;
        }
    }, {
        key: "updateVariableDefinitions",
        value: function updateVariableDefinitions() {
            var self = this;
            var definitionsSourceObject = self.getCurrentVariableDefinitionsSourceObject();
            var readOnly = this.selectedObject instanceof model.domain.Edge || this.selectedObject instanceof model.domain.TerminalNode;
            self.sidebar.updateDefinitions(definitionsSourceObject, readOnly, function (code) {
                self.dataModel.saveState();
                definitionsSourceObject.code = code;
                self.recompute(true, true);
            });
        }
    }, {
        key: "openDefinitionsDialog",
        value: function openDefinitionsDialog() {
            var _this4 = this;

            var definitionsSourceObject = this.getCurrentVariableDefinitionsSourceObject();
            this.definitionsDialog.open(definitionsSourceObject, function (code) {
                _this4.dataModel.saveState();
                definitionsSourceObject.code = code;
                _this4.recompute(true, true);
            });
        }
    }, {
        key: "updateView",
        value: function updateView() {
            var withTransitions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            // console.log('_updateView');
            this.treeDesigner.redraw(withTransitions);
            this.sidebar.updateObjectPropertiesView(this.selectedObject);
            this.updateVariableDefinitions();
            this.toolbar.update();
            this.sidebar.updateLayoutOptions();
            this.sidebar.updateDiagramDetails();
            this.sidebar.updateMultipleCriteria();
        }
    }, {
        key: "undo",
        value: function undo() {
            var self = this;
            self.dataModel.undo();
            if (self.selectedObject) {
                self.selectedObject = self.dataModel.findById(self.selectedObject.id);
            }
            return this.checkValidityAndRecomputeObjective(false, false, false).then(function () {
                self.updateView();
            });
        }
    }, {
        key: "redo",
        value: function redo() {
            var self = this;
            self.dataModel.redo();
            if (self.selectedObject) {
                self.selectedObject = self.dataModel.findById(self.selectedObject.id);
            }

            return this.checkValidityAndRecomputeObjective(false, false, false).then(function () {
                self.updateView();
            });
        }
    }, {
        key: "onNodeAddedOrRemoved",
        value: function onNodeAddedOrRemoved() {
            var self = this;
            return this.checkValidityAndRecomputeObjective().then(function () {
                self.updateView();
            });
        }
    }, {
        key: "onTextAdded",
        value: function onTextAdded(text) {
            return this.onObjectSelected(text);
        }
    }, {
        key: "onTextRemoved",
        value: function onTextRemoved(text) {
            this.updateView();
        }
    }, {
        key: "onObjectUpdated",
        value: function onObjectUpdated(object, fieldName) {
            var _this5 = this;

            var self = this;
            var p = Promise.resolve();
            if (!(object instanceof model.domain.Text) && fieldName !== 'name') {
                p = p.then(function () {
                    return _this5.checkValidityAndRecomputeObjective();
                });
            }
            // this.sidebar.updateObjectPropertiesView(this.selectedObject);
            return p.then(function () {
                setTimeout(function () {
                    self.treeDesigner.redraw(true);
                }, 1);
            });
        }
    }, {
        key: "onMultiCriteriaUpdated",
        value: function onMultiCriteriaUpdated(fieldName) {
            var _this6 = this;

            var self = this;
            var p = Promise.resolve();
            if (fieldName === 'defaultCriterion1Weight') {
                p = p.then(function () {
                    return _this6.checkValidityAndRecomputeObjective();
                });
            }
            this.sidebar.updateMultipleCriteria();

            return p.then(function () {
                setTimeout(function () {
                    self.treeDesigner.redraw(true);
                    self.sidebar.updateObjectPropertiesView(self.selectedObject);
                }, 1);
            });
        }
    }, {
        key: "setObjectiveRule",
        value: function setObjectiveRule(ruleName) {
            var evalCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var evalNumeric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var _this7 = this;

            var updateView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var recompute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

            var prevRule = this.computationsManager.getCurrentRule();
            this.computationsManager.setCurrentRuleByName(ruleName);
            var currentRule = this.computationsManager.getCurrentRule();
            var multiCriteria = currentRule.multiCriteria;
            this.treeDesigner.config.maxPayoffsToDisplay = multiCriteria ? 2 : 1;

            if (multiCriteria) {
                this.payoffsMaximization = currentRule.payoffCoeffs.map(function (c) {
                    return c > 0;
                });

                if (!this.dataModel.payoffNames.length) {
                    this.dataModel.payoffNames.push(null, null);
                    this.dataModel.payoffNames[0] = _i18n.i18n.t('multipleCriteria.defaultMinimizedCriterionName');
                    this.dataModel.payoffNames[1] = _i18n.i18n.t('multipleCriteria.defaultMaximizedCriterionName');
                }
                this.treeDesigner.config.payoffNames = this.dataModel.payoffNames;
            } else {
                this.payoffsMaximization[this.currentViewMode.payoffIndex] = currentRule.maximization;
                this.treeDesigner.config.payoffNames = [null, null];
            }
            if (!recompute) {
                return Promise.resolve();
            }

            return this.checkValidityAndRecomputeObjective(false, evalCode, evalNumeric).then(function () {
                if (updateView) {
                    _this7.updateView(false);
                }
            });
        }
    }, {
        key: "isMultipleCriteria",
        value: function isMultipleCriteria() {
            return this.computationsManager.getCurrentRule().multiCriteria;
        }
    }, {
        key: "flipCriteria",
        value: function flipCriteria() {
            var _this8 = this;

            var tmp = this.config.format.payoff1;
            this.config.format.payoff1 = this.config.format.payoff2;
            this.config.format.payoff2 = tmp;
            this.initPayoffNumberFormat();

            this.computationsManager.flipCriteria().then(function () {
                _this8.updateView(false);
            }).catch(function (e) {
                _sdUtils.log.error(e);
            });
        }
    }, {
        key: "getCurrentObjectiveRule",
        value: function getCurrentObjectiveRule() {
            return this.computationsManager.getCurrentRule();
        }
    }, {
        key: "getObjectiveRules",
        value: function getObjectiveRules() {
            var _this9 = this;

            return this.computationsManager.getObjectiveRules().filter(function (rule) {
                return rule.multiCriteria === _this9.currentViewMode.multiCriteria;
            });
        }
    }, {
        key: "initViewModes",
        value: function initViewModes() {
            this.viewModes.push({
                name: "criterion1",
                multiCriteria: false,
                payoffIndex: 0
            });

            this.viewModes.push({
                name: "criterion2",
                multiCriteria: false,
                payoffIndex: 1
            });

            this.viewModes.push({
                name: "twoCriteria",
                multiCriteria: true,
                payoffIndex: null
            });
            this.currentViewMode = this.viewModes[0];
        }
    }, {
        key: "getCurrentViewMode",
        value: function getCurrentViewMode() {
            return this.currentViewMode;
        }
    }, {
        key: "setViewModeByName",
        value: function setViewModeByName(name) {
            var recompute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var updateView = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            return this.setViewMode(_sdUtils.Utils.find(this.viewModes, function (mode) {
                return mode.name === name;
            }), recompute, updateView);
        }
    }, {
        key: "setViewMode",
        value: function setViewMode(mode) {
            var _this10 = this;

            var recompute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var updateView = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var prevMode = this.currentViewMode;
            this.currentViewMode = mode;

            this.computationsManager.objectiveRulesManager.setPayoffIndex(this.currentViewMode.payoffIndex);

            if (!recompute) {
                return Promise.resolve();
            }
            var rules = this.getObjectiveRules();
            var prevRule = this.computationsManager.getCurrentRule();
            var newRule = rules[0];

            if (this.currentViewMode.payoffIndex !== null) {
                newRule = _sdUtils.Utils.find(rules, function (r) {
                    return r.maximization == _this10.payoffsMaximization[_this10.currentViewMode.payoffIndex];
                });
            } else {
                newRule = _sdUtils.Utils.find(rules, function (r) {
                    return r.payoffCoeffs.map(function (c) {
                        return c > 0;
                    }).every(function (max, i) {
                        return _this10.payoffsMaximization[i] === max;
                    });
                });
            }

            this.setObjectiveRule(newRule.name, false, false, updateView, recompute);
        }
    }, {
        key: "setDefaultViewModeForRule",
        value: function setDefaultViewModeForRule(rule) {
            var recompute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var updateView = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            return this.setViewMode(_sdUtils.Utils.find(this.viewModes, function (mode) {
                return mode.multiCriteria === rule.multiCriteria;
            }), recompute, updateView);
        }
    }, {
        key: "getViewModes",
        value: function getViewModes() {
            return this.viewModes;
        }
    }, {
        key: "showLeagueTable",
        value: function showLeagueTable() {
            this.leagueTableDialog.open();
        }
    }, {
        key: "openSensitivityAnalysis",
        value: function openSensitivityAnalysis() {
            var self = this;
            setTimeout(function () {
                if (!self.isSensitivityAnalysisAvailable()) {
                    return;
                }
                self.sensitivityAnalysisDialog.open();
            }, 200);
        }
    }, {
        key: "showTreePreview",
        value: function showTreePreview(dataDTO, closeCallback) {
            var autoLayout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var self = this;
            this.originalDataModelSnapshot = this.dataModel.createStateSnapshot();
            this.dataModel.loadFromDTO(dataDTO, this.computationsManager.expressionEngine.getJsonReviver());
            this.computationsManager.updateDisplayValues(this.dataModel);
            this.updateView(false);
            setTimeout(function () {
                self.updateView(false);
                setTimeout(function () {
                    var svgString = _exporter.Exporter.getSVGString(self.treeDesigner.svg.node());
                    _appUtils.AppUtils.showFullScreenPopup('', svgString, function () {
                        if (closeCallback) {
                            self.dataModel._setNewState(self.originalDataModelSnapshot);
                            self.updateView(false);

                            closeCallback();
                            setTimeout(function () {
                                self.updateView(false);
                            }, 1);
                        }
                    });
                }, 300);
            }, 1);
        }
    }, {
        key: "showPolicyPreview",
        value: function showPolicyPreview(title, policy, closeCallback) {
            var self = this;
            this.originalDataModelSnapshot = this.dataModel.createStateSnapshot();
            this.computationsManager.displayPolicy(policy);
            this.updateView(false);
            _appUtils.AppUtils.showFullScreenPopup(title, '');
            _loadingIndicator.LoadingIndicator.show();
            setTimeout(function () {
                self.updateView(false);
                setTimeout(function () {
                    var svgString = _exporter.Exporter.getSVGString(self.treeDesigner.svg.node(), true);
                    _loadingIndicator.LoadingIndicator.hide();
                    _appUtils.AppUtils.showFullScreenPopup(title, svgString, function () {

                        self.dataModel._setNewState(self.originalDataModelSnapshot);

                        // self.computationsManager.updateDisplayValues(self.dataModel);
                        self.updateView(false);
                        if (closeCallback) {
                            closeCallback();
                        }
                        setTimeout(function () {
                            self.updateView(false);
                        }, 1);
                    });
                }, 500);
            }, 1);
        }
    }, {
        key: "recompute",
        value: function recompute() {
            var updateView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            var _this11 = this;

            var debounce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var forceWhenAutoIsDisabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (debounce) {
                if (!this.debouncedRecompute) {
                    this.debouncedRecompute = _sdUtils.Utils.debounce(function (updateView) {
                        return _this11.recompute(updateView, false);
                    }, 200);
                }
                this.debouncedRecompute(updateView);
                return;
            }

            return this.checkValidityAndRecomputeObjective(false, true, true, forceWhenAutoIsDisabled).then(function () {
                if (updateView) {
                    _this11.updateView();
                }
            });
        }
    }, {
        key: "onRawOptionChanged",
        value: function onRawOptionChanged() {
            var _this12 = this;

            if (this.isAutoRecalculationEnabled()) {
                return this.checkValidityAndRecomputeObjective(false, false).then(function () {
                    _this12.updateView();
                });
            }
        }
    }, {
        key: "isAutoRecalculationEnabled",
        value: function isAutoRecalculationEnabled() {
            return !this.treeDesigner.config.raw;
        }
    }, {
        key: "checkValidityAndRecomputeObjective",
        value: function checkValidityAndRecomputeObjective(allRules) {
            var evalCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var _this13 = this;

            var evalNumeric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var forceWhenAutoIsDisabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            if (!forceWhenAutoIsDisabled && !this.isAutoRecalculationEnabled()) {
                return Promise.resolve();
            }

            return this.computationsManager.checkValidityAndRecomputeObjective(allRules, evalCode, evalNumeric).then(function () {
                _this13.updateValidationMessages();
                _appUtils.AppUtils.dispatchEvent('SilverDecisionsRecomputedEvent', _this13);
            }).catch(function (e) {
                _sdUtils.log.error(e);
            });
        }
    }, {
        key: "updateValidationMessages",
        value: function updateValidationMessages() {
            var self = this;
            setTimeout(function () {
                self.treeDesigner.updateValidationMessages();
            }, 1);
        }
    }, {
        key: "newDiagram",
        value: function newDiagram() {
            this.clear();
            this.updateView();
        }
    }, {
        key: "clear",
        value: function clear() {
            this.dataModel.clear();
            this.currentViewMode = this.viewModes[0];
            this.computationsManager.setCurrentRuleByName(this.computationsManager.getObjectiveRules()[0].name);
            this.setDiagramTitle('', true);
            this.setDiagramDescription('', true);
            this.treeDesigner.setConfig(_sdUtils.Utils.deepExtend(this.getTreeDesignerInitialConfig()));
            this.onSelectionCleared();
            this.sensitivityAnalysisDialog.clear(true, true);
        }
    }, {
        key: "openDiagram",
        value: function openDiagram(diagramData) {
            var _this14 = this;

            var self = this;
            var errors = [];

            if (_sdUtils.Utils.isString(diagramData)) {
                try {
                    diagramData = JSON.parse(diagramData, self.computationsManager.expressionEngine.getJsonReviver());
                } catch (e) {
                    errors.push('error.jsonParse');
                    alert(_i18n.i18n.t('error.jsonParse'));
                    _sdUtils.log.error(e);
                    return Promise.resolve(errors);
                }
            }

            var dataModelObject = diagramData.data;

            this.clear();
            if (!diagramData.SilverDecisions) {
                errors.push('error.notSilverDecisionsFile');
                alert(_i18n.i18n.t('error.notSilverDecisionsFile'));
                return Promise.resolve(errors);
            }

            if (!_sdUtils.Utils.isValidVersionString(diagramData.SilverDecisions)) {
                errors.push('error.incorrectVersionFormat');
                alert(_i18n.i18n.t('error.incorrectVersionFormat'));
            } else {
                //Check if version in file is newer than version of application
                if (_sdUtils.Utils.compareVersionNumbers(diagramData.SilverDecisions, App.version) > 0) {
                    errors.push('error.fileVersionNewerThanApplicationVersion');
                    alert(_i18n.i18n.t('error.fileVersionNewerThanApplicationVersion'));
                }

                if (_sdUtils.Utils.compareVersionNumbers(diagramData.SilverDecisions, "0.7.0") < 0) {
                    dataModelObject = {
                        code: diagramData.code,
                        expressionScope: diagramData.expressionScope,
                        trees: diagramData.trees,
                        texts: diagramData.texts
                    };
                }
            }

            try {
                if (diagramData.lng) {
                    this.config.lng = diagramData.lng;
                }

                if (diagramData.rule) {
                    if (this.computationsManager.isRuleName(diagramData.rule)) {
                        this.config.rule = diagramData.rule;
                    } else {
                        delete this.config.rule;
                    }
                }

                if (diagramData.viewMode) {
                    this.setViewModeByName(diagramData.viewMode);
                } else {
                    this.setDefaultViewModeForRule(this.computationsManager.getObjectiveRuleByName(this.config.rule), false, false);
                }

                if (diagramData.format) {
                    this.config.format = diagramData.format;
                }

                this.setConfig(this.config);
                this.dataModel.load(dataModelObject);

                if (diagramData.treeDesigner) {
                    this.treeDesigner.setConfig(_sdUtils.Utils.deepExtend(self.getTreeDesignerInitialConfig(), diagramData.treeDesigner));
                }
                this.treeDesigner.updateVisibility();

                this.setDiagramTitle(diagramData.title || '', true);
                this.setDiagramDescription(diagramData.description || '', true);

                if (diagramData.sensitivityAnalysis) {
                    this.sensitivityAnalysisDialog.loadSavedParamValues(diagramData.sensitivityAnalysis);
                }
            } catch (e) {
                errors.push('error.malformedData');
                alert(_i18n.i18n.t('error.malformedData'));
                this.clear();
                _sdUtils.log.error('malformedData', e);
                return Promise.resolve(errors);
            }
            try {
                this.updateNumberFormats(false);
            } catch (e) {
                _sdUtils.log.error('incorrectNumberFormatOptions', e);
                errors.push('error.incorrectNumberFormatOptions');
                alert(_i18n.i18n.t('error.incorrectNumberFormatOptions'));
                delete this.config.format;
                this.setConfig(this.config);
                this.updateNumberFormats(false);
            }
            return this.setObjectiveRule(this.config.rule, false, true, false).catch(function (e) {
                _sdUtils.log.error('diagramDrawingFailure', e);
                errors.push('error.diagramDrawingFailure');
                alert(_i18n.i18n.t('error.diagramDrawingFailure'));
                _this14.clear();
                return errors;
            }).then(function () {
                _this14.updateView(false);
                return errors;
            }).catch(function (e) {
                _sdUtils.log.error('diagramDrawingFailure', e);
                errors.push('error.diagramDrawingFailure');
                alert(_i18n.i18n.t('error.diagramDrawingFailure'));
                _this14.clear();
                _this14.updateView(false);
                return errors;
            });
        }
    }, {
        key: "serialize",
        value: function serialize() {
            var filterLocation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var _this15 = this;

            var filterComputed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var filterPrivate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var self = this;
            return self.checkValidityAndRecomputeObjective(true, false, false, true).then(function () {
                var obj = {
                    SilverDecisions: App.version,
                    buildTimestamp: App.buildTimestamp,
                    savetime: d3.isoFormat(new Date()),
                    lng: self.config.lng,
                    viewMode: self.currentViewMode.name,
                    rule: self.computationsManager.getCurrentRule().name,
                    title: self.config.title,
                    description: self.config.description,
                    format: self.config.format,
                    treeDesigner: self.treeDesigner.config,
                    data: self.dataModel.serialize(false),
                    sensitivityAnalysis: _this15.sensitivityAnalysisDialog.jobNameToParamValues
                };

                return _sdUtils.Utils.stringify(obj, self.dataModel.getJsonReplacer(filterLocation, filterComputed, self.computationsManager.expressionEngine.getJsonReplacer(), filterPrivate), filterPrivate ? ['$'] : []);
            });
        }
    }, {
        key: "saveToFile",
        value: function saveToFile() {
            var filterLocation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var _this16 = this;

            var filterComputed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var filterPrivate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            this.serialize(filterLocation, filterComputed, filterPrivate).then(function (json) {
                _appUtils.AppUtils.dispatchEvent('SilverDecisionsSaveEvent', json);
                if (_this16.config.jsonFileDownload) {
                    var blob = new Blob([json], { type: "application/json" });
                    _exporter.Exporter.saveAs(blob, _exporter.Exporter.getExportFileName('json'));
                }
            });
        }
    }, {
        key: "updateNumberFormats",
        value: function updateNumberFormats() {
            var updateView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.initPayoffNumberFormat();
            this.initProbabilityNumberFormat();
            if (updateView) {
                this.updateView();
            }
        }
    }, {
        key: "updatePayoffNumberFormat",
        value: function updatePayoffNumberFormat() {
            var updateView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.initPayoffNumberFormat();
            if (updateView) {
                this.updateView();
            }
        }
    }, {
        key: "updateProbabilityNumberFormat",
        value: function updateProbabilityNumberFormat() {
            var updateView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.initProbabilityNumberFormat();
            if (updateView) {
                this.updateView();
            }
        }
    }, {
        key: "initOnBeforeUnload",
        value: function initOnBeforeUnload() {
            var self = this;
            window.addEventListener("beforeunload", function (e) {
                if (!(self.dataModel.isUndoAvailable() || self.dataModel.isRedoAvailable())) {
                    return;
                }

                var dialogText = _i18n.i18n.t('confirm.beforeunload');
                e.returnValue = dialogText;
                return dialogText;
            });
        }
    }, {
        key: "setConfigParam",
        value: function setConfigParam(path, value, withoutStateSaving, callback) {
            var self = this;
            var prevValue = _sdUtils.Utils.get(this.config, path);

            if (prevValue == value) {
                return;
            }
            if (!withoutStateSaving) {
                this.dataModel.saveState({
                    data: {
                        prevValue: prevValue
                    },
                    onUndo: function onUndo(data) {
                        self.setConfigParam(path, data.prevValue, true, callback);
                    },
                    onRedo: function onRedo(data) {
                        self.setConfigParam(path, value, true, callback);
                    }
                });
            }
            _sdUtils.Utils.set(this.config, path, value);
            if (callback) {
                callback(value);
            }
        }
    }, {
        key: "setDiagramTitle",
        value: function setDiagramTitle(title, withoutStateSaving) {
            var _this17 = this;

            this.setConfigParam('title', title, withoutStateSaving, function (v) {
                return _this17.treeDesigner.updateDiagramTitle(v);
            });
        }
    }, {
        key: "setDiagramDescription",
        value: function setDiagramDescription(description, withoutStateSaving) {
            var _this18 = this;

            this.setConfigParam('description', description, withoutStateSaving, function (v) {
                return _this18.treeDesigner.updateDiagramDescription(v);
            });
        }
    }, {
        key: "initKeyCodes",
        value: function initKeyCodes() {
            var _this19 = this;

            this.container.on("keyup", function (d) {
                var srcElement = d3.event.target || d3.event.srcElement;

                if (srcElement && ['INPUT', 'TEXTAREA'].indexOf(srcElement.nodeName.toUpperCase()) > -1) {
                    //ignore events from input and textarea elements
                    return;
                }

                var key = d3.event.keyCode;
                if (key == 46) {
                    //delete
                    _this19.treeDesigner.removeSelectedNodes();
                    _this19.treeDesigner.removeSelectedTexts();
                    return;
                }
                if (!d3.event.ctrlKey) {
                    return;
                }

                if (d3.event.altKey) {
                    if (_this19.selectedObject instanceof model.domain.Node) {
                        var selectedNode = _this19.selectedObject;
                        if (selectedNode instanceof model.domain.TerminalNode) {
                            return;
                        }
                        if (key == 68) {
                            // ctrl + alt + d
                            _this19.treeDesigner.addDecisionNode(selectedNode);
                        } else if (key == 67) {
                            // ctrl + alt + c
                            _this19.treeDesigner.addChanceNode(selectedNode);
                        } else if (key == 84) {
                            // ctrl + alt + t
                            _this19.treeDesigner.addTerminalNode(selectedNode);
                        }
                        return;
                    } else if (_this19.selectedObject instanceof model.domain.Edge) {
                        if (key == 68) {
                            // ctrl + alt + d
                            _this19.treeDesigner.injectDecisionNode(_this19.selectedObject);
                        } else if (key == 67) {
                            // ctrl + alt + c
                            _this19.treeDesigner.injectChanceNode(_this19.selectedObject);
                        }
                    }
                }

                if (key == 90) {
                    //ctrl + z
                    _this19.undo();
                    return;
                }
                if (key == 89) {
                    //ctrl + y
                    _this19.redo();
                    return;
                }

                /*if(key==65){//ctrl + a
                 if(selectedNodes.length==1){
                 this.treeDesigner.selectSubTree(selectedNodes[0])
                 }else{
                 this.treeDesigner.selectAllNodes();
                 }
                 // d3.event.preventDefault()
                 return;
                 }*/
                var selectedNodes = _this19.treeDesigner.getSelectedNodes();
                if (key == 86) {
                    //ctrl + v
                    if (selectedNodes.length == 1) {
                        var _selectedNode = selectedNodes[0];
                        if (_selectedNode instanceof model.domain.TerminalNode) {
                            return;
                        }
                        _this19.treeDesigner.pasteToNode(_selectedNode);
                    } else if (selectedNodes.length == 0) {}
                    return;
                }

                if (!selectedNodes.length) {
                    return;
                }

                if (key == 88) {
                    //ctrl + x
                    _this19.treeDesigner.cutSelectedNodes();
                } else if (key == 67) {
                    //ctrl + c
                    _this19.treeDesigner.copySelectedNodes();
                }
            });
        }
    }], [{
        key: "growl",
        value: function growl() {
            return _appUtils.AppUtils.growl(arguments);
        }
    }]);

    return App;
}();

App.version = '';
App.buildTimestamp = buildConfig.buildTimestamp;
App.utils = _sdUtils.Utils;
App.appUtils = _appUtils.AppUtils;
App.d3 = d3;

},{"../tmp/build-config.js":130,"./app-utils":64,"./d3":67,"./dialogs/about-dialog":68,"./dialogs/definitions-dialog":69,"./dialogs/sensitivity-analysis-dialog":71,"./dialogs/settings-dialog":72,"./exporter":73,"./i18n/i18n":80,"./league-table/league-table-dialog":90,"./loading-indicator":93,"./sidebar":95,"./templates":96,"./toolbar":125,"sd-computations":"sd-computations","sd-model":"sd-model","sd-tree-designer":131,"sd-utils":"sd-utils"}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Autocomplete = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

var _appUtils = require("./app-utils");

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var $ = require('jquery');
_sdUtils.Utils.getGlobalObject().jQuery = $; //FIXME
require('jquery-ui/ui/data');
require('jquery-ui/ui/widget');
require('jquery-ui/ui/widgets/mouse');
require('jquery-ui/ui/widgets/button');
require('jquery-ui/ui/widgets/menu');
require('jquery-ui/ui/unique-id');
require('jquery-ui/ui/position');
require('jquery-ui/ui/keycode');
require('jquery-ui/ui/safe-active-element');
require('jquery-ui/ui/widgets/autocomplete');

$(function () {
    $.widget("sd.combobox", {
        _create: function _create() {
            this.wrapper = $("<span>").addClass("sd-combobox").insertAfter(this.element);

            this.element.hide();
            this._createAutocomplete();
            this._createShowAllButton();
        },

        _createAutocomplete: function _createAutocomplete() {
            var selected = this.element.children(":selected"),
                value = selected.val() ? selected.text() : "";

            this.input = $("<input>").appendTo(this.wrapper).val(value).attr("title", "").attr("type", "text").addClass("sd-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left").autocomplete({
                delay: 0,
                minLength: 0,
                source: $.proxy(this, "_source"),
                classes: {
                    "ui-autocomplete": "sd-combobox-autocomplete"
                }
            });
            $("<span class='bar'>").appendTo(this.wrapper);

            var input = this.input;
            this._on(this.input, {
                autocompleteselect: function autocompleteselect(event, ui) {
                    ui.item.option.selected = true;
                    this._trigger("select", event, {
                        item: ui.item.option
                    });
                },

                autocompletechange: function autocompletechange() {
                    var inputD3 = d3.select($(input).get(0));
                    _appUtils.AppUtils.dispatchHtmlEvent(inputD3.node(), "change");
                }
            });
        },

        _createShowAllButton: function _createShowAllButton() {
            var input = this.input,
                wasOpen = false;

            $("<button>").attr("tabIndex", -1).attr("type", "button").html('<i class="material-icons">arrow_drop_down</i>').appendTo(this.wrapper).addClass("sd-combobox-toggle ui-corner-right").on("mousedown", function () {
                wasOpen = input.autocomplete("widget").is(":visible");
            }).on("click", function () {
                input.trigger("focus");
                // Close if already visible
                if (wasOpen) {
                    return;
                }

                // Pass empty string as value to search for, displaying all results
                input.autocomplete("search", "");
            });
        },

        _source: function _source(request, response) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
            response(this.element.children("option").map(function () {
                var text = $(this).text();
                if (this.value && (!request.term || matcher.test(text))) return {
                    label: text,
                    value: text,
                    option: this
                };
            }));
        },

        _destroy: function _destroy() {
            this.wrapper.remove();
            this.element.show();
        },

        input_element: function input_element() {
            return this.input;
        }
    });
});

var Autocomplete = exports.Autocomplete = function () {
    function Autocomplete(container) {
        _classCallCheck(this, Autocomplete);

        this.container = container;
        this.combobox = $(this.container.node()).combobox();
    }

    _createClass(Autocomplete, [{
        key: "getInput",
        value: function getInput() {
            return d3.select($(this.combobox).combobox('input_element').get(0));
        }
    }]);

    return Autocomplete;
}();

},{"./app-utils":64,"./d3":67,"jquery":"jquery","jquery-ui/ui/data":62,"jquery-ui/ui/keycode":"jquery-ui/ui/keycode","jquery-ui/ui/position":"jquery-ui/ui/position","jquery-ui/ui/safe-active-element":"jquery-ui/ui/safe-active-element","jquery-ui/ui/unique-id":"jquery-ui/ui/unique-id","jquery-ui/ui/widget":"jquery-ui/ui/widget","jquery-ui/ui/widgets/autocomplete":"jquery-ui/ui/widgets/autocomplete","jquery-ui/ui/widgets/button":"jquery-ui/ui/widgets/button","jquery-ui/ui/widgets/menu":"jquery-ui/ui/widgets/menu","jquery-ui/ui/widgets/mouse":"jquery-ui/ui/widgets/mouse","sd-utils":"sd-utils"}],67:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _d3Dispatch = require('d3-dispatch');

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Dispatch[key];
    }
  });
});

var _d3Scale = require('d3-scale');

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Scale[key];
    }
  });
});

var _d3Selection = require('d3-selection');

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require('d3-shape');

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Shape[key];
    }
  });
});

var _d3Drag = require('d3-drag');

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Drag[key];
    }
  });
});

var _d3Brush = require('d3-brush');

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Brush[key];
    }
  });
});

var _d3Array = require('d3-array');

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Array[key];
    }
  });
});

var _d3Hierarchy = require('d3-hierarchy');

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Hierarchy[key];
    }
  });
});

var _d3TimeFormat = require('d3-time-format');

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3TimeFormat[key];
    }
  });
});

},{"d3-array":"d3-array","d3-brush":"d3-brush","d3-dispatch":"d3-dispatch","d3-drag":"d3-drag","d3-hierarchy":"d3-hierarchy","d3-scale":"d3-scale","d3-selection":"d3-selection","d3-shape":"d3-shape","d3-time-format":"d3-time-format"}],68:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AboutDialog = undefined;

var _dialog = require('./dialog');

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var AboutDialog = exports.AboutDialog = function (_Dialog) {
    _inherits(AboutDialog, _Dialog);

    function AboutDialog(app) {
        _classCallCheck(this, AboutDialog);

        return _possibleConstructorReturn(this, (AboutDialog.__proto__ || Object.getPrototypeOf(AboutDialog)).call(this, app.container.select('#sd-about-dialog'), app));
    }

    return AboutDialog;
}(_dialog.Dialog);

},{"./dialog":70}],69:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DefinitionsDialog = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _d = require('../d3');

var d3 = _interopRequireWildcard(_d);

var _dialog = require('./dialog');

var _sdUtils = require('sd-utils');

var _appUtils = require('../app-utils');

var _templates = require('../templates');

var _sdModel = require('sd-model');

var _i18n = require('../i18n/i18n');

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var DefinitionsDialog = exports.DefinitionsDialog = function (_Dialog) {
    _inherits(DefinitionsDialog, _Dialog);

    function DefinitionsDialog(app) {
        _classCallCheck(this, DefinitionsDialog);

        var _this = _possibleConstructorReturn(this, (DefinitionsDialog.__proto__ || Object.getPrototypeOf(DefinitionsDialog)).call(this, app.container.select('#sd-definitions-dialog'), app));

        var self = _this;

        _this.definitionsScopeLabel = _this.container.select(".sd-definitions-dialog-scope-label");

        _this.definitionsCode = _this.container.select('textarea#sd-definitions-dialog-definitions-code').on('input', function () {
            _appUtils.AppUtils.updateInputClass(d3.select(this));
        });

        _this.definitionsCode = _this.container.select('textarea#sd-definitions-dialog-definitions-code').on('change', function () {
            if (self.changeCallback) {
                self.changeCallback(this.value);
            }
        });

        _this.recalculateButton = _this.container.select('button#sd-definitions-dialog-recalculate-button').on('click', function () {
            self.app.recompute();
        });

        _this.variableValuesContainer = _this.container.select("#sd-definitions-dialog-variable-values");
        _appUtils.AppUtils.elasticTextarea(_this.definitionsCode);

        document.addEventListener('SilverDecisionsRecomputedEvent', function (data) {
            if (data.detail === app && self.isVisible()) {
                self.update();
            }
        });
        return _this;
    }

    _createClass(DefinitionsDialog, [{
        key: 'open',
        value: function open(definitionsSourceObject, changeCallback) {
            _get(DefinitionsDialog.prototype.__proto__ || Object.getPrototypeOf(DefinitionsDialog.prototype), 'open', this).call(this);
            this.changeCallback = changeCallback;
            this.definitionsSourceObject = definitionsSourceObject;
            this.update();
        }
    }, {
        key: 'update',
        value: function update() {
            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!force && !this.isVisible()) {
                return;
            }

            var scopeType = 'global';
            var labelSuffix = "";
            if (this.definitionsSourceObject instanceof _sdModel.domain.Node) {
                scopeType = 'node';
                var name = this.definitionsSourceObject.name;
                if (name) {
                    labelSuffix += " (" + name + ")";
                }
            }
            this.definitionsScopeLabel.text(_i18n.i18n.t("definitionsDialog.scope." + scopeType) + labelSuffix);

            this.definitionsCode.node().value = this.definitionsSourceObject.code;
            _appUtils.AppUtils.updateInputClass(this.definitionsCode);
            _appUtils.AppUtils.autoResizeTextarea(this.definitionsCode.node());
            this.definitionsCode.classed('invalid', !!this.definitionsSourceObject.$codeError);
            if (this.definitionsSourceObject.$codeError) {
                this.printError(this.definitionsSourceObject.$codeError);
            } else {
                this.printVariables(this.definitionsSourceObject.expressionScope);
            }
        }
    }, {
        key: 'printError',
        value: function printError(error) {
            var html = error;
            this.variableValuesContainer.html(html);
        }
    }, {
        key: 'printVariables',
        value: function printVariables(scope) {
            var html = _templates.Templates.get('evaluatedVariables', { scopeVariables: _sdUtils.Utils.getVariablesAsList(scope) });
            this.variableValuesContainer.html(html);
        }
    }]);

    return DefinitionsDialog;
}(_dialog.Dialog);

},{"../app-utils":64,"../d3":67,"../i18n/i18n":80,"../templates":96,"./dialog":70,"sd-model":"sd-model","sd-utils":"sd-utils"}],70:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Dialog = exports.Dialog = function () {
    function Dialog(container, app) {
        var _this = this;

        _classCallCheck(this, Dialog);

        this.app = app;
        this.container = container;
        this.container.select('.sd-close-modal').on('click', function () {
            return _this.close();
        });
        this.container.select('.sd-extend-modal').on('click', function () {
            return _this.extend();
        });
        this.container.select('.sd-shrink-modal').on('click', function () {
            return _this.shrink();
        });
    }

    _createClass(Dialog, [{
        key: 'open',
        value: function open() {
            this.onOpen();
            this.container.classed('open', true);
        }
    }, {
        key: 'close',
        value: function close() {
            this.container.classed('open', false);
            this.onClosed();
        }
    }, {
        key: 'setFullScreen',
        value: function setFullScreen() {
            var fullScreen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            var self = this;
            this.container.classed('sd-full-screen', fullScreen);
            setTimeout(function () {
                self.onResized();
            }, 10);
        }
    }, {
        key: 'extend',
        value: function extend() {
            this.setFullScreen();
        }
    }, {
        key: 'shrink',
        value: function shrink() {
            this.setFullScreen(false);
        }
    }, {
        key: 'isVisible',
        value: function isVisible() {
            return this.container.classed('open');
        }
    }, {
        key: 'onClosed',
        value: function onClosed() {}
    }, {
        key: 'onOpen',
        value: function onOpen() {}
    }, {
        key: 'onResized',
        value: function onResized() {}
    }]);

    return Dialog;
}();

},{}],71:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SensitivityAnalysisDialog = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _dialog = require("./dialog");

var _jobParametersBuilder = require("../jobs/job-parameters-builder");

var _sdUtils = require("sd-utils");

var _templates = require("../templates");

var _i18n = require("../i18n/i18n");

var _appUtils = require("../app-utils");

var _sdTreeDesigner = require("sd-tree-designer");

var _loadingIndicator = require("../loading-indicator");

var _exporter = require("../exporter");

var _sensitivityAnalysisResultTable = require("../jobs/sensitivity-analysis-result-table");

var _probabilisticSensitivityAnalysisResultTable = require("../jobs/probabilistic-sensitivity-analysis-result-table");

var _policy = require("sd-computations/src/policies/policy");

var _tornadoDiagramPlot = require("../jobs/tornado-diagram-plot");

var _spiderPlot = require("../jobs/spider-plot");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var SensitivityAnalysisDialog = exports.SensitivityAnalysisDialog = function (_Dialog) {
    _inherits(SensitivityAnalysisDialog, _Dialog);

    function SensitivityAnalysisDialog(app) {
        _classCallCheck(this, SensitivityAnalysisDialog);

        var _this = _possibleConstructorReturn(this, (SensitivityAnalysisDialog.__proto__ || Object.getPrototypeOf(SensitivityAnalysisDialog)).call(this, app.container.select('.sd-sensitivity-analysis-dialog'), app));

        _this.jobConfigurations = [];
        _this.jobNameToParamValues = {};

        _this.computationsManager = _this.app.computationsManager;
        // this.initJobConfigurations();

        _this.jobConfigurationContainer = _this.container.select(".sd-sensitivity-analysis-job-configuration");
        _this.parameterBuilderContainer = _this.jobConfigurationContainer.select(".sd-job-parameters-builder");
        _this.jobParametersBuilder = new _jobParametersBuilder.JobParametersBuilder(_this.parameterBuilderContainer, 'job', function () {
            return _this.onJobParametersChanged();
        });
        _this.progressBarContainer = _this.container.select(".sd-job-progress-bar-container");
        _this.progressBar = _this.progressBarContainer.select(".sd-progress-bar");
        _this.jobResultsContainer = _this.container.select(".sd-sensitivity-analysis-job-results");
        _this.jobResultPlotContainer = _this.jobResultsContainer.select(".sd-job-result-plot-container");

        _this.debouncedCheckWarnings = _sdUtils.Utils.debounce(function () {
            return _this.checkWarnings();
        }, 200);

        _this.initButtons();
        var self = _this;
        document.addEventListener('SilverDecisionsRecomputedEvent', function (data) {
            if (data.detail === app && self.isVisible()) {
                self.onOpen();
            }
        });
        return _this;
    }

    _createClass(SensitivityAnalysisDialog, [{
        key: "onOpen",
        value: function onOpen() {

            this.initJobConfigurations();
            if (!this.jobSelect) {
                this.initJobSelect();
            }

            var payoffConf = _sdUtils.Utils.cloneDeep(this.app.config.format.payoff1);
            payoffConf.style = 'decimal';
            payoffConf.useGrouping = false;
            this.payoffNumberFormat = new Intl.NumberFormat('en', payoffConf);
            // this.payoffNumberFormat = {
            //     format: v => this.app.computationsManager.expressionEngine.constructor.toFloat(v, payoffConf.maximumFractionDigits)
            // }

            this.clear();
        }
    }, {
        key: "onClosed",
        value: function onClosed() {
            this.clear();
            if (!this.jobInstanceManager) {
                return;
            }
            this.jobInstanceManager.terminate();
        }
    }, {
        key: "onJobSelected",
        value: function onJobSelected(jobConfig) {

            this.clearWarnings();
            this.selectedJobConfig = jobConfig;
            if (!jobConfig) {
                return;
            }
            this.jobSelect.node().value = jobConfig.jobName;
            var jobName = this.selectedJobConfig.jobName;
            this.job = this.computationsManager.getJobByName(jobName);

            var jobParamsValues = this.jobNameToParamValues[jobName] || {};

            this.setJobParamsValues(jobParamsValues);
        }
    }, {
        key: "refreshSelectedJobConfig",
        value: function refreshSelectedJobConfig() {
            var _this2 = this;

            if (this.selectedJobConfig) {
                this.selectedJobConfig = _sdUtils.Utils.find(this.jobConfigurations, function (c) {
                    return c.jobName === _this2.selectedJobConfig.jobName;
                });
            }
        }
    }, {
        key: "setJobParamsValues",
        value: function setJobParamsValues(jobParamsValues) {
            var deleteId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!this.job) {
                return;
            }
            this.refreshSelectedJobConfig();

            if (deleteId) {
                delete jobParamsValues.id;
            }
            this.jobParameters = this.job.createJobParameters(jobParamsValues);

            this.jobNameToParamValues[this.job.name] = this.jobParameters.values;

            this.jobParametersBuilder.setJobParameters(this.job.name, this.jobParameters, this.selectedJobConfig.customParamsConfig);
        }
    }, {
        key: "onJobParametersChanged",
        value: function onJobParametersChanged() {
            this.debouncedCheckWarnings();
        }
    }, {
        key: "getGlobalVariableNames",
        value: function getGlobalVariableNames() {
            return this.app.dataModel.getGlobalVariableNames(true);
        }
    }, {
        key: "initJobConfigurations",
        value: function initJobConfigurations() {
            var _this3 = this;

            var self = this;
            this.jobConfigurations.length = 0;
            var ExpressionEngine = this.app.expressionEngine.constructor;
            var customVariablesValidator = function customVariablesValidator(values) {
                var isValidArray = [];

                var names = [];
                values.forEach(function (v, i) {
                    var isVariableInGlobalScope = self.app.dataModel.expressionScope.hasOwnProperty(v.name);
                    var valid = names.indexOf(v.name) < 0 && isVariableInGlobalScope;
                    names.push(v.name);
                    isValidArray.push(valid);
                });

                return isValidArray;
            };

            var largeScenariosNumberWarning = {
                name: 'largeScenariosNumber',
                data: {
                    number: 10000,
                    numberFormatted: "10,000"
                },
                check: function check(jobParameters) {
                    // called with this set to warning config object
                    var combinations = jobParameters.values.variables.map(function (v) {
                        return v.length;
                    }).reduce(function (a, b) {
                        return a * (b || 1);
                    }, 1);
                    return combinations > this.data.number;
                }
            };
            this.jobConfigurations.push({
                jobName: 'sensitivity-analysis',
                customParamsConfig: {
                    'id': {
                        // value: undefined, //leave default,
                        hidden: true
                    },
                    'failOnInvalidTree': {
                        value: true,
                        hidden: true
                    },
                    'ruleName': {
                        value: this.computationsManager.getCurrentRule().name,
                        hidden: true
                    },
                    variables: {
                        name: {
                            options: this.getGlobalVariableNames()
                        },
                        _derivedValues: [{
                            name: "step",
                            value: function value(variable) {
                                if (variable.max === undefined || variable.max === null) {
                                    return "";
                                }
                                if (variable.min === undefined || variable.min === null) {
                                    return "";
                                }
                                if (variable.length === undefined || variable.length === null || variable.length < 2) {
                                    return "";
                                }
                                if (variable.min > variable.max) {
                                    return "";
                                }

                                try {
                                    return ExpressionEngine.toFloat(ExpressionEngine.divide(ExpressionEngine.subtract(variable.max, variable.min), variable.length - 1));
                                } catch (e) {
                                    return "";
                                }
                            }
                        }],
                        customValidator: customVariablesValidator

                    }
                },
                warnings: [largeScenariosNumberWarning, {
                    name: 'largeParametersNumber',
                    data: {
                        number: 2
                    },
                    check: function check(jobParameters) {
                        // called with this set to warning config object
                        return jobParameters.values.variables.length > this.data.number;
                    }
                }]
            });

            this.jobConfigurations.push({
                jobName: 'tornado-diagram',
                customParamsConfig: {
                    'id': {
                        // value: undefined, //leave default,
                        hidden: true
                    },
                    'failOnInvalidTree': {
                        value: true,
                        hidden: true
                    },
                    'ruleName': {
                        value: this.computationsManager.getCurrentRule().name,
                        hidden: true
                    },
                    variables: {
                        name: {
                            options: this.getGlobalVariableNames()
                        },
                        _derivedValues: [{
                            name: "defaultValue",
                            value: function value(variable) {
                                if (!variable.name) {
                                    return "";
                                }

                                try {
                                    return ExpressionEngine.toFloat(_this3.app.dataModel.expressionScope[variable.name]);
                                } catch (e) {
                                    return "";
                                }
                            }
                        }, {
                            name: "step",
                            value: function value(variable) {
                                if (variable.max === undefined || variable.max === null) {
                                    return "";
                                }
                                if (variable.min === undefined || variable.min === null) {
                                    return "";
                                }
                                if (variable.length === undefined || variable.length === null || variable.length < 2) {
                                    return "";
                                }
                                if (variable.min > variable.max) {
                                    return "";
                                }

                                try {
                                    return ExpressionEngine.toFloat(ExpressionEngine.divide(ExpressionEngine.subtract(variable.max, variable.min), variable.length - 1));
                                } catch (e) {
                                    return "";
                                }
                            }
                        }],
                        customValidator: function customValidator(values) {
                            var isValidNameArray = customVariablesValidator(values);

                            return values.map(function (v, i) {
                                if (!isValidNameArray[i]) {
                                    return false;
                                }

                                if (!v.name || v.min === undefined || v.min === null || v.max === undefined || v.max === null) {
                                    return false;
                                }

                                var defVal = self.app.dataModel.expressionScope[v.name];
                                return v.min < defVal && v.max > defVal;
                            });
                        }

                    }
                },
                warnings: [{
                    name: 'largeScenariosNumber',
                    data: {
                        number: 10000,
                        numberFormatted: "10,000"
                    },
                    check: function check(jobParameters) {
                        // called with this set to warning config object
                        var combinations = jobParameters.values.variables.map(function (v) {
                            return v.length;
                        }).reduce(function (a, b) {
                            return a + b;
                        }, 0);
                        return combinations > this.data.number;
                    }
                }]
            });

            this.jobConfigurations.push({
                jobName: 'probabilistic-sensitivity-analysis',
                customParamsConfig: {
                    'id': {
                        hidden: true
                    },
                    'failOnInvalidTree': {
                        value: true,
                        hidden: true
                    },
                    'ruleName': {
                        value: this.computationsManager.getCurrentRule().name,
                        hidden: true
                    },
                    variables: {
                        name: {
                            options: this.getGlobalVariableNames()
                        },
                        formula: {
                            options: ExpressionEngine.randomMenuList,
                            optionsAutocomplete: true
                        },
                        customValidator: customVariablesValidator
                    }
                },
                warnings: [largeScenariosNumberWarning]
            });

            this.jobConfigurations.push({
                jobName: 'spider-plot',
                customParamsConfig: {
                    'id': {
                        // value: undefined, //leave default,
                        hidden: true
                    },
                    'failOnInvalidTree': {
                        value: true,
                        hidden: true
                    },
                    'ruleName': {
                        value: this.computationsManager.getCurrentRule().name,
                        hidden: true
                    },
                    variables: {
                        name: {
                            options: this.getGlobalVariableNames()
                        },
                        _derivedValues: [{
                            name: "defaultValue",
                            value: function value(variable) {
                                if (!variable.name) {
                                    return "";
                                }

                                try {
                                    return ExpressionEngine.toFloat(_this3.app.dataModel.expressionScope[variable.name]);
                                } catch (e) {
                                    return "";
                                }
                            }
                        }],
                        customValidator: customVariablesValidator
                    }
                },
                warnings: [{
                    name: 'largeScenariosNumber',
                    data: {
                        number: 10000,
                        numberFormatted: "10,000"
                    },
                    check: function check(jobParameters) {
                        // called with this set to warning config object
                        var combinations = jobParameters.values.length * jobParameters.values.variables.length;
                        return combinations > this.data.number;
                    }
                }]
            });
        }
    }, {
        key: "checkWarnings",
        value: function checkWarnings() {
            var _this4 = this;

            this.clearWarnings();
            if (!this.selectedJobConfig.warnings) {
                return;
            }

            this.selectedJobConfig.warnings.forEach(function (warnConf) {
                if (warnConf.check.call(warnConf, _this4.jobParameters)) {
                    _this4.addWarning(warnConf);
                }
            });
        }
    }, {
        key: "clearWarnings",
        value: function clearWarnings() {
            this.container.select(".sd-sensitivity-analysis-warnings").selectAll("*").remove();
        }
    }, {
        key: "addWarning",
        value: function addWarning(warnConf) {
            var msg = _i18n.i18n.t("job." + this.job.name + ".warnings." + warnConf.name, warnConf.data);

            var msgHTML = _templates.Templates.get("warningMessage", {
                message: msg
            });
            this.container.select(".sd-sensitivity-analysis-warnings").appendSelector("div.sd-sensitivity-analysis-warning").html(msgHTML);
        }
    }, {
        key: "initJobSelect",
        value: function initJobSelect() {
            var self = this;
            this.jobSelect = this.container.select(".sd-job-select-input-group").html(_templates.Templates.get("selectInputGroup", {
                id: _sdUtils.Utils.guid(),
                label: null,
                name: "sd-job-select",
                options: this.jobConfigurations.map(function (c) {
                    return {
                        label: _i18n.i18n.t("job." + c.jobName + ".name"),
                        value: c.jobName
                    };
                })
            })).select("select").on('change input', function (d) {
                var _this5 = this;

                self.onJobSelected(_sdUtils.Utils.find(self.jobConfigurations, function (c) {
                    return c.jobName === _this5.value;
                }));
            });
        }
    }, {
        key: "initResultTable",
        value: function initResultTable(result) {
            var _this6 = this;

            var config = {
                onRowSelected: function onRowSelected(rows, indexes, e) {
                    return _this6.onResultRowSelected(rows, indexes, e);
                },
                className: "sd-" + this.job.name
            };
            if (this.resultTable) {
                this.resultTable.clear();
                this.resultTable.setClassName("sd-" + this.job.name);
                this.resultTable.hide();
            }

            if (this.job.name == "sensitivity-analysis") {
                this.resultTable = new _sensitivityAnalysisResultTable.SensitivityAnalysisJobResultTable(this.jobResultsContainer.select(".sd-job-result-table-container"), config);
                this.resultTable.setData(result, this.jobParameters, this.job);
                this.resultTable.show();
            } else if (this.job.name == "probabilistic-sensitivity-analysis") {
                this.resultTable = new _probabilisticSensitivityAnalysisResultTable.ProbabilisticSensitivityAnalysisJobResultTable(this.jobResultsContainer.select(".sd-job-result-table-container"), config, function (v) {
                    return _this6.payoffNumberFormat.format(v);
                }, function (v) {
                    return _this6.app.probabilityNumberFormat.format(v);
                });
                this.resultTable.setData(result, this.jobParameters, this.job);
                this.resultTable.show();
            }
        }
    }, {
        key: "disableActionButtonsAndShowLoadingIndicator",
        value: function disableActionButtonsAndShowLoadingIndicator() {
            var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (disable) {
                _loadingIndicator.LoadingIndicator.show();
            } else {
                _loadingIndicator.LoadingIndicator.hide();
            }
            this.container.select('.sd-sensitivity-analysis-action-buttons').selectAll('button').attr('disabled', disable ? 'disabled' : undefined);
        }
    }, {
        key: "initButtons",
        value: function initButtons() {
            var _this7 = this;

            this.runJobButton = this.container.select(".sd-run-job-button").on('click', function () {
                if (!_this7.jobParametersBuilder.validate()) {
                    return;
                }
                _this7.disableActionButtonsAndShowLoadingIndicator();
                _this7.checkWarnings();

                _this7.computationsManager.runJobWithInstanceManager(_this7.job.name, _this7.jobParameters.values, {
                    onJobStarted: _this7.onJobStarted,
                    onJobCompleted: _this7.onJobCompleted,
                    onJobFailed: _this7.onJobFailed,
                    onJobStopped: _this7.onJobStopped,
                    onJobTerminated: _this7.onJobTerminated,
                    onProgress: _this7.onProgress,
                    callbacksThisArg: _this7
                }).then(function (jobInstanceManager) {
                    _this7.jobInstanceManager = jobInstanceManager;
                }).catch(function (e) {
                    _sdUtils.log.error(e);
                }).then(function () {
                    _this7.disableActionButtonsAndShowLoadingIndicator(false);
                });
            });

            this.resumeJobButton = this.container.select(".sd-resume-job-button").on('click', function () {
                if (!_this7.jobInstanceManager) {
                    return;
                }
                _this7.disableActionButtonsAndShowLoadingIndicator();
                _this7.jobInstanceManager.resume();
            });

            this.stopJobButton = this.container.select(".sd-stop-job-button").on('click', function () {
                if (!_this7.jobInstanceManager) {
                    return;
                }
                _this7.disableActionButtonsAndShowLoadingIndicator();
                _this7.jobInstanceManager.stop();
            });

            this.terminateJobButton = this.container.select(".sd-terminate-job-button").on('click', function () {
                if (!_this7.jobInstanceManager) {
                    return;
                }
                _this7.terminateJob();
            });

            this.backButton = this.container.select(".sd-back-button ").on('click', function () {
                if (_this7.jobInstanceManager) {
                    _this7.jobInstanceManager.terminate();
                }
            });

            this.downloadCsvButtons = this.container.select(".sd-download-csv-button ").on('click', function () {
                _this7.downloadCSV();
            });

            this.clearButton = this.container.select(".sd-clear-button ").on('click', function () {
                _this7.clear(true);
            });
        }
    }, {
        key: "loadSavedParamValues",
        value: function loadSavedParamValues(jobNameToParamValues) {
            this.jobNameToParamValues = jobNameToParamValues;
            this.selectedJobConfig = null;
            this.jobParameters = null;
        }
    }, {
        key: "clear",
        value: function clear() {
            var _this8 = this;

            var clearParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var clearAllParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.clearResults();
            this.clearWarnings();
            this.setProgress(0);
            this.markAsError(false);

            if (!this.selectedJobConfig) {
                this.onJobSelected(this.jobConfigurations[0]);
            }

            if (clearAllParams) {
                _sdUtils.Utils.forOwn(this.jobNameToParamValues, function (value, key) {
                    return _this8.jobNameToParamValues[key] = {};
                });
            }

            var globalVariableNames = this.getGlobalVariableNames();
            _sdUtils.Utils.forOwn(this.jobNameToParamValues, function (value, key) {
                var paramValues = value;
                if (clearAllParams) {
                    paramValues = {};
                } else if (paramValues.variables) {
                    paramValues.variables = paramValues.variables.filter(function (v) {
                        return globalVariableNames.indexOf(v.name) !== -1;
                    });
                    if (!paramValues.variables.length) {
                        paramValues.variables.push({});
                    }
                }

                _this8.jobNameToParamValues[key] = paramValues;
            });

            if (this.job) {
                if (clearParams) {
                    this.jobNameToParamValues[this.job.name] = {};
                    this.setJobParamsValues({});
                } else {
                    this.jobParameters.values.ruleName = this.computationsManager.getCurrentRule().name;
                    this.setJobParamsValues(this.jobParameters.values);
                }
            }

            _appUtils.AppUtils.show(this.jobConfigurationContainer);
            _appUtils.AppUtils.show(this.runJobButton);
            _appUtils.AppUtils.show(this.clearButton);

            _appUtils.AppUtils.hide(this.resumeJobButton);
            _appUtils.AppUtils.hide(this.progressBarContainer);
            _appUtils.AppUtils.hide(this.stopJobButton);
            _appUtils.AppUtils.hide(this.downloadCsvButtons);
            _appUtils.AppUtils.hide(this.terminateJobButton);
            _appUtils.AppUtils.hide(this.jobResultsContainer);
            _appUtils.AppUtils.hide(this.backButton);
            this.disableActionButtonsAndShowLoadingIndicator(false);
        }
    }, {
        key: "clearResults",
        value: function clearResults() {
            if (this.resultTable) {
                this.resultTable.clear();
                this.resultTable.hide();
            }
            if (this.resultPlots) {
                this.resultPlots.forEach(function (p) {
                    return p.destroy();
                });
                this.jobResultPlotContainer.selectAll("*").remove();
            }
        }
    }, {
        key: "onJobStarted",
        value: function onJobStarted() {
            _appUtils.AppUtils.hide(this.jobConfigurationContainer);
            _appUtils.AppUtils.hide(this.runJobButton);
            _appUtils.AppUtils.hide(this.resumeJobButton);
            _appUtils.AppUtils.hide(this.backButton);
            _appUtils.AppUtils.hide(this.clearButton);
            _appUtils.AppUtils.hide(this.downloadCsvButtons);

            _appUtils.AppUtils.show(this.progressBarContainer);
            _appUtils.AppUtils.show(this.stopJobButton);
            _appUtils.AppUtils.show(this.terminateJobButton);

            this.disableActionButtonsAndShowLoadingIndicator(false);
            this.onProgress(this.jobInstanceManager ? this.jobInstanceManager.progress : null);
        }
    }, {
        key: "onJobCompleted",
        value: function onJobCompleted(result) {
            _appUtils.AppUtils.show(this.jobResultsContainer);
            _appUtils.AppUtils.show(this.backButton);
            _appUtils.AppUtils.show(this.downloadCsvButtons);

            _appUtils.AppUtils.hide(this.progressBarContainer);
            _appUtils.AppUtils.hide(this.stopJobButton);
            _appUtils.AppUtils.hide(this.terminateJobButton);
            _appUtils.AppUtils.hide(this.clearButton);

            this.disableActionButtonsAndShowLoadingIndicator(false);
            this.displayResult(result);
        }
    }, {
        key: "displayResult",
        value: function displayResult(result) {
            _sdUtils.log.debug(result);
            this.result = result;
            this.initResultTable(result);

            this.initResultPlots(result);
        }
    }, {
        key: "initResultPlots",
        value: function initResultPlots(result) {

            if (this.job.name === "tornado-diagram") {
                this.initTornadoResultPlots(result);
            } else if (this.job.name === "spider-plot") {
                this.initSpiderResultPlots(result);
            }
        }
    }, {
        key: "initTornadoResultPlots",
        value: function initTornadoResultPlots(result) {
            var _this9 = this;

            var self = this;
            this.resultPlots = [];

            result.policies.forEach(function (policy, index) {

                var container = _this9.jobResultPlotContainer.selectOrAppend("div.sd-result-plot-container-" + index);
                var config = {
                    policyIndex: index,
                    maxWidth: self.app.config.leagueTable.plot.maxWidth
                };

                var resultPlot = new _tornadoDiagramPlot.TornadoDiagramPlot(container.node(), result, config);
                _this9.resultPlots.push(resultPlot);

                setTimeout(function () {
                    resultPlot.init();
                }, 100);
            });
        }
    }, {
        key: "initSpiderResultPlots",
        value: function initSpiderResultPlots(result) {
            var _this10 = this;

            var self = this;
            this.resultPlots = [];

            result.policies.forEach(function (policy, index) {

                var container = _this10.jobResultPlotContainer.selectOrAppend("div.sd-result-plot-container-" + index);
                var config = {
                    policyIndex: index,
                    maxWidth: self.app.config.leagueTable.plot.maxWidth
                };

                var resultPlot = new _spiderPlot.SpiderPlot(container.node(), result, config);
                _this10.resultPlots.push(resultPlot);

                setTimeout(function () {
                    resultPlot.init();
                }, 100);
            });
        }
    }, {
        key: "onResized",
        value: function onResized() {
            if (this.resultPlots) {
                this.resultPlots.forEach(function (p) {
                    return p.init();
                });
            }
        }
    }, {
        key: "terminateJob",
        value: function terminateJob() {
            this.disableActionButtonsAndShowLoadingIndicator();
            this.jobInstanceManager.terminate();
        }
    }, {
        key: "onJobFailed",
        value: function onJobFailed(errors) {
            _appUtils.AppUtils.hide(this.stopJobButton);
            _appUtils.AppUtils.hide(this.backButton);
            _appUtils.AppUtils.hide(this.downloadCsvButtons);
            _appUtils.AppUtils.hide(this.clearButton);
            this.disableActionButtonsAndShowLoadingIndicator(false);
            this.markAsError();
            var self = this;
            setTimeout(function () {
                var errorMessage = "";
                errors.forEach(function (e, i) {
                    if (i) {
                        errorMessage += "\n\n";
                    }

                    var msgKeyBase = "job." + self.job.name + ".errors.";
                    var msgKey = msgKeyBase + e.message;
                    var msg = _i18n.i18n.t(msgKey, e.data);
                    if (msg === msgKey) {
                        msg = _i18n.i18n.t("job.errors.generic", e);
                    }

                    errorMessage += msg;
                    if (e.data && e.data.variables) {
                        _sdUtils.Utils.forOwn(e.data.variables, function (value, key) {
                            errorMessage += "\n";
                            errorMessage += key + " = " + value;
                        });
                    }
                });

                alert(errorMessage);
                self.terminateJob();
            }, 10);
        }
    }, {
        key: "markAsError",
        value: function markAsError() {
            var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.container.classed('sd-job-error', error);
        }
    }, {
        key: "onJobStopped",
        value: function onJobStopped() {
            _appUtils.AppUtils.hide(this.stopJobButton);
            _appUtils.AppUtils.show(this.resumeJobButton);
            this.disableActionButtonsAndShowLoadingIndicator(false);
        }
    }, {
        key: "onJobTerminated",
        value: function onJobTerminated() {
            this.clear();
        }
    }, {
        key: "onProgress",
        value: function onProgress(progress) {
            this.setProgress(progress);
        }
    }, {
        key: "setProgress",
        value: function setProgress(progress) {
            var percents = 0;
            var value = "0%";
            if (progress) {
                value = progress.current + " / " + progress.total;
                percents = progress.current * 100 / progress.total;
            }

            this.progressBar.style("width", percents + "%");
            this.progressBar.html(value);
        }
    }, {
        key: "onResultRowSelected",
        value: function onResultRowSelected(rows, indexes, event) {
            var _this11 = this;

            if (!rows.length) {
                return;
            }

            var policyIndexes = rows.map(function (r) {
                return r.policyIndex;
            }).filter(function (value, index, self) {
                return self.indexOf(value) === index;
            });

            if (policyIndexes.length > 1) {
                _sdTreeDesigner.Tooltip.show(_i18n.i18n.t('jobResultTable.tooltip.multiplePoliciesInCell', { number: policyIndexes.length }), 5, 28, event, 2000);
                return;
            }

            var policy = this.result.policies[policyIndexes[0]];
            var title = _policy.Policy.toPolicyString(policy, false);

            if (rows.length == 1) {

                var row = rows[0];
                if (row.variables) {
                    title = '';
                    this.result.variableNames.forEach(function (v, i) {
                        if (i) {
                            title += "; ";
                        }
                        title += v + " = " + row.variables[i];
                    });
                }
            }

            this.app.showPolicyPreview(title, policy, function () {
                _this11.resultTable.clearSelection();
            });
        }
    }, {
        key: "downloadCSV",
        value: function downloadCSV() {
            _exporter.Exporter.saveAsCSV(this.getRows());
        }
    }, {
        key: "getRows",
        value: function getRows() {
            var params = _sdUtils.Utils.cloneDeep(this.jobParameters.values);
            params.extendedPolicyDescription = false;
            return this.job.jobResultToCsvRows(this.result, this.job.createJobParameters(params));
        }
    }]);

    return SensitivityAnalysisDialog;
}(_dialog.Dialog);

},{"../app-utils":64,"../exporter":73,"../i18n/i18n":80,"../jobs/job-parameters-builder":84,"../jobs/probabilistic-sensitivity-analysis-result-table":86,"../jobs/sensitivity-analysis-result-table":87,"../jobs/spider-plot":88,"../jobs/tornado-diagram-plot":89,"../loading-indicator":93,"../templates":96,"./dialog":70,"sd-computations/src/policies/policy":"sd-computations/src/policies/policy","sd-tree-designer":131,"sd-utils":"sd-utils"}],72:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FormGroup = exports.SettingsDialog = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _d = require('../d3');

var d3 = _interopRequireWildcard(_d);

var _dialog = require('./dialog');

var _i18n = require('../i18n/i18n');

var _templates = require('../templates');

var _sdUtils = require('sd-utils');

var _appUtils = require('../app-utils');

var _inputField = require('../form/input-field');

var _pathValueAccessor = require('../form/path-value-accessor');

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var SettingsDialog = exports.SettingsDialog = function (_Dialog) {
    _inherits(SettingsDialog, _Dialog);

    function SettingsDialog(app) {
        _classCallCheck(this, SettingsDialog);

        var _this = _possibleConstructorReturn(this, (SettingsDialog.__proto__ || Object.getPrototypeOf(SettingsDialog)).call(this, app.container.select('#sd-settings-dialog'), app));

        _this.formGroups = [];

        var group = new FormGroup('general', function () {
            app.treeDesigner.updateCustomStyles();
            app.updateNumberFormats();
        });
        group.addField('fontFamily', 'text', app.treeDesigner, 'config.fontFamily').addField('fontSize', 'text', app.treeDesigner, 'config.fontSize').addSelectField('fontWeight', app.treeDesigner, 'config.fontWeight', SettingsDialog.fontWeightOptions).addSelectField('fontStyle', app.treeDesigner, 'config.fontStyle', SettingsDialog.fontStyleOptions).addField('numberFormatLocale', 'text', app, 'config.format.locales', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat(v);return true;
                } catch (e) {
                    return false;
                }
            } });
        _this.formGroups.push(group);

        var payoffGroup = new FormGroup('payoff1', function () {
            return app.updatePayoffNumberFormat();
        });
        payoffGroup.addSelectField('style', app, 'config.format.payoff1.style', ['currency', 'decimal']).addSelectField('currencyDisplay', app, 'config.format.payoff1.currencyDisplay', ['symbol', 'code', 'name']).addField('currency', 'text', app, 'config.format.payoff1.currency', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { currency: v });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('minimumFractionDigits', 'number', app, 'config.format.payoff1.minimumFractionDigits', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { minimumFractionDigits: v, maximumFractionDigits: app.config.format.payoff1.maximumFractionDigits });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('maximumFractionDigits', 'number', app, 'config.format.payoff1.maximumFractionDigits', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { minimumFractionDigits: app.config.format.payoff1.minimumFractionDigits, maximumFractionDigits: v });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('useGrouping', 'checkbox', app, 'config.format.payoff1.useGrouping');

        _this.formGroups.push(payoffGroup);

        var payoff2Group = new FormGroup('payoff2', function () {
            return app.updatePayoffNumberFormat();
        });
        payoff2Group.addSelectField('style', app, 'config.format.payoff2.style', ['currency', 'decimal']).addSelectField('currencyDisplay', app, 'config.format.payoff2.currencyDisplay', ['symbol', 'code', 'name']).addField('currency', 'text', app, 'config.format.payoff2.currency', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { currency: v });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('minimumFractionDigits', 'number', app, 'config.format.payoff2.minimumFractionDigits', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { minimumFractionDigits: v, maximumFractionDigits: app.config.format.payoff2.maximumFractionDigits });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('maximumFractionDigits', 'number', app, 'config.format.payoff2.maximumFractionDigits', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { minimumFractionDigits: app.config.format.payoff2.minimumFractionDigits, maximumFractionDigits: v });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('useGrouping', 'checkbox', app, 'config.format.payoff2.useGrouping');

        _this.formGroups.push(payoff2Group);

        group = new FormGroup('probability', function () {
            app.updateProbabilityNumberFormat();
            app.treeDesigner.updateCustomStyles().redraw();
        });
        group.addSelectField('style', app, 'config.format.probability.style', ['decimal', 'percent']).addField('minimumFractionDigits', 'number', app, 'config.format.probability.minimumFractionDigits', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { minimumFractionDigits: v, maximumFractionDigits: app.config.format.probability.maximumFractionDigits });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('maximumFractionDigits', 'number', app, 'config.format.probability.maximumFractionDigits', { validate: function validate(v) {
                try {
                    new Intl.NumberFormat([], { minimumFractionDigits: app.config.format.probability.minimumFractionDigits, maximumFractionDigits: v });return true;
                } catch (e) {
                    return false;
                }
            } }).addField('fontSize', 'text', app.treeDesigner, 'config.probability.fontSize').addField('color', 'color', app.treeDesigner, 'config.probability.color');
        _this.formGroups.push(group);

        var nodeGroup = new FormGroup('node', function () {
            return app.treeDesigner.updateCustomStyles().redraw();
        });
        nodeGroup.addField('strokeWidth', 'text', app.treeDesigner, 'config.node.strokeWidth');

        nodeGroup.addGroup('optimal').addField('strokeWidth', 'text', app.treeDesigner, 'config.node.optimal.strokeWidth').addField('stroke', 'color', app.treeDesigner, 'config.node.optimal.stroke');

        nodeGroup.addGroup('label').addField('fontSize', 'text', app.treeDesigner, 'config.node.label.fontSize').addField('color', 'color', app.treeDesigner, 'config.node.label.color');

        nodeGroup.addGroup('payoff').addField('fontSize', 'text', app.treeDesigner, 'config.node.payoff.fontSize').addField('color', 'color', app.treeDesigner, 'config.node.payoff.color').addField('negativeColor', 'color', app.treeDesigner, 'config.node.payoff.negativeColor');

        _this.formGroups.push(nodeGroup);

        nodeGroup.addGroup('decision').addField('fill', 'color', app.treeDesigner, 'config.node.decision.fill').addField('stroke', 'color', app.treeDesigner, 'config.node.decision.stroke').addField('selected.fill', 'color', app.treeDesigner, 'config.node.decision.selected.fill');

        nodeGroup.addGroup('chance').addField('fill', 'color', app.treeDesigner, 'config.node.chance.fill').addField('stroke', 'color', app.treeDesigner, 'config.node.chance.stroke').addField('selected.fill', 'color', app.treeDesigner, 'config.node.chance.selected.fill');

        nodeGroup.addGroup('terminal').addField('fill', 'color', app.treeDesigner, 'config.node.terminal.fill').addField('stroke', 'color', app.treeDesigner, 'config.node.terminal.stroke').addField('selected.fill', 'color', app.treeDesigner, 'config.node.terminal.selected.fill').addGroup('payoff').addField('fontSize', 'text', app.treeDesigner, 'config.node.terminal.payoff.fontSize').addField('color', 'color', app.treeDesigner, 'config.node.terminal.payoff.color').addField('negativeColor', 'color', app.treeDesigner, 'config.node.terminal.payoff.negativeColor');

        var edgeGroup = new FormGroup('edge', function () {
            return app.treeDesigner.updateCustomStyles().redraw();
        }).addField('stroke', 'color', app.treeDesigner, 'config.edge.stroke').addField('strokeWidth', 'text', app.treeDesigner, 'config.edge.strokeWidth');

        edgeGroup.addGroup('optimal').addField('strokeWidth', 'text', app.treeDesigner, 'config.edge.optimal.strokeWidth').addField('stroke', 'color', app.treeDesigner, 'config.edge.optimal.stroke');

        edgeGroup.addGroup('selected').addField('strokeWidth', 'text', app.treeDesigner, 'config.edge.selected.strokeWidth').addField('stroke', 'color', app.treeDesigner, 'config.edge.selected.stroke');

        edgeGroup.addGroup('label').addField('fontSize', 'text', app.treeDesigner, 'config.edge.label.fontSize').addField('color', 'color', app.treeDesigner, 'config.edge.label.color');

        edgeGroup.addGroup('payoff').addField('fontSize', 'text', app.treeDesigner, 'config.edge.payoff.fontSize').addField('color', 'color', app.treeDesigner, 'config.edge.payoff.color').addField('negativeColor', 'color', app.treeDesigner, 'config.edge.payoff.negativeColor');
        _this.formGroups.push(edgeGroup);

        var titleGroup = new FormGroup('diagramTitle', function () {
            return app.treeDesigner.updateCustomStyles().redraw();
        });
        titleGroup.addField('fontSize', 'text', app.treeDesigner, 'config.title.fontSize').addSelectField('fontWeight', app.treeDesigner, 'config.title.fontWeight', SettingsDialog.fontWeightOptions).addSelectField('fontStyle', app.treeDesigner, 'config.title.fontStyle', SettingsDialog.fontStyleOptions).addField('color', 'color', app.treeDesigner, 'config.title.color').addGroup('margin').addField('top', 'number', app.treeDesigner, 'config.title.margin.top').addField('bottom', 'number', app.treeDesigner, 'config.title.margin.bottom');

        titleGroup.addGroup('description').addField('show', 'checkbox', app.treeDesigner, 'config.description.show').addField('fontSize', 'text', app.treeDesigner, 'config.description.fontSize').addSelectField('fontWeight', app.treeDesigner, 'config.description.fontWeight', SettingsDialog.fontWeightOptions).addSelectField('fontStyle', app.treeDesigner, 'config.description.fontStyle', SettingsDialog.fontStyleOptions).addField('color', 'color', app.treeDesigner, 'config.description.color').addField('marginTop', 'number', app.treeDesigner, 'config.description.margin.top');

        _this.formGroups.push(titleGroup);

        var leagueTableGroup = new FormGroup('leagueTable');
        leagueTableGroup.addGroup('plot').addField('maxWidth', 'text', app, 'config.leagueTable.plot.maxWidth').addField('highlightedColor', 'color', app, 'config.leagueTable.plot.groups.highlighted.color').addField('highlightedDefaultColor', 'color', app, 'config.leagueTable.plot.groups.highlighted-default.color').addField('extendedDominatedColor', 'color', app, 'config.leagueTable.plot.groups.extended-dominated.color').addField('dominatedColor', 'color', app, 'config.leagueTable.plot.groups.dominated.color').addField('defaultColor', 'color', app, 'config.leagueTable.plot.groups.default.color');

        _this.formGroups.push(leagueTableGroup);

        var otherGroup = new FormGroup('other', function () {
            return app.treeDesigner.redraw();
        });
        otherGroup.addField('disableAnimations', 'checkbox', app.treeDesigner, 'config.disableAnimations').addField('forceFullEdgeRedraw', 'checkbox', app.treeDesigner, 'config.forceFullEdgeRedraw').addField('hideLabels', 'checkbox', app.treeDesigner, 'config.hideLabels').addField('hidePayoffs', 'checkbox', app.treeDesigner, 'config.hidePayoffs').addField('hideProbabilities', 'checkbox', app.treeDesigner, 'config.hideProbabilities').addField({
            name: 'raw',
            type: 'checkbox',
            config: app.treeDesigner,
            path: 'config.raw',
            valueUpdateCallback: function valueUpdateCallback() {
                return app.onRawOptionChanged();
            }
        });

        _this.formGroups.push(otherGroup);

        _this.initView();

        return _this;
    }

    _createClass(SettingsDialog, [{
        key: 'initFormGroups',
        value: function initFormGroups(container, data) {
            var self = this;
            var temp = {};
            var formGroups = container.selectAll('div.sd-form-group').filter(function (d) {
                return this.parentNode == container.node();
            }).data(data);
            var formGroupsEnter = formGroups.enter().appendSelector('div.sd-form-group').attr('id', function (d) {
                return d.id;
            }).html(function (d) {
                return _templates.Templates.get('settingsDialogFormGroup', d);
            });
            formGroupsEnter.select('.toggle-button').on('click', function (d) {
                var g = container.select('#' + d.id);
                g.classed('sd-extended', !g.classed('sd-extended'));
            });

            var formGroupsMerge = formGroupsEnter.merge(formGroups);
            var inputGroups = formGroupsMerge.select('  .sd-form-group-content > .sd-form-group-inputs').selectAll('div.input-group').data(function (d) {
                return d.fields;
            });

            var inputGroupsEnter = inputGroups.enter().appendSelector('div.input-group').html(function (d) {
                return d.type == 'select' ? _templates.Templates.get('selectInputGroup', d) : _templates.Templates.get('inputGroup', d);
            });

            inputGroupsEnter.merge(inputGroups).select('input, select').on('change input', function (d, i) {
                var value = this.value;
                if (d.type == 'checkbox') {
                    value = this.checked;
                }
                if (d.validator && !d.validator.validate(value)) {
                    d3.select(this).classed('invalid', true);
                    if (d3.event.type == 'change') {
                        this.value = d.valueAccessor.get();
                    }
                    return;
                }
                d3.select(this).classed('invalid', false);

                d.valueAccessor.set(value);
                if (d.valueUpdateCallback) {
                    d.valueUpdateCallback();
                }
                _appUtils.AppUtils.updateInputClass(d3.select(this));
            }).each(function (d, i) {
                var value = d.valueAccessor.get();
                if (d.type == 'checkbox') {
                    this.checked = value;
                } else {
                    this.value = value;
                }
                temp[i] = {};
                temp[i].pristineVal = value;
                if (d.validator && !d.validator.validate(value)) {
                    d3.select(this).classed('invalid', true);
                } else {
                    d3.select(this).classed('invalid', false);
                }
                _appUtils.AppUtils.updateInputClass(d3.select(this));
            });

            formGroupsMerge.each(function (d) {
                self.initFormGroups(d3.select(this).select('.sd-form-group-content > .sd-form-group-child-groups'), d.groups);
            });
        }
    }, {
        key: 'initView',
        value: function initView() {
            var temp = {};
            this.initFormGroups(this.container.select('form#sd-settings-form'), this.formGroups);
        }
    }, {
        key: 'onOpen',
        value: function onOpen() {
            this.initView();
        }
    }]);

    return SettingsDialog;
}(_dialog.Dialog);

SettingsDialog.fontWeightOptions = ['normal', 'bold', 'lighter', 'bolder'];
SettingsDialog.fontStyleOptions = ['normal', 'italic', 'oblique'];

var FormGroup = exports.FormGroup = function () {
    function FormGroup(name, valueUpdateCallback) {
        _classCallCheck(this, FormGroup);

        this.fields = [];
        this.groups = [];

        this.id = 'sd-form-group-' + name.replace(/\./g, '-');
        this.name = name;
        this.valueUpdateCallback = valueUpdateCallback;
    }

    _createClass(FormGroup, [{
        key: 'addSelectField',
        value: function addSelectField(name, config, path, options) {
            this.addField(name, 'select', config, path, null, options);
            return this;
        }
    }, {
        key: 'addField',
        value: function addField(fieldConfig) {
            if (arguments.length > 1) {
                return this._addField.apply(this, arguments);
            }

            return this._addField(fieldConfig['name'], fieldConfig['type'], fieldConfig['config'], fieldConfig['path'], fieldConfig['validator'], fieldConfig['options'], fieldConfig['valueUpdateCallback']);
        }
    }, {
        key: '_addField',
        value: function _addField(name, type, config, path, validator, options, valueUpdateCallback) {
            var _this2 = this;

            var fieldId = this.name + "-" + name;
            var label = _i18n.i18n.t("settingsDialog." + this.name + "." + name);
            var configInputField = new ConfigInputField(fieldId, fieldId, type, label, config, path, validator, options);
            if (valueUpdateCallback) {
                configInputField.valueUpdateCallback = function () {
                    _this2.valueUpdateCallback();
                    valueUpdateCallback();
                };
            } else {
                configInputField.valueUpdateCallback = this.valueUpdateCallback;
            }

            this.fields.push(configInputField);
            return this;
        }
    }, {
        key: 'addGroup',
        value: function addGroup(name) {
            var groupName = this.name + '.' + name;
            var group = new FormGroup(groupName, this.valueUpdateCallback);
            this.groups.push(group);
            return group;
        }
    }]);

    return FormGroup;
}();

var ConfigInputField = function (_InputField) {
    _inherits(ConfigInputField, _InputField);

    function ConfigInputField(id, name, type, label, sourceObject, path, validator, options) {
        _classCallCheck(this, ConfigInputField);

        return _possibleConstructorReturn(this, (ConfigInputField.__proto__ || Object.getPrototypeOf(ConfigInputField)).call(this, id, name, type, label, new _pathValueAccessor.PathValueAccessor(sourceObject, path), validator, options));
    }

    return ConfigInputField;
}(_inputField.InputField);

},{"../app-utils":64,"../d3":67,"../form/input-field":75,"../form/path-value-accessor":76,"../i18n/i18n":80,"../templates":96,"./dialog":70,"sd-utils":"sd-utils"}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Exporter = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _blueimpCanvasToBlob = require("blueimp-canvas-to-blob");

var _fileSaver = require("file-saver");

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

var _i18n = require("./i18n/i18n");

var _sdUtils = require("sd-utils");

var _loadingIndicator = require("./loading-indicator");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Exporter = exports.Exporter = function () {
    function Exporter() {
        _classCallCheck(this, Exporter);
    }

    _createClass(Exporter, null, [{
        key: "getSvgCloneWithInlineStyles",

        // Below are the function that handle actual exporting:
        // getSVGString (svgNode ) and svgString2Image( svgString, width, height, format, callback )
        value: function getSvgCloneWithInlineStyles(svgNode) {
            var svgClone = svgNode.cloneNode(true);
            appendInlineStyles(svgNode, svgClone);

            function appendInlineStyles(source, target, parentCs) {
                if (!source) {
                    _sdUtils.log.error('Exporter.appendInlineStyles - undefined source!');
                    return false;
                }
                var children = source.children;
                var targetChildren = target.children;
                if (!source.children) {
                    children = source.childNodes;
                    targetChildren = target.childNodes;
                }

                if (source.tagName === 'text') {
                    /*
                     var bBox = source.getBBox();
                     console.log(source, bBox);
                     target.setAttribute('y', bBox.y)*/
                }

                var cssStyleText = '';
                var cs = getComputedStyle(source);
                if (!cs) {
                    return true;
                }
                if (cs.display === 'none') {
                    return false;
                }

                for (var i = 0; i < cs.length; i++) {
                    var styleName = cs.item(i);
                    if (_sdUtils.Utils.startsWith(styleName, '-')) {
                        continue;
                    }

                    var propertyValue = cs.getPropertyValue(styleName);
                    if (parentCs) {
                        if (propertyValue === parentCs.getPropertyValue(styleName)) {
                            continue;
                        }
                    }

                    if (Exporter.exportedStyles.some(function (s) {
                        return s.test(styleName);
                    })) {
                        cssStyleText += '; ' + styleName + ': ' + propertyValue;
                    } else if (Exporter.svgProperties.some(function (s) {
                        return s.test(styleName);
                    })) {
                        target.setAttribute(styleName, propertyValue);
                    }
                }
                if (cssStyleText.length) {
                    target.setAttribute("style", cssStyleText);
                } else {
                    target.removeAttribute("style");
                }

                var toRemove = [];
                for (var _i = 0; _i < children.length; _i++) {
                    var node = children[_i];
                    if (!appendInlineStyles(node, targetChildren[_i], cs)) {
                        toRemove.push(targetChildren[_i]);
                    }
                }
                toRemove.forEach(function (n) {
                    target.removeChild(n);
                });
                return true;
            }

            /*var textElements = svgNode.getElementsByTagName('text')
             _.each(textElements, function (el) {
               var textBBox = el.getBBox();
             console.log(el,textBBox, el.getBoundingClientRect());
             _.each(el.getElementsByTagName('tspan'), tspan=>{
             var tspanBBox = tspan.getBBox();
             console.log(tspan,tspanBBox, tspan.getBoundingClientRect());
             })
              // el.style['font-family'] = el.style['font-family'] && el.style['font-family'].split(' ').splice(-1);
             });*/

            svgClone.setAttribute('xlink', 'http://www.w3.org/1999/xlink');
            return svgClone;
        }
    }, {
        key: "getSVGString",
        value: function getSVGString(svgNode) {
            var removeIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            // svgNode = svgNode.cloneNode(true);
            var svgClone = Exporter.getSvgCloneWithInlineStyles(svgNode);

            var svgString = Exporter.serializeSvgNode(svgClone);
            // svgString = svgString.replace(/(\w+)?:?xlink=/g, 'xmlns:xlink=') // Fix root xlink without namespace
            // svgString = svgString.replace(/NS\d+:href/g, 'xlink:href') // Safari NS namespace fix
            svgString = Exporter.sanitizeSVG(svgString, removeIds);

            return svgString;
        }
    }, {
        key: "serializeSvgNode",
        value: function serializeSvgNode(svgNode) {
            var serializer = new XMLSerializer();
            return serializer.serializeToString(svgNode);
        }
    }, {
        key: "validateSvgNode",
        value: function validateSvgNode(svgNode) {
            var svgString = Exporter.serializeSvgNode(svgNode);
            var oParser = new DOMParser();
            var doc = oParser.parseFromString(svgString, 'image/svg+xml');
            return doc.documentElement.nodeName.indexOf('parsererror') === -1;
        }
    }, {
        key: "svgString2Image",
        value: function svgString2Image(svgString, width, height, format, callback) {
            var format = format ? format : 'png';
            var imgsrc = 'data:image/svg+xml,' + encodeURIComponent(svgString); // Convert SVG string to dataurl

            // var canvas = document.createElement("canvas");
            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");

            canvas.width = width;
            canvas.height = height;

            var image = new Image();
            image.width = width;
            image.height = height;
            var target = new Image();
            target.width = width;
            target.height = height;

            image.onload = function () {
                // context.clearRect(0, 0, width, height);
                context.drawImage(image, 0, 0, width, height);
                canvas.toBlob(function (blob) {
                    var filesize = Math.round(blob.length / 1024) + ' KB';
                    if (callback) callback(blob, filesize);
                });
            };

            image.src = imgsrc;
        }

        //decisiontree@yyyy.mm.dd_hh.mm.ss

    }, {
        key: "getExportFileName",
        value: function getExportFileName(ext) {
            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'decisiontree';

            var format = d3.timeFormat("%Y.%m.%d_%H.%M.%S");
            var date = new Date();
            name += '@' + format(date);
            if (ext) {
                name += '.' + ext;
            }
            return name;
        }
    }, {
        key: "saveAsPng",
        value: function saveAsPng(svg, options) {

            var clientSide = options.png.mode === 'client';
            var fallback = options.png.mode === 'fallback';
            var serverSide = options.png.mode === 'server';
            if (_sdUtils.Utils.detectIE()) {
                if (clientSide) {
                    alert(_i18n.i18n.t('error.pngExportNotSupportedIE'));
                    return;
                }

                if (fallback) {
                    fallback = false;
                    serverSide = true;
                }
            }
            _loadingIndicator.LoadingIndicator.show();

            try {
                var svgString = Exporter.getSVGString(svg.node());
                var svgWidth = svg.attr('width');
                var svgHeight = svg.attr('height');

                var pngWidth = 4 * svgWidth;
                var pngHeight = 4 * svgHeight;
                if (clientSide || fallback) {
                    // passes Blob and filesize String to the callback

                    var save = function save(dataBlob, filesize) {
                        try {
                            Exporter.saveAs(dataBlob, Exporter.getExportFileName('png'));
                            _loadingIndicator.LoadingIndicator.hide();
                        } catch (e) {
                            _sdUtils.log.warn('client side png rendering failed!');
                            if (fallback) {
                                _sdUtils.log.info('performing server side fallback.');
                                Exporter.exportPngServerSide(svgString, options.serverUrl, pngWidth, pngHeight);
                            } else {
                                throw e;
                            }
                        }
                    };

                    Exporter.svgString2Image(svgString, pngWidth, pngHeight, 'png', save);
                } else if (serverSide) {
                    Exporter.exportPngServerSide(svgString, options.serverUrl, pngWidth, pngHeight);
                }
            } catch (e) {
                alert(_i18n.i18n.t('error.pngExportNotSupported'));
                _loadingIndicator.LoadingIndicator.hide();
                _sdUtils.log.error('pngExportNotSupported', e);
            }
        }
    }, {
        key: "saveAsSvg",
        value: function saveAsSvg(svg) {
            try {
                var svgString = Exporter.getSVGString(svg.node());

                var blob = new Blob([svgString], { type: "image/svg+xml" });
                Exporter.saveAs(blob, Exporter.getExportFileName('svg'));
            } catch (e) {
                alert(_i18n.i18n.t('error.svgExportNotSupported'));
                _sdUtils.log.error('svgExportNotSupported', e);
            }
        }
    }, {
        key: "exportPdfClientSide",
        value: function exportPdfClientSide(svgString, width, height) {
            var doc = new jsPDF('l', 'pt', [width, height]);
            var dummy = document.createElement('svg');
            dummy.innerHTML = svgString;
            svg2pdf(dummy.firstChild, doc, {
                xOffset: 0,
                yOffset: 0,
                scale: 1
            });
            doc.save(Exporter.getExportFileName('pdf'));
            _loadingIndicator.LoadingIndicator.hide();
        }
    }, {
        key: "postAndSave",
        value: function postAndSave(url, data, filename, successCallback, failCallback) {
            var xhr = new XMLHttpRequest();
            xhr.open('post', url, true);
            xhr.setRequestHeader("Content-type", "application/json");
            xhr.responseType = 'arraybuffer';
            xhr.onload = function () {
                var status = xhr.status;
                _sdUtils.log.debug(status);
                var type = xhr.getResponseHeader('Content-Type');
                if (status == 200) {
                    var blob = new Blob([this.response], { type: type });
                    Exporter.saveAs(blob, filename);
                    if (successCallback) {
                        successCallback();
                    }
                } else {
                    if (failCallback) {
                        failCallback();
                    }
                }
            };
            xhr.onreadystatechange = function (oEvent) {
                if (xhr.readyState === 4) {
                    if (xhr.status !== 200) {
                        failCallback();
                    }
                }
            };

            xhr.send(JSON.stringify(data));
        }
    }, {
        key: "exportPdfServerSide",
        value: function exportPdfServerSide(svgString, url) {
            var filename = Exporter.getExportFileName('pdf');
            var data = { svg: svgString, type: 'pdf', noDownload: true };
            Exporter.postAndSave(url, data, filename, _loadingIndicator.LoadingIndicator.hide, function () {
                _loadingIndicator.LoadingIndicator.hide();
                alert(_i18n.i18n.t('error.serverSideExportRequestFailure'));
                throw new Error('Server side export failure');
            });

            // Utils.postByForm(url, {
            //     filename: filename,
            //     type: 'pdf',
            //     // width: options.width || 0, // IE8 fails to post undefined correctly, so use 0
            //     // scale: options.scale,
            //     svg: svgString
            // });
        }
    }, {
        key: "exportPngServerSide",
        value: function exportPngServerSide(svgString, url, pngWidth, pngHeight) {
            var filename = Exporter.getExportFileName('png');
            var data = { svg: svgString, type: 'png', noDownload: true, width: pngWidth };
            Exporter.postAndSave(url, data, filename, _loadingIndicator.LoadingIndicator.hide, function () {
                _loadingIndicator.LoadingIndicator.hide();
                alert(_i18n.i18n.t('error.serverSideExportRequestFailure'));
                throw new Error('Server side export failure');
            });

            /*Utils.postByForm(url, {
             filename: filename,
             type: 'pdf',
             // width: options.width || 0, // IE8 fails to post undefined correctly, so use 0
             // scale: options.scale,
             svg: svgString
             });*/
        }
    }, {
        key: "saveAsPdf",
        value: function saveAsPdf(svg, options) {
            var clientSidePdfExportAvailable = Exporter.isClientSidePdfExportAvailable();
            if (options.pdf.mode === 'client') {
                if (!clientSidePdfExportAvailable) {
                    alert(_i18n.i18n.t('error.jsPDFisNotIncluded'));
                    return;
                }
            }
            _loadingIndicator.LoadingIndicator.show();
            var margin = 20;
            var svgElement = svg.node();
            var width = svgElement.width.baseVal.value + 2 * margin,
                height = svgElement.height.baseVal.value + 2 * margin;
            try {
                var svgString = Exporter.getSVGString(svgElement);

                var fallback = options.pdf.mode === 'fallback';
                if (options.pdf.mode === 'client' || fallback) {
                    try {
                        Exporter.exportPdfClientSide(svgString, width, height);
                    } catch (e) {
                        _sdUtils.log.error('client side pdf rendering failed!');
                        if (fallback) {
                            _sdUtils.log.info('performing server side fallback.');
                            Exporter.exportPdfServerSide(svgString, options.serverUrl);
                        } else {
                            throw e;
                        }
                    }
                } else if (options.pdf.mode === 'server') {
                    Exporter.exportPdfServerSide(svgString, options.serverUrl);
                }
            } catch (e) {
                _sdUtils.log.error('pdfExportNotSupported', e);
                _loadingIndicator.LoadingIndicator.hide();
                alert(_i18n.i18n.t('error.pdfExportNotSupported'));
            }
        }
    }, {
        key: "isClientSidePdfExportAvailable",
        value: function isClientSidePdfExportAvailable() {
            return typeof jsPDF !== 'undefined' && typeof svg2pdf !== 'undefined';
        }
    }, {
        key: "sanitizeSVG",
        value: function sanitizeSVG(svg) {
            var removeIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var sanitized = svg.replace(/zIndex="[^"]+"/g, '').replace(/isShadow="[^"]+"/g, '').replace(/symbolName="[^"]+"/g, '').replace(/jQuery[0-9]+="[^"]+"/g, '').replace(/url\(("|&quot;)(\S+)("|&quot;)\)/g, 'url($2)').replace(/url\([^#]+#/g, 'url(#').replace(/<svg /, '<svg xmlns:xlink="http://www.w3.org/1999/xlink" ').replace(/ (NS[0-9]+\:)?href=/g, ' xlink:href=').replace(/\n/, ' ').replace(/<\/svg>.*?$/, '</svg>').replace(/(fill|stroke)="rgba\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\.]+)\)"/g, '$1="rgb($2)" $1-opacity="$3"').replace(/&nbsp;/g, "\xA0").replace(/&shy;/g, "\xAD");

            if (removeIds) {
                return sanitized.replace(/id="[^"]+"/g, '');
            }

            return sanitized;
        }
    }, {
        key: "saveAsCSV",
        value: function saveAsCSV(rows) {
            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'decisiontree';

            var csvRows = [];
            rows.forEach(function (row) {
                csvRows.push(row.map(function (r) {
                    return Exporter.escapeCsvField(r);
                }).join(','));
            });
            var csvString = csvRows.join("\r\n");

            var blob = new Blob([csvString], { type: "text/csv" });
            Exporter.saveAs(blob, Exporter.getExportFileName('csv', name));
        }
    }, {
        key: "escapeCsvField",
        value: function escapeCsvField(field) {
            if (_sdUtils.Utils.isString(field)) {
                return '"' + field.replace(/"/g, '""') + '"';
            }
            return field;
        }
    }]);

    return Exporter;
}();

Exporter.saveAs = _fileSaver.saveAs;
Exporter.dataURLtoBlob = _blueimpCanvasToBlob.dataURLtoBlob;
Exporter.exportedStyles = [/^font/, /^color/, /^opacity$/];
Exporter.svgProperties = [/^stroke/, /^fill/, /^text/];

},{"./d3":67,"./i18n/i18n":80,"./loading-indicator":93,"blueimp-canvas-to-blob":"blueimp-canvas-to-blob","file-saver":"file-saver","sd-utils":"sd-utils"}],74:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FileLoader = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _i18n = require('./i18n/i18n');

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var FileLoader = exports.FileLoader = function () {
    function FileLoader() {
        _classCallCheck(this, FileLoader);
    }

    _createClass(FileLoader, null, [{
        key: 'openFile',
        value: function openFile(callback) {
            var input = document.getElementById('sd-file-input');
            input.onchange = loadFile;

            input.click();

            function loadFile() {

                var file, fr;

                if (typeof window.FileReader !== 'function') {
                    alert(_i18n.i18n.t('error.fileApiNotSupported'));
                    return;
                }
                input = document.getElementById('sd-file-input');
                if (!input.files) {
                    alert(_i18n.i18n.t('error.inputFilesProperty'));
                    return;
                }

                if (!input.files[0]) {
                    return;
                }

                file = input.files[0];
                fr = new FileReader();
                fr.onload = receivedText;
                fr.readAsText(file);

                function receivedText(e) {
                    callback(e.target.result);
                    input.value = null;
                }
            }
        }
    }]);

    return FileLoader;
}();

},{"./i18n/i18n":80}],75:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var InputField = exports.InputField = function () {
    function InputField(id, name, type, label, valueAccessor, validator, options, parser, styleClass) {
        _classCallCheck(this, InputField);

        this.name = name;
        this.type = type;
        this.valueAccessor = valueAccessor;
        this.validator = validator;
        this.id = id;
        this.label = label;
        this.options = options;
        this.parser = parser;
        this.styleClass = styleClass;
    }

    _createClass(InputField, [{
        key: "getValue",
        value: function getValue() {
            return this.valueAccessor.get();
        }
    }, {
        key: "setValue",
        value: function setValue(val) {
            return this.valueAccessor.set(val);
        }
    }, {
        key: "parse",
        value: function parse(val) {
            if (this.parser) {
                return this.parser(val);
            }
            return val;
        }
    }]);

    return InputField;
}();

},{}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PathValueAccessor = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var PathValueAccessor = exports.PathValueAccessor = function () {
    function PathValueAccessor(sourceObject, path) {
        _classCallCheck(this, PathValueAccessor);

        this.sourceObject = sourceObject;
        this.path = path;
    }

    _createClass(PathValueAccessor, [{
        key: "get",
        value: function get() {
            return _sdUtils.Utils.get(this.sourceObject, this.path);
        }
    }, {
        key: "set",
        value: function set(v) {
            return _sdUtils.Utils.set(this.sourceObject, this.path, v);
        }
    }]);

    return PathValueAccessor;
}();

},{"sd-utils":"sd-utils"}],77:[function(require,module,exports){
module.exports={
    "toolbar": {
        "newDiagram": "Neues Diagramm",
        "openDiagram": "Diagramm öffnen",
        "saveDiagram": "Aktuelles Diagramm speichern",
        "export":{
            "label": "Exportieren nach",
            "png": "Png",
            "svg": "Svg",
            "pdf": "Pdf"
        },
        "layout":{
            "label": "Layout",
            "manual": "Manual",
            "tree": "Baum",
            "cluster": "Cluster"
        },
        "viewMode": {
            "label": "Aussicht",
            "options": {
                "criterion1":"Kriterium 1",
                "criterion2":"Kriterium 2",
                "twoCriteria":"Zwei Kriterien"
            }
        },
        "objectiveRule":{
            "label": "Regel",
            "options": {
                "expected-value-maximization":"max",
                "expected-value-minimization":"min",
                "maxi-min":"maxi-min",
                "maxi-max":"maxi-max",
                "mini-min":"mini-min",
                "mini-max":"mini-max",
                "min-max":"min-max",
                "max-min":"max-min",
                "min-min": "min-min",
                "max-max": "max-max"
            }
        },
        "undo": "Rückgängig machen",
        "redo": "Wiederholen",
        "settings": "Einstellungen",
        "about": "Über",
        "sensitivityAnalysis": "Sensitivitätsanalyse",
        "recompute": "Neu Berechnen"
    },
    "node":{
        "name": "Beschreibung"
    },
    "edge":{
        "name": "Beschreibung",
        "payoff": "Auszahlung",
        "probability": "Wahrscheinlichkeit"
    },
    "text":{
        "value": "Text"
    },
    "leagueTableDialog":{
        "title": "Rangliste",
        "buttons": {
            "downloadCsv": "CSV Herunterladen"
        }
    },
    "leagueTable": {
        "headers":{
            "policyNo": "Regel #",
            "policy": "Regel",
            "comment": "Kommentar"
        },
        "comment":{
            "dominatedBy": "Dominiert (durch#{{policy}})",
            "extendedDominatedBy": "Erweitert-dominiert (durch #{{policy1}} und #{{policy2}})",
            "incratio": "Inkrementelles Verhältnis={{incratio}}"
        },
        "plot":{
            "groups":{
                "highlighted": "Markiert",
                "highlighted-default": "Empfohlen (für Standard-WTP)",
                "extended-dominated" : "Erweitert-dominiert",
                "dominated": "Dominiert",
                "default": "Andere"
            },
            "tooltip":{
                "gradientArrow1": "Richtung von{{name}} Optimierung",
                "gradientArrow2": "Richtung von {{name}} Optimierung",
                "dominatedRegion": "Dominierte Region"
            },
            "legend":{
                "dominatedRegion": "Graumarkiert Bereich stellt dominierte Region dar",
                "gradientArrows": "Pfeile zeigen Verbesserungsrichtung an"
            }
        }
    },
    "sensitivityAnalysisDialog":{
        "title": "Sensitivitätsanalyse",
        "buttons": {
            "runJob": "Lauf",
            "stopJob": "Stop",
            "terminateJob": "Beenden",
            "resumeJob": "Fortsetzen",
            "downloadCsv": "CSV Herunterladen",
            "back": "Zurück",
            "clear": "Löschen"
        }
    },
    "jobParametersBuilder": {
        "buttons": {
            "removeParameterValue": "Entfernen",
            "addParameterValue": "Hinzufügen"
        }
    },
    "jobResultTable":{
        "tooltip": {
            "multiplePoliciesInCell": "{{number}} Grundregeln"
        },
        "pivot": {
            "aggregators":{
                "maximum": "Maximum",
                "minimum": "Minimum"
            },
            "renderers":{
                "heatmap": "Wärmekarte"
            }
        },
        "policyPreview": "Grundregel Vorschau"
    },
    "job":{
        "sensitivity-analysis":{
            "name": "N-Wege-Sensitivitätsanalyse",
            "param":{
                "ruleName": "Regelname",
                "extendedPolicyDescription": {
                    "label": "Erweiterte Grundregeln Beschreibung"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Name"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Länge"
                    },
                    "step": {
                        "label": "Schritt"
                    }
                }
            },
            "errors":{
                "computations": "Fehler bei der Sensitivitätsanalyse für folgende Parameter:"
            },
            "warnings": {
                "largeScenariosNumber": "Anzahl der definierten Szenarien größer als {{numberFormatted}}. Sensitivitätsanalyse könnte nicht dürchgefuhrt werden oder wird sehr langsam.",
                "largeParametersNumber": "Anzahl der Parameter größer als {{number}}. Die Anzeige der Resultate der Sensitivitätsanalyse könnte fehlschlagen oder sehr langsam sein."
            }
        },
        "tornado-diagram":{
            "name": "Tornado-diagramm",
            "param":{
                "ruleName": "Regelname",
                "extendedPolicyDescription": {
                    "label": "Erweiterte Grundregeln Beschreibung"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Name"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Länge"
                    },
                    "step": {
                        "label": "Schritt"
                    },
                    "defaultValue": {
                        "label": "Standardwert"
                    }

                }
            },
            "errors":{
                "computations": "Fehler bei der Sensitivitätsanalyse für folgende Parameter:"
            },
            "warnings": {
                "largeScenariosNumber": "Anzahl der definierten Szenarien größer als {{numberFormatted}}. Sensitivitätsanalyse könnte nicht dürchgefuhrt werden oder wird sehr langsam.",
                "largeParametersNumber": "Anzahl der Parameter größer als {{number}}. Die Anzeige der Resultate der Sensitivitätsanalyse könnte fehlschlagen oder sehr langsam sein."
            },
            "plot":{
                "legend":{
                    "low": "Verringerung",
                    "high": "Erhöhung"
                },
                "xAxisTitle": "Auszahlen"
            }
        },
        "probabilistic-sensitivity-analysis":{
            "name": "Probabilistische Sensitivitätsanalyse",
            "param":{
                "ruleName": "Regelname",
                "numberOfRuns": {
                    "label": "Anzahl der Läufe"
                },
                "extendedPolicyDescription": {
                    "label": "Erweiterte Grundregel Beschreibung"
                },
                "variables": {
                    "label": "Variablen",
                    "name": {
                        "label": "Name"
                    },
                    "formula": {
                        "label": "Formel",
                        "help": "Wählen Sie die Formelvorlage aus dem Menü aus oder schreiben Sie benutzerdefinierten Code"
                    }
                }
            },
            "errors":{
                "computations": "Berechnungsfehler der Sensitivitätsanalyse für folgende Parameter:",
                "param-computation": "Fehler beim Berechnen von Parameterwerten:"
            },
            "warnings": {
                "largeScenariosNumber": "Anzahl der definierten Szenarien größer als {{numberFormatted}}. Sensitivitätsanalyse könnte nicht dürchgefuhrt werden oder wird sehr langsam."
            }
        },
        "spider-plot": {
            "name": "Netzdiagramm",
            "param": {
                "ruleName": "Regelname",
                "extendedPolicyDescription": {
                    "label": "Erweiterte Grundregel Beschreibung"
                },
                "percentageChangeRange": {
                    "label": "+/- prozentuale Veränderung zum Berücksichtigen"
                },
                "length": {
                    "label": "Anzahl der zu testenden Werte",
                    "help": "Anzahl der zu testenden Werte (an einer Seite des Bereichs)"
                },
                "variables": {
                    "label": "Variablen",
                    "name": {
                        "label": "Name"
                    },
                    "defaultValue": {
                        "label": "Standardwert"
                    }
                }
            },
            "errors":{
                "computations": "Berechnungsfehler der Sensitivitätsanalyse für folgende Parameter:"
            },
            "warnings": {
                "largeScenariosNumber": "Anzahl der definierten Szenarien größer als {{numberFormatted}}. Sensitivitätsanalyse könnte nicht dürchgefuhrt werden oder wird sehr langsam."
            },
            "plot": {
                "legend": {},
                "xAxisTitle": "Prozentuale Veränderung",
                "yAxisTitle": "Auszahlen"
            }
        },
        "league-table":{
            "name": "Rangliste"
        },
        "errors":{
            "generic": "Fehler bei der Sensitivitätsanalyse: {{message}}",
            "params": "Inkorrekte {{jobName}} Parametern"
        }
    },
    "settingsDialog":{
        "title": "Einstellungen",
        "general":{
            "title": "Allgemein",
            "fontSize": "Schriftgröße",
            "fontFamily": "Schriftfamilie",
            "fontWeight": "Schriftgewicht",
            "fontStyle": "Schriftstil",
            "numberFormatLocale": "Zahlenformat Gebietsschema"
        },
        "payoff1":{
            "title": "Auszahlung 1 Zahlenformat",
            "currency": "Währung",
            "currencyDisplay": "Währungsanzeige",
            "style": "Stil",
            "minimumFractionDigits": "Minimale Bruchzahlen",
            "maximumFractionDigits": "Maximale Bruchzahlen",
            "useGrouping": "Gruppierung Separatoren verwenden"
        },
        "payoff2":{
            "title": "Auszahlung 2 Zahlenformat",
            "currency": "Währung",
            "currencyDisplay": "Währungsanzeige",
            "style": "Stil",
            "minimumFractionDigits": "Minimale Bruchzahlen",
            "maximumFractionDigits": "Maximale Bruchzahlen",
            "useGrouping": "Gruppierung Separatoren verwenden"
        },
        "probability":{
            "title": "Wahrscheinlichkeit Zahlenformat",
            "style": "Stil",
            "minimumFractionDigits": "Minimale Bruchzahlen",
            "maximumFractionDigits": "Maximale Bruchzahlen",
            "fontSize": "Schriftgröße",
            "color": "Farbe"
        },
        "node":{
            "title": "Knoten",
            "strokeWidth": "Strichbreite",
            "optimal":{
                "title": "Optimal",
                "stroke": "Farbe",
                "strokeWidth": "Strichbreite"
            },
            "label": {
                "title": "Beschreibung",
                "fontSize": "Beschreibung Schriftgröße",
                "color": "Beschreibungsfarbe"
            },
            "payoff": {
                "title": "Auszahlung",
                "fontSize": "Schriftgröße",
                "color": "Farbe",
                "negativeColor": "Negative Farbe"
            },
            "decision": {
                "title": "Entscheidungsknoten",
                "fill": "Füllfarbe",
                "stroke": "Strichfarbe",
                "selected": {
                    "fill": "Ausgewählte Füllfarbe"
                }
            },
            "chance": {
                "title": "Zufall Knoten",
                "fill": "Füllfarbe",
                "stroke": "Strichfarbe",
                "selected": {
                    "fill": "Ausgewählte Füllfarbe"
                }
            },
            "terminal":{
                "title": "Endknoten",
                "fill": "Füllfarbe",
                "stroke": "Strichfarbe",
                "selected": {
                    "fill": "Ausgewählte Füllfarbe"
                },
                "payoff": {
                    "title": "Auszahlung",
                    "fontSize": "Schriftgröße",
                    "color": "Farbe",
                    "negativeColor": "Negative Farbe"
                }
            }
        },
        "edge":{
            "title": " Zweig",
            "stroke": "Farbe",
            "strokeWidth": "Strichbreite",
            "optimal":{
                "title": "Optimal",
                "stroke": "Farbe",
                "strokeWidth": "Strichbreite"
            },
            "selected":{
                "title": "Ausgewählt",
                "stroke": "Farbe",
                "strokeWidth": "Strichbreite"
            },
            "label": {
                "title": "Beschreibung",
                "fontSize": "Schriftgröße",
                "color": "Farbe"
            },
            "payoff":{
                "title": "Auszahlung",
                "fontSize": "Schriftgröße",
                "color": "Farbe",
                "negativeColor": "Negative Farbe"
            }
        },
        "diagramTitle":{
            "title": "Diagrammtitel",
            "fontSize": "Schriftgröße",
            "fontWeight": "Schriftgewicht",
            "fontStyle": "Schriftstil",
            "color": "Farbe",
            "margin":{
                "title": "Rand",
                "top": "Oben",
                "bottom": "Unten"
            },
            "description":{
                "title": "Untertitel (Diagrammbeschreibung)",
                "show": "Anzeigen",
                "fontSize": "Schriftgröße",
                "fontWeight": "Schriftgewicht",
                "fontStyle": "Schriftstil",
                "color": "Farbe",
                "marginTop": "Rand Oben"
            }
        },
        "leagueTable": {
            "title": "Rangliste",
            "plot": {
                "title": "Plot",
                "maxWidth": "Max Breite",
                "highlightedColor": "Farbe der markierten Regel",
                "highlightedDefaultColor": "Empfohlene Regel(für Standard-WTP) Farbe",
                "extendedDominatedColor": "Farbe der erweitert-dominierten Regel",
                "dominatedColor": "Farbe der dominierten Regel",
                "defaultColor": "Farbe der anderen Regeln"
            }
        },
        "other":{
            "title": "Weitere",
            "disableAnimations": "Animationen Deaktivieren",
            "forceFullEdgeRedraw": "Erzwingt vollständige Neuzeichnung der Zweige",
            "hideLabels": "Verstecke Beschreibung",
            "hidePayoffs": "Verstecke Auszahlungen",
            "hideProbabilities": "Verstecke Wahrscheinlichkeiten",
            "raw": "Rau"
        }
    },
    "aboutDialog":{
        "title": "Über"
    },
    "help":{
        "header": "Hilfe",
        "mouse": {
            "header":"Mausaktionen:",
            "list":{
                "1": "Linke Maustaste: Knoten/Zweig Auswahl",
                "2": "Rechte Maustaste: Kontextmenü (Hinzufügen / Manipulieren von Knoten)",
                "3": "Linke Maus Doppelklick: Kontextmenü"
            }
        },
        "keyboard": {
            "header":"Tastatur:",
            "list":{
                "1": "Del: ausgewählte Knoten Löschen",
                "2": "Ctrl-C/X: ausgewählte Knoten Kopieren/Ausschneiden",
                "3": "Ctrl-V: kopierte Knoten als Teilbaum ausgewähltes Knotens einfügen",
                "4": "Ctrl-Y/Z: Rückgängig/Wiederholen",
                "5": "Ctrl-Alt-D/C/T: Neue Entscheidungs/Zufall/Endsknoten als Unterknoten von <strong>ausgewähltem Knoten</strong>",
                "6": "Ctrl-Alt-D/C: Neue Entscheidungs/Zufall Knoten in <strong>ausgewählten Zweig </strong> Injizieren"
            }
        },
        "docs": "Die Dokumentation von SilverDecisions ist unter <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/Documentation\" target=\"_blank\">here</a> verfügbar"
    },
    "definitionsDialog":{
        "title": "Variablendefinitionen",
        "scope": {
            "global": "Globaler Anwendungsbereich",
            "node": "Gewählten Knoten und Teilbaum Anwendungsbereich"
        },
        "buttons":{
            "recalculate": "Neu berechnen"
        },
        "evaluatedVariables": "Ausgewertete Variablen"
    },
    "sidebarDefinitions":{
        "scope":{
            "label": "Variabel Anwendungsbereich:",
            "global": "Globaler",
            "node": "Gewählten Knoten und Teilbaum"
        },
        "header": "Variablen",
        "code": "Code",
        "buttons":{
            "openDialog" : "Dialog Öffnen",
            "recalculate": "Neu berechnen"
        },
        "evaluatedVariables": "Ausgewertete Variablen"
    },
    "multipleCriteria":{
        "header": "Mehrere Kriterien",
        "defaultMaximizedCriterionName": "Effekt",
        "defaultMinimizedCriterionName": "Kosten",
        "nameOfCriterion1": "Name des Kriteriums 1",
        "nameOfCriterion2": "Name des Kriteriums 2",
        "defaultCriterion1Weight": "Default 1. Kriterium Gewicht",
        "weightLowerBound": "Gewicht untere Grenze",
        "weightUpperBound": "Gewicht obere Grenze",
        "buttons":{
            "showLeagueTable" : "Rangliste anzeigen",
            "flip": "Flip"
        }
    },
    "layoutOptions":{
        "header": "Layout",
        "marginHorizontal": "Horizontaler Rand",
        "marginVertical": "Vertikaler Rand",
        "nodeSize": "Knotengröße",
        "edgeSlantWidthMax": "Kantenschräge (max)",
        "gridWidth": "Breite",
        "gridHeight": "Höhe"
    },
    "diagramDetails":{
        "header": "Einzelheiten",
        "title" : "Titel",
        "description" : "Beschreibung"
    },
    "objectProperties":{
        "header":{
            "node":{
                "decision":"Entscheidungsknoten",
                "chance":"Zufall Knoten",
                "terminal":"Endknoten"
            },
            "edge": "Zweig",
            "text": "Schwimmender Text"
        },
        "childrenProperties":{
            "node":{
                "header": "Verbindungen",
                "child": {
                    "header": "Zweig #{{number}}"
                }
            }
        }
    },
    "confirm":{
        "newDiagram": "Möchten Sie das aktuelle Diagramm wirklich löschen? Alle nicht gespeicherten Daten werden verloren.",
        "openDiagram": "Sind Sie sicher? Alle nicht gespeicherten Diagrammdaten werden verloren.",
        "beforeunload": "Sind Sie sicher, dass Sie SilverDecisions schließen möchten? Alle nicht gespeicherten Diagrammdaten werden verloren."
    },
    "error":{
        "jsonParse": "Fehler beim Analysieren der Datei!",
        "fileApiNotSupported":"Die Datei-API wird in diesem Browser noch nicht unterstützt.",
        "inputFilesProperty":"Ihr Browser scheint die `files`-Eigenschaft der Dateieingaben nicht zu unterstützen.",
        "notSilverDecisionsFile":"Keine SilverDecisions-Datei!",
        "incorrectVersionFormat": "Falsches Format der Versionszeichenfolge!",
        "fileVersionNewerThanApplicationVersion": "Version der Datei ist neuer als Version des Softwares. Einige Funktionen möglicherweise fehlen.",
        "objectiveComputationFailure": "Fehler beim Berechnen von Objektiven!",
        "diagramDrawingFailure": "Fehler beim Zeichnen des Diagramms!",
        "malformedData":"Fehler beim Lesen der Baumdaten!",
        "pngExportNotSupported": "Der Export nach PNG wird in Ihrem Browser nicht unterstützt.",
        "pngExportNotSupportedIE": "Der Export nach PNG wird in Internet Explorer nicht unterstützt.",
        "svgExportNotSupported": "Der Export nach SVG wird in Ihrem Browser nicht unterstützt.",
        "pdfExportNotSupported": "Der Export nach PDF wird in Ihrem Browser nicht unterstützt.",
        "incorrectPayoffNumberFormatOptions": "Falsche Auszahlungsformat Optionen",
        "incorrectProbabilityNumberFormatOptions": "Falsche Wahrscheinlichkeitsformat Optionen",
        "incorrectNumberFormatOptions": "Falsche Zahlenformat, die Standardeinstellungen angewendet.",
        "jsPDFisNotIncluded": "jsPDF ist nicht enthalten!",
        "serverSideExportRequestFailure": "Export Server Anfrage fehlgeschlagen!"
    }
}

},{}],78:[function(require,module,exports){
module.exports={
    "toolbar": {
        "newDiagram": "New diagram",
        "openDiagram": "Open existing diagram",
        "saveDiagram": "Save current diagram",
        "export":{
            "label": "Export to",
            "png": "Png",
            "svg": "Svg",
            "pdf": "Pdf"
        },
        "layout":{
            "label": "Layout",
            "manual": "Manual",
            "tree": "Tree",
            "cluster": "Cluster"
        },
        "viewMode": {
            "label": "View",
            "options": {
                "criterion1":"Criterion 1",
                "criterion2":"Criterion 2",
                "twoCriteria":"Two criteria"
            }
        },
        "objectiveRule":{
            "label": "Rule",
            "options": {
                "expected-value-maximization":"max",
                "expected-value-minimization":"min",
                "maxi-min":"maxi-min",
                "maxi-max":"maxi-max",
                "mini-min":"mini-min",
                "mini-max":"mini-max",
                "min-max":"min-max",
                "max-min":"max-min",
                "min-min": "min-min",
                "max-max": "max-max"
            }
        },
        "undo": "Undo",
        "redo": "Redo",
        "settings": "Settings",
        "about": "About",
        "sensitivityAnalysis": "Sensitivity analysis",
        "recompute": "Recompute"
    },
    "node":{
        "name": "Label"
    },
    "edge":{
        "name": "Label",
        "payoff": "Payoff",
        "probability": "Probability"
    },
    "text":{
        "value": "Text"
    },
    "leagueTableDialog":{
        "title": "League table",
        "buttons": {
            "downloadCsv": "Download CSV"
        }
    },
    "leagueTable": {
        "headers":{
            "policyNo": "Policy #",
            "policy": "Policy",
            "comment": "Comment"
        },
        "comment":{
            "dominatedBy": "dominated (by #{{policy}})",
            "extendedDominatedBy": "extended-dominated (by #{{policy1}} and #{{policy2}})",
            "incratio": "incremental ratio={{incratio}}"
        },
        "plot":{
            "groups":{
                "highlighted": "Recommended (for some WTP in range)",
                "highlighted-default": "Recommended (for default WTP)",
                "extended-dominated" : "Extended-dominated",
                "dominated": "Dominated",
                "default": "Other"
            },
            "tooltip":{
                "gradientArrow1": "Direction of {{name}} optimization",
                "gradientArrow2": "Direction of {{name}} optimization",
                "dominatedRegion": "Not recommended region"
            },
            "legend":{
                "dominatedRegion": "Grey area highlights not recommended region",
                "gradientArrows": "Arrows indicate improvement direction"
            }
        }
    },
    "sensitivityAnalysisDialog":{
        "title": "Sensitivity analysis",
        "buttons": {
            "runJob": "Run",
            "stopJob": "Stop",
            "terminateJob": "Terminate",
            "resumeJob": "Resume",
            "downloadCsv": "Download CSV",
            "back": "Back",
            "clear": "Clear"
        }
    },
    "jobParametersBuilder": {
        "buttons": {
            "removeParameterValue": "Remove",
            "addParameterValue": "Add"
        }
    },
    "jobResultTable":{
        "tooltip": {
            "multiplePoliciesInCell": "{{number}} policies"
        },
        "pivot": {
            "aggregators":{
                "maximum": "Maximum",
                "minimum": "Minimum"
            },
            "renderers":{
                "heatmap": "Heatmap"
            }
        },
        "policyPreview": "policy preview"
    },
    "job":{
        "sensitivity-analysis":{
            "name": "N-way sensitivity analysis",
            "param":{
                "ruleName": "Rule name",
                "extendedPolicyDescription": {
                    "label": "Extended policy description"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Name"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Length"
                    },
                    "step": {
                        "label": "Step"
                    }
                }
            },
            "errors":{
                "computations": "Error in sensitivity analysis computations for the following parameters:"
            },
            "warnings": {
                "largeScenariosNumber": "Number of defined scenarios larger than {{numberFormatted}}. Sensitivity analysis might fail to compute or be very slow.",
                "largeParametersNumber": "Number of parameters larger than {{number}}. Sensitivity analysis display might fail or be very slow."
            }
        },
        "tornado-diagram":{
            "name": "Tornado diagram",
            "param":{
                "ruleName": "Rule name",
                "extendedPolicyDescription": {
                    "label": "Extended policy description"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Name"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Length"
                    },
                    "step": {
                        "label": "Step"
                    },
                    "defaultValue": {
                        "label": "Default value"
                    }
                }
            },
            "errors":{
                "computations": "Error in sensitivity analysis computations for the following parameters:"
            },
            "warnings": {
                "largeScenariosNumber": "Number of defined scenarios larger than {{numberFormatted}}. Sensitivity analysis might fail to compute or be very slow.",
                "largeParametersNumber": "Number of parameters larger than {{number}}. Sensitivity analysis display might fail or be very slow."
            },
            "plot":{
                "legend":{
                    "low": "Decrease",
                    "high": "Increase"
                },
                "xAxisTitle": "Payoff"
            }
        },
        "probabilistic-sensitivity-analysis":{
            "name": "Probabilistic sensitivity analysis",
            "param":{
                "ruleName": "Rule name",
                "numberOfRuns": {
                    "label": "Number of runs"
                },
                "extendedPolicyDescription": {
                    "label": "Extended policy description"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Name"
                    },
                    "formula": {
                        "label": "Formula",
                        "help": "Select formula template from the menu or write custom code"
                    }
                }
            },
            "errors":{
                "computations": "Error in sensitivity analysis computations for the following parameters:",
                "param-computation": "Error computing parameter values:"
            },
            "warnings": {
                "largeScenariosNumber": "Number of defined scenarios larger than {{numberFormatted}}. Sensitivity analysis might fail to compute or be very slow."
            }
        },
        "spider-plot": {
            "name": "Spider plot",
            "param": {
                "ruleName": "Rule name",
                "extendedPolicyDescription": {
                    "label": "Extended policy description"
                },
                "percentageChangeRange": {
                    "label": "+/- percentage change to consider"
                },
                "length": {
                    "label": "Number of values to test",
                    "help": "Number of values to test (in one side of range)"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Name"
                    },
                    "defaultValue": {
                        "label": "Default value"
                    }
                }
            },
            "errors": {
                "computations": "Error in sensitivity analysis computations for the following parameters:"
            },
            "warnings": {
                "largeScenariosNumber": "Number of defined scenarios larger than {{numberFormatted}}. Sensitivity analysis might fail to compute or be very slow."
            },
            "plot": {
                "legend": {},
                "xAxisTitle": "Percentage change",
                "yAxisTitle": "Payoff"
            }
        },
        "league-table":{
            "name": "League table"
        },
        "errors":{
            "generic": "Error in {{jobName}} computations: {{message}}",
            "params": "Incorrect {{jobName}} parameters"
        }
    },
    "settingsDialog":{
        "title": "Settings",
        "general":{
            "title": "General",
            "fontSize": "Font size",
            "fontFamily": "Font family",
            "fontWeight": "Font weight",
            "fontStyle": "Font style",
            "numberFormatLocale": "Number format locale"
        },
        "payoff1":{
            "title": "Payoff 1 number format",
            "currency": "Currency",
            "currencyDisplay": "Currency display",
            "style": "Style",
            "minimumFractionDigits": "Minimum fraction digits",
            "maximumFractionDigits": "Maximum fraction digits",
            "useGrouping": "Use grouping separators"
        },
        "payoff2":{
            "title": "Payoff 2 number format",
            "currency": "Currency",
            "currencyDisplay": "Currency display",
            "style": "Style",
            "minimumFractionDigits": "Minimum fraction digits",
            "maximumFractionDigits": "Maximum fraction digits",
            "useGrouping": "Use grouping separators"
        },
        "probability":{
            "title": "Probability number format",
            "style": "Style",
            "minimumFractionDigits": "Minimum fraction digits",
            "maximumFractionDigits": "Maximum fraction digits",
            "fontSize": "Font size",
            "color": "Color"
        },
        "node":{
            "title": "Node",
            "strokeWidth": "Stroke width",
            "optimal":{
                "title": "Optimal",
                "stroke": "Color",
                "strokeWidth": "Stroke width"
            },
            "label": {
                "title": "Label",
                "fontSize": "Label font size",
                "color": "Label color"
            },
            "payoff": {
                "title": "Payoff",
                "fontSize": "Font size",
                "color": "Color",
                "negativeColor": "Negative color"
            },
            "decision": {
                "title": "Decision Node",
                "fill": "Fill color",
                "stroke": "Stroke color",
                "selected": {
                    "fill": "Selected fill color"
                }
            },
            "chance": {
                "title": "Chance Node",
                "fill": "Fill color",
                "stroke": "Stroke color",
                "selected": {
                    "fill": "Selected fill color"
                }
            },
            "terminal":{
                "title": "Terminal Node",
                "fill": "Fill color",
                "stroke": "Stroke color",
                "selected": {
                    "fill": "Selected fill color"
                },
                "payoff": {
                    "title": "Payoff",
                    "fontSize": "Font size",
                    "color": "Color",
                    "negativeColor": "Negative color"
                }
            }
        },
        "edge":{
            "title": "Edge",
            "stroke": "Color",
            "strokeWidth": "Stroke width",
            "optimal":{
                "title": "Optimal",
                "stroke": "Color",
                "strokeWidth": "Stroke width"
            },
            "selected":{
                "title": "Selected",
                "stroke": "Color",
                "strokeWidth": "Stroke width"
            },
            "label": {
                "title": "Label",
                "fontSize": "Font size",
                "color": "Color"
            },
            "payoff":{
                "title": "Payoff",
                "fontSize": "Font size",
                "color": "Color",
                "negativeColor": "Negative color"
            }
        },
        "diagramTitle":{
            "title": "Diagram title",
            "fontSize": "Font size",
            "fontWeight": "Font weight",
            "fontStyle": "Font style",
            "color": "Color",
            "margin":{
                "title": "Margin",
                "top": "Top",
                "bottom": "Bottom"
            },
            "description":{
                "title": "Subtitle (diagram description)",
                "show": "Show",
                "fontSize": "Font size",
                "fontWeight": "Font weight",
                "fontStyle": "Font style",
                "color": "Color",
                "marginTop": "Margin top"
            }
        },
        "leagueTable": {
            "title": "League Table",
            "plot": {
                "title": "Plot",
                "maxWidth": "Max width",
                "highlightedColor": "Recommended (for some WTP in range) policy color",
                "highlightedDefaultColor": "Recommended (for default WTP) policy color",
                "extendedDominatedColor": "Extended dominated policy color",
                "dominatedColor": "Dominated policy color",
                "defaultColor": "Other policies color"
            }
        },
        "other":{
            "title": "Other",
            "disableAnimations": "Disable animations",
            "forceFullEdgeRedraw": "Force full redraw of edges",
            "hideLabels": "Hide labels",
            "hidePayoffs": "Hide payoffs",
            "hideProbabilities": "Hide probabilities",
            "raw": "Raw"
        }
    },
    "aboutDialog":{
        "title": "About"
    },
    "help":{
        "header": "Help",
        "mouse": {
            "header":"Mouse actions:",
            "list":{
                "1": "left mouse button: node/edge selection",
                "2": "right mouse button: context menu (adding/manipulating nodes)",
                "3": "left mouse dbclick: context menu"
            }
        },
        "keyboard": {
            "header":"Keyboard:",
            "list":{
                "1": "Del: delete selected nodes",
                "2": "Ctrl-C/X: copy/cut selected nodes",
                "3": "Ctrl-V: paste copied nodes as a subtree of a selected node",
                "4": "Ctrl-Y/Z: undo/redo",
                "5": "Ctrl-Alt-D/C/T: add new Decision/Chance/Terminal subnode of a <strong>selected node</strong>",
                "6": "Ctrl-Alt-D/C: inject new Decision/Chance node into a <strong>selected edge</strong>"
            }
        },
        "docs": "Documentation of SilverDecisions is available <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/Documentation\" target=\"_blank\">here</a>"
    },
    "definitionsDialog":{
        "title": "Variable definitions",
        "scope": {
            "global": "global scope",
            "node": "selected node and subtree scope"
        },
        "buttons":{
            "recalculate": "Recalculate"
        },
        "evaluatedVariables": "Evaluated variables"
    },
    "sidebarDefinitions":{
        "scope":{
            "label": "Variable scope:",
            "global": "global",
            "node": "selected node and subtree"
        },
        "header": "Variables",
        "code": "Code",
        "buttons":{
            "openDialog" : "Open dialog",
            "recalculate": "Recalculate"
        },
        "evaluatedVariables": "Evaluated variables"
    },
    "multipleCriteria":{
        "header": "Multiple criteria",
        "defaultMaximizedCriterionName": "Effect",
        "defaultMinimizedCriterionName": "Cost",
        "nameOfCriterion1": "Name for criterion 1",
        "nameOfCriterion2": "Name for criterion 2",
        "defaultCriterion1Weight": "Default 1st criterion weight",
        "weightLowerBound": "Weight lower bound",
        "weightUpperBound": "Weight upper bound",
        "buttons":{
            "showLeagueTable" : "Show league table",
            "flip": "Flip"
        }
    },
    "layoutOptions":{
        "header": "Layout",
        "marginHorizontal": "Horizontal Margin",
        "marginVertical": "Vertical Margin",
        "nodeSize": "Node size",
        "edgeSlantWidthMax": "Edge slant (max)",
        "gridWidth": "Width",
        "gridHeight": "Height"
    },
    "diagramDetails":{
        "header": "Details",
        "title" : "Title",
        "description" : "Description"
    },
    "objectProperties":{
        "header":{
            "node":{
                "decision":"Decision Node",
                "chance":"Chance Node",
                "terminal":"Terminal Node"
            },
            "edge": "Edge",
            "text": "Floating text"
        },
        "childrenProperties":{
            "node":{
                "header": "Connections",
                "child": {
                    "header": "Edge #{{number}}"
                }
            }
        }
    },
    "confirm":{
        "newDiagram": "Do you really want to clear current diagram? All unsaved data will be lost.",
        "openDiagram": "Are you sure? All unsaved diagram data will be lost.",
        "beforeunload": "Are you sure you want to close SilverDecisions? All unsaved diagram data will be lost."
    },
    "error":{
        "jsonParse": "Error parsing file!",
        "fileApiNotSupported":"The file API isn't supported on this browser yet.",
        "inputFilesProperty":"Your browser doesn't seem to support the `files` property of file inputs.",
        "notSilverDecisionsFile":"Not a SilverDecisions file!",
        "incorrectVersionFormat": "Incorrect format of version string!",
        "fileVersionNewerThanApplicationVersion": "Version in file is newer than version of the application. Some features may be missing.",
        "objectiveComputationFailure": "Error while computing objective!",
        "diagramDrawingFailure": "Error while drawing diagram!",
        "malformedData":"Error reading tree data!",
        "pngExportNotSupported": "Export to PNG is not supported in your browser.",
        "pngExportNotSupportedIE": "Export to PNG not supported in Internet Explorer.",
        "svgExportNotSupported": "Export to SVG is not supported in your browser.",
        "pdfExportNotSupported": "Export to PDF is not supported in your browser.",
        "incorrectPayoffNumberFormatOptions": "Incorrect payoff number format options",
        "incorrectProbabilityNumberFormatOptions": "Incorrect probability number format options",
        "incorrectNumberFormatOptions": "Incorrect number format options, using default.",
        "jsPDFisNotIncluded": "jsPDF is not included!",
        "serverSideExportRequestFailure": "Export Server request failed!"
    }
}

},{}],79:[function(require,module,exports){
module.exports={
    "toolbar": {
        "newDiagram": "Nouveau diagramme",
        "openDiagram": "Ouvrir le diagramme existant",
        "saveDiagram": "Enregistrer le diagramme actuel",
        "export":{
            "label": "Exporter vers",
            "png": "Png",
            "svg": "Svg",
            "pdf": "Pdf"
        },
        "layout":{
            "label": "Disposition",
            "manual": "Manuel",
            "tree": "Arbre",
            "cluster": "Grappe"
        },
        "viewMode": {
            "label": "Vue",
            "options": {
                "criterion1":"Critère 1",
                "criterion2":"Critère 2",
                "twoCriteria":"Deux critères"
            }
        },
        "objectiveRule":{
            "label": "Regle",
            "options": {
                "expected-value-maximization":"max",
                "expected-value-minimization":"min",
                "maxi-min":"maxi-min",
                "maxi-max":"maxi-max",
                "mini-min":"mini-min",
                "mini-max":"mini-max",
                "min-max":"min-max",
                "max-min":"max-min",
                "min-min": "min-min",
                "max-max": "max-max"
            }
        },
        "undo": "Annuler",
        "redo": "Refaire",
        "settings": "Parametres",
        "about": "A propos",
        "sensitivityAnalysis": "Analyse de sensibilité",
        "recompute": "Recalculer"
    },
    "node":{
        "name": "Étiquette"
    },
    "edge":{
        "name": "Étiquette",
        "payoff": "Avantage",
        "probability": "Probabilité"
    },
    "text":{
        "value": "Texte"
    },
    "leagueTableDialog":{
        "title": "Classement",
        "buttons": {
            "downloadCsv": "Télécharger CSV"
        }
    },
    "leagueTable": {
        "headers":{
            "policyNo": "Règle #",
            "policy": "Règle",
            "comment": "Commentaire"
        },
        "comment":{
            "dominatedBy": "Dominé (par #{{policy}})",
            "extendedDominatedBy": "Étendu-dominé (par #{{policy1}} et #{{policy2}})",
            "incratio": "Ratio incrémental={{incratio}}"
        },
        "plot":{
            "groups":{
                "highlighted": "Surligné",
                "highlighted-default": "Recommandée (pour WTP par défaut)",
                "extended-dominated" : "Étendu-dominé",
                "dominated": "Dominé",
                "default": "Autre"
            },
            "tooltip":{
                "gradientArrow1": "La direction de {{name}} optimisation",
                "gradientArrow2": "La direction de {{name}} optimisation",
                "dominatedRegion": "Région dominée"
            },
            "legend":{
                "dominatedRegion": "La région grise surligne la région dominée",
                "gradientArrows": "Les flèches indiquent une direction d'amélioration"
            }
        }
    },
    "sensitivityAnalysisDialog":{
        "title": "Analyse de sensibilité",
        "buttons": {
            "runJob": "Exécuter",
            "stopJob": "Arrêter",
            "terminateJob": "Terminer",
            "resumeJob": "Reprendre",
            "downloadCsv": "Télécharger CSV",
            "back": "Retourner",
            "clear": "Effacer"
        }
    },
    "jobParametersBuilder": {
        "buttons": {
            "removeParameterValue": "Effacer",
            "addParameterValue": "Ajouter"
        }
    },
    "jobResultTable":{
        "tooltip": {
            "multiplePoliciesInCell": "{{number}} règles"
        },
        "pivot": {
            "aggregators":{
                "maximum": "Maximum",
                "minimum": "Minimum"
            },
            "renderers":{
                "heatmap": "Carte de chaleur"
            }
        },
        "policyPreview": "Aperçu de la règle"
    },
    "job":{
        "sensitivity-analysis":{
            "name": "Analyse de sensibilité multivariée",
            "param":{
                "ruleName": "Nom de la règle",
                "extendedPolicyDescription": {
                    "label": "Description détaillée de la règle"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Étiquette"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Longueur"
                    },
                    "step": {
                        "label": "Étape"
                    }
                }
            },
            "errors":{
                "computations": "Erreur de calcul d'analyse de sensibilité pour les paramètres suivants:"
            },
            "warnings": {
                "largeScenariosNumber": "Nombre de scénarios définis est plus grand que {{numberFormatted}}. Analyse de sensibilité pouvait ne pas calculer ou être très lente.",
                "largeParametersNumber": "Nombre de paramètres est plus grand que {{number}}. Affichage de l'analyse de sensibilité pouvait échouer ou être très lente."
            }
        },
        "tornado-diagram":{
            "name": "Graphique en tornade",
            "param":{
                "ruleName": "Nom de la règle",
                "extendedPolicyDescription": {
                    "label": "Description détaillée de la règle"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Étiquette"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Longueur"
                    },
                    "step": {
                        "label": "Étape"
                    },
                    "defaultValue": {
                        "label": "Valeur par défaut"
                    }
                }
            },
            "errors":{
                "computations": "Erreur de calcul d'analyse de sensibilité pour les paramètres suivants:"
            },
            "warnings": {
                "largeScenariosNumber": "Nombre de scénarios définis est plus grand que {{numberFormatted}}. Analyse de sensibilité pouvait ne pas calculer ou être très lente.",
                "largeParametersNumber": "Nombre de paramètres est plus grand que {{number}}. Affichage de l'analyse de sensibilité pouvait échouer ou être très lente."
            },
            "plot":{
                "legend":{
                    "low": "Diminuer",
                    "high": "Augmenter"
                },
                "xAxisTitle": "Avantage"
            }
        },
        "probabilistic-sensitivity-analysis":{
            "name": "Analyse de sensibilité probabiliste",
            "param":{
                "ruleName": "Nom de la règle",
                "numberOfRuns": {
                    "label": "Nombre d'essais"
                },
                "extendedPolicyDescription": {
                    "label": "Description détaillée de la règle"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Étiquette"
                    },
                    "formula": {
                        "label": "Formule",
                        "help": "Sélectionner le modèle de la formule dans le menu ou écrire un code personnalisé."
                    }
                }
            },
            "errors":{
                "computations": "Erreur de calcul d'analyse de sensibilité pour les paramètres suivants:",
                "param-computation": "Erreur de calcul des valeurs de paramètres:"
            },
            "warnings": {
                "largeScenariosNumber": "Nombre de scénarios définis est plus grand que {{numberFormatted}}. Analyse de sensibilité pouvait ne pas calculer ou être très lente."
            }
        },
        "spider-plot": {
            "name": "Graphique en radar",
            "param": {
                "ruleName": "Nom de la règle",
                "extendedPolicyDescription": {
                    "label": "Description détaillée de la règle"
                },
                "percentageChangeRange": {
                    "label": "+/- changement de pourcentage à considérer"
                },
                "length": {
                    "label": "Nombre de valeurs à tester",
                    "help": "Nombre de valeurs à tester (dans une partie de gamme)"
                },
                "variables": {
                    "label": "Variables",
                    "name": {
                        "label": "Nom"
                    },
                    "defaultValue": {
                        "label": "Valeur par défaut"
                    }
                }
            },
            "errors": {
                "computations": "Erreur de calcul d'analyse de sensibilité pour les paramètres suivants:"
            },
            "warnings": {
                "largeScenariosNumber": "Nombre de scénarios définis est plus grand que {{numberFormatted}}. Analyse de sensibilité pouvait ne pas calculer ou être très lente."
            },
            "plot": {
                "legend": {},
                "xAxisTitle": "Changement de pourcentage",
                "yAxisTitle": "Avantage"
            }
        },
        "league-table":{
            "name": "Classement"
        },
        "errors":{
            "generic": "Erreur de calcul d'analyse de sensibilité: {{message}}",
            "params": "Paramètres du {{jobName}} sont incorrect"
        }
    },
    "settingsDialog":{
        "title": "Parametres",
        "general":{
            "title": "Général",
            "fontSize": "Taille de la police",
            "fontFamily": "Famille de police",
            "fontWeight": "Poid de la police",
            "fontStyle": "Style de police",
            "numberFormatLocale": "format local de numérotation"
        },
        "payoff1":{
            "title": "Format de la numérotation des avantages 1",
            "currency": "Devise",
            "currencyDisplay": "Affichage de la devise",
            "style": "Style",
            "minimumFractionDigits": "Nombre minimum de fractions",
            "maximumFractionDigits": "Nombre maximum de fractions",
            "useGrouping": "Utiliser des séparateurs de regroupement"
        },
        "payoff2":{
            "title": "Format de la numérotation des avantages 2",
            "currency": "Devise",
            "currencyDisplay": "Affichage de la devise",
            "style": "Style",
            "minimumFractionDigits": "Nombre minimum de fractions",
            "maximumFractionDigits": "Nombre maximum de fractions",
            "useGrouping": "Utiliser des séparateurs de regroupement"
        },
        "probability":{
            "title": "Format de la numérotatio des probabilités",
            "style": "Style",
            "minimumFractionDigits": "Nombre minimum de fractions",
            "maximumFractionDigits": "Nombre maximum de fractions",
            "fontSize": "Taille de police",
            "color": "Couleur"
        },
        "node":{
            "title": "Noud",
            "strokeWidth": "Largeur de trait",
            "optimal":{
                "title": "Optimal",
                "stroke": "Couleur",
                "strokeWidth": "Largeur de trait"
            },
            "label": {
                "title": "Étiquette",
                "fontSize": "Taille de la police de l'étiquette",
                "color": "Couleur de l'étiquette"
            },
            "payoff": {
                "title": "Avantage",
                "fontSize": "Taille de la police",
                "color": "Couleur",
                "negativeColor": "Négatif couleur"
            },
            "decision": {
                "title": "Noeud décisionnel",
                "fill": "La couleur de remplissage",
                "stroke": "Couleur de trait",
                "selected": {
                    "fill": "Couleur de remplissage sélectionnée"
                }
            },
            "chance": {
                "title": "Noud aléatoire",
                "fill": "La couleur de remplissage",
                "stroke": "Couleur de course",
                "selected": {
                    "fill": "Couleur de remplissage sélectionné"
                }
            },
            "terminal":{
                "title": "Noeud terminal",
                "fill": "Couleur de remplissage",
                "stroke": "Couleur de course",
                "selected": {
                    "fill": "Couleur de remplissage sélectionné"
                },
                "payoff": {
                    "title": "Avantage",
                    "fontSize": "Taille de la police",
                    "color": "Couleur",
                    "negativeColor": "Négatif couleur"
                }
            }
        },
        "edge":{
            "title": "Bord",
            "stroke": "Couleur",
            "strokeWidth": "Largeur de trait",
            "optimal":{
                "title": "Optimal",
                "stroke": "Couleur",
                "strokeWidth": "Largeur de trait"
            },
            "selected":{
                "title": "Choisi",
                "stroke": "Couleur",
                "strokeWidth": "Largeur de trait"
            },
            "label": {
                "title": "Étiquette",
                "fontSize": "Taille de la police",
                "color": "Couleur"
            },
            "payoff":{
                "title": "Avantage",
                "fontSize": "Taille de la police",
                "color": "Couleur",
                "negativeColor": "Négatif couleur"
            }
        },
        "diagramTitle":{
            "title": "Titre du diagramme",
            "fontSize": "Taille de la police",
            "fontWeight": "Poids de la police",
            "fontStyle": "Style de la police",
            "color": "Couleur",
            "margin":{
                "title": "Marge",
                "top": "Haut du diagramme",
                "bottom": "Bas du diagramme"
            },
            "description":{
                "title": "Sous-titre (description du diagramme)",
                "show": "Afficher",
                "fontSize": "Taille de la police",
                "fontWeight": "Poids de la police",
                "fontStyle": "Style de police",
                "color": "Couleur",
                "marginTop": "Haut du marge"
            }
        },
        "leagueTable": {
            "title": "Classement",
            "plot": {
                "title": "Le graphe",
                "maxWidth": "Largeur maximale",
                "highlightedColor": "Couleur de la règle soulignée",
                "highlightedDefaultColor": "Couleur recommandée pour la règle (pour WTP par défaut)",
                "extendedDominatedColor": "Couleur de la règle étendu-dominée",
                "dominatedColor": "Couleur de la règle dominée",
                "defaultColor": "Couleur des autres règles"
            }
        },
        "other":{
            "title": "Autre",
            "disableAnimations": "Désactiver les animations",
            "forceFullEdgeRedraw": "Forcer le redessinage complet des bords",
            "hideLabels": "Masquer les étiquettes",
            "hidePayoffs": "Masquer les paiements",
            "hideProbabilities": "Masquer les probabilités",
            "raw": "Brut"
        }
    },
    "aboutDialog":{
        "title": "A propos"
    },
    "help":{
        "header": "Aide",
        "mouse": {
            "header":"Actions de la souris:",
            "list":{
                "1": "Bouton gauche de la souris: sélection du noud/bord",
                "2": "Bouton droit de la souris: menu contextuel (ajout/manipulation des nouds)",
                "3": "Double clic gauche de la souris: menu contextuel"
            }
        },
        "keyboard": {
            "header":"Raccourcis clavier:",
            "list":{
                "1": "Del: effacer les nouds sélectionnés",
                "2": "Ctrl-C/X: copier/couper les nouds sélectionnés",
                "3": "Ctrl-V: coller les nouds copiés comme un sous-arbre d'un noud sélectionné",
                "4": "Ctrl-Y/Z: annuler/refaire",
                "5": "Ctrl-Alt-D/C/T: ajouter un nouveau sous-noud de décision/aléatoire/terminal d'un <strong>noud sélectionné</strong>",
                "6": "Ctrl-Alt-D/C: injecter un nouveau noeud de décision/aléatoire dans un <strong>bord sélectionné</strong>"
            }
        },
        "docs": "La documentation de SilverDecisions est disponible  <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/Documentation\" target=\"_blank\">ici</a>"
    },
    "definitionsDialog":{
        "title": "Définitions des variables",
        "scope": {
            "global": "portée mondiale",
            "node": "la portée des nœud et sous-arborescence sélectionné"
        },
        "buttons":{
            "recalculate": "Recalculer"
        },
        "evaluatedVariables": "Variables évaluées"
    },
    "sidebarDefinitions":{
        "scope":{
            "label": "Portée de la variable:",
            "global": "mondial",
            "node": "nœud et sous-arborescence sélectionné"
        },
        "header": "Variables",
        "code": "Code",
        "buttons":{
            "openDialog" : "Ouvrir la boîte de dialogue",
            "recalculate": "Recalculer"
        },
        "evaluatedVariables": "Variables évaluées"
    },
    "multipleCriteria":{
        "header": "Critères multiples",
        "defaultMaximizedCriterionName": "Effet",
        "defaultMinimizedCriterionName": "Coût",
        "nameOfCriterion1": "Le nome de critère 1",
        "nameOfCriterion2": "Le nome de critère 2",
        "defaultCriterion1Weight": "Par défaut poid du 1er critère",
        "weightLowerBound": "Poid de la limite inférieure",
        "weightUpperBound": "Poid de la limite supérieure",
        "buttons":{
            "showLeagueTable" : "Montrer classement",
            "flip": "Basculer"
        }
    },
    "layoutOptions":{
        "header": "Disposition",
        "marginHorizontal": "Marge horizontale",
        "marginVertical": "Marge verticale",
        "nodeSize": "Taille du noeud",
        "edgeSlantWidthMax": "Inclinaison du bord (max.)",
        "gridWidth": "Largeur",
        "gridHeight": "Taille"
    },
    "diagramDetails":{
        "header": "Détails",
        "title" : "Titre",
        "description" : "Description"
    },
    "objectProperties":{
        "header":{
            "node":{
                "decision":"Noeud de décision",
                "chance":"Noud aléatoire",
                "terminal":"Noeud terminal"
            },
            "edge": "Bord",
            "text": "Texte flottant"
        },
        "childrenProperties":{
            "node":{
                "header": "Les connexions",
                "child": {
                    "header": "Bord #{{number}}"
                }
            }
        }
    },
    "confirm":{
        "newDiagram": "Voulez-vous vraiment effacer le diagramme actuel? Toutes les données non enregistrées seront perdues.",
        "openDiagram": "Etes-vous sur? Toutes les données de diagramme non enregistrées seront perdues.",
        "beforeunload": "Voulez-vous vraiment fermer SilverDecisions? Toutes les données de diagramme non enregistrées seront perdues."
    },
    "error":{
        "jsonParse": "Erreur lors de l'analyse du fichier!",
        "fileApiNotSupported":"L'API du fichier n'est pas encore prise en charge sur ce navigateur.",
        "inputFilesProperty":"Votre navigateur ne semble pas prendre en charge la propriété `fichiers`.",
        "notSilverDecisionsFile":"Pas de fichiers SilverDecisions!",
        "incorrectVersionFormat": "Format incorrect de la chaîne de version!",
        "fileVersionNewerThanApplicationVersion": "La version dans le fichier est plus récente que la version de l'application. Certaines fonctionnalités peuvent être manquantes.",
        "objectiveComputationFailure": "Erreur en calculant l'objectif!",
        "diagramDrawingFailure": "Erreur lors du dessin diagramme!",
        "malformedData":"Erreur lors de la lecture des données arborescentes!",
        "pngExportNotSupported": "L'exportation vers PNG n'est pas prise en charge dans votre navigateur.",
        "pngExportNotSupportedIE": "Exporter vers PNG n'est pas pris en charge dans Internet Explorer.",
        "svgExportNotSupported": "L'exportation vers SVG n'est pas prise en charge par votre navigateur.",
        "pdfExportNotSupported": "L'exportation au format PDF n'est pas prise en charge par votre navigateur.",
        "incorrectPayoffNumberFormatOptions": "L'option de format de numérotation des avantages chiosie est incorrecte.",
        "incorrectProbabilityNumberFormatOptions": "L'option de format de numérotation des probabilités chiosie est incorrecte.",
        "incorrectNumberFormatOptions": "L'option de format de numérotation choisie est incorrecte.",
        "jsPDFisNotIncluded": "JsPDF n'est pas inclus!",
        "serverSideExportRequestFailure": "La demande de téléchargement au serveur a échoué!"
    }
}

},{}],80:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.i18n = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _i18next = require('i18next');

var _i18next2 = _interopRequireDefault(_i18next);

var _en = require('./en.json');

var en = _interopRequireWildcard(_en);

var _pl = require('./pl.json');

var pl = _interopRequireWildcard(_pl);

var _it = require('./it.json');

var it = _interopRequireWildcard(_it);

var _de = require('./de.json');

var de = _interopRequireWildcard(_de);

var _fr = require('./fr.json');

var fr = _interopRequireWildcard(_fr);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var i18n = exports.i18n = function () {
    function i18n() {
        _classCallCheck(this, i18n);
    }

    _createClass(i18n, null, [{
        key: 'init',
        value: function init(lng) {
            i18n.language = lng;
            i18n.$instance = _i18next2.default.createInstance({
                lng: lng,
                fallbackLng: 'en',
                resources: {
                    en: {
                        translation: en
                    },
                    pl: {
                        translation: pl
                    },
                    it: {
                        translation: it
                    },
                    de: {
                        translation: de
                    },
                    fr: {
                        translation: fr
                    }
                }
            }, function (err, t) {});
        }
    }, {
        key: 't',
        value: function t(key, opt) {
            return i18n.$instance.t(key, opt);
        }
    }]);

    return i18n;
}();

},{"./de.json":77,"./en.json":78,"./fr.json":79,"./it.json":81,"./pl.json":82,"i18next":"i18next"}],81:[function(require,module,exports){
module.exports={
    "toolbar": {
        "newDiagram": "Nuovo diagramma",
        "openDiagram": "Apri diagramma esistnte",
        "saveDiagram": "Salva il diagramma corente",
        "export":{
            "label": "Esporta in",
            "png": "Png",
            "svg": "Svg",
            "pdf": "Pdf"
        },
        "layout":{
            "label": "Disposizione",
            "manual": "Manuale",
            "tree": "Albero",
            "cluster": "Grappolo"
        },
        "viewMode": {
            "label": "Vista",
            "options": {
                "criterion1":"Criterio 1",
                "criterion2":"Criterio 2",
                "twoCriteria":"Due criteri"
            }
        },
        "objectiveRule":{
            "label": "Regola",
            "options": {
                "expected-value-maximization":"max",
                "expected-value-minimization":"min",
                "maxi-min":"max-min",
                "maxi-max":"max-max",
                "mini-min":"min-min",
                "mini-max":"min-max",
                "min-max":"min-max",
                "max-min":"max-min",
                "min-min": "min-min",
                "max-max": "max-max"
            }
        },
        "undo": "Ripristina",
        "redo": "Ripeti",
        "settings": "Settaggi",
        "about": "Di",
        "sensitivityAnalysis": "Analisi di sensibilità",
        "recompute": "Ricalcola"
    },
    "node":{
        "name": "Etichetta"
    },
    "edge":{
        "name": "Eticehtta",
        "payoff": "Saldo",
        "probability": "Probabilità"
    },
    "text":{
        "value": "Testo"
    },
    "leagueTableDialog":{
        "title": "Classifica",
        "buttons": {
            "downloadCsv": "Scarica CSV"
        }
    },
    "leagueTable": {
        "headers":{
            "policyNo": "Regola #",
            "policy": "Regola",
            "comment": "Commento"
        },
        "comment":{
            "dominatedBy": "dominata (da #{{policy}})",
            "extendedDominatedBy": "estesa-dominata (da #{{policy1}} e #{{policy2}})",
            "incratio": "rapporto incrementale={{incratio}}"
        },
        "plot":{
            "groups":{
                "highlighted": "Evidenziato",
                "highlighted-default": "Raccomandato (per default WTP)",
                "extended-dominated" : "Estesa-dominata",
                "dominated": "Dominata",
                "default": "Altro"
            },
            "tooltip":{
                "gradientArrow1": "Direzione di {{name}} ottimizzazione",
                "gradientArrow2": "Direzione di {{name}} ottimizzazione",
                "dominatedRegion": "Regione dominata"
            },
            "legend":{
                "dominatedRegion": "L'area grigia evidenzia la regione dominata",
                "gradientArrows": "Le frecce indicano la direzione di miglioramento"
            }
        }
    },
    "sensitivityAnalysisDialog":{
        "title": "Analisi di sensibilità",
        "buttons": {
            "runJob": "Esegui",
            "stopJob": "Stop",
            "terminateJob": "Esci",
            "resumeJob": "Riprendi",
            "downloadCsv": "Scaricare CSV",
            "back": "Indietro",
            "clear": "Cancella"
        }
    },
    "jobParametersBuilder": {
        "buttons": {
            "removeParameterValue": "Cancella",
            "addParameterValue": "Aggiungi"
        }
    },
    "jobResultTable":{
        "tooltip": {
            "multiplePoliciesInCell": "{{number}} politiche"
        },
        "pivot": {
            "aggregators":{
                "maximum": "Massimo",
                "minimum": "Minimo"
            },
            "renderers":{
                "heatmap": "Mappa di calore"
            }
        },
        "policyPreview": "Anteprima della politica"
    },
    "job":{
        "sensitivity-analysis":{
            "name": "Analisi di sensibilità multivariata",
            "param":{
                "ruleName": "Nome alla regola",
                "extendedPolicyDescription": {
                    "label": "Descrizione estesa della politica"
                },
                "variables": {
                    "label": "Variabili",
                    "name": {
                        "label": "Nome"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Lunghezza"
                    },
                    "step": {
                        "label": "Passo"
                    }
                }
            },
            "errors":{
                "computations": "Errore nei calcoli di analisi di sensibilità per i seguenti parametri:"
            },
            "warnings": {
                "largeScenariosNumber": "Numero di scenari definiti più grandi di {{numberFormatted}}. Analisi di sensibilità potrebbe non essere calcolata o essere molto lenta.",
                "largeParametersNumber": "Numero di parametri maggiori di {{number}}. La visualizzazione dell'analisi di sensibilità potrebbe non riuscire o essere molto lenta."
            }
        },
        "tornado-diagram":{
            "name": "Diagramma a tornado",
            "param":{
                "ruleName": "Nome alla regola",
                "extendedPolicyDescription": {
                    "label": "Descrizione estesa della politica"
                },
                "variables": {
                    "label": "Variabili",
                    "name": {
                        "label": "Nome"
                    },
                    "min": {
                        "label": "Min"
                    },
                    "max": {
                        "label": "Max"
                    },
                    "length": {
                        "label": "Lunghezza"
                    },
                    "step": {
                        "label": "Passo"
                    },
                    "defaultValue": {
                        "label": "Valore predefinito"
                    }
                }
            },
            "errors":{
                "computations": "Errore nei calcoli di analisi di sensibilità per i seguenti parametri:"
            },
            "warnings": {
                "largeScenariosNumber": "Numero di scenari definiti più grandi di {{numberFormatted}}. Analisi di sensibilità potrebbe non essere calcolata o essere molto lenta.",
                "largeParametersNumber": "Numero di parametri maggiori di {{number}}. La visualizzazione dell'analisi di sensibilità potrebbe non riuscire o essere molto lenta."
            },
            "plot":{
                "legend":{
                    "low": "Decresce",
                    "high": "Cresce"
                },
                "xAxisTitle": "Saldo"
            }
        },
        "probabilistic-sensitivity-analysis":{
            "name": "Analisi di sensibilità probabilistica",
            "param":{
                "ruleName": "Nome alla regola",
                "numberOfRuns": {
                    "label": "Numero di operazioni"
                },
                "extendedPolicyDescription": {
                    "label": "Descrizione estesa della politica"
                },
                "variables": {
                    "label": "Variabili",
                    "name": {
                        "label": "Nome"
                    },
                    "formula": {
                        "label": "Formula",
                        "help": "Seleziona modello di formula dal menu o scrivi un codice personalizzato."
                    }
                }
            },
            "errors":{
                "computations": "Errore nei calcoli di analisi di sensibilità per i seguenti parametri:",
                "param-computation": "Errore di calcolo dei valori dei parametri:"
            },
            "warnings": {
                "largeScenariosNumber": "Numero di scenari definiti più grandi di {{numberFormatted}}. Analisi di sensibilità potrebbe non riuscire o essere molto lenta."
            }
        },
                "spider-plot": {
            "name": "Diagramma di Kiviat",
            "param": {
                "ruleName": "Nome alla regola",
                "extendedPolicyDescription": {
                    "label": "Descrizione estesa della politica"
                },
                "percentageChangeRange": {
                    "label": "+/- variazione percentuale da considerare"
                },
                "length": {
                    "label": "Numero di valpri da testare",
                    "help": "Numero di valpri da testare (in una parte della gamma)"
                },
                "variables": {
                    "label": "Variabili",
                    "name": {
                        "label": "Nome"
                    },
                    "defaultValue": {
                        "label": "Valore predefinito"
                    }
                }
            },
            "errors": {
                "computations": "Errore nei calcoli di analisi di sensibilità per i seguenti parametri:"
            },
            "warnings": {
                "largeScenariosNumber": "Numero di scenari definiti più grandi di {{numberFormatted}}. Analisi di sensibilità potrebbe non riuscire o essere molto lenta."
            },
            "plot": {
                "legend": {},
                "xAxisTitle": "Variazione percentuale",
                "yAxisTitle": "Saldo"
            }
        },
        "league-table":{
            "name": "Classifica"
        },
        "errors":{
            "generic": "Errore nei calcoli di analisi di sensibilità: {{message}}",
            "params": "{{jobName}} parameteri errati"
        }
    },

    "settingsDialog":{
        "title": "Settaggi",
        "general":{
            "title": "Generale",
            "fontSize": "Dimensione font",
            "fontFamily": "Famiglia font",
            "fontWeight": "Peso del font",
            "fontStyle": "Stile font",
            "numberFormatLocale": "Formato numero locale"
        },
        "payoff1":{
            "title": "Formato saldo 1",
            "currency": "Valuta",
            "currencyDisplay": "Visualizzazione valuta",
            "style": "Stile",
            "minimumFractionDigits": "Numero minimo cifre frazione",
            "maximumFractionDigits": "Numero massimo cifre frazione",
            "useGrouping": "Usa separatori di gruppo"
        },
        "payoff2":{
            "title": "Formato saldo 2",
            "currency": "Valuta",
            "currencyDisplay": "Visualizzazione valuta",
            "style": "Stile",
            "minimumFractionDigits": "Numero minimo cifre frazione",
            "maximumFractionDigits": "Numero massimo cifre frazione",
            "useGrouping": "Usa separatori di gruppo"
        },
        "probability":{
            "title": "Formato probabilità",
            "style": "Stile",
            "minimumFractionDigits": "Numero minimo cifre frazione",
            "maximumFractionDigits": "Numero massimo cifre frazione",
            "fontSize": "Dimensione font",
            "color": "Colore"
        },
        "node":{
            "title": "Nodo",
            "strokeWidth": "Spessore linea",
            "optimal":{
                "title": "Ottimale",
                "stroke": "Colore",
                "strokeWidth": "Spessore linea"
            },
            "label": {
                "title": "Etichetta",
                "fontSize": "Dimensione font etichetta",
                "color": "Colore etichetta"
            },
            "payoff": {
                "title": "Saldo",
                "fontSize": "Dimensione font",
                "color": "Colore",
                "negativeColor": "Colore negativo"
            },
            "decision": {
                "title": "Nodo dicisione",
                "fill": "Colore riempimento",
                "stroke": "Colore linea",
                "selected": {
                    "fill": "Colore riempimento selezionato"
                }
            },
            "chance": {
                "title": "Nodo opportunità",
                "fill": "Colore riempimento",
                "stroke": "Colore linea",
                "selected": {
                    "fill": "Colore riempimento selezionato"
                }
            },
            "terminal":{
                "title": "Nodo terminale",
                "fill": "Colore riempimento",
                "stroke": "Colore linea",
                "selected": {
                    "fill": "Colore riempimento selezionato"
                },
                "payoff": {
                    "title": "Saldo",
                    "fontSize": "Dimensione font",
                    "color": "Colore",
                    "negativeColor": "Colore negativo"
                }
            }
        },
        "edge":{
            "title": "Ramo",
            "stroke": "Colore",
            "strokeWidth": "Larghezza linea",
            "optimal":{
                "title": "Ottimale",
                "stroke": "Colore",
                "strokeWidth": "Larghezza linea"
            },
            "selected":{
                "title": "Selezionato",
                "stroke": "Colore",
                "strokeWidth": "Larghezza linea"
            },
            "label": {
                "title": "Etichetta",
                "fontSize": "Dimensione font",
                "color": "Colore"
            },
            "payoff":{
                "title": "Saldo",
                "fontSize": "Dimensione font",
                "color": "Colore",
                "negativeColor": "Colore negativo"
            }
        },
        "diagramTitle":{
            "title": "Titolo diagramma",
            "fontSize": "Dimensione font",
            "fontWeight": "Peso del font",
            "fontStyle": "Stile font",
            "color": "Colore",
            "margin":{
                "title": "Margine",
                "top": "Superiore",
                "bottom": "Inferiore"
            },
            "description":{
                "title": "Sotto-titolo (descrizione diagramma)",
                "show": "Mostra",
                "fontSize": "Dimensione font",
                "fontWeight": "Peso del font",
                "fontStyle": "Stile font",
                "color": "Colore",
                "marginTop": "Margine superiore"
            }
        },
        "leagueTable": {
            "title": "Classifica",
            "plot": {
                "title": "Grafico",
                "maxWidth": "Larghezza massima",
                "highlightedColor": "Colore evidenziato della regola",
                "highlightedDefaultColor": "Colore polizza raccomandata (per default WTP)",
                "extendedDominatedColor": "Colori della regola dominata estesa",
                "dominatedColor": "Colore della denominata regola",
                "defaultColor": "Altri criteri colore"
            }
        },
        "other":{
            "title": "Altro",
            "disableAnimations": "Disabilita animazione",
            "forceFullEdgeRedraw": "Forza ridisegno dei rami",
            "hideLabels": "Nascondi le etichette",
            "hidePayoffs": "Nascondi saldo",
            "hideProbabilities": "Nascondi le probabilità",
            "raw": "Non elaborato"
        }
    },
    "aboutDialog":{
        "title": "Informazioni"
    },
    "help":{
        "header": "Aiuto",
        "mouse": {
            "header":"Azioni mouse:",
            "list":{
                "1": "Bottone sinistro: selezione nodo/ramo",
                "2": "Bottone destro: menu di contesto (aggiunta/manipolazione nodi)",
                "3": "Doppio click bottone sinistro: menu di contesto"
            }
        },
        "keyboard": {
            "header":"Scorciatoie tastiera:",
            "list":{
                "1": "Del: cancella nodi selezionati",
                "2": "Ctrl-C/X: copia/taglia nodi selezionati",
                "3": "Ctrl-V: incolla nodi copiati come sotto-albero di un nodo selezionato",
                "4": "Ctrl-Y/Z: ripristina/ripeti",
                "5": "Ctrl-Alt-D/C/T: aggiungi nuovo sottonodo Decisione/Opportunità/Terminale di un <strong>nodo selezionato</strong>",
                "6": "Ctrl-Alt-D/C: inietta un nuovo nodo Decisione/Opportunità in un <strong>ramo selezionato</strong>"
            }
        },
        "docs": "La documentazione di SilverDecisions e disponibile <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/Documentation\" target=\"_blank\">qui</a>"
    },
    "definitionsDialog":{
        "title": "Definizioni delle variabili",
        "scope": {
            "global": "raggio globale",
            "node": "raggio di nodo e sotto-albero selezionati"
        },
        "buttons":{
            "recalculate": "Ricalcolare"
        },
        "evaluatedVariables": "Variabili valutate"
    },
    "sidebarDefinitions":{
        "scope":{
            "label": "Raggio variabile:",
            "global": "globale",
            "node": "nodo e sotto-albero selezionati"
        },
        "header": "Variabili",
        "code": "Codice",
        "buttons":{
            "openDialog" : "Apri il dialogo",
            "recalculate": "Ricalcolare"
        },
        "evaluatedVariables": "Variabili valutate"
    },
    "multipleCriteria":{
        "header": "Criteri multipli",
        "defaultMaximizedCriterionName": "Effetto",
        "defaultMinimizedCriterionName": "Costo",
        "nameOfCriterion1": "Nome del criterio 1",
        "nameOfCriterion2": "Nome del criterio 2",
        "defaultCriterion1Weight": "Predefinito 1° peso criterio",
        "weightLowerBound": "Peso inferiore limitato",
        "weightUpperBound": "Peso superiore del limite",
        "buttons":{
            "showLeagueTable" : "Mostra la classifica",
            "flip": "Ribalta"
        }
    },
    "layoutOptions":{
        "header": "Disposizione",
        "marginHorizontal": "Margine orizzontale",
        "marginVertical": "Margine verticale",
        "nodeSize": "Dimensione nodo",
        "edgeSlantWidthMax": "Inclinazione nodo",
        "gridWidth": "Larghezza",
        "gridHeight": "Altezza"
    },
    "diagramDetails":{
        "header": "Dettagli",
        "title" : "Titolo",
        "description" : "Descrizione"
    },
    "objectProperties":{
        "header":{
            "node":{
                "decision":"Nodo decisione",
                "chance":"Nodo opportunità",
                "terminal":"Nodo terminale"
            },
            "edge": "Ramo",
            "text": "Testo mobile"
        },
        "childrenProperties":{
            "node":{
                "header": "Connessioni",
                "child": {
                    "header": "Ramo #{{number}}"
                }
            }
        }
    },
    "confirm":{
        "newDiagram": "Vuoi davvero cancellare ildiagramma corrente ? Tutti i dati non salvati saranno persi.",
        "openDiagram": "Sei sicuro? Tutti i dati non salvati saranno persi.",
        "beforeunload": "Sei sicuro di voler uscire da SilverDecisions ?Tutti i dati non salvati saranno persi."
    },
    "error":{
        "jsonParse": "Errore analizzando il file !",
        "fileApiNotSupported":"l'API di questo file non è ancora supportata in questo browser.  ",
        "inputFilesProperty":"Il tuo browser non sembra supportare la proprieta del file di input.",
        "notSilverDecisionsFile":"Non è un file SilverDecisions !",
        "incorrectVersionFormat": "Formato non corretto della serie di versione!",
        "fileVersionNewerThanApplicationVersion": "La versione in file è più recente rispetto alla versione dell'applicazione. Alcune funzionalità possono essere indisponibili.",
        "objectiveComputationFailure": "Errore durante il calcolo obiettivo!",
        "diagramDrawingFailure": "Errore durante il disegno della diagramma!",
        "malformedData":"Errore durante la lettura dei dati dell'albero !",
        "pngExportNotSupported": "L'esport in formato PNG non è supportata nel tuo browser.",
        "pngExportNotSupportedIE": "L'esport in formato PNG non è supportata in Internet Explorer.",
        "svgExportNotSupported": "L'esport in formato SVG non è supportata nel tuo browser.",
        "pdfExportNotSupported": "L'esport in formato PDF non è supportata nel tuo browser.",
        "incorrectPayoffNumberFormatOptions": "Opzioni per il formato dei saldi non corrette.",
        "incorrectProbabilityNumberFormatOptions": "Opzioni per il formato delle probabilità non corrette.",
        "incorrectNumberFormatOptions": "Opzioni per il formato dei numeri non corrette, utilizzo del default.",
        "jsPDFisNotIncluded": "jsPDF non incluso !",
        "serverSideExportRequestFailure": "Richiesta di export fallita lato server !"
    }
}

},{}],82:[function(require,module,exports){
module.exports={
    "toolbar": {
        "newDiagram": "Nowy diagram",
        "openDiagram": "Otwórz diagram",
        "saveDiagram": "Zapisz diagram",
        "export":{
            "label": "Eksport",
            "png": "Png",
            "svg": "Svg",
            "pdf": "Pdf"
        },
        "layout":{
            "label": "Układ",
            "manual": "Ręczny",
            "tree": "Drzewo",
            "cluster": "Zgrupowany"
        },
        "viewMode": {
            "label": "Widok",
            "options": {
                "criterion1":"Kryterium 1",
                "criterion2":"Kryterium 2",
                "twoCriteria":"Dwa kryteria"
            }
        },
        "objectiveRule":{
            "label": "Reguła",
            "options": {
                "expected-value-maximization":"maksimum",
                "expected-value-minimization":"minimum",
                "maxi-min":"maxi-min",
                "maxi-max":"maxi-max",
                "mini-min":"mini-min",
                "mini-max":"mini-max",
                "min-max":"min-max",
                "max-min":"max-min",
                "min-min": "min-min",
                "max-max": "max-max"
            }
        },
        "undo": "Cofnij",
        "redo": "Ponów",
        "settings": "Ustawienia",
        "about": "Informacje",
        "sensitivityAnalysis": "Analiza wrażliwości",
        "recompute": "Przelicz"
    },
    "node":{
        "name": "Etykieta"
    },
    "edge":{
        "name": "Etykieta",
        "payoff": "Wypłata",
        "probability": "Prawdopodobieństwo"
    },
    "text":{
        "value": "Tekst"
    },
    "leagueTableDialog":{
        "title": "Tabela ligowa",
        "buttons": {
            "downloadCsv": "Pobierz CSV"
        }
    },
    "leagueTable": {
        "headers":{
            "policyNo": "Nr polityki",
            "policy": "Polityka",
            "comment": "Komentarz"
        },
        "comment":{
            "dominatedBy": "zdominowana (przez #{{policy}})",
            "extendedDominatedBy": "zdominowana rozszerzenie (przez #{{policy1}} i #{{policy2}})",
            "incratio": "inkrementalny iloraz={{incratio}}"
        },
        "plot":{
            "groups":{
                "highlighted": "Rekomendowany (dla pewnej wartości WTP w zakresie)",
                "highlighted-default": "Rekomendowany (dla domyślnej wartości WTP)",
                "extended-dominated" : "Zdominowana rozszerzenie",
                "dominated": "Zdominowana",
                "default": "Inne"
            },
            "tooltip":{
                "gradientArrow1": "Kierunek optymalizacji {{name}}",
                "gradientArrow2": "Kierunek optymalizacji {{name}}",
                "dominatedRegion": "Obszar zdominowany"
            },
            "legend":{
                "dominatedRegion": "Szary region oznacza obszar zdominowany",
                "gradientArrows": "Strzałki wskazują kierunek poprawy"
            }
        }
    },
    "sensitivityAnalysisDialog":{
        "title": "Analiza wrażliwości",
        "buttons": {
            "runJob": "Uruchom",
            "stopJob": "Zatrzymaj",
            "terminateJob": "Zakończ",
            "resumeJob": "Wznów",
            "downloadCsv": "Pobierz CSV",
            "back": "Wstecz",
            "clear": "Wyczyść"
        }
    },
    "jobParametersBuilder": {
        "buttons": {
            "removeParameterValue": "Usuń",
            "addParameterValue": "Dodaj"
        }
    },
    "jobResultTable":{
        "tooltip": {
            "multiplePoliciesInCell": "{{number}} polityk"
        },
        "pivot": {
            "aggregators":{
                "maximum": "Maksimum",
                "minimum": "Minimum"
            },
            "renderers":{
                "heatmap": "Mapa cieplna"
            }
        },
        "policyPreview": "podgląd polityki"
    },
    "job":{
        "sensitivity-analysis":{
            "name": "Analiza wrażliwości N-czynnikowa",
            "param":{
                "ruleName": "Nazwa reguły",
                "extendedPolicyDescription": {
                    "label": "Rozszerzony opis polityki"
                },
                "variables": {
                    "label": "Zmienne",
                    "name": {
                        "label": "Nazwa"
                    },
                    "min": {
                        "label": "Minimum"
                    },
                    "max": {
                        "label": "Maksimum"
                    },
                    "length": {
                        "label": "Długość"
                    },
                    "step": {
                        "label": "Krok"
                    }
                }
            },
            "errors":{
                "computations": "Błąd w obliczeniach analizy wrażliwości dla następujących parametrów:"
            },
            "warnings": {
                "largeScenariosNumber": "Liczba zdefiniowanych scenariuszy większa niż {{numberFormatted}}. Wyliczenie analizy wrażliwości może się nie powieść lub być bardzo powolne.",
                "largeParametersNumber": "Liczba parametrów większa niż {{number}}. Wyświetlenie analizy wrażliwości może się nie powieść lub być bardzo powolne."
            }
        },
        "tornado-diagram":{
            "name": "Diagram tornado",
            "param":{
                "ruleName": "Nazwa reguły",
                "extendedPolicyDescription": {
                    "label": "Rozszerzony opis polityki"
                },
                "variables": {
                    "label": "Zmienne",
                    "name": {
                        "label": "Nazwa"
                    },
                    "min": {
                        "label": "Minimum"
                    },
                    "max": {
                        "label": "Maximum"
                    },
                    "length": {
                        "label": "Długość"
                    },
                    "step": {
                        "label": "Krok"
                    },
                    "defaultValue": {
                        "label": "Wartość domyślna"
                    }
                }
            },
            "errors":{
                "computations": "Błąd w obliczeniach analizy wrażliwości dla następujących parametrów:"
            },
            "warnings": {
                "largeScenariosNumber": "Liczba zdefiniowanych scenariuszy większa niż {{numberFormatted}}. Wyliczenie analizy wrażliwości może się nie powieść lub być bardzo powolne.",
                "largeParametersNumber": "Liczba parametrów większa niż {{number}}. Wyświetlenie analizy wrażliwości może się nie powieść lub być bardzo powolne."
            },
            "plot":{
                "legend":{
                    "low": "Zmniejszenie",
                    "high": "Zwiększenie"
                },
                "xAxisTitle": "Wypłata"
            }
        },
        "probabilistic-sensitivity-analysis":{
            "name": "Probabilistyczna analiza wrażliwości",
            "param":{
                "ruleName": "Nazwa reguły",
                "numberOfRuns": {
                    "label": "Liczba powtórzeń"
                },
                "extendedPolicyDescription": {
                    "label": "Rozszerzony opis reguły"
                },
                "variables": {
                    "label": "Zmienne",
                    "name": {
                        "label": "Nazwa"
                    },
                    "formula": {
                        "label": "Formuła",
                        "help": "Wybierz wzór formuły z menu lub wpisz własny kod"
                    }
                }
            },
            "errors":{
                "computations": "Błąd w obliczeniu analizy wrażliwości dla następujących parametrów:",
                "param-computation": "Błąd w wyliczaniu wartości parametrów:"
            },
            "warnings": {
                "largeScenariosNumber": "Liczba zdefiniowanych scenariuszy większa niż {{numberFormatted}}. Wyliczenie analizy wrażliwości może się nie powieść lub być bardzo powolne."
            }
        },
        "league-table":{
            "name": "Tabela ligowa"
        },
        "spider-plot": {
            "name": "Wykres pajęczynowy",
            "param": {
                "ruleName": "Nazwa reguły",
                "extendedPolicyDescription": {
                    "label": "Rozszerzony opis polityki"
                },
                "percentageChangeRange": {
                    "label": "+/- zmiana procentowa do analizy"
                },
                "length": {
                    "label": "Liczba wartości do przetestowa",
                    "help": "Liczba wartości do przetestowa (po jednej stronie zakresu)"
                },
                "variables": {
                    "label": "Zmienne",
                    "name": {
                        "label": "Nazwa"
                    },
                    "defaultValue": {
                        "label": "Wartość domyślna"
                    }
                }
            },
            "errors":{
                "computations": "Błąd w obliczeniu analizy wrażliwości dla następujących parametrów:"
            },
            "warnings": {
                "largeScenariosNumber": "Liczba zdefiniowanych scenariuszy większa niż {{numberFormatted}}. Wyliczenie analizy wrażliwości może się nie powieść lub być bardzo powolne."
            },
            "plot": {
                "legend": {},
                "xAxisTitle": "Zmiana procentowa",
                "yAxisTitle": "Wypłata"
            }
        },
        "errors":{
            "generic": "Błąd w obliczeniach analizy wrażliwości: {{message}}",
            "params": "Błędne parametry w {{jobName}}"
        }
    },
    "settingsDialog":{
        "title": "Ustawienia",
        "general":{
            "title": "Ogólne",
            "fontSize": "Rozmiar czcionki",
            "fontFamily": "Rodzina czcionek",
            "fontWeight": "Waga czcionki",
            "fontStyle": "Styl czcionki",
            "numberFormatLocale": "Kod lokalizacji językowej liczb"
        },
        "payoff1":{
            "title": "Format wypłaty 1",
            "currency": "Waluta",
            "currencyDisplay": "Wyświetlanie waluty",
            "style": "Styl",
            "minimumFractionDigits": "Minimalna liczba miejsc po przecinku",
            "maximumFractionDigits": "Maksymalna liczba miejsc po przecinku",
            "useGrouping": "Separatory grupowania"
        },
        "payoff2":{
            "title": "Format wypłaty 2",
            "currency": "Waluta",
            "currencyDisplay": "Wyświetlanie waluty",
            "style": "Styl",
            "minimumFractionDigits": "Minimalna liczba miejsc po przecinku",
            "maximumFractionDigits": "Maksymalna liczba miejsc po przecinku",
            "useGrouping": "Separatory grupowania"
        },
        "probability":{
            "title": "Format prawdopodobieństwa",
            "style": "Styl",
            "minimumFractionDigits": "Minimalna liczba miejsc po przecinku",
            "maximumFractionDigits": "Maksymalna liczba miejsc po przecinku",
            "fontSize": "Rozmiar czcionki",
            "color": "Kolor"
        },
        "node":{
            "title": "Węzeł",
            "strokeWidth": "Szerokość krawędzi",
            "optimal":{
                "title": "Optymalny",
                "stroke": "Kolor",
                "strokeWidth": "Szerokość krawędzi"
            },
            "label": {
                "title": "Etykieta",
                "fontSize": "Rozmiar czcionki etykiety",
                "color": "Kolor etykiety"
            },
            "payoff": {
                "title": "Wypłata",
                "fontSize": "Rozmiar czcionki",
                "color": "Kolor",
                "negativeColor": "Kolor wartości ujemnej"
            },
            "decision": {
                "title": "Węzeł Decyzyjny",
                "fill": "Kolor wypełnienia",
                "stroke": "Kolor krawędzi",
                "selected": {
                    "fill": "Kolor wypełnienia po zaznaczeniu"
                }
            },
            "chance": {
                "title": "Węzeł Losowy",
                "fill": "Kolor wypełnienia",
                "stroke": "Kolor krawędzi",
                "selected": {
                    "fill": "Kolor wypełnienia po zaznaczeniu"
                }
            },
            "terminal":{
                "title": "Węzeł Końcowy",
                "fill": "Kolor wypełnienia",
                "stroke": "Kolor krawędzi",
                "selected": {
                    "fill": "Kolor wypełnienia po zaznaczeniu"
                },
                "payoff": {
                    "title": "Wypłata",
                    "fontSize": "Rozmiar czcionki",
                    "color": "Kolor",
                    "negativeColor": "Kolor wartości ujemnej"
                }
            }
        },
        "edge":{
            "title": "Krawędź",
            "stroke": "Kolor",
            "strokeWidth": "Szerokość krawędzi",
            "optimal":{
                "title": "Optymalna",
                "stroke": "Kolor",
                "strokeWidth": "Szerokość krawędzi"
            },
            "selected":{
                "title": "Zaznaczona",
                "stroke": "Kolor",
                "strokeWidth": "Szerokość krawędzi"
            },
            "label": {
                "title": "Etykieta",
                "fontSize": "Rozmiar czcionki",
                "color": "Kolor"
            },
            "payoff":{
                "title": "Wypłata",
                "fontSize": "Rozmiar czcionki",
                "color": "Kolor",
                "negativeColor": "Kolor wartości ujemnej"
            }
        },
        "diagramTitle":{
            "title": "Tytuł diagramu",
            "fontSize": "Rozmiar czcionki",
            "fontWeight": "Waga czcionki",
            "fontStyle": "Styl czcionki",
            "color": "Kolor",
            "margin":{
                "title": "Margines",
                "top": "Górny",
                "bottom": "Dolny"
            },
            "description":{
                "title": "Podtytuł (opis diagramu)",
                "show": "Wyświetl",
                "fontSize": "Rozmiar czcionki",
                "fontWeight": "Waga czcionki",
                "fontStyle": "Styl czcionki",
                "color": "Kolor",
                "marginTop": "Margines górny"
            }
        },
        "leagueTable": {
            "title": "Tabela ligowa",
            "plot": {
                "title": "Wykres",
                "maxWidth": "Maksymalna szerokość",
                "highlightedColor": "Kolor polityki rekomendowanej (dla pewnego WTP w zakresie)",
                "highlightedDefaultColor": "Kolor polityki rekomendowanej (dla domyślnego WTP)",
                "extendedDominatedColor": "Kolog polityki zdominowanej rozszerzenie",
                "dominatedColor": "Kolor polityki zdominowanej",
                "defaultColor": "Kolor innych polityk"
            }
        },
        "other":{
            "title": "Inne",
            "disableAnimations": "Wyłącz animacje",
            "forceFullEdgeRedraw": "Wymuś pełne przerysowywanie krawędzi",
            "hideLabels": "Ukryj etykiety",
            "hidePayoffs": "Ukryj wypłaty",
            "hideProbabilities": "Ukryj prawdopodobieństwa",
            "raw": "Surowy"
        }
    },
    "aboutDialog":{
        "title": "Informacje"
    },
    "help":{
        "header": "Pomoc",
        "mouse": {
            "header":"Akcje myszy:",
            "list":{
                "1": "lewy klawisz myszy: wybór węzła/krawędzi",
                "2": "prawy klawisz myszy: menu kontekstowe (dodawanie/manipulowanie węzłami)",
                "3": "podwójne kliknięcie lewym przyciskiem myszy: menu kontekstowe"
            }
        },
        "keyboard": {
            "header":"Skróty klawiszowe:",
            "list":{
                "1": "Del: usuwanie wybranych węzłów",
                "2": "Ctrl-C/X: kopiowanie/wycinanie wybranych węzłów",
                "3": "Ctrl-V: wklej skopiowane węzły jako poddrzewo wybranego węzła",
                "4": "Ctrl-Y/Z: cofnij/ponów",
                "5": "Ctrl-Alt-D/C/T: dodaj nowy węzeł Decyzyjny/Losowy/Końcowy jako dziecko <strong>wybranego węzła</strong>",
                "6": "Ctrl-Alt-D/C: Wstrzyknij nowy węzeł Decyzyjny/Losowy do <strong>wybranej krawędzi</strong>"
            }
        },
        "docs": "Dokumentacja SilverDecisions jest dostępna <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/Documentation\" target=\"_blank\">tutaj</a>"
    },
    "definitionsDialog":{
        "title": "Definicje zmiennych",
        "scope": {
            "global": "zasięg globalny",
            "node": "zasięg wybranego węzła i poddrzewa"
        },
        "buttons":{
            "recalculate": "Przelicz"
        },
        "evaluatedVariables": "Wartości zmiennych"
    },
    "sidebarDefinitions":{
        "scope":{
            "label": "Zasięg zmiennej:",
            "global": "globalny",
            "node": "wybrany węzeł i poddrzewo"
        },
        "header": "Zmienne",
        "code": "Kod",
        "buttons":{
            "openDialog" : "Otwórz okno dialogowe",
            "recalculate": "Przelicz"
        },
        "evaluatedVariables": "Wartości zmiennych"
    },
    "multipleCriteria":{
        "header": "Wiele kryteriów",
        "defaultMaximizedCriterionName": "Efekt",
        "defaultMinimizedCriterionName": "Koszt",
        "nameOfCriterion1": "Nazwa kryterium 1",
        "nameOfCriterion2": "Nazwa kryterium 2",
        "defaultCriterion1Weight": "Domyślna waga kryerium 1",
        "weightLowerBound": "Dolna granica wagi",
        "weightUpperBound": "Górna granica wagi",
        "buttons":{
            "showLeagueTable" : "Pokaż tabelę ligową",
            "flip": "Zamień"
        }
    },
    "layoutOptions":{
        "header": "Układ",
        "marginHorizontal": "Margines w poziomie",
        "marginVertical": "Margines w pionie",
        "nodeSize": "Rozmiar węzła",
        "edgeSlantWidthMax": "Skos krawędzi (maksymalny)",
        "gridWidth": "Szerokość",
        "gridHeight": "Wysokość"
    },
    "diagramDetails":{
        "header": "Szczegóły",
        "title" : "Tytuł",
        "description" : "Opis"
    },
    "objectProperties":{
        "header":{
            "node":{
                "decision":"Węzeł Decyzyjny",
                "chance":"Węzeł Losowy",
                "terminal":"Węzeł Końcowy"
            },
            "edge": "Krawędź",
            "text": "Pływający tekst"
        },
        "childrenProperties":{
            "node":{
                "header": "Połączenia",
                "child": {
                    "header": "Krawędź #{{number}}"
                }
            }
        }
    },
    "confirm":{
        "newDiagram": "Czy jesteś pewien, że chcesz porzucić obecny diagram? Wszystkie niezapisane zmiany zostaną utracone.",
        "openDiagram": "Czy jesteś pewien? Wszystkie niezapisane zmiany zostaną utracone.",
        "beforeunload": "Czy jesteś pewien, że chcesz zamknąć SilverDecisions? Wszystkie niezapisane zmiany zostaną utracone."
    },
    "error":{
        "jsonParse": "Błąd przetwarzania danych z pliku!",
        "fileApiNotSupported":"Funckja 'file API' nie jest wspierana w tej przeglądarce internetowej.",
        "inputFilesProperty":"Twoje przeglądarka nie wspiera opcji `pliki` przy otwieraniu pliku.",
        "notSilverDecisionsFile":"Plik niezgodny z formatem SilverDecisions!",
        "incorrectVersionFormat": "Niepoprawny format ciągu z numerem wersji!",
        "fileVersionNewerThanApplicationVersion": "Wersja pliku jest nowasza niż wersja aplikacji. Niektóre funkcjonalności mogą być niedostępne.",
        "objectiveComputationFailure": "Błąd podczas wyliczania celu!",
        "diagramDrawingFailure": "Błąd podczas rysowania diagramu!",
        "malformedData":"Błąd odczytu danych drzewa!",
        "pngExportNotSupported": "Eksport do obrazu PNG nie jest wspierany w Twojej przeglądarce.",
        "pngExportNotSupportedIE": "Eksport do obrazu PNG nie jest wspierany w przeglądarce Internet Explorer.",
        "svgExportNotSupported": "Eksport do obrazu SVG nie jest wspierany w Twojej przeglądarce.",
        "pdfExportNotSupported": "Eksport do PDF nie jest wspierany w Twojej przeglądarce.",
        "incorrectPayoffNumberFormatOptions": "Niewłaściwe ustawienia dla formatu wypłaty.",
        "incorrectProbabilityNumberFormatOptions": "Niewłaściwe ustawienia dla formatu prawdopodobieństw.",
        "incorrectNumberFormatOptions": "Niewłaściwe ustawiono formatowanie liczb. Przyjęto ustawienia domyślne.",
        "jsPDFisNotIncluded": "Nie włączono jsPDF!",
        "serverSideExportRequestFailure": "Nieudane zapytanie do serwera exportu!"
    }
}

},{}],83:[function(require,module,exports){
'use strict';

var _sdTreeDesigner = require('sd-tree-designer');

var _app = require('./app');

var _package = require('../package.json');

require('es6-set/implement');

_sdTreeDesigner.D3Extensions.extend();

_app.App.version = _package.version;
module.exports = _app.App;

},{"../package.json":63,"./app":65,"es6-set/implement":51,"sd-tree-designer":131}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JobParametersBuilder = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _templates = require("../templates");

var _jobParameterDefinition = require("sd-computations/src/jobs/engine/job-parameter-definition");

var _sdUtils = require("sd-utils");

var _d = require("../d3");

var d3 = _interopRequireWildcard(_d);

var _i18n = require("../i18n/i18n");

var _appUtils = require("../app-utils");

var _sdTreeDesigner = require("sd-tree-designer");

var _autocomplete = require("../autocomplete");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var JobParametersBuilder = function () {
    function JobParametersBuilder(container) {
        var i18nPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var onChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

        _classCallCheck(this, JobParametersBuilder);

        this.container = container;
        this.i18nPrefix = i18nPrefix;
        this.paramTypeToInputType = {};
        this.paramTypeToInputAttrs = {};

        this.paramTypeToInputType[_jobParameterDefinition.PARAMETER_TYPE.BOOLEAN] = 'checkbox';
        this.paramTypeToInputType[_jobParameterDefinition.PARAMETER_TYPE.DATE] = 'date';
        this.paramTypeToInputType[_jobParameterDefinition.PARAMETER_TYPE.INTEGER] = 'number';
        this.paramTypeToInputAttrs[_jobParameterDefinition.PARAMETER_TYPE.INTEGER] = [{
            name: "step",
            value: "1"
        }];
        this.paramTypeToInputType[_jobParameterDefinition.PARAMETER_TYPE.NUMBER] = 'number';
        this.paramTypeToInputAttrs[_jobParameterDefinition.PARAMETER_TYPE.NUMBER] = [{
            name: "step",
            value: "any"
        }];
        this.paramTypeToInputType[_jobParameterDefinition.PARAMETER_TYPE.STRING] = 'text';

        this.onChange = onChange;
    }

    _createClass(JobParametersBuilder, [{
        key: "setJobParameters",
        value: function setJobParameters(jobName, jobParameters) {
            var customParamsConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            this.jobName = jobName;
            this.jobParameters = jobParameters;
            this.customParamsConfig = customParamsConfig;
            this.clean();
            this.build(this.container, this.jobParameters.definitions, this.jobParameters.values, '', this.onChange);
        }
    }, {
        key: "clean",
        value: function clean() {
            this.container.html('');
            this.pristine = {};
            this.customValidators = {};
            this.strictValidation(false);
        }
    }, {
        key: "validate",
        value: function validate() {
            var strictValidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.strictValidation(strictValidation);
            this.pristine = {};
            this.container.selectAll('.sd-pristine').classed('sd-pristine', false);
            return this.checkCustomValidators() && this.jobParameters.validate();
        }
    }, {
        key: "checkCustomValidators",
        value: function checkCustomValidators() {
            var valid = true;
            _sdUtils.Utils.forOwn(this.customValidators, function (val, key) {
                valid = valid && val();
            });
            return valid;
        }
    }, {
        key: "strictValidation",
        value: function strictValidation() {
            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.container.classed('sd-strict-validation', enabled);
        }
    }, {
        key: "build",
        value: function build(container, jobParameterDefinitions, parentValueObject) {
            var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
            var onChange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
            var onInput = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

            container.html('');
            var self = this;
            var params = container.selectAll(".sd-job-parameter").data(jobParameterDefinitions);
            var paramsEnter = params.enter().appendSelector('div.sd-job-parameter');

            paramsEnter.html(function (d) {
                return _templates.Templates.get('jobParameter', d);
            });

            var paramsMerge = paramsEnter.merge(params);
            paramsMerge.each(function (d, i) {
                var paramSelection = d3.select(this);
                var path = parentPath;

                if (path) {
                    path += '.';
                }
                path += d.name;
                paramSelection.classed('sd-hidden', _sdUtils.Utils.get(self.customParamsConfig, path + '.hidden'));

                var value = parentValueObject[d.name];
                var repeating = d.maxOccurs > 1;
                if (value == undefined) {
                    if (repeating) {
                        value = [];
                        for (var vi = 0; vi < d.minOccurs; vi++) {
                            value.push(self.getEmptyValue(d.type));
                        }
                    } else {
                        value = _sdUtils.Utils.get(self.customParamsConfig, path + '.value', self.getEmptyValue(d.type));
                    }

                    parentValueObject[d.name] = value;
                }

                if (!repeating) {
                    self.buildParameterSingleValue(paramSelection, d, {
                        get: function get() {
                            return parentValueObject[d.name];
                        },
                        set: function set(v) {
                            return parentValueObject[d.name] = v;
                        }
                    }, path, onChange, onInput);
                } else {
                    paramSelection.appendSelector("div.sd-job-parameter-name").html(self.getParamNameI18n(path));

                    var valuesContainer = paramSelection.appendSelector("div.sd-job-parameter-values");
                    var actionButtons = paramSelection.appendSelector("div.sd-action-buttons");
                    var addButton = actionButtons.appendSelector('button.sd-add-job-parameter-value-button.icon-button');
                    addButton.appendSelector("i.material-icons").html('add');

                    paramSelection.classed('invalid', !d.validate(value));
                    var callbacks = {};
                    callbacks.onValueRemoved = function (v, i) {
                        value.splice(i, 1);
                        self.buildParameterValues(valuesContainer, d, value, path, callbacks);
                        addButton.classed('sd-hidden', value.length >= d.maxOccurs);
                        callbacks.onChange();
                    };
                    callbacks.onChange = function () {
                        paramSelection.classed('invalid', !d.validate(value));
                        onChange();
                    };
                    callbacks.onInput = function () {
                        paramSelection.classed('invalid', !d.validate(value));
                        onInput();
                    };

                    addButton.attr('title', _i18n.i18n.t('jobParametersBuilder.buttons.addParameterValue')).classed('sd-hidden', value.length >= d.maxOccurs).on('click', function () {
                        value.push(self.getEmptyValue(d.type));
                        _sdUtils.Utils.set(self.pristine, path + "[" + (value.length - 1) + "]", true);
                        self.buildParameterValues(valuesContainer, d, value, path, callbacks);
                        addButton.classed('sd-hidden', value.length >= d.maxOccurs);
                        callbacks.onChange();
                    });

                    self.buildParameterValues(valuesContainer, d, value, path, callbacks);
                }
            });
        }
    }, {
        key: "buildParameterValues",
        value: function buildParameterValues(container, paramDefinition, values, path, callbacks) {
            var self = this;
            container.html("");

            var paramValues = container.selectAll(".sd-job-parameter-value").data(values);

            paramValues.exit().remove();
            var paramValuesEnter = paramValues.enter().appendSelector('div.sd-job-parameter-value');

            var paramValuesMerge = paramValuesEnter.merge(paramValues);

            var indexToSelection = {};

            var customValidator = _sdUtils.Utils.get(self.customParamsConfig, path + '.customValidator');

            function checkCustomValidator() {
                var allValid = true;
                if (customValidator) {
                    customValidator(values).forEach(function (isValid, i) {
                        var selection = indexToSelection[i];
                        var valid = paramDefinition.validateSingleValue(values[i]) && isValid;
                        selection.classed('invalid', !valid);
                        allValid = allValid && valid;
                    });
                }

                return allValid;
            }

            self.customValidators[path] = checkCustomValidator;

            paramValuesEnter.each(function (value, i) {
                var derivedValueUpdaters = [];

                function updateDerivedValues() {
                    derivedValueUpdaters.forEach(function (updater) {
                        return updater(values[i]);
                    });
                }

                var selection = d3.select(this);
                indexToSelection[i] = selection;

                if (_jobParameterDefinition.PARAMETER_TYPE.COMPOSITE == paramDefinition.type) {
                    var nestedParameters = selection.selectOrAppend("div.sd-nested-parameters");
                    var onChange = function onChange() {
                        selection.classed('invalid', !paramDefinition.validateSingleValue(value));
                        checkCustomValidator();
                        updateDerivedValues();
                        if (callbacks.onChange) {
                            callbacks.onChange();
                        }
                    };
                    var onInput = function onInput() {
                        updateDerivedValues();
                        selection.classed('invalid', !paramDefinition.validateSingleValue(value));
                        checkCustomValidator();
                        if (callbacks.onInput) {
                            callbacks.onInput();
                        }
                    };

                    self.build(nestedParameters, paramDefinition.nestedParameters, value, path, onChange, onInput);
                    selection.classed('invalid', !paramDefinition.validateSingleValue(value));
                    selection.classed('sd-pristine', _sdUtils.Utils.get(self.pristine, path + "[" + i + "]", false));
                } else {
                    self.buildParameterSingleValue(selection, paramDefinition, {
                        get: function get() {
                            return values[i];
                        },
                        set: function set(v) {
                            return values[i] = v;
                        }
                    }, path, function () {
                        updateDerivedValues();
                        checkCustomValidator();
                        if (callbacks.onChange) {
                            callbacks.onChange();
                        }
                    }, function () {
                        updateDerivedValues();
                        checkCustomValidator();
                        if (callbacks.onInput) {
                            callbacks.onInput();
                        }
                    });
                }

                var derivedValuesConfigs = _sdUtils.Utils.get(self.customParamsConfig, path + '._derivedValues');
                if (derivedValuesConfigs) {
                    derivedValuesConfigs.forEach(function (derivedValueConfig) {
                        var updater = self.buildDerivedValue(selection, derivedValueConfig, path);
                        updater(value);
                        derivedValueUpdaters.push(updater);
                    });
                }

                var actionButtons = selection.appendSelector("div.sd-action-buttons");
                var removeButton = actionButtons.appendSelector('button.sd-remove-job-parameter-value-button.icon-button');
                removeButton.appendSelector("i.material-icons").html('remove');
                removeButton.attr('title', _i18n.i18n.t('jobParametersBuilder.buttons.removeParameterValue')).classed('sd-hidden', values.length <= paramDefinition.minOccurs).on('click', function (d) {
                    return callbacks.onValueRemoved(d, i);
                });
            });

            checkCustomValidator();

            paramValuesMerge.each(function (value, i) {});
        }
    }, {
        key: "buildDerivedValue",
        value: function buildDerivedValue(container, derivedValueConfig, path) {
            var self = this;

            var inputId = _sdUtils.Utils.guid();
            var selection = container.appendSelector('div.input-group.sd-derived-value');
            var name = this.getParamNameI18n(path + '.' + derivedValueConfig.name);
            var input = selection.append('input').attr('type', 'text').attr("disabled", "disabled");

            selection.appendSelector('span.bar');
            var label = selection.append('label').attr('for', inputId).html(name);

            return function (paramValue) {
                input.node().value = derivedValueConfig.value(paramValue);
                _appUtils.AppUtils.updateInputClass(input);
            };
        }
    }, {
        key: "buildParameterSingleValue",
        value: function buildParameterSingleValue(container, paramDefinition, valueAccessor, path, onChange, onInput) {
            var _this = this;

            var self = this;
            var temp = {};

            var inputId = _sdUtils.Utils.guid();
            var selection = container.appendSelector('div.input-group');
            selection.classed('sd-parameter-' + paramDefinition.name, true);
            var help = this.getParamHelpI18n(path);
            if (help) {
                var helpContainer = container.appendSelector('div.sd-help-icon');
                helpContainer.html('<i class="material-icons">info_outline</i>');
                _sdTreeDesigner.Tooltip.attach(helpContainer, function (d) {
                    return help;
                }, 5, 15);
            }

            var options = _sdUtils.Utils.get(self.customParamsConfig, path + '.options', null);

            var inputType = this.paramTypeToInputType[paramDefinition.type];
            var additionalInputAttrs = this.paramTypeToInputAttrs[paramDefinition.type];
            var input;
            if (options && options.length) {
                inputType = 'select';
                input = selection.append('select');
                var optionsSel = input.selectAll("option").data([null].concat(options));
                optionsSel.enter().append("option").attr("value", function (d) {
                    return d;
                }).text(function (d) {
                    return d;
                });

                if (_sdUtils.Utils.get(self.customParamsConfig, path + '.optionsAutocomplete', null)) {
                    var autocomplete = new _autocomplete.Autocomplete(input);
                    input = autocomplete.getInput();
                }
            } else {
                input = selection.append('input').attr('type', inputType);

                if (additionalInputAttrs) {
                    additionalInputAttrs.forEach(function (attr) {
                        return input.attr(attr.name, attr.value);
                    });
                }
            }

            input.attr('id', inputId);

            input.classed('sd-input', true);
            input.on('input change', function (d, i) {
                var value = self.parseInput(this.value, paramDefinition.type);
                if (inputType == 'checkbox') {
                    value = this.checked;
                }
                if (!paramDefinition.validateSingleValue(value)) {
                    d3.select(this).classed('invalid', true);
                } else {
                    d3.select(this).classed('invalid', false);
                }

                valueAccessor.set(value);
                if (d3.event.type == 'change') {
                    if (onChange) {
                        onChange();
                    }
                }

                if (d3.event.type == 'input') {
                    if (onInput) {
                        onInput();
                    }
                }

                _appUtils.AppUtils.updateInputClass(d3.select(this));
            }).each(function (d, i) {
                var value = valueAccessor.get();
                if (inputType == 'checkbox') {
                    this.checked = value;
                } else {
                    this.value = value;
                }
                temp[i] = {};
                temp[i].pristineVal = value;
                d3.select(this).classed('invalid', !paramDefinition.validateSingleValue(value));
                _appUtils.AppUtils.updateInputClass(d3.select(this));
            });

            selection.appendSelector('span.bar');
            var label = selection.append('label').attr('for', inputId).html(function (d) {
                var label = _this.getParamNameI18n(path);
                return label;
            });
            input.node().value = valueAccessor.get();
        }
    }, {
        key: "value",
        value: function value(path, _value) {
            return this.jobParameters.value(path, _value);
        }
    }, {
        key: "parseInput",
        value: function parseInput(value, parameterType) {
            if (parameterType === _jobParameterDefinition.PARAMETER_TYPE.DATE) {
                return new Date(value);
            }
            if (parameterType === _jobParameterDefinition.PARAMETER_TYPE.NUMBER || parameterType === _jobParameterDefinition.PARAMETER_TYPE.INTEGER) {
                return parseFloat(value);
            }
            return value;
        }
    }, {
        key: "getEmptyValue",
        value: function getEmptyValue(parameterType) {
            if (parameterType === _jobParameterDefinition.PARAMETER_TYPE.COMPOSITE) {
                return {};
            }

            return null;
        }
    }, {
        key: "getParamNameI18n",
        value: function getParamNameI18n(path) {
            return _i18n.i18n.t(this.i18nPrefix + '.' + this.jobName + '.param.' + path + '.label');
        }
    }, {
        key: "getParamHelpI18n",
        value: function getParamHelpI18n(path) {
            var key = this.i18nPrefix + '.' + this.jobName + '.param.' + path + '.help';
            var help = _i18n.i18n.t(key);
            return help === key ? null : help;
        }
    }]);

    return JobParametersBuilder;
}();

exports.JobParametersBuilder = JobParametersBuilder;

},{"../app-utils":64,"../autocomplete":66,"../d3":67,"../i18n/i18n":80,"../templates":96,"sd-computations/src/jobs/engine/job-parameter-definition":"sd-computations/src/jobs/engine/job-parameter-definition","sd-tree-designer":131,"sd-utils":"sd-utils"}],85:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JobResultTable = exports.JobResultTableConfig = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

var _i18n = require("../i18n/i18n");

var _d = require("../d3");

var d3 = _interopRequireWildcard(_d);

var _pivotTable = require("../pivot-table");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var jQuery = require('jquery');

var JobResultTableConfig = exports.JobResultTableConfig = function JobResultTableConfig(custom) {
    _classCallCheck(this, JobResultTableConfig);

    this.onRowSelected = function (rows, indexes, event) {};

    this.className = '';

    if (custom) {
        _sdUtils.Utils.deepExtend(this, custom);
    }
};

var JobResultTable = function () {
    function JobResultTable(container, config) {
        _classCallCheck(this, JobResultTable);

        this.container = container;
        this.config = new JobResultTableConfig(config);
        this.init();
    }

    _createClass(JobResultTable, [{
        key: "init",
        value: function init() {
            this.pivotTable = new _pivotTable.PivotTable(this.container.selectOrAppend("div.sd-job-result-table").classed(this.config.className, true));
        }
    }, {
        key: "clickCallback",
        value: function clickCallback(e, value, filters, pivotData) {
            var self = this;
            var selectedIndexes = [];
            var selectedRows = [];
            pivotData.forEachMatchingRecord(filters, function (record) {
                selectedIndexes.push(record['$rowIndex']);
                selectedRows.push(data.data[record['$rowIndex']]);
            });
            self.config.onRowSelected(selectedRows, selectedIndexes, e);
        }
    }, {
        key: "setClassName",
        value: function setClassName(className) {
            if (this.config.className) {
                this.container.selectOrAppend("div.sd-job-result-table").classed(this.config.className, false);
                this.config.className = className;
            }
            this.container.selectOrAppend("div.sd-job-result-table").classed(this.config.className, true);
        }
    }, {
        key: "setData",
        value: function setData(data, jobParameters, job, config) {
            var self = this;
            var derivers = jQuery.pivotUtilities.derivers;
            var pivotOptions = {
                rows: data.rows,
                vals: data.vals,
                cols: data.cols,
                hiddenAttributes: ['$rowIndex'],
                aggregatorName: this.pivotTable.getAggregatorName("maximum"),
                rendererOptions: {
                    table: {
                        clickCallback: function clickCallback(e, value, filters, pivotData) {
                            self.clickCallback(e, value, filters, pivotData);
                        }
                    },
                    heatmap: {
                        colorScaleGenerator: function colorScaleGenerator(values) {
                            var extent = d3.extent(values);

                            return d3.scaleLinear().domain([extent[0], (extent[0] + extent[1]) / 2, extent[1]]).range(["#4b53ff", "#FFF", "#FF0000"]);
                        }
                    }
                },
                rendererName: this.pivotTable.getRendererName("heatmap")
                /*
                 rendererName: 'custom',
                 renderers: {
                 'custom': function(pivotData, options){
                 console.log(pivotData)
                 }
                 }*/

            };

            if (config) {
                if (config.aggregatorName) {
                    pivotOptions.aggregatorName = config.aggregatorName;
                }
                if (config.aggregators) {
                    pivotOptions.aggregators = config.aggregators;
                }
            }

            this.pivotTable.update(data.data.map(function (r, i) {
                return r.concat(i ? i - 1 : '$rowIndex');
            }), pivotOptions);

            // this.drawHeaders(data.headers);
            // this.drawRows(data.rows)
        }
    }, {
        key: "clear",
        value: function clear() {
            this.clearSelection();
            this.pivotTable.clear();
        }
    }, {
        key: "show",
        value: function show() {
            var _show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.container.classed('sd-hidden', !_show);
        }
    }, {
        key: "hide",
        value: function hide() {
            this.show(false);
        }
    }, {
        key: "clearSelection",
        value: function clearSelection() {
            // this.resultTable.selectAll('.sd-selected').classed('sd-selected', false);
        }
    }]);

    return JobResultTable;
}();

exports.JobResultTable = JobResultTable;

},{"../d3":67,"../i18n/i18n":80,"../pivot-table":94,"jquery":"jquery","sd-utils":"sd-utils"}],86:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ProbabilisticSensitivityAnalysisJobResultTable = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _jobResultTable = require("./job-result-table");

var _policy = require("sd-computations/src/policies/policy");

var _sdUtils = require("sd-utils");

var _i18n = require("../i18n/i18n");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var jQuery = require('jquery');

var ProbabilisticSensitivityAnalysisJobResultTable = exports.ProbabilisticSensitivityAnalysisJobResultTable = function (_JobResultTable) {
    _inherits(ProbabilisticSensitivityAnalysisJobResultTable, _JobResultTable);

    function ProbabilisticSensitivityAnalysisJobResultTable(container, config, payoffNumberFormatter, probabilityNumberFormatter) {
        _classCallCheck(this, ProbabilisticSensitivityAnalysisJobResultTable);

        var _this = _possibleConstructorReturn(this, (ProbabilisticSensitivityAnalysisJobResultTable.__proto__ || Object.getPrototypeOf(ProbabilisticSensitivityAnalysisJobResultTable)).call(this, container, config));

        _this.payoffNumberFormatter = payoffNumberFormatter;
        _this.probabilityNumberFormatter = probabilityNumberFormatter;
        return _this;
    }

    _createClass(ProbabilisticSensitivityAnalysisJobResultTable, [{
        key: "setData",
        value: function setData(jobResult, jobParameters, job) {
            var _this2 = this;

            this.jobResult = jobResult;
            var data = { rows: ['policy', 'expected value', 'median', 'standard deviation', 'best probability'], cols: [], vals: ['expected value'], data: [] };

            data.data.push(['policy', 'expected value', 'median', 'standard deviation', 'best probability']);
            jobResult.policies.forEach(function (policy, i) {
                var row = [_policy.Policy.toPolicyString(policy, jobParameters.values.extendedPolicyDescription), _this2.payoffNumberFormatter(jobResult.expectedValues[i]), _this2.payoffNumberFormatter(jobResult.medians[i]), _this2.payoffNumberFormatter(jobResult.standardDeviations[i]), _this2.probabilityNumberFormatter(jobResult.policyIsBestProbabilities[i])];
                data.data.push(row);
            });

            _sdUtils.log.trace(data);
            _get(ProbabilisticSensitivityAnalysisJobResultTable.prototype.__proto__ || Object.getPrototypeOf(ProbabilisticSensitivityAnalysisJobResultTable.prototype), "setData", this).call(this, data, jobParameters, job, {
                aggregatorName: "empty",
                aggregators: {
                    empty: function empty(attributeArray) {
                        return function (data, rowKey, colKey) {
                            return {
                                push: function push(record) {},
                                value: function value() {
                                    return 0;
                                },
                                format: function format(x) {
                                    return _i18n.i18n.t('jobResultTable.policyPreview');
                                },
                                numInputs: 1
                            };
                        };
                    }
                }
            });
        }
    }, {
        key: "clickCallback",
        value: function clickCallback(e, value, filters, pivotData) {
            var self = this;
            var selectedIndexes = [];
            var selectedRows = [];
            pivotData.forEachMatchingRecord(filters, function (record) {
                selectedIndexes.push(record['$rowIndex']);
                selectedRows.push({ policyIndex: record['$rowIndex'] });
            });
            self.config.onRowSelected(selectedRows, selectedIndexes, e);
        }
    }]);

    return ProbabilisticSensitivityAnalysisJobResultTable;
}(_jobResultTable.JobResultTable);

},{"../i18n/i18n":80,"./job-result-table":85,"jquery":"jquery","sd-computations/src/policies/policy":"sd-computations/src/policies/policy","sd-utils":"sd-utils"}],87:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SensitivityAnalysisJobResultTable = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _jobResultTable = require("./job-result-table");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var SensitivityAnalysisJobResultTable = exports.SensitivityAnalysisJobResultTable = function (_JobResultTable) {
    _inherits(SensitivityAnalysisJobResultTable, _JobResultTable);

    function SensitivityAnalysisJobResultTable() {
        _classCallCheck(this, SensitivityAnalysisJobResultTable);

        return _possibleConstructorReturn(this, (SensitivityAnalysisJobResultTable.__proto__ || Object.getPrototypeOf(SensitivityAnalysisJobResultTable)).apply(this, arguments));
    }

    _createClass(SensitivityAnalysisJobResultTable, [{
        key: "setData",
        value: function setData(jobResult, jobParameters, job) {
            this.jobResult = jobResult;

            jobParameters = job.createJobParameters(_sdUtils.Utils.cloneDeep(jobParameters.values));
            jobParameters.values.roundVariables = true;
            var csvDAta = job.jobResultToCsvRows(jobResult, jobParameters);

            if (csvDAta.length) {
                csvDAta[0][0] = 'policy\nnumber';
            }

            var cols = [];
            var totalInColNum = 1;

            jobParameters.values.variables.forEach(function (v) {
                var _totalInColNum = v.length * totalInColNum;
                if (_totalInColNum > 1000) {
                    return;
                }
                totalInColNum = _totalInColNum;
                cols.push(v.name);
            });

            var data = { rows: ['policy'], cols: cols, vals: ['payoff'], data: csvDAta };
            _get(SensitivityAnalysisJobResultTable.prototype.__proto__ || Object.getPrototypeOf(SensitivityAnalysisJobResultTable.prototype), "setData", this).call(this, data);
        }
    }, {
        key: "clickCallback",
        value: function clickCallback(e, value, filters, pivotData) {
            var self = this;
            var selectedIndexes = [];
            var selectedRows = [];
            pivotData.forEachMatchingRecord(filters, function (record) {
                selectedIndexes.push(record['$rowIndex']);
                selectedRows.push(self.jobResult.rows[record['$rowIndex']]);
            });
            self.config.onRowSelected(selectedRows, selectedIndexes, e);
        }
    }]);

    return SensitivityAnalysisJobResultTable;
}(_jobResultTable.JobResultTable);

},{"./job-result-table":85,"sd-utils":"sd-utils"}],88:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SpiderPlot = exports.SpiderPlotConfig = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _lineChart = require("odc-d3/src/line-chart");

var _sdUtils = require("sd-utils");

var _d = require("../d3");

var d3 = _interopRequireWildcard(_d);

var _sdTreeDesigner = require("sd-tree-designer");

var _i18n = require("../i18n/i18n");

var _policy = require("sd-computations/src/policies/policy");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var SpiderPlotConfig = exports.SpiderPlotConfig = function (_LineChartConfig) {
    _inherits(SpiderPlotConfig, _LineChartConfig);

    function SpiderPlotConfig(custom) {
        _classCallCheck(this, SpiderPlotConfig);

        var _this = _possibleConstructorReturn(this, (SpiderPlotConfig.__proto__ || Object.getPrototypeOf(SpiderPlotConfig)).call(this));

        _this.maxWidth = undefined;
        _this.showLegend = true;
        _this.policyIndex = 0;
        _this.guides = true;
        _this.margin = {
            left: 100
        };
        _this.x = { // X axis config
            title: _i18n.i18n.t('job.spider-plot.plot.xAxisTitle'), // axis label
            key: 0,
            domainMargin: 0
        };
        _this.y = { // Y axis config
            title: _i18n.i18n.t('job.spider-plot.plot.yAxisTitle'), // axis label,
            key: 1,
            domainMargin: 0.1
        };
        _this.series = true;
        _this.dotRadius = 3;

        if (custom) {
            _sdUtils.Utils.deepExtend(_this, custom);
        }
        return _this;
    }

    return SpiderPlotConfig;
}(_lineChart.LineChartConfig);

var SpiderPlot = exports.SpiderPlot = function (_LineChart) {
    _inherits(SpiderPlot, _LineChart);

    function SpiderPlot(placeholderSelector, data, config) {
        _classCallCheck(this, SpiderPlot);

        return _possibleConstructorReturn(this, (SpiderPlot.__proto__ || Object.getPrototypeOf(SpiderPlot)).call(this, placeholderSelector, data, new SpiderPlotConfig(config)));
    }

    _createClass(SpiderPlot, [{
        key: "setConfig",
        value: function setConfig(config) {
            return _get(SpiderPlot.prototype.__proto__ || Object.getPrototypeOf(SpiderPlot.prototype), "setConfig", this).call(this, new SpiderPlotConfig(config));
        }
    }, {
        key: "init",
        value: function init() {
            _get(SpiderPlot.prototype.__proto__ || Object.getPrototypeOf(SpiderPlot.prototype), "init", this).call(this);
            this.svg.classed('sd-spider-plot', true);
        }
    }, {
        key: "setData",
        value: function setData(data) {
            var _this3 = this;

            this.config.title = _policy.Policy.toPolicyString(data.policies[this.config.policyIndex]);
            return _get(SpiderPlot.prototype.__proto__ || Object.getPrototypeOf(SpiderPlot.prototype), "setData", this).call(this, data.rows.map(function (r) {
                return {
                    key: r.variableName,
                    values: data.percentageRangeValues.map(function (rangeVal, index) {
                        return [data.percentageRangeValues[index], r.payoffs[_this3.config.policyIndex][index]];
                    })
                };
            }));
        }
    }, {
        key: "initPlot",
        value: function initPlot() {
            d3.select(this.baseContainer).style('max-width', this.config.maxWidth);
            _get(SpiderPlot.prototype.__proto__ || Object.getPrototypeOf(SpiderPlot.prototype), "initPlot", this).call(this);
        }
    }]);

    return SpiderPlot;
}(_lineChart.LineChart);

},{"../d3":67,"../i18n/i18n":80,"odc-d3/src/line-chart":"odc-d3/src/line-chart","sd-computations/src/policies/policy":"sd-computations/src/policies/policy","sd-tree-designer":131,"sd-utils":"sd-utils"}],89:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TornadoDiagramPlot = exports.TornadoDiagramPlotConfig = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _divergingStackedBarChart = require("odc-d3/src/diverging-stacked-bar-chart");

var _sdUtils = require("sd-utils");

var _d = require("../d3");

var d3 = _interopRequireWildcard(_d);

var _sdTreeDesigner = require("sd-tree-designer");

var _i18n = require("../i18n/i18n");

var _policy = require("sd-computations/src/policies/policy");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var TornadoDiagramPlotConfig = exports.TornadoDiagramPlotConfig = function (_DivergingStackedBarC) {
    _inherits(TornadoDiagramPlotConfig, _DivergingStackedBarC);

    function TornadoDiagramPlotConfig(custom) {
        _classCallCheck(this, TornadoDiagramPlotConfig);

        var _this = _possibleConstructorReturn(this, (TornadoDiagramPlotConfig.__proto__ || Object.getPrototypeOf(TornadoDiagramPlotConfig)).call(this));

        _this.maxWidth = undefined;
        _this.margin = {
            left: 150,
            top: 70
        };
        _this.showLegend = true;
        _this.forceLegend = true;
        _this.categoryNames = [_i18n.i18n.t("job.tornado-diagram.plot.legend.low"), _i18n.i18n.t("job.tornado-diagram.plot.legend.high")];
        _this.colorRange = ["#4f81bd", "#9bbb59"];
        _this.policyIndex = 0;
        _this.guides = true;
        _this.middleValue = 1000;
        _this.showBarValues = false;
        _this.x = { // X axis config
            title: _i18n.i18n.t('job.tornado-diagram.plot.xAxisTitle') // axis label
        };

        if (custom) {
            _sdUtils.Utils.deepExtend(_this, custom);
        }
        return _this;
    }

    return TornadoDiagramPlotConfig;
}(_divergingStackedBarChart.DivergingStackedBarChartConfig);

var TornadoDiagramPlot = exports.TornadoDiagramPlot = function (_DivergingStackedBarC2) {
    _inherits(TornadoDiagramPlot, _DivergingStackedBarC2);

    function TornadoDiagramPlot(placeholderSelector, data, config) {
        _classCallCheck(this, TornadoDiagramPlot);

        return _possibleConstructorReturn(this, (TornadoDiagramPlot.__proto__ || Object.getPrototypeOf(TornadoDiagramPlot)).call(this, placeholderSelector, data, new TornadoDiagramPlotConfig(config)));
    }

    _createClass(TornadoDiagramPlot, [{
        key: "setConfig",
        value: function setConfig(config) {
            return _get(TornadoDiagramPlot.prototype.__proto__ || Object.getPrototypeOf(TornadoDiagramPlot.prototype), "setConfig", this).call(this, new TornadoDiagramPlotConfig(config));
        }
    }, {
        key: "init",
        value: function init() {
            _get(TornadoDiagramPlot.prototype.__proto__ || Object.getPrototypeOf(TornadoDiagramPlot.prototype), "init", this).call(this);
            this.svg.classed('sd-tornado-diagram-plot', true);
        }
    }, {
        key: "setData",
        value: function setData(data) {
            var _this3 = this;

            this.config.middleValue = data.defaultPayoff;
            this.config.title = _policy.Policy.toPolicyString(data.policies[this.config.policyIndex]);
            return _get(TornadoDiagramPlot.prototype.__proto__ || Object.getPrototypeOf(TornadoDiagramPlot.prototype), "setData", this).call(this, data.rows.map(function (r) {
                var varExtent = data.variableExtents[data.variableNames.indexOf(r.variableName)];
                return {
                    key: r.variableName + ' [' + varExtent[0] + '; ' + varExtent[1] + ']',
                    values: [Math.max(0, data.defaultPayoff - r.extents[_this3.config.policyIndex][0]), Math.max(0, r.extents[_this3.config.policyIndex][1] - data.defaultPayoff)],
                    categories: r.extentVariableValues[_this3.config.policyIndex][0] <= r.extentVariableValues[_this3.config.policyIndex][1] ? [0, 1] : [1, 0]
                };
            }));
        }
    }, {
        key: "initPlot",
        value: function initPlot() {
            d3.select(this.baseContainer).style('max-width', this.config.maxWidth);
            _get(TornadoDiagramPlot.prototype.__proto__ || Object.getPrototypeOf(TornadoDiagramPlot.prototype), "initPlot", this).call(this);
        }
    }]);

    return TornadoDiagramPlot;
}(_divergingStackedBarChart.DivergingStackedBarChart);

},{"../d3":67,"../i18n/i18n":80,"odc-d3/src/diverging-stacked-bar-chart":"odc-d3/src/diverging-stacked-bar-chart","sd-computations/src/policies/policy":"sd-computations/src/policies/policy","sd-tree-designer":131,"sd-utils":"sd-utils"}],90:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LeagueTableDialog = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _dialog = require("../dialogs/dialog");

var _sdUtils = require("sd-utils");

var _templates = require("../templates");

var _i18n = require("../i18n/i18n");

var _appUtils = require("../app-utils");

var _loadingIndicator = require("../loading-indicator");

var _exporter = require("../exporter");

var _leagueTable = require("./league-table");

var _leagueTablePlot = require("./league-table-plot");

var _policy = require("sd-computations/src/policies/policy");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var LeagueTableDialog = exports.LeagueTableDialog = function (_Dialog) {
    _inherits(LeagueTableDialog, _Dialog);

    function LeagueTableDialog(app) {
        _classCallCheck(this, LeagueTableDialog);

        var _this = _possibleConstructorReturn(this, (LeagueTableDialog.__proto__ || Object.getPrototypeOf(LeagueTableDialog)).call(this, app.container.select('.sd-league-table-dialog'), app));

        _this.computationsManager = _this.app.computationsManager;
        _this.progressBarContainer = _this.container.select(".sd-job-progress-bar-container");
        _this.progressBar = _this.progressBarContainer.select(".sd-progress-bar");
        _this.jobResultsContainer = _this.container.select(".sd-league-table-job-results");
        _this.initButtons();

        _this.job = _this.computationsManager.getJobByName("league-table");
        return _this;
    }

    _createClass(LeagueTableDialog, [{
        key: "onOpen",
        value: function onOpen() {
            this.clear();
            this.runJob();
        }
    }, {
        key: "onClosed",
        value: function onClosed() {
            this.clear();
            if (!this.jobInstanceManager) {
                return;
            }
            this.jobInstanceManager.terminate();
        }
    }, {
        key: "clearWarnings",
        value: function clearWarnings() {
            this.container.select(".sd-league-table-warnings").selectAll("*").remove();
        }
    }, {
        key: "addWarning",
        value: function addWarning(warnConf) {
            var msg = _i18n.i18n.t("job." + this.job.name + ".warnings." + warnConf.name, warnConf.data);

            var msgHTML = _templates.Templates.get("warningMessage", {
                message: msg
            });
            this.container.select(".sd-league-table-warnings").appendSelector("div.sd-league-table-warning").html(msgHTML);
        }
    }, {
        key: "initResultTable",
        value: function initResultTable(result) {
            var _this2 = this;

            var config = {
                onRowSelected: function onRowSelected(row, i) {
                    return _this2.onResultRowSelected(row, i);
                },
                onRowHover: function onRowHover(row, i) {
                    return _this2.resultPlot.emphasize(row.row, true);
                },
                onRowHoverOut: function onRowHoverOut(row, i) {
                    return _this2.resultPlot.emphasize(row.row, false);
                }
            };

            if (this.resultTable) {
                this.resultTable.clear();
                this.resultTable.hide();
            }

            this.resultTable = new _leagueTable.LeagueTable(this.jobResultsContainer.select(".sd-job-result-table-container"), config);
            this.resultTable.setData(result, this.app.dataModel);
            this.resultTable.show();
        }
    }, {
        key: "initResultPlot",
        value: function initResultPlot(result) {
            var _this3 = this;

            var self = this;
            var config = {
                maxWidth: self.app.config.leagueTable.plot.maxWidth,
                weightLowerBound: result.weightLowerBound,
                defaultWeight: result.defaultWeight,
                weightUpperBound: result.weightUpperBound,
                payoffCoeffs: result.payoffCoeffs,
                payoffNames: result.payoffNames,
                x: {
                    value: function value(d, key) {
                        return d.payoffs[0];
                    },
                    title: result.payoffNames[0]
                },
                y: {
                    value: function value(d, key) {
                        return d.payoffs[1];
                    },
                    title: result.payoffNames[1]
                },
                onDotHover: function onDotHover(d, i) {
                    return _this3.resultTable.emphasize(d, true);
                },
                onDotHoverOut: function onDotHoverOut(d, i) {
                    return _this3.resultTable.emphasize(d, false);
                },

                color: function color(group) {
                    var groupsConf = self.app.config.leagueTable.plot.groups;
                    var groupConf = groupsConf[group.key];
                    if (groupConf) {
                        return groupConf.color;
                    }
                    return 'black';
                },
                groupOrdering: {
                    'dominated': 0,
                    'extended-dominated': 1,
                    'highlighted': 2,
                    'highlighted-default': 3,
                    'default': 4

                },
                groups: {
                    value: function value(r) {
                        if (r.optimalForDefaultWeight) {
                            return 'highlighted-default';
                        } else if (r.optimal) {
                            return 'highlighted';
                        } else if (r.dominatedBy !== null) {
                            return 'dominated';
                        } else if (r.extendedDominatedBy !== null) {
                            return 'extended-dominated';
                        }

                        return "default";
                    },
                    displayValue: function displayValue(groupKey) {
                        return _i18n.i18n.t("leagueTable.plot.groups." + groupKey);
                    }
                }
            };

            this.resultPlot = new _leagueTablePlot.LeagueTablePlot(this.jobResultsContainer.select(".sd-job-result-plot-container").node(), result.rows, config);
            setTimeout(function () {
                self.resultPlot.init();
            }, 100);
        }
    }, {
        key: "onResized",
        value: function onResized() {
            if (this.resultPlot) {
                this.resultPlot.init();
            }
        }
    }, {
        key: "disableActionButtonsAndShowLoadingIndicator",
        value: function disableActionButtonsAndShowLoadingIndicator() {
            var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (disable) {
                _loadingIndicator.LoadingIndicator.show();
            } else {
                _loadingIndicator.LoadingIndicator.hide();
            }
            this.container.select('.sd-league-table-action-buttons').selectAll('button').attr('disabled', disable ? 'disabled' : undefined);
        }
    }, {
        key: "initJobParams",
        value: function initJobParams() {
            this.jobParameters = this.job.createJobParameters({
                ruleName: this.computationsManager.getCurrentRule().name,
                weightLowerBound: this.app.dataModel.weightLowerBound,
                defaultWeight: this.app.dataModel.defaultCriterion1Weight,
                weightUpperBound: this.app.dataModel.weightUpperBound

            });
        }
    }, {
        key: "validateParams",
        value: function validateParams() {
            this.initJobParams();
            return this.jobParameters.validate();
        }
    }, {
        key: "runJob",
        value: function runJob() {
            var _this4 = this;

            this.initJobParams();

            if (!this.validateParams()) {
                alert(_i18n.i18n.t("job.errors.params", { "jobName": _i18n.i18n.t("job.league-table.name") }));
                return;
            }
            this.disableActionButtonsAndShowLoadingIndicator();
            this.computationsManager.runJobWithInstanceManager(this.job.name, this.jobParameters.values, {
                onJobStarted: this.onJobStarted,
                onJobCompleted: this.onJobCompleted,
                onJobFailed: this.onJobFailed,
                onJobStopped: this.onJobStopped,
                onJobTerminated: this.onJobTerminated,
                onProgress: this.onProgress,
                callbacksThisArg: this
            }).then(function (jobInstanceManager) {
                _this4.jobInstanceManager = jobInstanceManager;
            }).catch(function (e) {
                _sdUtils.log.error(e);
            }).then(function () {
                _this4.disableActionButtonsAndShowLoadingIndicator(false);
            });
        }
    }, {
        key: "initButtons",
        value: function initButtons() {
            var _this5 = this;

            this.downloadCsvButtons = this.container.select(".sd-download-csv-button ").on('click', function () {
                _this5.downloadCSV();
            });

            this.clearButton = this.container.select(".sd-clear-button ").on('click', function () {
                _this5.clear(true);
            });
        }
    }, {
        key: "clear",
        value: function clear() {
            this.clearResults();
            this.clearWarnings();
            this.setProgress(0);
            this.markAsError(false);

            _appUtils.AppUtils.hide(this.progressBarContainer);
            _appUtils.AppUtils.hide(this.downloadCsvButtons);
            _appUtils.AppUtils.hide(this.jobResultsContainer);
            this.disableActionButtonsAndShowLoadingIndicator(false);
        }
    }, {
        key: "clearResults",
        value: function clearResults() {
            if (this.resultTable) {
                this.resultTable.clear();
                this.resultTable.hide();
            }
        }
    }, {
        key: "onJobStarted",
        value: function onJobStarted() {
            _appUtils.AppUtils.hide(this.downloadCsvButtons);

            _appUtils.AppUtils.show(this.progressBarContainer);

            this.disableActionButtonsAndShowLoadingIndicator(false);
            this.onProgress(this.jobInstanceManager ? this.jobInstanceManager.progress : null);
        }
    }, {
        key: "onJobCompleted",
        value: function onJobCompleted(result) {
            _appUtils.AppUtils.show(this.jobResultsContainer);
            _appUtils.AppUtils.show(this.downloadCsvButtons);

            _appUtils.AppUtils.hide(this.progressBarContainer);
            this.disableActionButtonsAndShowLoadingIndicator(false);
            this.displayResult(result);
        }
    }, {
        key: "displayResult",
        value: function displayResult(result) {
            _sdUtils.log.debug(result);
            this.result = result;
            this.initResultTable(result);

            this.initResultPlot(result);
        }
    }, {
        key: "terminateJob",
        value: function terminateJob() {
            this.disableActionButtonsAndShowLoadingIndicator();
            this.jobInstanceManager.terminate();
        }
    }, {
        key: "onJobFailed",
        value: function onJobFailed(errors) {
            _appUtils.AppUtils.hide(this.downloadCsvButtons);
            this.disableActionButtonsAndShowLoadingIndicator(false);
            this.markAsError();
            var self = this;
            setTimeout(function () {
                var errorMessage = "";
                errors.forEach(function (e, i) {
                    if (i) {
                        errorMessage += "\n\n";
                    }

                    var msgKeyBase = "job." + self.job.name + ".errors.";
                    var msgKey = msgKeyBase + e.message;
                    var msg = _i18n.i18n.t(msgKey, e.data);
                    e.jobName = _i18n.i18n.t("job.league-table.name");
                    if (msg === msgKey) {
                        msg = _i18n.i18n.t("job.errors.generic", e);
                    }

                    errorMessage += msg;
                    if (e.data && e.data.variables) {
                        _sdUtils.Utils.forOwn(e.data.variables, function (value, key) {
                            errorMessage += "\n";
                            errorMessage += key + " = " + value;
                        });
                    }
                });

                alert(errorMessage);
                self.terminateJob();
            }, 10);
        }
    }, {
        key: "markAsError",
        value: function markAsError() {
            var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.container.classed('sd-job-error', error);
        }
    }, {
        key: "onJobStopped",
        value: function onJobStopped() {
            _appUtils.AppUtils.hide(this.stopJobButton);
            _appUtils.AppUtils.show(this.resumeJobButton);
            this.disableActionButtonsAndShowLoadingIndicator(false);
        }
    }, {
        key: "onJobTerminated",
        value: function onJobTerminated() {
            this.clear();
        }
    }, {
        key: "onProgress",
        value: function onProgress(progress) {
            this.setProgress(progress);
        }
    }, {
        key: "setProgress",
        value: function setProgress(progress) {
            var percents = 0;
            var value = "0%";
            if (progress) {
                value = progress.current + " / " + progress.total;
                percents = progress.current * 100 / progress.total;
            }

            this.progressBar.style("width", percents + "%");
            this.progressBar.html(value);
        }
    }, {
        key: "onResultRowSelected",
        value: function onResultRowSelected(row, index) {
            var _this6 = this;

            var title = _policy.Policy.toPolicyString(row.policy, false);
            this.app.showPolicyPreview(title, row.policy, function () {
                _this6.resultTable.clearSelection();
            });
        }
    }, {
        key: "downloadCSV",
        value: function downloadCSV() {
            _exporter.Exporter.saveAsCSV(this.getRows(), 'leaguetable');
        }
    }, {
        key: "getRows",
        value: function getRows() {
            var params = _sdUtils.Utils.cloneDeep(this.jobParameters.values);
            params.extendedPolicyDescription = false;
            return this.job.jobResultToCsvRows(this.result, this.job.createJobParameters(params));
        }
    }]);

    return LeagueTableDialog;
}(_dialog.Dialog);

},{"../app-utils":64,"../dialogs/dialog":70,"../exporter":73,"../i18n/i18n":80,"../loading-indicator":93,"../templates":96,"./league-table":92,"./league-table-plot":91,"sd-computations/src/policies/policy":"sd-computations/src/policies/policy","sd-utils":"sd-utils"}],91:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LeagueTablePlot = exports.LeagueTablePlotConfig = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _scatterplot = require("odc-d3/src/scatterplot");

var _sdUtils = require("sd-utils");

var _d = require("../d3");

var d3 = _interopRequireWildcard(_d);

var _sdTreeDesigner = require("sd-tree-designer");

var _i18n = require("../i18n/i18n");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var LeagueTablePlotConfig = exports.LeagueTablePlotConfig = function (_ScatterPlotConfig) {
    _inherits(LeagueTablePlotConfig, _ScatterPlotConfig);

    // d3ColorCategory = false;

    function LeagueTablePlotConfig(custom) {
        _classCallCheck(this, LeagueTablePlotConfig);

        var _this = _possibleConstructorReturn(this, (LeagueTablePlotConfig.__proto__ || Object.getPrototypeOf(LeagueTablePlotConfig)).call(this));

        _this.maxWidth = undefined;
        _this.weightLowerBound = 0;
        _this.weightUpperBound = Infinity;
        _this.gradientArrowLength = 30;
        _this.gradientArrowOffset = 10;
        _this.payoffCoeffs = [1, 1];
        _this.payoffNames = [];
        _this.showLegend = true;
        _this.forceLegend = true;
        _this.legend = {
            width: 125
        };
        _this.guides = true;
        _this.dotRadius = 5;
        _this.emphasizedDotRadius = 8;

        _this.dotId = function (d, i) {
            return 'sd-league-table-dot-' + d.id;
        };

        if (custom) {
            _sdUtils.Utils.deepExtend(_this, custom);
        }

        return _this;
    }

    return LeagueTablePlotConfig;
}(_scatterplot.ScatterPlotConfig);

var LeagueTablePlot = function (_ScatterPlot) {
    _inherits(LeagueTablePlot, _ScatterPlot);

    function LeagueTablePlot(placeholderSelector, data, config) {
        _classCallCheck(this, LeagueTablePlot);

        return _possibleConstructorReturn(this, (LeagueTablePlot.__proto__ || Object.getPrototypeOf(LeagueTablePlot)).call(this, placeholderSelector, data, new LeagueTablePlotConfig(config)));
    }

    _createClass(LeagueTablePlot, [{
        key: "setConfig",
        value: function setConfig(config) {
            return _get(LeagueTablePlot.prototype.__proto__ || Object.getPrototypeOf(LeagueTablePlot.prototype), "setConfig", this).call(this, new LeagueTablePlotConfig(config));
        }
    }, {
        key: "init",
        value: function init() {
            _get(LeagueTablePlot.prototype.__proto__ || Object.getPrototypeOf(LeagueTablePlot.prototype), "init", this).call(this);
            this.svg.classed('sd-league-table-plot', true);
            this.initArrowMarker("triangle");
        }
    }, {
        key: "initArrowMarker",
        value: function initArrowMarker(id) {

            var defs = this.svg.selectOrAppend("defs");
            defs.append("marker").attr("id", id).attr("viewBox", "0 -5 10 10").attr("refX", 5).attr("refY", 0).attr("markerWidth", 4).attr("markerHeight", 4).attr("orient", "auto").append("path").attr("d", "M0,-5L10,0L0,5").attr("class", "arrowHead");
        }
    }, {
        key: "initPlot",
        value: function initPlot() {
            d3.select(this.baseContainer).style('max-width', this.config.maxWidth);
            this.checkOrdering();
            _get(LeagueTablePlot.prototype.__proto__ || Object.getPrototypeOf(LeagueTablePlot.prototype), "initPlot", this).call(this);
        }
    }, {
        key: "checkOrdering",
        value: function checkOrdering() {
            var _this3 = this;

            if (this.config.groupOrdering) {
                var getOrdering = function getOrdering(d) {
                    var g = _this3.config.groups.value(d);
                    return _this3.config.groupOrdering[g] === undefined ? 999 : _this3.config.groupOrdering[g];
                };
                this.data.sort(function (a, b) {
                    return getOrdering(a) - getOrdering(b);
                });
            }
        }
    }, {
        key: "update",
        value: function update(newData) {
            this.checkOrdering();
            _get(LeagueTablePlot.prototype.__proto__ || Object.getPrototypeOf(LeagueTablePlot.prototype), "update", this).call(this, newData);

            this.updateIcerLines();
            this.updateDominatedRegion();
            this.updateGradientArrows();
            this.updateDotLabels();
        }
    }, {
        key: "updateIcerLines",
        value: function updateIcerLines() {
            var _this4 = this;

            var self = this;
            var linesContainerClass = this.linesContainerClass = this.prefixClass("lines-container");
            var linesContainerSelector = "g." + linesContainerClass;
            var linesContainer = this.linesContainer = self.svgG.selectOrInsert(linesContainerSelector, "." + self.dotsContainerClass);

            var clipPathId = self.prefixClass("clip-" + _sdUtils.Utils.guid());
            var linesContainerClip = linesContainer.selectOrAppend("clipPath").attr("id", clipPathId);

            linesContainerClip.selectOrAppend('rect').attr('width', self.plot.width).attr('height', self.plot.height).attr('x', 0).attr('y', 0);

            linesContainer.attr("clip-path", function (d, i) {
                return "url(#" + clipPathId + ")";
            });

            var line = d3.line().x(this.plot.x.map).y(this.plot.y.map);

            var linePoints = this.plot.data.filter(function (d) {
                return d.incratio !== null;
            }).sort(this.plot.x.map);
            var highlightedPoints = this.plot.data.filter(function (d) {
                return ["highlighted", "highlighted-default"].indexOf(_this4.plot.groupValue(d)) !== -1;
            }).sort(function (a, b) {
                return _this4.plot.x.map(a) - _this4.plot.x.map(b);
            });
            var highlightedDefaultPoints = highlightedPoints.filter(function (d) {
                return ["highlighted-default"].indexOf(_this4.plot.groupValue(d)) !== -1;
            });

            this.dominatedRegionPoints = highlightedPoints.map(function (d) {
                return [_this4.plot.x.map(d), _this4.plot.y.map(d)];
            });

            if (!highlightedPoints.length) {
                linesContainer.selectAll("*").remove();
                return;
            }

            linesContainer.selectOrAppend("path." + this.prefixClass('middle-incratio')).attr("shape-rendering", "optimizeQuality").attr("fill", "none").attr("stroke-width", 1).attr("stroke", 'black').attr("d", line(highlightedPoints));

            highlightedPoints.sort(function (a, b) {
                return a.incratio - b.incratio || _this4.config.payoffCoeffs[0] * (_this4.plot.x.map(a) - _this4.plot.x.map(b));
            });

            var minPoint = highlightedPoints[0];
            var maxPoint = highlightedPoints[highlightedPoints.length - 1];

            var lowPoint = void 0;
            var highPoint = void 0;

            var xAxisExtent = [this.plot.x.scale.invert(0), this.plot.x.scale.invert(this.plot.width)];
            var yAxisExtent = [this.plot.y.scale.invert(this.plot.height), this.plot.y.scale.invert(0)];

            var sign = this.config.payoffCoeffs[0] * this.config.payoffCoeffs[1] > 0 ? 1 : -1;

            var infLowY = this.config.payoffCoeffs[0] > 0 ? this.plot.height : 0;
            if (sign > 0) {
                infLowY = this.config.payoffCoeffs[0] < 0 ? this.plot.height : 0;
            }
            var infLowPoint = [this.plot.x.map(minPoint), infLowY];

            if (this.config.weightLowerBound == Infinity) {
                lowPoint = infLowPoint;
            } else {
                var x = this.config.payoffCoeffs[0] > 0 ? xAxisExtent[0] : xAxisExtent[1];
                lowPoint = [this.plot.x.scale(x), this.plot.y.scale(sign * this.config.weightLowerBound * (this.plot.x.value(minPoint) - x) + this.plot.y.value(minPoint))];
                if (Math.abs(lowPoint[1]) > 1000000) {
                    lowPoint = infLowPoint;
                }
            }

            var infHighPoint = [this.plot.x.map(maxPoint), this.config.payoffCoeffs[1] > 0 ? this.plot.height : 0];
            if (this.config.weightUpperBound == Infinity) {
                highPoint = infHighPoint;
            } else {

                var _x = this.config.payoffCoeffs[1] > 0 ? xAxisExtent[0] : xAxisExtent[1];

                if (sign > 0) {
                    _x = this.config.payoffCoeffs[1] < 0 ? xAxisExtent[0] : xAxisExtent[1];
                }

                highPoint = [this.plot.x.scale(_x), this.plot.y.scale(-sign * this.config.weightUpperBound * (_x - this.plot.x.value(maxPoint)) + this.plot.y.value(maxPoint))];
                // highPoint = [this.plot.x.scale(x), this.plot.y.scale(EE.toFloat(EE.multiply(-sign, EE.multiply(this.config.weightUpperBound, (x - this.plot.x.value(maxPoint))))) + this.plot.y.value(maxPoint))];
                if (Math.abs(highPoint[1]) > 1000000) {
                    highPoint = infHighPoint;
                }
            }

            if (highlightedDefaultPoints.length) {
                var defaultPoint = highlightedDefaultPoints[0];
                var defLowPoint = infLowPoint;
                var defHighPoint = infHighPoint;
                if (this.config.defaultWeight !== Infinity) {
                    var _x2 = this.config.payoffCoeffs[0] > 0 ? xAxisExtent[0] : xAxisExtent[1];
                    defLowPoint = [this.plot.x.scale(_x2), this.plot.y.scale(sign * this.config.defaultWeight * (this.plot.x.value(defaultPoint) - _x2) + this.plot.y.value(defaultPoint))];
                    _x2 = this.config.payoffCoeffs[1] > 0 ? xAxisExtent[0] : xAxisExtent[1];
                    if (sign > 0) {
                        _x2 = this.config.payoffCoeffs[1] < 0 ? xAxisExtent[0] : xAxisExtent[1];
                    }
                    defHighPoint = [this.plot.x.scale(_x2), this.plot.y.scale(-sign * this.config.defaultWeight * (_x2 - this.plot.x.value(defaultPoint)) + this.plot.y.value(defaultPoint))];
                }
                linesContainer.selectOrAppend("path." + this.prefixClass('default-incratio')).attr("shape-rendering", "optimizeQuality").attr("fill", "none").attr("stroke-width", 2).attr("stroke", 'black').attr("d", d3.line()([defLowPoint, defHighPoint]));
            } else {
                linesContainer.select("path." + this.prefixClass('default-incratio')).remove();
            }

            this.dominatedRegionPoints.unshift(lowPoint);
            this.dominatedRegionPoints.push(highPoint);

            linesContainer.selectOrAppend("path." + this.prefixClass('low-incratio')).attr("shape-rendering", "optimizeQuality").attr("fill", "none").attr("stroke-width", 2).attr("stroke", 'black').attr("d", d3.line()([lowPoint, [this.plot.x.map(minPoint), this.plot.y.map(minPoint)]]));

            linesContainer.selectOrAppend("path." + this.prefixClass('high-incratio')).attr("shape-rendering", "optimizeQuality").attr("fill", "none").attr("stroke-width", 2).attr("stroke", 'black').attr("d", d3.line()([highPoint, [this.plot.x.map(maxPoint), this.plot.y.map(maxPoint)]]));
        }
    }, {
        key: "updateDominatedRegion",
        value: function updateDominatedRegion() {
            var self = this;
            var dominatedRegionContainerClass = this.prefixClass("dominated-region-container");
            var dominatedRegionContainerSelector = "g." + dominatedRegionContainerClass;
            var dominatedRegionContainer = self.svgG.selectOrInsert(dominatedRegionContainerSelector, "." + this.linesContainerClass);

            var clipPathId = self.prefixClass("clip-" + _sdUtils.Utils.guid());
            var dominatedRegionContainerClip = dominatedRegionContainer.selectOrAppend("clipPath").attr("id", clipPathId);

            dominatedRegionContainerClip.selectOrAppend('rect').attr('width', self.plot.width).attr('height', self.plot.height).attr('x', 0).attr('y', 0);

            dominatedRegionContainer.attr("clip-path", function (d, i) {
                return "url(#" + clipPathId + ")";
            });

            //draw dominated region

            var worstPoint = [this.config.payoffCoeffs[0] < 0 ? self.plot.width : 0, this.config.payoffCoeffs[1] < 0 ? 0 : self.plot.height];

            this.dominatedRegionPoints.push(worstPoint);

            if (this.dominatedRegionPoints.some(function (p) {
                return worstPoint[1] ? p[1] <= 0 : p[1] >= self.plot.height;
            })) {
                this.dominatedRegionPoints.push([worstPoint[0], worstPoint[1] ? 0 : self.plot.height]);
            }

            this.dominatedRegionPoints.sort(function (a, b) {
                return a[0] - b[0];
            });
            this.dominatedRegionPoints = this.dominatedRegionPoints.reduce(function (prev, curr) {
                if (!prev.length) {
                    return [curr];
                }
                var prevPoint = prev[prev.length - 1];
                if (prevPoint[0] !== curr[0]) {
                    prev.push(curr);
                }
                if (Math.abs(worstPoint[1] - curr[1]) > Math.abs(worstPoint[1] - prev[prev.length - 1][1])) {
                    prev[prev.length - 1] = curr;
                }
                return prev;
            }, []);

            var area = d3.area();
            area.y0(worstPoint[1]);
            dominatedRegionContainer.selectOrInsert("path." + this.prefixClass('dominated-region')).attr("shape-rendering", "optimizeQuality").attr("fill", "gray").attr("stroke-width", 0).attr("d", area(this.dominatedRegionPoints));

            _sdTreeDesigner.Tooltip.attach(dominatedRegionContainer, _i18n.i18n.t('leagueTable.plot.tooltip.dominatedRegion'));
        }
    }, {
        key: "updateDotLabels",
        value: function updateDotLabels() {
            var self = this;
            var labelsContainerClass = this.prefixClass("dot-labels-container");
            var labelsContainerSelector = "g." + labelsContainerClass;
            var labelsContainer = self.svgG.selectOrAppend(labelsContainerSelector, "." + self.dotsContainerClass);

            var labels = labelsContainer.selectAll("text." + this.prefixClass("dot-label")).data(this.plot.data);
            labels.exit().remove();
            labels.enter().append('text').attr('class', this.prefixClass("dot-label")).merge(labels).attr('x', this.plot.x.map).attr('y', this.plot.y.map).attr('text-anchor', 'end').attr("dy", "-5px").attr("dx", "-5px").text(function (d) {
                return d.id;
            });
        }
    }, {
        key: "updateGradientArrows",
        value: function updateGradientArrows() {
            var _this5 = this;

            var data = this.config.payoffCoeffs.map(function (coeff, i) {

                var l = _this5.config.gradientArrowLength * coeff;
                var offset = _this5.config.gradientArrowOffset * coeff;

                var d = {
                    x1: _this5.plot.width / 2,
                    y1: _this5.plot.height / 2
                };

                if (i == 0) {
                    d.x1 += offset;
                    d.x2 = d.x1 + l;
                    d.y2 = d.y1;
                } else {
                    d.y1 -= offset;
                    d.x2 = d.x1;
                    d.y2 = d.y1 - l;
                }

                return d;
            });

            var self = this;
            var arrowsContainerClass = this.prefixClass("gradient-arrows-container");
            var arrowsContainerSelector = "g." + arrowsContainerClass;
            var arrowsContainer = self.svgG.selectOrInsert(arrowsContainerSelector, "." + self.dotsContainerClass);

            var arrowClass = this.prefixClass("gradient-arrow");
            var arrows = arrowsContainer.selectAll("." + arrowClass).data(data);
            arrows.exit().remove();
            var arrowsEnter = arrows.enter().append('g').attr('class', arrowClass);

            arrowsEnter.append("line").attr("marker-end", "url(#triangle)");
            var arrowsMerge = arrowsEnter.merge(arrows);

            arrowsMerge.select("line").attr("x1", function (d) {
                return d.x1;
            }).attr("y1", function (d) {
                return d.y1;
            }).attr("x2", function (d) {
                return d.x2;
            }).attr("y2", function (d) {
                return d.y2;
            });

            _sdTreeDesigner.Tooltip.attach(arrowsMerge, function (d, i) {
                return _i18n.i18n.t('leagueTable.plot.tooltip.gradientArrow' + (i + 1), { name: _this5.config.payoffNames[i] });
            });
        }
    }, {
        key: "emphasize",
        value: function emphasize(row) {
            var _emphasize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.emphasizeDot(this.svg.selectAll('#' + this.config.dotId(row)), _emphasize);
        }
    }, {
        key: "emphasizeDot",
        value: function emphasizeDot(selection, emphasize) {
            selection.classed('sd-emphasized', emphasize).transition().attr('r', emphasize ? this.config.emphasizedDotRadius : this.config.dotRadius);
        }
    }, {
        key: "updateDots",
        value: function updateDots() {
            var self = this;
            _get(LeagueTablePlot.prototype.__proto__ || Object.getPrototypeOf(LeagueTablePlot.prototype), "updateDots", this).call(this);
            var dotsContainer = this.svgG.select("g." + this.dotsContainerClass);
            dotsContainer.selectAll('.' + this.dotClass).on("mouseover.emphasize", function (d) {
                self.emphasizeDot(d3.select(this), true);
            }).on("mouseout.emphasize", function (d) {
                self.emphasizeDot(d3.select(this), false);
            });
        }
    }, {
        key: "updateLegend",
        value: function updateLegend() {
            _get(LeagueTablePlot.prototype.__proto__ || Object.getPrototypeOf(LeagueTablePlot.prototype), "updateLegend", this).call(this);
            var plot = this.plot;

            var container = plot.legend.container.selectOrAppend("g.sd-additional-items");
            var legendCells = plot.legend.container.select(".legendCells");
            var margin = 20;

            var texts = [_i18n.i18n.t("leagueTable.plot.legend.dominatedRegion"), _i18n.i18n.t("leagueTable.plot.legend.gradientArrows")];

            container.attr("transform", "translate(0, " + (legendCells.node().getBBox().height + margin) + ")");

            container.selectAll("text").data(texts).enter().append("text").text(function (d) {
                return d;
            }).attr('dy', "0").attr('x', "0");

            container.selectAll("text").call(wrap, function (d) {
                return d;
            }, this.config.legend.width);

            function wrap(text, getTextData, width) {
                text.each(function (d) {

                    var text = d3.select(this),
                        words = getTextData(d).split(/\s+/).reverse(),
                        word,
                        line = [],
                        lineNumber = 0,
                        lineHeight = 1.1,

                    // ems
                    y = text.attr('y'),
                        dy = parseFloat(text.attr('dy')),
                        tspan = text.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');

                    if (this.previousSibling) {
                        text.attr('y', this.previousSibling.getBBox().height + 10);
                    }

                    while (word = words.pop()) {
                        line.push(word);
                        tspan.text(line.join(' '));
                        if (tspan.node().getComputedTextLength() > width) {
                            line.pop();
                            tspan.text(line.join(' '));
                            line = [word];
                            tspan = text.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
                        }
                    }
                });
            }
        }
    }]);

    return LeagueTablePlot;
}(_scatterplot.ScatterPlot);

exports.LeagueTablePlot = LeagueTablePlot;

},{"../d3":67,"../i18n/i18n":80,"odc-d3/src/scatterplot":"odc-d3/src/scatterplot","sd-tree-designer":131,"sd-utils":"sd-utils"}],92:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LeagueTable = exports.LeagueTableConfig = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

var _d = require("../d3");

var d3 = _interopRequireWildcard(_d);

var _policy = require("sd-computations/src/policies/policy");

var _i18n = require("../i18n/i18n");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var LeagueTableConfig = exports.LeagueTableConfig = function LeagueTableConfig(custom) {
    _classCallCheck(this, LeagueTableConfig);

    this.onRowSelected = function (row) {};

    this.extendedPolicyDescription = true;

    this.onRowHover = function (d, i) {};

    this.onRowHoverOut = function (d, i) {};

    if (custom) {
        _sdUtils.Utils.deepExtend(this, custom);
    }
};

var LeagueTable = function () {
    function LeagueTable(container, config, dataModel) {
        _classCallCheck(this, LeagueTable);

        this.container = container;
        this.config = new LeagueTableConfig(config);
        this.dataModel = dataModel;
        this.init();
    }

    _createClass(LeagueTable, [{
        key: "init",
        value: function init() {
            this.resultTable = this.container.selectOrAppend("table.sd-league-table");
            this.resultTableHead = this.resultTable.selectOrAppend("thead");
            this.resultTableBody = this.resultTable.selectOrAppend("tbody");
            this.resultTableFoot = this.resultTable.selectOrAppend("tfoot");
        }
    }, {
        key: "setData",
        value: function setData(jobResult, dataModel) {
            this.jobResult = jobResult;
            this.dataModel = dataModel;
            this.drawHeaders([_i18n.i18n.t('leagueTable.headers.policyNo'), _i18n.i18n.t('leagueTable.headers.policy'), dataModel.payoffNames[0], dataModel.payoffNames[1], _i18n.i18n.t('leagueTable.headers.comment')]);
            this.drawRows(jobResult.rows);
        }
    }, {
        key: "drawHeaders",
        value: function drawHeaders(headerData) {
            var headers = this.resultTableHead.selectOrAppend("tr").selectAll("th").data(headerData);
            var headersEnter = headers.enter().append("th");
            var headersMerge = headersEnter.merge(headers);
            headers.exit().remove();

            headersMerge.text(function (d) {
                return d;
            });
        }
    }, {
        key: "drawRows",
        value: function drawRows(rowsData) {
            var _this = this;

            var self = this;

            var data = rowsData.reduce(function (prev, d) {
                var r = prev;
                d.policies.forEach(function (policy, i) {
                    if (!i) {
                        r.push({
                            row: d,
                            policy: policy,
                            cells: [{
                                data: d.id,
                                rowspan: d.policies.length
                            }, {
                                data: _policy.Policy.toPolicyString(policy, _this.config.extendedPolicyDescription),
                                rowspan: 1
                            }, {
                                data: d.payoffs[0],
                                rowspan: d.policies.length
                            }, {
                                data: d.payoffs[1],
                                rowspan: d.policies.length
                            }, {
                                data: _this.getRowComment(d),
                                rowspan: d.policies.length
                            }]
                        });
                        return;
                    }

                    r.push({
                        row: d,
                        policy: policy,
                        cells: [{
                            data: _policy.Policy.toPolicyString(policy, _this.config.extendedPolicyDescription),
                            rowspan: 1
                        }]
                    });
                });

                return r;
            }, []);

            var rows = this.resultTableBody.selectAll("tr").data(data);

            var rowsEnter = rows.enter().append("tr");
            var rowsMerge = rowsEnter.merge(rows);
            rowsMerge.on('click', function (d, i) {
                // d3.select(this).classed('sd-selected', true);
                self.config.onRowSelected(d, i);
            }).classed('sd-highlighted', function (d) {
                return d.row.optimal;
            }).classed('sd-highlighted-default', function (d) {
                return d.row.optimalForDefaultWeight;
            }).attr('id', function (d) {
                return 'sd-league-table-row-' + d.row.id;
            });

            rowsMerge.on("mouseover.onRowHover", this.config.onRowHover);
            rowsMerge.on("mouseout.onRowHoverOut", this.config.onRowHoverOut);

            rows.exit().remove();

            var cells = rowsMerge.selectAll("td").data(function (d) {
                return d.cells;
            });
            var cellsEnter = cells.enter().append("td");
            var cellsMerge = cellsEnter.merge(cells);
            cellsMerge.text(function (d) {
                return d.data;
            });
            cellsMerge.attr('rowspan', function (d) {
                return d.rowspan;
            });
            cells.exit().remove();
        }
    }, {
        key: "clear",
        value: function clear() {
            this.clearSelection();
        }
    }, {
        key: "show",
        value: function show() {
            var _show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.container.classed('sd-hidden', !_show);
        }
    }, {
        key: "hide",
        value: function hide() {
            this.show(false);
        }
    }, {
        key: "clearSelection",
        value: function clearSelection() {
            this.resultTable.selectAll('.sd-selected').classed('sd-selected', false);
        }
    }, {
        key: "getRowComment",
        value: function getRowComment(row) {
            if (row.incratio !== null) {
                return _i18n.i18n.t('leagueTable.comment.incratio', { incratio: row.incratio });
            }
            if (row.dominatedBy !== null) {
                return _i18n.i18n.t('leagueTable.comment.dominatedBy', { policy: row.dominatedBy });
            }
            if (row.extendedDominatedBy !== null) {
                return _i18n.i18n.t('leagueTable.comment.extendedDominatedBy', { policy1: row.extendedDominatedBy[0], policy2: row.extendedDominatedBy[1] });
            }
            return '';
        }
    }, {
        key: "emphasize",
        value: function emphasize(row) {
            var _emphasize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.resultTableBody.selectAll('#sd-league-table-row-' + row.id).classed('sd-emphasized', _emphasize);
        }
    }]);

    return LeagueTable;
}();

exports.LeagueTable = LeagueTable;

},{"../d3":67,"../i18n/i18n":80,"sd-computations/src/policies/policy":"sd-computations/src/policies/policy","sd-utils":"sd-utils"}],93:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LoadingIndicator = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _d = require('./d3');

var d3 = _interopRequireWildcard(_d);

var _i18n = require('./i18n/i18n');

var _sdUtils = require('sd-utils');

var _templates = require('./templates');

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var LoadingIndicator = exports.LoadingIndicator = function () {
    function LoadingIndicator() {
        _classCallCheck(this, LoadingIndicator);
    }

    _createClass(LoadingIndicator, null, [{
        key: 'show',
        value: function show() {
            var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            var html = _templates.Templates.get('loadingIndicator');

            var g = d3.select('body').selectOrAppend('div.sd-loading-indicator-container').html(html).select('.sd-loading-indicator').classed('visible', true).style('display', 'block');
        }
    }, {
        key: 'hide',
        value: function hide() {
            var select = d3.select('.sd-loading-indicator');
            select.classed('visible', false);
            setTimeout(function () {
                select.style('display', 'none');
            }, 500);
        }
    }]);

    return LoadingIndicator;
}();

},{"./d3":67,"./i18n/i18n":80,"./templates":96,"sd-utils":"sd-utils"}],94:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PivotTable = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

var _i18n = require("./i18n/i18n");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

var jQuery;
if (_sdUtils.Utils.getGlobalObject().jQuery) {
    jQuery = _sdUtils.Utils.getGlobalObject().jQuery;
    _sdUtils.log.info("Using global jquery object");
} else {
    jQuery = require('jquery');
    _sdUtils.Utils.getGlobalObject().jQuery = jQuery; //FIXME
}

require('jquery-ui/ui/data');
require('jquery-ui/ui/scroll-parent');
require('jquery-ui/ui/widget');
require('jquery-ui/ui/widgets/mouse');
require('jquery-ui/ui/widgets/sortable');
require('pivottable');

// pivot show zero hack start
var numberFormat = jQuery.pivotUtilities.numberFormat;
try {
    jQuery.pivotUtilities.numberFormat = function (opts) {
        if (!opts) {
            opts = {};
        }
        opts.showZero = true;
        return numberFormat(opts);
    };
} catch (e) {
    _sdUtils.log.error('Error when performing pivottable "show zero" hack, reverting');

    try {
        jQuery.pivotUtilities.numberFormat = numberFormat;
    } catch (e) {}
}

require('pivottable/dist/pivot.it');
require('pivottable/dist/pivot.de');
require('pivottable/dist/pivot.fr');
require('pivottable/dist/pivot.pl');

// pivot show zero hack continuation
try {
    var origAggregators = {};
    _sdUtils.Utils.forOwn(jQuery.pivotUtilities.locales.en.aggregators, function (value, key, object) {
        origAggregators[key] = value;
        object[key] = function () {
            var args1 = arguments;
            try {
                var res1 = value.apply(this, args1);
                return function () {
                    var res = res1.apply(undefined, arguments);
                    var format_ = res.format;
                    res.format = function (x) {
                        var origX = x;
                        if (x === 0) {
                            x = "0";
                        }
                        try {
                            return format_(x);
                        } catch (e) {
                            _sdUtils.log.error('Error when performing pivottable "show zero" hack (format func call), reverting', e);
                            if (format_) {
                                return format_(origX);
                            }
                            revertAggregators();
                        }
                    };
                    return res;
                };
            } catch (e) {
                _sdUtils.log.error('Error when performing pivottable "show zero" hack, reverting', e);
                revertAggregators();
                return origAggregators[key].apply(origAggregators, _toConsumableArray(args1));
            }
        };
    });
} catch (e) {
    _sdUtils.log.error('Error when performing pivottable "show zero" hack, reverting', e);
    revertAggregators();
}

function revertAggregators() {
    try {
        _sdUtils.Utils.forOwn(jQuery.pivotUtilities.locales.en.aggregators, function (value, key, object) {
            var origAggregator = origAggregators[key];
            if (origAggregator) {
                object[key] = origAggregator;
            }
        });
    } catch (e) {
        _sdUtils.log.error('Error when reverting aggregators', e);
    }
}

///////////////////// hack end

var PivotTable = exports.PivotTable = function () {
    function PivotTable(container, options, data) {
        _classCallCheck(this, PivotTable);

        this.container = container;
        this.options = options;
        this.data = data;
        if (data) {
            this.update(data, options);
        }
    }

    _createClass(PivotTable, [{
        key: "update",
        value: function update(data, options) {
            this.data = data;
            this.options = options;
            jQuery(this.container.node()).pivotUI(data, options, true, _i18n.i18n.language);
        }
    }, {
        key: "clear",
        value: function clear() {
            jQuery(this.container.node()).pivotUI([], null, true);
        }
    }, {
        key: "getAggregatorName",
        value: function getAggregatorName(name) {
            return _i18n.i18n.t("jobResultTable.pivot.aggregators." + name.toLowerCase());
        }
    }, {
        key: "getRendererName",
        value: function getRendererName(name) {
            return _i18n.i18n.t("jobResultTable.pivot.renderers." + name.toLowerCase());
        }
    }]);

    return PivotTable;
}();

},{"./i18n/i18n":80,"jquery":"jquery","jquery-ui/ui/data":62,"jquery-ui/ui/scroll-parent":"jquery-ui/ui/scroll-parent","jquery-ui/ui/widget":"jquery-ui/ui/widget","jquery-ui/ui/widgets/mouse":"jquery-ui/ui/widgets/mouse","jquery-ui/ui/widgets/sortable":"jquery-ui/ui/widgets/sortable","pivottable":"pivottable","pivottable/dist/pivot.de":"pivottable/dist/pivot.de","pivottable/dist/pivot.fr":"pivottable/dist/pivot.fr","pivottable/dist/pivot.it":"pivottable/dist/pivot.it","pivottable/dist/pivot.pl":"pivottable/dist/pivot.pl","sd-utils":"sd-utils"}],95:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sidebar = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

var _i18n = require("./i18n/i18n");

var _sdUtils = require("sd-utils");

var _appUtils = require("./app-utils");

var _sdModel = require("sd-model");

var _payoffInputValidator = require("./validation/payoff-input-validator");

var _probabilityInputValidator = require("./validation/probability-input-validator");

var _templates = require("./templates");

var _sdTreeDesigner = require("sd-tree-designer");

var _inputField = require("./form/input-field");

var _pathValueAccessor = require("./form/path-value-accessor");

var _numberInputValidator = require("./validation/number-input-validator");

var _requiredInputValidator = require("./validation/required-input-validator");

var _mcdmWeightValueValidator = require("sd-computations/src/validation/mcdm-weight-value-validator");

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Sidebar = exports.Sidebar = function () {
    function Sidebar(container, app) {
        _classCallCheck(this, Sidebar);

        this.dispatch = d3.dispatch("recomputed", "object-updated", "multi-criteria-updated");

        this.app = app;
        this.container = container;

        this.initLayoutOptions();
        this.initDiagramDetails();
        this.initDefinitions();
        this.initMultipleCriteria();
        var self = this;

        document.addEventListener('SilverDecisionsRecomputedEvent', function (data) {
            if (data.detail === app) {
                self.dispatch.call("recomputed");
            }
        });

        self.dispatch.on("object-updated", _sdUtils.Utils.debounce(function (object, fieldName) {
            return self.app.onObjectUpdated(object, fieldName);
        }, 350));
        self.dispatch.on("multi-criteria-updated", _sdUtils.Utils.debounce(function (fieldName) {
            return self.app.onMultiCriteriaUpdated(fieldName);
        }, 350));
    }

    _createClass(Sidebar, [{
        key: "initLayoutOptions",
        value: function initLayoutOptions() {
            var _this2 = this;

            var self = this;
            this.layoutOptionsContainer = this.container.select('#layout-options');
            this.autoLayoutOptionsGroup = this.layoutOptionsContainer.select('#auto-layout-options');
            this.gridWidth = this.layoutOptionsContainer.select('input#grid-width').on('change', function () {
                self.app.treeDesigner.layout.setGridWidth(parseInt(this.value));
            });

            this.gridHeight = this.layoutOptionsContainer.select('input#grid-height').on('change', function () {
                self.app.treeDesigner.layout.setGridHeight(parseInt(this.value));
            });

            this.nodeSize = this.layoutOptionsContainer.select('input#node-size').on('change', function () {
                self.app.treeDesigner.layout.setNodeSize(parseInt(this.value));
            });

            this.edgeSlantWidthMax = this.layoutOptionsContainer.select('input#edge-slant-width-max').on('change', function () {
                self.app.treeDesigner.layout.setEdgeSlantWidthMax(parseInt(this.value));
            });

            this.marginHorizontal = this.layoutOptionsContainer.select('input#margin-horizontal').on('change', function () {
                var m = {};
                m.left = m.right = parseInt(this.value);
                self.app.treeDesigner.setMargin(m);
            });
            this.marginVertical = this.layoutOptionsContainer.select('input#margin-vertical').on('change', function () {
                var m = {};
                m.top = m.bottom = parseInt(this.value);
                self.app.treeDesigner.setMargin(m);
            });

            self.app.treeDesigner.layout.onAutoLayoutChanged.push(function (layout) {
                return self.updateLayoutOptions();
            });

            this.layoutOptionsContainer.select('.toggle-button').on('click', function () {
                _this2.layoutOptionsContainer.classed('sd-extended', !_this2.layoutOptionsContainer.classed('sd-extended'));
            });

            this.updateLayoutOptions();
        }
    }, {
        key: "updateLayoutOptions",
        value: function updateLayoutOptions() {
            this.nodeSize.node().value = this.app.treeDesigner.config.layout.nodeSize;
            this.edgeSlantWidthMax.node().value = this.app.treeDesigner.config.layout.edgeSlantWidthMax;
            this.marginHorizontal.node().value = this.app.treeDesigner.config.margin.left;
            this.marginVertical.node().value = this.app.treeDesigner.config.margin.top;
            this.gridWidth.node().value = this.app.treeDesigner.config.layout.gridWidth;
            this.gridHeight.node().value = this.app.treeDesigner.config.layout.gridHeight;
            this.autoLayoutOptionsGroup.classed('visible', !this.app.treeDesigner.layout.isManualLayout());
        }
    }, {
        key: "initDiagramDetails",
        value: function initDiagramDetails() {
            var _this3 = this;

            var self = this;
            this.diagramDetailsContainer = this.container.select('#diagram-details-box');
            this.diagramDetailsContainer.classed('sd-hidden', !this.app.config.showDetails);

            this.diagramDetailsContainer.select('.toggle-button').on('click', function () {
                _this3.diagramDetailsContainer.classed('sd-extended', !_this3.diagramDetailsContainer.classed('sd-extended'));
                _this3.updateDiagramDetails();
            });

            this.diagramTitle = this.diagramDetailsContainer.select('input#diagram-title').on('change', function () {
                self.app.setDiagramTitle(this.value);
                _appUtils.AppUtils.updateInputClass(d3.select(this));
            });

            this.diagramDescription = this.diagramDetailsContainer.select('textarea#diagram-description').on('change', function () {
                self.app.setDiagramDescription(this.value);
                _appUtils.AppUtils.updateInputClass(d3.select(this));
            });
            _appUtils.AppUtils.elasticTextarea(this.diagramDescription);

            this.updateDiagramDetails();
        }
    }, {
        key: "initDefinitions",
        value: function initDefinitions() {
            var _this4 = this;

            var self = this;
            this.definitionsContainer = this.container.select('#sd-sidebar-definitions');
            this.definitionsContainer.classed('sd-hidden', !this.app.config.showDefinitions);
            this.onDefinitionsCodeChanged = null;
            this.definitionsContainer.select('.toggle-button').on('click', function () {
                _this4.definitionsContainer.classed('sd-extended', !_this4.definitionsContainer.classed('sd-extended'));
                _appUtils.AppUtils.updateInputClass(_this4.definitionsCode);
                _appUtils.AppUtils.autoResizeTextarea(_this4.definitionsCode.node());
            });

            this.definitionsScopeLabel = this.definitionsContainer.select('.sd-variables-scope-value');

            this.definitionsCode = this.definitionsContainer.select('textarea#sd-sidebar-definitions-code').on('change', function () {
                if (self.onDefinitionsCodeChanged) {
                    self.onDefinitionsCodeChanged(this.value);
                }
                _appUtils.AppUtils.updateInputClass(d3.select(this));
            });
            _sdTreeDesigner.Tooltip.attach(this.definitionsCode, function (d) {
                return self.definitionsCode.attr('data-error-msg');
            }, 15, 50);

            this.definitionsEvaluatedValuesContainer = this.container.select("#sd-sidebar-definitions-evaluated-values");

            this.definitionsContainer.select('#sd-sidebar-definitions-open-dialog-button').on('click', function () {
                _this4.app.openDefinitionsDialog();
            });

            this.definitionsContainer.select('#sd-sidebar-definitions-recalculate-button').on('click', function () {
                _this4.app.recompute();
            });

            _appUtils.AppUtils.elasticTextarea(this.definitionsCode);
        }
    }, {
        key: "initMultipleCriteria",
        value: function initMultipleCriteria() {
            var _this5 = this;

            var self = this;
            this.multipleCriteriaContainer = this.container.select('#sd-multiple-criteria');
            this.multipleCriteriaContainer.classed('sd-hidden', !this.app.isMultipleCriteria());

            this.multipleCriteriaContainer.select('.toggle-button').on('click', function () {
                _this5.multipleCriteriaContainer.classed('sd-extended', !_this5.multipleCriteriaContainer.classed('sd-extended'));
            });

            this.showLeagueTableButton = this.multipleCriteriaContainer.select('#sd-show-league-table-button').on('click', function () {
                _this5.app.showLeagueTable();
            });

            this.flipCriteriaButton = this.multipleCriteriaContainer.select('#sd-flip-criteria-button').on('click', function () {
                _this5.app.flipCriteria();
            });

            var weightParser = function weightParser(w) {
                return parseFloat(w) === Infinity ? Infinity : w;
            };

            this.multipleCriteriaFields = [];
            this.multipleCriteriaFields.push(new _inputField.InputField('sd-multiple-criteria-nameOfCriterion1', 'nameOfCriterion1', 'text', _i18n.i18n.t('multipleCriteria.nameOfCriterion1'), new _pathValueAccessor.PathValueAccessor(self.app.dataModel, 'payoffNames[0]'), new _requiredInputValidator.RequiredInputValidator()));
            this.multipleCriteriaFields.push(new _inputField.InputField('sd-multiple-criteria-nameOfCriterion2', 'nameOfCriterion2', 'text', _i18n.i18n.t('multipleCriteria.nameOfCriterion2'), new _pathValueAccessor.PathValueAccessor(self.app.dataModel, 'payoffNames[1]'), new _requiredInputValidator.RequiredInputValidator()));
            var lowerBoundValueAccessor = new _pathValueAccessor.PathValueAccessor(self.app.dataModel, 'weightLowerBound');
            var upperBoundValueAccessor = new _pathValueAccessor.PathValueAccessor(self.app.dataModel, 'weightUpperBound');
            var weightValueValidator = new _mcdmWeightValueValidator.McdmWeightValueValidator();
            var ee = this.app.expressionEngine.constructor;

            this.multipleCriteriaFields.push(new _inputField.InputField('sd-multiple-criteria-weightLowerBound', 'weightLowerBound', 'text', _i18n.i18n.t('multipleCriteria.weightLowerBound'), lowerBoundValueAccessor, new _mcdmWeightValueValidator.McdmWeightValueValidator(function (v) {
                var upper = upperBoundValueAccessor.get();
                return weightValueValidator.validate(upper) ? ee.compare(v, upper) <= 0 : true;
            }), null, weightParser));

            this.multipleCriteriaFields.push(new _inputField.InputField('sd-multiple-criteria-defaultCriterion1Weight', 'defaultCriterion1Weight', 'text', _i18n.i18n.t('multipleCriteria.defaultCriterion1Weight'), new _pathValueAccessor.PathValueAccessor(self.app.dataModel, 'defaultCriterion1Weight'), new _mcdmWeightValueValidator.McdmWeightValueValidator(function (v) {
                var upper = upperBoundValueAccessor.get();
                var lower = lowerBoundValueAccessor.get();
                return (weightValueValidator.validate(lower) ? ee.compare(v, lower) >= 0 : true) && (weightValueValidator.validate(upper) ? ee.compare(v, upper) <= 0 : true);
            }), null, weightParser));

            this.multipleCriteriaFields.push(new _inputField.InputField('sd-multiple-criteria-weightUpperBound', 'weightUpperBound', 'text', _i18n.i18n.t('multipleCriteria.weightUpperBound'), upperBoundValueAccessor, new _mcdmWeightValueValidator.McdmWeightValueValidator(function (v) {
                var lower = lowerBoundValueAccessor.get();
                return weightValueValidator.validate(lower) ? ee.compare(v, lower) >= 0 : true;
            }), null, weightParser));

            this.updateMultipleCriteria();
        }
    }, {
        key: "updateMultipleCriteria",
        value: function updateMultipleCriteria() {
            var updateInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            //TODO refactor
            var ee = this.app.expressionEngine;

            var self = this;
            var temp = {};
            this.multipleCriteriaContainer.classed('sd-hidden', !this.app.isMultipleCriteria());

            var leagueTableAvailable = this.app.isLeagueTableAvailable();
            this.showLeagueTableButton.attr("disabled", leagueTableAvailable ? undefined : "disabled");
            this.flipCriteriaButton.attr("disabled", leagueTableAvailable ? undefined : "disabled");
            this.multipleCriteriaContainer.classed('sd-invalid-league-table-params', !leagueTableAvailable);

            if (!updateInputs) {
                return;
            }

            var inputGroups = this.multipleCriteriaContainer.select(".sd-multiple-criteria-properties").selectAll('div.input-group').data(this.multipleCriteriaFields);
            inputGroups.exit().remove();
            var inputGroupsEnter = inputGroups.enter().appendSelector('div.input-group').html(function (d) {
                return d.type == 'select' ? _templates.Templates.get('selectInputGroup', d) : _templates.Templates.get('inputGroup', d);
            });
            inputGroupsEnter.merge(inputGroups).select('.sd-input').on('change input', function (d, i) {
                var prevValue = d.getValue();

                var isValid = !d.validator || d.validator.validate(this.value);

                var selection = d3.select(this);
                selection.classed('invalid', !isValid);
                if (d.styleClass) {
                    selection.classed(d.styleClass, true);
                }

                if (d3.event.type == 'change' && temp[i].pristineVal != this.value) {
                    self.app.dataModel.saveStateFromSnapshot(temp[i].pristineStateSnapshot);
                    if (d.onChange) {
                        d.onChange(object, this.value, temp[i].pristineVal);
                    }
                }

                if (prevValue + "" == this.value) {
                    return;
                }

                _appUtils.AppUtils.updateInputClass(selection);
                d.setValue(d.parse(this.value));
                self.dispatch.call("multi-criteria-updated", self, d.name);
            }).on('focus', function (d, i) {
                temp[i].pristineVal = this.value;

                temp[i].pristineStateSnapshot = self.app.dataModel.createStateSnapshot();
            }).each(function (d, i) {
                var value = d.getValue();

                this.value = value;
                temp[i] = {};
                d3.select(this).classed('invalid', d.validator && !d.validator.validate(this.value));

                _appUtils.AppUtils.updateInputClass(d3.select(this));
                if (d.type == 'textarea') {
                    _appUtils.AppUtils.elasticTextarea(d3.select(this));
                    _appUtils.AppUtils.autoResizeTextarea(d3.select(this).node());
                }
            });
        }
    }, {
        key: "updateDefinitions",
        value: function updateDefinitions(definitionsSourceObject, readOnly, changeCallback) {
            this.definitionsContainer.classed('sd-read-only', readOnly);
            this.onDefinitionsCodeChanged = changeCallback;

            var scopeType = 'global';
            if (definitionsSourceObject instanceof _sdModel.domain.Node) {
                scopeType = 'node';
            }

            this.definitionsScopeLabel.text(_i18n.i18n.t("sidebarDefinitions.scope." + scopeType));

            this.definitionsCode.node().value = definitionsSourceObject.code;
            this.definitionsCode.classed('invalid', !!definitionsSourceObject.$codeError);
            this.definitionsCode.attr('data-error-msg', definitionsSourceObject.$codeError);
            var html = _templates.Templates.get('evaluatedVariables', { scopeVariables: _sdUtils.Utils.getVariablesAsList(definitionsSourceObject.expressionScope) });
            this.definitionsEvaluatedValuesContainer.html(html);
            _appUtils.AppUtils.updateInputClass(this.definitionsCode);
            _appUtils.AppUtils.autoResizeTextarea(this.definitionsCode.node());
        }
    }, {
        key: "updateDiagramDetails",
        value: function updateDiagramDetails() {
            this.diagramTitle.node().value = this.app.config.title;
            _appUtils.AppUtils.updateInputClass(this.diagramTitle);
            this.diagramDescription.node().value = this.app.config.description;
            _appUtils.AppUtils.updateInputClass(this.diagramDescription);
            _appUtils.AppUtils.autoResizeTextarea(this.diagramDescription.node());
        }
    }, {
        key: "displayObjectProperties",
        value: function displayObjectProperties(object) {
            this.updateObjectPropertiesView(object);
        }
    }, {
        key: "hideObjectProperties",
        value: function hideObjectProperties() {

            this.container.select('#object-properties').classed('visible', false);
            this.container.selectAll('div.child-object').remove();
        }
    }, {
        key: "updateObjectPropertiesView",
        value: function updateObjectPropertiesView(object) {
            this.dispatch.on(".recomputed", null); //remove all callbacks for recomputed event
            if (!object) {
                this.hideObjectProperties();
                return;
            }

            var objectProps = this.objectProps = this.container.select('#object-properties').classed('visible', true);
            var headerText = Sidebar.getHeaderTextForObject(object);
            objectProps.select('.header').html(headerText);

            var fieldList = this.getFieldListForObject(object);
            this.updateObjectFields(object, fieldList, objectProps.select('.content .main-properties'));

            this.updateObjectChildrenProperties(object);
        }
    }, {
        key: "updateObjectChildrenProperties",
        value: function updateObjectChildrenProperties(object) {
            var self = this;
            var childObjects = this.getChildObjectList(object);
            var objectType = Sidebar.getObjectType(object);

            var childPropsSelector = this.objectProps.select('.content .children-properties');

            childPropsSelector.classed('visible', childObjects.length);

            childPropsSelector.select('.children-properties-header').text(_i18n.i18n.t('objectProperties.childrenProperties.' + objectType + '.header'));
            var childrenContent = childPropsSelector.select('.children-properties-content');
            var children = childrenContent.selectAll('div.child-object').data(childObjects, function (d, i) {
                return d.id || i;
            });
            var childrenEnter = children.enter().appendSelector('div.child-object');
            var childrenMerge = childrenEnter.merge(children);

            childrenMerge.each(updateChildObjectProperties);

            children.exit().remove();

            function updateChildObjectProperties(child, i) {
                var container = d3.select(this);
                container.selectOrAppend('div.child-header').text(_i18n.i18n.t('objectProperties.childrenProperties.' + objectType + '.child.header', { number: i + 1 }));

                var fieldList = self.getFieldListForObject(child);
                self.updateObjectFields(child, fieldList, container.selectOrAppend('div.field-list'));
            }
        }
    }, {
        key: "getChildObjectList",
        value: function getChildObjectList(object) {
            if (object instanceof _sdModel.domain.Node) {
                return object.childEdges.sort(function (a, b) {
                    return a.childNode.location.y - b.childNode.location.y;
                });
            }
            if (object instanceof _sdModel.domain.Edge) {
                return [];
            }
            return [];
        }
    }, {
        key: "getFieldListForObject",
        value: function getFieldListForObject(object) {
            var self = this;

            if (object instanceof _sdModel.domain.Node) {
                return [new ObjectInputField(object, {
                    name: 'name',
                    type: 'textarea'
                })];
            }
            if (object instanceof _sdModel.domain.Edge) {
                var multipleCriteria = this.app.isMultipleCriteria();
                var list = [new ObjectInputField(object, {
                    name: 'name',
                    type: 'textarea'
                }), new ObjectInputField(object, {
                    name: 'payoff',
                    path: 'payoff[' + (self.app.currentViewMode.payoffIndex || 0) + ']',
                    label: multipleCriteria ? self.app.dataModel.payoffNames[0] : undefined,
                    type: 'text',
                    validator: new _payoffInputValidator.PayoffInputValidator(self.app.expressionEngine)
                })];

                if (multipleCriteria) {
                    list.push(new ObjectInputField(object, {
                        name: 'payoff2',
                        path: 'payoff[1]',
                        label: self.app.dataModel.payoffNames[1],
                        type: 'text',
                        validator: new _payoffInputValidator.PayoffInputValidator(self.app.expressionEngine)
                    }));
                }

                if (object.parentNode instanceof _sdModel.domain.ChanceNode) {
                    list.push(new ObjectInputField(object, {
                        name: 'probability',
                        type: 'text',
                        validator: new _probabilityInputValidator.ProbabilityInputValidator(self.app.expressionEngine)
                    }));
                }
                return list;
            }
            if (object instanceof _sdModel.domain.Text) {
                return [new ObjectInputField(object, {
                    name: 'value',
                    type: 'textarea'
                })];
            }

            return [];
        }
    }, {
        key: "updateObjectFields",
        value: function updateObjectFields(object, fieldList, container) {
            var self = this;

            var fields = container.selectAll('div.object-field').data(fieldList);
            var temp = {};
            var fieldsEnter = fields.enter().appendSelector('div.object-field');
            var fieldsMerge = fieldsEnter.merge(fields);

            fieldsMerge.each(function (d, i) {
                var fieldSelection = d3.select(this);
                fieldSelection.html("");

                var input;
                if (d.type == 'textarea') {
                    input = fieldSelection.append('textarea').attr('rows', 1);
                } else {
                    input = fieldSelection.append('input');
                }
                input.classed('sd-input', true);
                input.attr('disabled', object.sourceId ? "disabled" : undefined);

                fieldSelection.appendSelector('span.bar');
                fieldSelection.append('label');
                fieldSelection.classed('input-group', true);
            });

            fieldsMerge.select('label').attr('for', function (d) {
                return d.id;
            }).html(function (d) {
                return d.label;
            });
            fieldsMerge.select('.sd-input').attr('type', function (d) {
                return d.type == 'textarea' ? undefined : d.type;
            }).attr('name', function (d) {
                return d.name;
            }).attr('id', function (d) {
                return d.id;
            }).on('change keyup', function (d, i) {
                var prevValue = d.getValue();
                var isValid = !d.validator || d.validator.validate(this.value, object, d.path);
                object.setSyntaxValidity(d.path, isValid);

                d3.select(this).classed('invalid', !object.isFieldValid(d.path));

                if (d3.event.type == 'change' && temp[i].pristineVal != this.value) {
                    self.app.dataModel.saveStateFromSnapshot(temp[i].pristineStateSnapshot);
                    if (d.onChange) {
                        d.onChange(object, this.value, temp[i].pristineVal);
                    }
                }

                if (prevValue + "" == this.value) {
                    return;
                }

                _appUtils.AppUtils.updateInputClass(d3.select(this));
                if (d.customOnInput) {
                    d.customOnInput(object, this.value, temp[i].pristineVal);
                } else {
                    d.setValue(this.value);
                    self.dispatch.call("object-updated", self, object, d.path);
                }
            }).on('focus', function (d, i) {
                temp[i].pristineVal = this.value;
                temp[i].pristineStateSnapshot = self.app.dataModel.createStateSnapshot();
            }).each(function (d, i) {
                this.value = d.getValue();
                temp[i] = {};
                if (d.validator && !d.validator.validate(this.value, object, d.path)) {
                    d3.select(this).classed('invalid', true);
                    object.setSyntaxValidity(d.path, false);
                } else {
                    object.setSyntaxValidity(d.path, true);
                }

                var _this = this;
                var checkFieldStatus = function checkFieldStatus() {
                    d3.select(_this).classed('invalid', !object.isFieldValid(d.path));
                };
                checkFieldStatus();

                self.dispatch.on("recomputed." + object.id + "." + d.path, checkFieldStatus);

                _appUtils.AppUtils.updateInputClass(d3.select(this));
                if (d.type == 'textarea') {
                    _appUtils.AppUtils.elasticTextarea(d3.select(this));
                    _appUtils.AppUtils.autoResizeTextarea(d3.select(this).node());
                }
            });

            fields.exit().remove();
        }
    }], [{
        key: "getObjectType",
        value: function getObjectType(object) {
            if (object instanceof _sdModel.domain.Node) {
                return 'node';
            }
            if (object instanceof _sdModel.domain.Edge) {
                return 'edge';
            }
            if (object instanceof _sdModel.domain.Text) {
                return 'text';
            }
            return '';
        }
    }, {
        key: "getHeaderTextForObject",
        value: function getHeaderTextForObject(object) {
            if (object instanceof _sdModel.domain.Node) {
                return _i18n.i18n.t('objectProperties.header.node.' + object.type);
            }
            if (object instanceof _sdModel.domain.Edge) {
                return _i18n.i18n.t('objectProperties.header.edge');
            }
            if (object instanceof _sdModel.domain.Text) {
                return _i18n.i18n.t('objectProperties.header.text');
            }
            return '';
        }
    }]);

    return Sidebar;
}();

var ObjectInputField = function (_InputField) {
    _inherits(ObjectInputField, _InputField);

    //config object with fields: name, path, type, validator, options
    function ObjectInputField(object, config) {
        _classCallCheck(this, ObjectInputField);

        var _this6 = _possibleConstructorReturn(this, (ObjectInputField.__proto__ || Object.getPrototypeOf(ObjectInputField)).call(this, 'object-' + object.id + '-field-' + config.name, config.name, config.type, config.label ? config.label : _i18n.i18n.t(Sidebar.getObjectType(object) + '.' + config.name), new _pathValueAccessor.PathValueAccessor(object, config.path || config.name), config.validator, config.options));

        _this6.path = config.path || config.name;
        _this6.onChange = config.onChange;
        return _this6;
    }

    return ObjectInputField;
}(_inputField.InputField);

},{"./app-utils":64,"./d3":67,"./form/input-field":75,"./form/path-value-accessor":76,"./i18n/i18n":80,"./templates":96,"./validation/number-input-validator":126,"./validation/payoff-input-validator":127,"./validation/probability-input-validator":128,"./validation/required-input-validator":129,"sd-computations/src/validation/mcdm-weight-value-validator":"sd-computations/src/validation/mcdm-weight-value-validator","sd-model":"sd-model","sd-tree-designer":131,"sd-utils":"sd-utils"}],96:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Templates = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdTreeDesigner = require("sd-tree-designer");

var _i18n = require("./i18n/i18n");

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Templates = exports.Templates = function (_TdTemplates) {
    _inherits(Templates, _TdTemplates);

    function Templates() {
        _classCallCheck(this, Templates);

        return _possibleConstructorReturn(this, (Templates.__proto__ || Object.getPrototypeOf(Templates)).apply(this, arguments));
    }

    _createClass(Templates, null, [{
        key: "get",

        //TODO automate
        value: function get(templateName, variables) {
            var compiled = _sdUtils.Utils.template(Templates[templateName], { 'imports': { 'i18n': _i18n.i18n, 'Templates': Templates, 'include': function include(n, v) {
                        return Templates.get(n, v);
                    } } });
            if (variables) {
                variables.variables = variables;
            } else {
                variables = { variables: {} };
            }
            return compiled(variables);
        }
    }]);

    return Templates;
}(_sdTreeDesigner.Templates);

Templates.about_de = require('./templates/about/de.html');
Templates.about_en = require('./templates/about/en.html');
Templates.about_fr = require('./templates/about/fr.html');
Templates.about_it = require('./templates/about/it.html');
Templates.about_pl = require('./templates/about/pl.html');
Templates.toolbar = require('./templates/toolbar.html');
Templates.layoutOptions = require('./templates/sidebar/layout_options.html');
Templates.objectProperties = require('./templates/sidebar/object_properties.html');
Templates.diagramDetailsBox = require('./templates/sidebar/diagram_details_box.html');
Templates.evaluatedVariables = require('./templates/evaluated_variables.html');
Templates.definitions = require('./templates/sidebar/definitions.html');
Templates.multipleCriteria = require('./templates/sidebar/multiple_criteria.html');
Templates.sidebar = require('./templates/sidebar/sidebar.html');
Templates.settingsDialog = require('./templates/settings_dialog.html');
Templates.settingsDialogFormGroup = require('./templates/settings_dialog_form_group.html');
Templates.inputGroup = require('./templates/input_group.html');
Templates.selectInputGroup = require('./templates/select_input_group.html');
Templates.help = require('./templates/help.html');
Templates.aboutDialog = require('./templates/about_dialog.html');
Templates.definitionsDialog = require('./templates/definitions_dialog.html');
Templates.sensitivityAnalysisDialog = require('./templates/sensitivity_analysis_dialog.html');
Templates.jobParametersBuilder = require('./templates/jobs/job_parameters_builder.html');
Templates.jobParameter = require('./templates/jobs/job_parameter.html');
Templates.leagueTableDialog = require('./templates/league_table_dialog.html');
Templates.loadingIndicator = require('./templates/loading_indicator.html');
Templates.fullscreenPopup = require('./templates/fullscreen_popup.html');
Templates.warningMessage = require('./templates/warning_message.html');
Templates.main = require('./templates/main.html');

},{"./i18n/i18n":80,"./templates/about/de.html":97,"./templates/about/en.html":98,"./templates/about/fr.html":99,"./templates/about/it.html":100,"./templates/about/pl.html":101,"./templates/about_dialog.html":102,"./templates/definitions_dialog.html":103,"./templates/evaluated_variables.html":104,"./templates/fullscreen_popup.html":105,"./templates/help.html":106,"./templates/input_group.html":107,"./templates/jobs/job_parameter.html":108,"./templates/jobs/job_parameters_builder.html":109,"./templates/league_table_dialog.html":110,"./templates/loading_indicator.html":111,"./templates/main.html":112,"./templates/select_input_group.html":113,"./templates/sensitivity_analysis_dialog.html":114,"./templates/settings_dialog.html":115,"./templates/settings_dialog_form_group.html":116,"./templates/sidebar/definitions.html":117,"./templates/sidebar/diagram_details_box.html":118,"./templates/sidebar/layout_options.html":119,"./templates/sidebar/multiple_criteria.html":120,"./templates/sidebar/object_properties.html":121,"./templates/sidebar/sidebar.html":122,"./templates/toolbar.html":123,"./templates/warning_message.html":124,"sd-tree-designer":131,"sd-utils":"sd-utils"}],97:[function(require,module,exports){
module.exports = "<p>\n    <strong>SilverDecisions <%= version %> (gebaut <%= buildTimestamp%>)</strong><br/>Open Source Entscheidungsbaum Software.\n</p>\n<p>\n<strong>Zitierung:</strong><br/>\nB. Kamiński, M. Jakubczyk, P. Szufel: A framework for sensitivity analysis of decision trees, Central European Journal of Operations Research (2017).</br>\n<a href=\"https://link.springer.com/article/10.1007/s10100-017-0479-6\" target=\"_blank\">doi:10.1007/s10100-017-0479-6</a>\n</p>\n<p class=\"sd-project-team\">\n    Projektteam:\n    <ul>\n        <li><a href=\"http://bogumilkaminski.pl/\" target=\"_blank\">Bogumił Kamiński</a> (Projektleiter)</li>\n        <li><a href=\"https://szufel.pl/\" target=\"_blank\">Przemysław Szufel</a> (Stellvertretender Projektleiter)</li>\n        <li><a href=\"https://github.com/mwasiluk\" target=\"_blank\">Michał Wasiluk</a> (Designer)</li>\n        <li><a href=\"http://www.michaljakubczyk.pl/\" target=\"_blank\">Michał Jakubczyk</a> (Entwickler)</li>\n        <li>Anna Wiertlewska (Projekt Unterstützung)</li>\n        <li>Marcin Czupryna (Tester)</li>\n    </ul>\n</p>\n<p>\n    Das Projekt wird von Decision Support and Analysis Division, Warsaw School of Economics entwickelt.<br/>\n    Kontakt: silverdecisions@sgh.waw.pl\n</p>\n<p>\n    SilverDecisions ist ein gemeinschaftsgetriebenes Projekt. Sollten Sie es für Ihre Untericht, Forschung oder jede andere Aktivität, die Sie mit uns teilen möchten verwenden, wir würden uns freuen, einen Link zu Ihren Aktivitäten zu der <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/SilverDecisions-Community\" target=\"_blank\">SilverDecisions Gemeinschaft</a> Seite hinzufügen zu können.\n</p>\n<p>\n    Software wird als Teil von <a href=\"http://routetopa.eu/\" target=\"_blank\">ROUTE-TO-PA</a> Projekt entwickelt. Dieses Projekt hat      Mittel aus dem Horizon 2020 (Forschungs- und Innovationsprogramm der Europäischen Union) im Rahmen der Finanzhilfevereinbarung Nr 645860 erhalten. Ziel dieses Projektes ist es, eine transparente Kommunikation zwischen der öffentlichen Verwaltung und den Bürgern über das Thema, öffentliche Daten und Entscheidungsprozesse zu unterstützen. \n</p>\n<p>\n    Alle Quelldateien werden unter den Bedingungen der GNU Lesser General Public License Version 3 lizenziert.\n</p>\n<p>\n    Für weitere Informationen besuchen Sie bitte, unsere Website unter <a href=\"http://silverdecisions.pl/\" target=\"_blank\">http://silverdecisions.pl/</a>.\n</p>\n";

},{}],98:[function(require,module,exports){
module.exports = "<p>\n    <strong>SilverDecisions <%= version %> (build <%= buildTimestamp%>)</strong><br/>A free and open source decision tree software.\n</p>\n<p>\n<strong>Citation:</strong><br/>\nB. Kamiński, M. Jakubczyk, P. Szufel: A framework for sensitivity analysis of decision trees, Central European Journal of Operations Research (2017).</br>\n<a href=\"https://link.springer.com/article/10.1007/s10100-017-0479-6\" target=\"_blank\">doi:10.1007/s10100-017-0479-6</a>\n</p>\n<p class=\"sd-project-team\">\n    Project team:\n    <ul>\n        <li><a href=\"http://bogumilkaminski.pl/\" target=\"_blank\">Bogumił Kamiński</a> (project manager)</li>\n        <li><a href=\"https://szufel.pl/\" target=\"_blank\">Przemysław Szufel</a> (deputy project manager)</li>\n        <li><a href=\"https://github.com/mwasiluk\" target=\"_blank\">Michał Wasiluk</a> (developer)</li>\n        <li><a href=\"http://www.michaljakubczyk.pl/\" target=\"_blank\">Michał Jakubczyk</a> (designer)</li>\n        <li>Anna Wiertlewska (documentalist)</li>\n        <li>Marcin Czupryna (tester)</li>\n    </ul>\n</p>\n<p>\n    The project is developed at Decision Support and Analysis Division, Warsaw School of Economics.<br/>\n    Contact: silverdecisions@sgh.waw.pl\n</p>\n<p>\n    SilverDecisions is a community-driven project, so if you use it for teaching, research or any other activity that you would be willing to share please let us know. We would be glad to add a link to your activities on <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/SilverDecisions-Community\" target=\"_blank\">SilverDecisions Community</a> page.\n</p>\n<p>\n    Software is developed as a part of <a href=\"http://routetopa.eu/\" target=\"_blank\">ROUTE-TO-PA</a> Project that has\n    received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No\n    645860. Its aim is to allow a transparent communication between public administration and citizens regarding public\n    data about decision making processes performed by public administration.\n</p>\n<p>\n    All the source files are licensed under the terms of the GNU Lesser General Public License version 3.\n</p>\n<p>\n    For more information visit our website at <a href=\"http://silverdecisions.pl/\" target=\"_blank\">http://silverdecisions.pl/</a>.\n</p>\n";

},{}],99:[function(require,module,exports){
module.exports = "<p>\n    <strong>SilverDecisions <%= version %> (build <%= buildTimestamp%>)</strong><br/>Un logiciel libre et open source pour faire son propre arbre de décision.\n</p>\n\n<p>\n<strong>Citation:</strong><br/>\nB. Kamiński, M. Jakubczyk, P. Szufel: A framework for sensitivity analysis of decision trees, Central European Journal of Operations Research (2017).</br>\n<a href=\"https://link.springer.com/article/10.1007/s10100-017-0479-6\" target=\"_blank\">doi:10.1007/s10100-017-0479-6</a>\n</p>\n\n<p class=\"sd-project-team\">\n    Equipe du projet:\n    <ul>\n        <li><a href=\"http://bogumilkaminski.pl/\" target=\"_blank\">Bogumił Kamiński</a> (chef de projet)</li>\n        <li><a href=\"https://szufel.pl/\" target=\"_blank\">Przemysław Szufel</a> (chef de projet adjoint)</li>\n        <li><a href=\"https://github.com/mwasiluk\" target=\"_blank\">Michał Wasiluk</a> (développeur)</li>\n        <li><a href=\"http://www.michaljakubczyk.pl/\" target=\"_blank\">Michał Jakubczyk</a> (designer)</li>\n        <li>Anna Wiertlewska (documentaliste)</li>\n\t<li>Marcin Czupryna (testeur)</li>\n    </ul>\n</p>\n<p>\n    Le projet est conçu et développé par la Division de l'aide à la décision et de l'analyse, à l'École d'économie de Varsovie. <br/>Contact: silverdecisions@sgh.waw.pl\n</p>\n<p>\n    SilverDecisions est un projet communautaire, donc si vous l'utilisez pour l'enseignement, la recherche ou toute autre activité que vous aimeriez partager, \n    faites-le nous savoir. Nous serions heureux d'ajouter un lien vers vos activités sur le site web de \n    <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/SilverDecisions-Community\" target=\"_blank\">SilverDecisions Community</a>.\n</p>\n<p>  \n    Le logiciel est développé dans le cadre du projet <a href=\"http://routetopa.eu/\" target=\"_blank\">ROUTE-TO-PA</a>, \n    financé par le programme de recherche et d'innovation Horizon 2020 de l'Union Européenne dans le cadre de l'accord de subvention n° 645860. \n    Son objectif est permettre une communication transparente entre l'administration publique et les citoyens \n    concernant les données publiques (Open Data) et la prise de décision des administrations.  \n</p>\n<p>\n    Tous les fichiers source sont sous licence GNU Lesser General Public License version 3.\n</p>\n<p>\n    Pour plus d'informations, visitez notre site web à <a href=\"http://silverdecisions.pl/\" target=\"_blank\">http://silverdecisions.pl/</a>.\n</p>\n\n";

},{}],100:[function(require,module,exports){
module.exports = "<p>\n    <strong>SilverDecisions <%= version %> (construzione <%= buildTimestamp%>)</strong><br/>\n    Un Software Open Source Free per gestire alberi di decisione.\n</p>\n\n<p>\n<strong>Citazione:</strong><br/>\nB. Kamiński, M. Jakubczyk, P. Szufel: A framework for sensitivity analysis of decision trees, Central European Journal of Operations Research (2017).</br>\n<a href=\"https://link.springer.com/article/10.1007/s10100-017-0479-6\" target=\"_blank\">doi:10.1007/s10100-017-0479-6</a>\n</p>\n\n<p class=\"sd-project-team\">\n    Team di progetto:\n    <ul>\n        <li><a href=\"http://bogumilkaminski.pl/\" target=\"_blank\">Bogumił Kamiński</a> (project manager)</li>\n        <li><a href=\"https://szufel.pl/\" target=\"_blank\">Przemysław Szufel</a> (vice project manager)</li>\n        <li><a href=\"https://github.com/mwasiluk\" target=\"_blank\">Michał Wasiluk</a> (sviluppo)</li>\n        <li>Marcin Czupryna (test)</li>\n        <li><a href=\"http://www.michaljakubczyk.pl/\" target=\"_blank\">Michał Jakubczyk</a> (tester)</li>\n        <li>Anna Wiertlewska (documentazione)</li>\n    </ul>\n</p>\n<p>\n    Il progetto è sviluppato presso la Divisione “Supporto alla decisione ed Analisi” della Scuola di Economia dell’Università di Varsavia. <br/>Contatto:\n    silverdecisions@sgh.waw.pl\n</p>\n<p>\nSilverDecision è un Progetto basato su di una Comunità di sviluppo, se lo utilizzi a scopo di insegnamento, ricerca o altra attività che vorresti rendere nota tienici informati. Saremmo lieti di aggiungere un <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/SilverDecisions-Community\" target=\"_blank\">link</a> alla tua attività.\n</p>\n<p>\n    Il software è sviluppato nell’ambito del progetto <a href=\"http://routetopa.eu/\" target=\"_blank\">ROUTE-TO-PA</a> \n    finanziato dal programma di ricerca ed innovazione H2020 dell’ Unione Europea (contratto n. 645860). \n    Scopo del progetto è quello di permettere una comunicazione trasparente tra Pubblica Amministrazione e cittadini \n    riguardo ai dati pubblici ed ai processi di decisione portati avanti dalla stessa Pubblica Amministrazione.    \n</p>\n<p>\n    Tutti i codici sorgente sono rilasciati secondo i termini della licenza “GNU Lesser General Public License version 3\".\n</p>\n<p>\n    Per maggiori informazioni visita il sito <a href=\"http://silverdecisions.pl/\" target=\"_blank\">http://silverdecisions.pl/</a>.\n</p>\n\n";

},{}],101:[function(require,module,exports){
module.exports = "<p>\n    <strong>SilverDecisions <%= version %> (build <%= buildTimestamp%>)</strong><br/>\n    Oprogramowanie do analizy drzew decyzyjnych typu Free Open Source.\n</p>\n\n<p>\n<strong>Cytowanie:</strong><br/>\nB. Kamiński, M. Jakubczyk, P. Szufel: A framework for sensitivity analysis of decision trees, Central European Journal of Operations Research (2017).</br>\n<a href=\"https://link.springer.com/article/10.1007/s10100-017-0479-6\" target=\"_blank\">doi:10.1007/s10100-017-0479-6</a>\n</p>\n\n<p class=\"sd-project-team\">\n    Zespół projektowy:\n    <ul>\n        <li><a href=\"http://bogumilkaminski.pl/\" target=\"_blank\">Bogumił Kamiński</a> (manager projektu)</li>\n        <li><a href=\"https://szufel.pl/\" target=\"_blank\">Przemysław Szufel</a> (zastępca managera projektu)</li>\n        <li><a href=\"https://github.com/mwasiluk\" target=\"_blank\">Michał Wasiluk</a> (developer)</li>\n        <li><a href=\"http://www.michaljakubczyk.pl/\" target=\"_blank\">Michał Jakubczyk</a> (projektant)</li>\n        <li>Anna Wiertlewska (dokumentalistka)</li>\n        <li>Marcin Czupryna (tester)</li>\n    </ul>\n</p>\n<p>\n    Projekt jest realizowany w Zakładzie Wspomagania i Analizy Decyzji w Szkole Głównej Handlowej w Warszawie.<br/>\n    Kontakt: silverdecisions@sgh.waw.pl\n</p>\n<p>\n    Rozwój SilverDecisions zależy od potrzeb użytkowników. W związku z tym jeśli wykorzystujesz je do nauczania, badań lub innych aktywności, o których zechcesz na powiedzieć prosimy o kontakt. Byłoby nam bardzo miło, jeśli moglibyśmy dodać informację o Twoich aktywnościach na stronie <a href=\"https://github.com/SilverDecisions/SilverDecisions/wiki/SilverDecisions-Community\" target=\"_blank\">SilverDecisions Community</a>.\n</p>\n<p>\n<p>\n    Oprogramowanie jest rozwijane w ramach projektu <a href=\"http://routetopa.eu/\" target=\"_blank\">ROUTE-TO-PA</a> (<em>Raising\n    Open and User-friendly Transparency-Enabling Technologies for Public Administrations</em>),\n    który jest finansowany ze środków Europejskiego Programu w Zakresie Badań Naukowych i Innowacji Horizon 2020 na\n    podstawie umowy o dotację nr 645860. Celem projektu ROUTE-TO-PA jest umożliwienie przejrzystej komunikacji pomiędzy\n    administracją publiczną a mieszkańcami w zakresie publicznych danych dotyczących procesu podejmowania przez\n    administracje publiczne decyzji.\n</p>\n<p>\n    Wszystkie pliki źródłowe są licencjonowane zgodnie ze słabszą powszechną licencją publiczną GNU (GNU Lesser General Public License version 3).\n</p>\n<p>\n    Więcej informacji można znaleźć na stronie internetowej: <a href=\"http://silverdecisions.pl/\" target=\"_blank\">http://silverdecisions.pl/</a>.\n</p>\n";

},{}],102:[function(require,module,exports){
module.exports = "<div id=\"sd-about-dialog\" class=\"sd-modal\">\n    <div class=\"sd-modal-content\">\n        <div class=\"sd-modal-header\">\n            <span class=\"sd-modal-button sd-close-modal\"><i class=\"material-icons\">close</i></span>\n            <span class=\"sd-modal-button sd-extend-modal\"><i class=\"material-icons\">fullscreen</i></span>\n            <span class=\"sd-modal-button sd-shrink-modal\"><i class=\"material-icons\">fullscreen_exit</i></span>\n            <h2><%= i18n.t(\"aboutDialog.title\")%></h2>\n        </div>\n        <div class=\"sd-modal-body\">\n            <% if ( [\"de\", \"en\", \"fr\", \"it\", \"pl\"].indexOf(lng) !== -1) { %>\n                <%= include('about_'+lng, variables) %>\n            <% } else { %>\n                <%= include('about_en', variables) %>\n            <% } %>\n\n            <%= include('help', variables) %>\n        </div>\n    </div>\n</div>\n";

},{}],103:[function(require,module,exports){
module.exports = "<div id=\"sd-definitions-dialog\" class=\"sd-modal\">\n    <div class=\"sd-modal-content\">\n        <div class=\"sd-modal-header\">\n            <span class=\"sd-modal-button sd-close-modal\"><i class=\"material-icons\">close</i></span>\n            <span class=\"sd-modal-button sd-extend-modal\"><i class=\"material-icons\">fullscreen</i></span>\n            <span class=\"sd-modal-button sd-shrink-modal\"><i class=\"material-icons\">fullscreen_exit</i></span>\n            <h2><%= i18n.t(\"definitionsDialog.title\")%>: <span class=\"sd-definitions-dialog-scope-label\"></span></h2>\n        </div>\n        <div class=\"sd-modal-body\">\n            <div class=\"definitions-form\">\n                <div class=\"input-group\">\n                    <textarea id=\"sd-definitions-dialog-definitions-code\" name=\"sd-definitions-code\"></textarea>\n                    <span class=\"bar\"></span>\n                </div>\n            </div>\n\n            <div class=\"evaluated-variables-preview\">\n                <h3><%= i18n.t('definitionsDialog.evaluatedVariables')%>:</h3>\n                <div id=\"sd-definitions-dialog-variable-values\"></div>\n            </div>\n            <div class=\"action-buttons\">\n                <button id=\"sd-definitions-dialog-recalculate-button\" class=\"icon-button\"  title=\"<%= i18n.t('definitionsDialog.buttons.recalculate')%>\"><i class=\"material-icons\">refresh</i></button>\n            </div>\n        </div>\n    </div>\n</div>\n";

},{}],104:[function(require,module,exports){
module.exports = "<table class=\"sd-evaluated-variables\">\n    <% for(i=0; i<scopeVariables.length; ++i) { %>\n    <tr>\n        <td><%= scopeVariables[i].key %></td>\n        <td>=</td>\n        <td><%= scopeVariables[i].value %></td>\n    </tr>\n    <% } %>\n</table>\n";

},{}],105:[function(require,module,exports){
module.exports = "<div class=\"sd-fullscreen-popup\">\n    <div class=\"sd-popup-header\">\n        <span class=\"sd-close-popup\"><i class=\"material-icons\">close</i></span>\n        <h2><%= title %></h2>\n    </div>\n\n    <div class=\"sd-popup-body\">\n        <%= body %>\n    </div>\n</div>\n";

},{}],106:[function(require,module,exports){
module.exports = "<div>\n    <h3><%= i18n.t(\"help.header\")%></h3>\n    <p>\n        <%= i18n.t(\"help.mouse.header\")%>\n        <ul>\n            <li><%= i18n.t(\"help.mouse.list.1\")%></li>\n            <li><%= i18n.t(\"help.mouse.list.2\")%></li>\n            <li><%= i18n.t(\"help.mouse.list.3\")%></li>\n        </ul>\n    </p>\n    <p>\n        <%= i18n.t(\"help.keyboard.header\")%>\n        <ul>\n            <li><%= i18n.t(\"help.keyboard.list.1\")%></li>\n            <li><%= i18n.t(\"help.keyboard.list.2\")%></li>\n            <li><%= i18n.t(\"help.keyboard.list.3\")%></li>\n            <li><%= i18n.t(\"help.keyboard.list.4\")%></li>\n            <li><%= i18n.t(\"help.keyboard.list.5\")%></li>\n            <li><%= i18n.t(\"help.keyboard.list.6\")%></li>\n        </ul>\n    </p>\n    <p><%= i18n.t(\"help.docs\")%></p>\n</div>\n";

},{}],107:[function(require,module,exports){
module.exports = "<input id=\"<%= id %>\" type=\"<%= type %>\" name=\"<%= name %>\" class=\"sd-input\">\n<span class=\"bar\"></span>\n<label for=\"<%= id %>\"><%= label %></label>\n";

},{}],108:[function(require,module,exports){
module.exports = "\n";

},{}],109:[function(require,module,exports){
module.exports = "<div class=\"sd-job-parameters-builder\">\n\n</div>\n";

},{}],110:[function(require,module,exports){
module.exports = "<div class=\"sd-modal sd-league-table-dialog\">\n    <div class=\"sd-modal-content\">\n        <div class=\"sd-modal-header\">\n            <span class=\"sd-modal-button sd-close-modal\"><i class=\"material-icons\">close</i></span>\n            <span class=\"sd-modal-button sd-extend-modal\"><i class=\"material-icons\">fullscreen</i></span>\n            <span class=\"sd-modal-button sd-shrink-modal\"><i class=\"material-icons\">fullscreen_exit</i></span>\n\n            <h2><%= i18n.t(\"leagueTableDialog.title\")%></h2>\n        </div>\n        <div class=\"sd-modal-body\">\n            <div class=\"sd-league-table-warnings\">\n\n            </div>\n            <div class=\"sd-job-progress-bar-container sd-progress-bar-container sd-hidden\"><div class=\"sd-progress-bar\"></div></div>\n            <div class=\"sd-league-table-job-results sd-hidden\">\n                <div class=\"sd-job-result-table-container\"></div>\n                <div class=\"sd-job-result-plot-container\"></div>\n            </div>\n            <div class=\"sd-league-table-action-buttons\">\n                <button class=\"sd-download-csv-button sd-hidden\"><%= i18n.t('leagueTableDialog.buttons.downloadCsv')%></button>\n            </div>\n        </div>\n    </div>\n</div>\n";

},{}],111:[function(require,module,exports){
module.exports = "<div class=\"sd-loading-indicator\">\n    <div></div>\n    <div class=\"sd-spinner\" title=\"loading...\"></div>\n</div>\n";

},{}],112:[function(require,module,exports){
module.exports = "<div id=\"silver-decisions\" tabindex=\"0\">\n    <%= include('toolbar', variables) %>\n    <div id=\"main-region\">\n        <%= include('sidebar', variables) %>\n        <div id=\"tree-designer-container\"></div>\n    </div>\n    <input type=\"file\" style=\"display:none\" id=\"sd-file-input\" accept=\".json\"/>\n    <%= include('settingsDialog', variables) %>\n    <%= include('aboutDialog', variables) %>\n    <%= include('definitionsDialog', variables) %>\n    <%= include('sensitivityAnalysisDialog', variables) %>\n    <%= include('leagueTableDialog', variables) %>\n</div>\n";

},{}],113:[function(require,module,exports){
module.exports = "<select id=\"<%= id %>\" name=\"<%= name %>\" class=\"sd-input\">\n    <% for(i=0; i<options.length; ++i) { %>\n    <option value=\"<% if (options[i].value !== undefined){ %><%= options[i].value %><%} else { %><%= options[i] %><%}%>\"><% if (options[i].label !== undefined){ %><%= options[i].label %><%} else { %><%= options[i] %><%}%></option>\n    <% } %>\n</select>\n<span class=\"bar\"></span>\n<label for=\"<%= id %>\"><%= label %></label>\n";

},{}],114:[function(require,module,exports){
module.exports = "<div class=\"sd-modal sd-sensitivity-analysis-dialog\">\n    <div class=\"sd-modal-content\">\n        <div class=\"sd-modal-header\">\n            <span class=\"sd-modal-button sd-close-modal\"><i class=\"material-icons\">close</i></span>\n            <span class=\"sd-modal-button sd-extend-modal\"><i class=\"material-icons\">fullscreen</i></span>\n            <span class=\"sd-modal-button sd-shrink-modal\"><i class=\"material-icons\">fullscreen_exit</i></span>\n\n            <h2><%= i18n.t(\"sensitivityAnalysisDialog.title\")%></h2>\n        </div>\n        <div class=\"sd-modal-body\">\n            <div class=\"sd-sensitivity-analysis-job-configuration\">\n                <div class=\"sd-job-select-input-group input-group\"></div>\n                <%= include('jobParametersBuilder', variables) %>\n            </div>\n            <div class=\"sd-sensitivity-analysis-warnings\">\n\n            </div>\n            <div class=\"sd-job-progress-bar-container sd-progress-bar-container sd-hidden\"><div class=\"sd-progress-bar\"></div></div>\n            <div class=\"sd-sensitivity-analysis-job-results sd-hidden\">\n                <div class=\"sd-job-result-table-container\"></div>\n                <div class=\"sd-job-result-plot-container\"></div>\n            </div>\n            <div class=\"sd-sensitivity-analysis-action-buttons\">\n                <button class=\"sd-terminate-job-button sd-hidden\"><%= i18n.t('sensitivityAnalysisDialog.buttons.terminateJob')%></button>\n                <button class=\"sd-stop-job-button sd-hidden\"><%= i18n.t('sensitivityAnalysisDialog.buttons.stopJob')%></button>\n                <button class=\"sd-resume-job-button sd-hidden\"><%= i18n.t('sensitivityAnalysisDialog.buttons.resumeJob')%></button>\n                <button class=\"sd-back-button  sd-hidden\"><%= i18n.t('sensitivityAnalysisDialog.buttons.back')%></button>\n                <button class=\"sd-download-csv-button sd-hidden\"><%= i18n.t('sensitivityAnalysisDialog.buttons.downloadCsv')%></button>\n                <button class=\"sd-clear-button \"><%= i18n.t('sensitivityAnalysisDialog.buttons.clear')%></button>\n                <button class=\"sd-run-job-button\"><%= i18n.t('sensitivityAnalysisDialog.buttons.runJob')%></button>\n\n            </div>\n        </div>\n    </div>\n</div>\n";

},{}],115:[function(require,module,exports){
module.exports = "<div id=\"sd-settings-dialog\" class=\"sd-modal\">\n    <div class=\"sd-modal-content\">\n        <div class=\"sd-modal-header\">\n            <span class=\"sd-modal-button sd-close-modal\"><i class=\"material-icons\">close</i></span>\n            <span class=\"sd-modal-button sd-extend-modal\"><i class=\"material-icons\">fullscreen</i></span>\n            <span class=\"sd-modal-button sd-shrink-modal\"><i class=\"material-icons\">fullscreen_exit</i></span>\n            <h2><%= i18n.t(\"settingsDialog.title\")%></h2>\n        </div>\n        <div class=\"sd-modal-body\">\n            <form id=\"sd-settings-form\">\n            </form>\n        </div>\n    </div>\n</div>\n";

},{}],116:[function(require,module,exports){
module.exports = "<div class=\"header\">\n    <h4><%= i18n.t(\"settingsDialog.\"+name+\".title\")%>\n        <span class=\"toggle-button\">\n            <i class=\"material-icons icon-arrow-up\">keyboard_arrow_up</i>\n            <i class=\"material-icons icon-arrow-down\">keyboard_arrow_down</i>\n        </span>\n    </h4>\n</div>\n<div class=\"sd-form-group-content\">\n    <div class=\"sd-form-group-inputs\"></div>\n    <div class=\"sd-form-group-child-groups\"></div>\n</div>\n";

},{}],117:[function(require,module,exports){
module.exports = "<div id=\"sd-sidebar-definitions\">\n    <div class=\"header\">\n        <%= i18n.t(\"sidebarDefinitions.header\")%>\n        <span class=\"toggle-button\">\n            <i class=\"material-icons icon-arrow-up\">keyboard_arrow_up</i>\n            <i class=\"material-icons icon-arrow-down\">keyboard_arrow_down</i>\n        </span>\n    </div>\n    <div class=\"content\">\n        <div class=\"sd-variables-scope\">\n            <div class=\"sd-variables-scope-label\"><%= i18n.t('sidebarDefinitions.scope.label')%></div>\n            <div class=\"sd-variables-scope-value\"></div>\n        </div>\n        <div class=\"input-group\">\n            <textarea rows=\"1\" id=\"sd-sidebar-definitions-code\" type=\"text\" name=\"sidebar-definitions-code\"></textarea>\n            <span class=\"bar\"></span>\n            <label for=\"sd-sidebar-definitions-code\"><%= i18n.t(\"sidebarDefinitions.code\") %></label>\n        </div>\n        <div class=\"evaluated-variables-preview\">\n            <div class=\"evaluated-variables-preview-header\">\n                <%= i18n.t('sidebarDefinitions.evaluatedVariables')%>\n            </div>\n            <div id=\"sd-sidebar-definitions-evaluated-values\"></div>\n        </div>\n        <div class=\"sd-action-buttons\">\n            <button id=\"sd-sidebar-definitions-open-dialog-button\" class=\"icon-button\"  title=\"<%= i18n.t('sidebarDefinitions.buttons.openDialog')%>\"><i class=\"material-icons\">open_in_new</i></button>\n            <button id=\"sd-sidebar-definitions-recalculate-button\" class=\"icon-button\"  title=\"<%= i18n.t('sidebarDefinitions.buttons.recalculate')%>\"><i class=\"material-icons\">refresh</i></button>\n        </div>\n    </div>\n</div>\n";

},{}],118:[function(require,module,exports){
module.exports = "<div id=\"diagram-details-box\">\n    <div class=\"header\">\n        <%= i18n.t(\"diagramDetails.header\")%>\n        <span class=\"toggle-button\">\n            <i class=\"material-icons icon-arrow-up\">keyboard_arrow_up</i>\n            <i class=\"material-icons icon-arrow-down\">keyboard_arrow_down</i>\n        </span>\n    </div>\n    <div class=\"content\">\n        <div class=\"input-group\">\n            <input id=\"diagram-title\" type=\"text\" name=\"diagram-title\">\n            <span class=\"bar\"></span>\n            <label for=\"diagram-title\"><%= i18n.t(\"diagramDetails.title\") %></label>\n        </div>\n        <div class=\"input-group\">\n            <textarea id=\"diagram-description\" name=\"diagram-description\"></textarea>\n            <span class=\"bar\"></span>\n            <label for=\"diagram-description\"><%= i18n.t(\"diagramDetails.description\") %></label>\n        </div>\n    </div>\n</div>\n";

},{}],119:[function(require,module,exports){
module.exports = "<div id=\"layout-options\">\n    <div class=\"header\">\n        <%= i18n.t(\"layoutOptions.header\")%>\n        <span class=\"toggle-button\">\n            <i class=\"material-icons icon-arrow-up\">keyboard_arrow_up</i>\n            <i class=\"material-icons icon-arrow-down\">keyboard_arrow_down</i>\n        </span>\n    </div>\n    <div class=\"content\">\n        <div class=\"input-group\">\n            <input id=\"margin-horizontal\" name=\"margin-horizontal\" type=\"range\" min=\"5\" max=\"150\" step=\"5\"/>\n            <label for=\"margin-horizontal\"><%= i18n.t(\"layoutOptions.marginHorizontal\")%></label>\n        </div>\n        <div class=\"input-group\">\n            <input id=\"margin-vertical\" name=\"margin-vertical\" type=\"range\" min=\"5\" max=\"150\" step=\"5\"/>\n            <label for=\"margin-vertical\"><%= i18n.t(\"layoutOptions.marginVertical\")%></label>\n        </div>\n        <div class=\"input-group\">\n            <input id=\"node-size\" name=\"node-size\" type=\"range\" min=\"20\" max=\"60\" step=\"5\"/>\n            <label for=\"node-size\"><%= i18n.t(\"layoutOptions.nodeSize\")%></label>\n        </div>\n        <div class=\"input-group\">\n            <input id=\"edge-slant-width-max\" name=\"edge-slant-width-max\" type=\"range\" min=\"0\" max=\"150\" step=\"5\"/>\n            <label for=\"edge-slant-width-max\"><%= i18n.t(\"layoutOptions.edgeSlantWidthMax\")%></label>\n        </div>\n        <div id=\"auto-layout-options\">\n            <div class=\"input-group\">\n                <input id=\"grid-width\" name=\"grid-width\" type=\"range\" min=\"105\" max=\"300\" step=\"5\"/>\n                <label for=\"grid-width\"><%= i18n.t(\"layoutOptions.gridWidth\")%></label>\n            </div>\n            <div class=\"input-group\">\n                <input id=\"grid-height\" name=\"grid-height\" type=\"range\" min=\"55\" max=\"150\" step=\"5\"/>\n                <label for=\"grid-height\"><%= i18n.t(\"layoutOptions.gridHeight\")%></label>\n            </div>\n        </div>\n    </div>\n</div>\n";

},{}],120:[function(require,module,exports){
module.exports = "<div id=\"sd-multiple-criteria\">\n    <div class=\"header\">\n        <%= i18n.t(\"multipleCriteria.header\")%>\n        <span class=\"toggle-button\">\n            <i class=\"material-icons icon-arrow-up\">keyboard_arrow_up</i>\n            <i class=\"material-icons icon-arrow-down\">keyboard_arrow_down</i>\n        </span>\n    </div>\n    <div class=\"content\">\n        <div class=\"sd-multiple-criteria-properties\"></div>\n        <div class=\"sd-action-buttons\">\n            <button id=\"sd-show-league-table-button\" class=\"icon-button\"  title=\"<%= i18n.t('multipleCriteria.buttons.showLeagueTable')%>\"><i class=\"material-icons\">assignment</i></button>\n            <button id=\"sd-flip-criteria-button\" class=\"icon-button\"  title=\"<%= i18n.t('multipleCriteria.buttons.flip')%>\"><i class=\"material-icons\">swap_vert</i></button>\n        </div>\n    </div>\n</div>\n";

},{}],121:[function(require,module,exports){
module.exports = "<div id=\"object-properties\">\n    <div class=\"header\"></div>\n    <div class=\"content\">\n        <div class=\"main-properties\"></div>\n        <div class=\"children-properties\">\n            <div class=\"children-properties-header\"></div>\n            <div class=\"children-properties-content\"></div>\n        </div>\n    </div>\n</div>\n";

},{}],122:[function(require,module,exports){
module.exports = "<div id=\"sd-sidebar\">\n    <div id=\"sd-sidebar-inner\">\n        <%= include('layoutOptions', variables) %>\n        <%= include('diagramDetailsBox', variables) %>\n        <%= include('definitions', variables) %>\n        <%= include('multipleCriteria', variables) %>\n        <%= include('objectProperties', variables) %>\n    </div>\n</div>\n";

},{}],123:[function(require,module,exports){
module.exports = "<div id=\"sd-toolbar\">\n    <div class=\"toolbar-group\">\n        <button id=\"new-diagram-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.newDiagram')%>\"><i class=\"material-icons\">insert_drive_file</i></button>\n        <button id=\"open-diagram-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.openDiagram')%>\"><i class=\"material-icons\">folder_open</i></button>\n        <button id=\"save-diagram-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.saveDiagram')%>\"><i class=\"material-icons\">save</i></button>\n    </div>\n    <div id=\"export-toolbar-group\" class=\"toolbar-group\">\n        <label><%= i18n.t(\"toolbar.export.label\")%></label>\n        <button id=\"saveButton\"><%= i18n.t(\"toolbar.export.png\")%></button>\n        <button id=\"saveButtonSvg\"><%= i18n.t(\"toolbar.export.svg\")%></button>\n        <button id=\"saveButtonPdf\"><%= i18n.t(\"toolbar.export.pdf\")%></button>\n    </div>\n    <div class=\"toolbar-group\">\n        <label><%= i18n.t(\"toolbar.layout.label\")%></label>\n        <button id=\"manualLayoutButton\"><%= i18n.t(\"toolbar.layout.manual\")%></button>\n        <button id=\"treeAutoLayoutButton\"><%= i18n.t(\"toolbar.layout.tree\")%></button>\n        <button id=\"clusterAutoLayoutButton\"><%= i18n.t(\"toolbar.layout.cluster\")%></button>\n    </div>\n    <div id=\"view-mode-toolbar-group\" class=\"toolbar-group\">\n        <label for=\"view-mode-select\"><%= i18n.t(\"toolbar.viewMode.label\")%></label>\n        <div class=\"input-group no-floating-label\" style=\"display: inline-block\">\n            <select id=\"view-mode-select\"></select>\n            <span class=\"bar\"></span>\n        </div>\n    </div>\n    <div id=\"objective-rule-toolbar-group\" class=\"toolbar-group\">\n        <label for=\"objective-rule-select\"><%= i18n.t(\"toolbar.objectiveRule.label\")%></label>\n        <div class=\"input-group no-floating-label\" style=\"display: inline-block\">\n            <select id=\"objective-rule-select\"></select>\n            <span class=\"bar\"></span>\n        </div>\n    </div>\n    <div class=\"toolbar-group\">\n        <button id=\"undoButton\" class=\"icon-button\" disabled=\"disabled\" title=\"<%= i18n.t('toolbar.undo')%>\"><i class=\"material-icons\">undo</i></button>\n        <button id=\"redoButton\" class=\"icon-button\" disabled=\"disabled\" title=\"<%= i18n.t('toolbar.redo')%>\"><i class=\"material-icons\">redo</i></button>\n    </div>\n    <div class=\"toolbar-group\">\n        <button id=\"sensitivity-analysis-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.sensitivityAnalysis')%>\"><i class=\"material-icons\">assessment</i></button>\n        <button id=\"recompute-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.recompute')%>\"><i class=\"material-icons\">refresh</i></button>\n        <button id=\"settings-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.settings')%>\"><i class=\"material-icons\">settings</i></button>\n        <button id=\"about-button\" class=\"icon-button\" title=\"<%= i18n.t('toolbar.about')%>\"><i class=\"material-icons\">info_outline</i></button>\n    </div>\n</div>\n";

},{}],124:[function(require,module,exports){
module.exports = "<div class=\"sd-warning-message\">\n    <i class=\"material-icons sd-icon\">warning</i>\n    <div class=\"sd-warning-message-text\">\n       <%= message %>\n    </div>\n</div>\n";

},{}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Toolbar = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _d = require('./d3');

var d3 = _interopRequireWildcard(_d);

var _i18n = require('./i18n/i18n');

var _appUtils = require('./app-utils');

var _exporter = require('./exporter');

var _fileLoader = require('./file-loader');

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Toolbar = exports.Toolbar = function () {
    function Toolbar(container, app) {
        _classCallCheck(this, Toolbar);

        this.hiddenClass = 'sd-hidden';

        this.app = app;
        this.container = container;
        this.initDiagramButtons();
        this.initExportToolbarGroup();
        this.initLayoutButtons();
        this.initUndoRedoButtons();
        this.initSettingsButton();
        this.initAboutButton();
        this.initSensitivityAnalysisButton();
        this.initRecomputeButton();
        this.initViewModeToolbarGroup();
        this.initObjectiveRuleToolbarGroup();
    }

    _createClass(Toolbar, [{
        key: 'initDiagramButtons',
        value: function initDiagramButtons() {
            var _this = this;

            this.newDiagramButton = this.container.select('#new-diagram-button').on('click', function () {
                if (!confirm(_i18n.i18n.t('confirm.newDiagram'))) {
                    return;
                }
                _this.app.newDiagram();
            });
            this.newDiagramButton.classed(this.hiddenClass, !this.app.config.buttons.new);
            this.openDiagramButton = this.container.select('#open-diagram-button').on('click', function () {
                if (!confirm(_i18n.i18n.t('confirm.openDiagram'))) {
                    return;
                }
                _fileLoader.FileLoader.openFile(function (model) {
                    _this.app.openDiagram(model);
                });
            });
            this.openDiagramButton.classed(this.hiddenClass, !this.app.config.buttons.open);
            this.saveDiagramButton = this.container.select('#save-diagram-button').on('click', function () {
                _this.app.saveToFile();
            });
            this.saveDiagramButton.classed(this.hiddenClass, !this.app.config.buttons.save);
        }
    }, {
        key: 'initLayoutButtons',
        value: function initLayoutButtons() {
            var self = this;
            self.app.treeDesigner.layout.onAutoLayoutChanged.push(function (layout) {
                return self.onLayoutChanged(layout);
            });
            this.layoutButtons = {};
            this.layoutButtons['manual'] = this.container.select('#manualLayoutButton').on('click', function () {
                if (self.app.treeDesigner.config.layout.type == 'manual') {
                    return;
                }
                self.app.treeDesigner.layout.disableAutoLayout();
            });
            this.layoutButtons['tree'] = this.container.select('#treeAutoLayoutButton').on('click', function () {
                if (self.app.treeDesigner.config.layout.type == 'tree') {
                    return;
                }
                self.app.treeDesigner.autoLayout('tree');
            });
            this.layoutButtons['cluster'] = this.container.select('#clusterAutoLayoutButton').on('click', function () {
                if (self.app.treeDesigner.config.layout.type == 'cluster') {
                    return;
                }
                self.app.treeDesigner.autoLayout('cluster');
            });

            this.updateLayoutButtons();
        }
    }, {
        key: 'updateLayoutButtons',
        value: function updateLayoutButtons() {
            this.onLayoutChanged(this.app.treeDesigner.config.layout.type);
        }
    }, {
        key: 'initSettingsButton',
        value: function initSettingsButton() {
            var _this2 = this;

            this.settingsButton = this.container.select('#settings-button').on('click', function () {
                _this2.app.settingsDialog.open();
            });
        }
    }, {
        key: 'initAboutButton',
        value: function initAboutButton() {
            var _this3 = this;

            this.aboutButton = this.container.select('#about-button').on('click', function () {
                _this3.app.aboutDialog.open();
            });
        }
    }, {
        key: 'initRecomputeButton',
        value: function initRecomputeButton() {
            var _this4 = this;

            this.recomputeButton = this.container.select('#recompute-button').on('click', function () {
                _this4.app.recompute();
            });
        }
    }, {
        key: 'initSensitivityAnalysisButton',
        value: function initSensitivityAnalysisButton() {
            var _this5 = this;

            this.sensitivityAnalysisButton = this.container.select('#sensitivity-analysis-button').on('click', function () {
                _this5.app.openSensitivityAnalysis();
            });
        }
    }, {
        key: 'updateSensitivityAnalysisButton',
        value: function updateSensitivityAnalysisButton() {
            this.sensitivityAnalysisButton.attr("disabled", this.app.isSensitivityAnalysisAvailable() ? null : 'disabled');
        }
    }, {
        key: 'onLayoutChanged',
        value: function onLayoutChanged(layout) {
            var _this6 = this;

            Object.getOwnPropertyNames(this.layoutButtons).forEach(function (l) {
                _this6.layoutButtons[l].classed('active', false);
            });
            var button = this.layoutButtons[layout];
            if (button) {
                button.classed('active', true);
            }
        }
    }, {
        key: 'initUndoRedoButtons',
        value: function initUndoRedoButtons() {
            var _this7 = this;

            var self = this;
            self.app.dataModel.undoRedoStateChangedCallback = function () {
                return _this7.onUndoRedoChanged();
            };
            this.undoButton = this.container.select('#undoButton').on('click', function () {
                self.app.undo();
            });
            this.redoButton = this.container.select('#redoButton').on('click', function () {
                self.app.redo();
            });
        }
    }, {
        key: 'onUndoRedoChanged',
        value: function onUndoRedoChanged() {
            this.updateUndoRedoButtons();
            this.updateSensitivityAnalysisButton();
        }
    }, {
        key: 'updateUndoRedoButtons',
        value: function updateUndoRedoButtons() {
            this.undoButton.attr("disabled", this.app.dataModel.isUndoAvailable() ? null : 'disabled');
            this.redoButton.attr("disabled", this.app.dataModel.isRedoAvailable() ? null : 'disabled');
        }
    }, {
        key: 'update',
        value: function update() {
            this.updateUndoRedoButtons();
            this.updateSensitivityAnalysisButton();
            this.updateLayoutButtons();
            this.updateViewModeValue();
            this.updateObjectiveRuleOptions();
            this.updateObjectiveRuleValue();
        }
    }, {
        key: 'initExportToolbarGroup',
        value: function initExportToolbarGroup() {
            this.container.select('#export-toolbar-group').classed(this.hiddenClass, !this.app.config.exports.show);
            if (!this.app.config.exports.show) {
                return;
            }
            this.initExportToPngButton();
            this.initExportSvgButton();
            this.initExportPdfButton();
        }
    }, {
        key: 'initExportToPngButton',
        value: function initExportToPngButton() {
            var _this8 = this;

            var svg = this.app.treeDesigner.svg;
            this.container.select('#saveButton').on('click', function () {
                return _exporter.Exporter.saveAsPng(svg, _this8.app.config.exports);
            }).classed(this.hiddenClass, !this.app.config.buttons.exportToPng);
        }
    }, {
        key: 'initExportSvgButton',
        value: function initExportSvgButton() {
            var svg = this.app.treeDesigner.svg;
            this.container.select('#saveButtonSvg').on('click', function () {
                return _exporter.Exporter.saveAsSvg(svg);
            }).classed(this.hiddenClass, !this.app.config.buttons.exportToSvg);
        }
    }, {
        key: 'initExportPdfButton',
        value: function initExportPdfButton() {
            var _this9 = this;

            var svg = this.app.treeDesigner.svg;
            this.container.select('#saveButtonPdf').on('click', function () {
                return _exporter.Exporter.saveAsPdf(svg, _this9.app.config.exports);
            }).classed(this.hiddenClass, !this.app.config.buttons.exportToPdf);
        }
    }, {
        key: 'initObjectiveRuleToolbarGroup',
        value: function initObjectiveRuleToolbarGroup() {
            var self = this;
            this.objectiveRuleSelect = this.container.select('#objective-rule-select');

            this.updateObjectiveRuleOptions();
            this.updateObjectiveRuleValue();

            this.objectiveRuleSelect.on('change', function () {
                self.app.setObjectiveRule(this.value);
            });
        }
    }, {
        key: 'updateObjectiveRuleOptions',
        value: function updateObjectiveRuleOptions() {
            var rules = this.app.getObjectiveRules();
            var options = this.objectiveRuleSelect.selectAll('option').data(rules);
            options.exit().remove();
            options.enter().append('option').merge(options).attr('value', function (d) {
                return d.name;
            }).text(function (d) {
                return _i18n.i18n.t('toolbar.objectiveRule.options.' + d.name);
            });
        }
    }, {
        key: 'updateObjectiveRuleValue',
        value: function updateObjectiveRuleValue() {
            this.objectiveRuleSelect.node().value = this.app.getCurrentObjectiveRule().name;
        }
    }, {
        key: 'initViewModeToolbarGroup',
        value: function initViewModeToolbarGroup() {
            var self = this;
            this.viewModeSelect = this.container.select('#view-mode-select');
            var rules = this.app.getViewModes();
            var options = this.viewModeSelect.selectAll('option').data(rules);
            options.enter().append('option').merge(options).attr('value', function (d) {
                return d.name;
            }).text(function (d) {
                return _i18n.i18n.t('toolbar.viewMode.options.' + d.name);
            });

            this.updateViewModeValue();

            this.viewModeSelect.on('change', function () {
                self.app.setViewModeByName(this.value);
            });
        }
    }, {
        key: 'updateViewModeValue',
        value: function updateViewModeValue() {
            this.viewModeSelect.node().value = this.app.getCurrentViewMode().name;
        }
    }]);

    return Toolbar;
}();

},{"./app-utils":64,"./d3":67,"./exporter":73,"./file-loader":74,"./i18n/i18n":80}],126:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NumberInputValidator = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var NumberInputValidator = exports.NumberInputValidator = function () {
    function NumberInputValidator(min, max) {
        _classCallCheck(this, NumberInputValidator);

        this.min = min;
        this.max = max;
    }

    _createClass(NumberInputValidator, [{
        key: "validate",
        value: function validate(value) {
            if (value === null || value === undefined) {
                return false;
            }
            value += "";
            if (!value.trim()) {
                return false;
            }

            value = parseFloat(value);

            if (!_sdUtils.Utils.isNumber(value)) {
                return false;
            }

            if (this.min !== undefined && value < this.min) {
                return false;
            }

            return !(this.max !== undefined && value > this.max);
        }
    }]);

    return NumberInputValidator;
}();

},{"sd-utils":"sd-utils"}],127:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PayoffInputValidator = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var PayoffInputValidator = exports.PayoffInputValidator = function () {
    function PayoffInputValidator(expressionEngine) {
        _classCallCheck(this, PayoffInputValidator);

        this.expressionEngine = expressionEngine;
    }

    _createClass(PayoffInputValidator, [{
        key: "validate",
        value: function validate(value, edge) {
            if (value === null || value === undefined) {
                return false;
            }
            value += "";
            if (!value.trim()) {
                return false;
            }
            if (this.expressionEngine.constructor.hasAssignmentExpression(value)) {
                return false;
            }
            return this.expressionEngine.validate(value);
        }
    }]);

    return PayoffInputValidator;
}();

},{"sd-utils":"sd-utils"}],128:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var ProbabilityInputValidator = exports.ProbabilityInputValidator = function () {
    function ProbabilityInputValidator(expressionEngine) {
        _classCallCheck(this, ProbabilityInputValidator);

        this.expressionEngine = expressionEngine;
    }

    _createClass(ProbabilityInputValidator, [{
        key: "validate",
        value: function validate(value, edge) {
            if (value === null || value === undefined) {
                return false;
            }

            value += "";
            if (!value.trim()) {
                return false;
            }

            if (this.expressionEngine.constructor.isHash(value)) {
                return true;
            }

            if (this.expressionEngine.constructor.hasAssignmentExpression(value)) {
                return false;
            }
            var scope = edge.parentNode.expressionScope;
            return this.expressionEngine.validate(value, scope);
        }
    }]);

    return ProbabilityInputValidator;
}();

},{}],129:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RequiredInputValidator = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _sdUtils = require("sd-utils");

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var RequiredInputValidator = exports.RequiredInputValidator = function () {
    function RequiredInputValidator() {
        _classCallCheck(this, RequiredInputValidator);
    }

    _createClass(RequiredInputValidator, [{
        key: "validate",
        value: function validate(value) {
            if (value === null || value === undefined) {
                return false;
            }
            value += "";
            return !!value.trim();
        }
    }]);

    return RequiredInputValidator;
}();

},{"sd-utils":"sd-utils"}],130:[function(require,module,exports){
"use strict";

module.exports = { "buildTimestamp": 1513790216239 };

},{}],131:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('./src/index');

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _index[key];
    }
  });
});

},{"./src/index":146}],132:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AppUtils = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

var _templates = require("./templates");

var _i18n = require("./i18n/i18n");

var _sdUtils = require("sd-utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AppUtils = function () {
    function AppUtils() {
        _classCallCheck(this, AppUtils);
    }

    _createClass(AppUtils, null, [{
        key: "placeTextWithEllipsis",


        //places textString in textObj, adds an ellipsis if text can't fit in width
        value: function placeTextWithEllipsis(textD3Obj, textString, width) {
            var textObj = textD3Obj.node();
            textObj.textContent = textString;

            var margin = 0;
            var ellipsisLength = 9;
            //ellipsis is needed
            if (textObj.getComputedTextLength() > width + margin) {
                for (var x = textString.length - 3; x > 0; x -= 1) {
                    if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {
                        textObj.textContent = textString.substring(0, x) + "...";
                        return true;
                    }
                }
                textObj.textContent = "..."; //can't place at all
                return true;
            }
            return false;
        }
    }, {
        key: "placeTextWithEllipsisAndTooltip",
        value: function placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {
            var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);
            if (ellipsisPlaced && tooltip) {
                textD3Obj.on("mouseover", function (d) {
                    tooltip.transition().duration(200).style("opacity", .9);
                    tooltip.html(textString).style("left", d3.event.pageX + 5 + "px").style("top", d3.event.pageY - 28 + "px");
                });

                textD3Obj.on("mouseout", function (d) {
                    tooltip.transition().duration(500).style("opacity", 0);
                });
            }
        }
    }, {
        key: "getFontSize",
        value: function getFontSize(element) {
            return window.getComputedStyle(element, null).getPropertyValue("font-size");
        }
    }, {
        key: "getTranslation",
        value: function getTranslation(transform) {
            // Create a dummy g for calculation purposes only. This will never
            // be appended to the DOM and will be discarded once this function
            // returns.
            var g = document.createElementNS("http://www.w3.org/2000/svg", "g");

            // Set the transform attribute to the provided string value.
            g.setAttributeNS(null, "transform", transform);

            // consolidate the SVGTransformList containing all transformations
            // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get
            // its SVGMatrix.
            var matrix = g.transform.baseVal.consolidate().matrix;

            // As per definition values e and f are the ones for the translation.
            return [matrix.e, matrix.f];
        }
    }, {
        key: "closestPoint",
        value: function closestPoint(pathNode, point) {
            var pathLength = pathNode.getTotalLength(),
                precision = 8,
                best,
                bestLength,
                bestDistance = Infinity;

            // linear scan for coarse approximation
            for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
                if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
                    best = scan, bestLength = scanLength, bestDistance = scanDistance;
                }
            }

            // binary search for precise estimate
            precision /= 2;
            while (precision > 0.5) {
                var before, after, beforeLength, afterLength, beforeDistance, afterDistance;
                if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
                    best = before, bestLength = beforeLength, bestDistance = beforeDistance;
                } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
                    best = after, bestLength = afterLength, bestDistance = afterDistance;
                } else {
                    precision /= 2;
                }
            }

            best = [best.x, best.y];
            best.distance = Math.sqrt(bestDistance);
            return best;

            function distance2(p) {
                var dx = p.x - point[0],
                    dy = p.y - point[1];
                return dx * dx + dy * dy;
            }
        }
    }, {
        key: "growl",
        value: function growl(message) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
            var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'right';
            var time = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2000;

            var html = _templates.Templates.get('growl', { message: message, type: type });

            var g = d3.select('body').selectOrAppend('div.sd-growl-list.' + position).append('div').html(html);
            setTimeout(function () {
                g.remove();
            }, time);
        }
    }, {
        key: "createElement",
        value: function createElement(tag, attribs, parent) {
            var el = document.createElement(tag);

            if (attribs) {
                AppUtils.deepExtend(el, attribs);
            }
            if (parent) {
                parent.appendChild(el);
            }
            return el;
        }
    }, {
        key: "removeElement",
        value: function removeElement(element) {
            element.parentNode.removeChild(element);
        }
    }, {
        key: "replaceUrls",
        value: function replaceUrls(text) {
            if (!text) {
                return text;
            }
            var urlRegexp = /((ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?)/;

            return text.replace(urlRegexp, '<a href="$1" target="_blank">$1</a>');
        }
    }, {
        key: "escapeHtml",
        value: function escapeHtml(html) {
            var text = document.createTextNode(html);
            var div = document.createElement('div');
            div.appendChild(text);
            return div.innerHTML;
        }
    }, {
        key: "dispatchHtmlEvent",
        value: function dispatchHtmlEvent(element, name) {
            if ("createEvent" in document) {
                var evt = document.createEvent("HTMLEvents");
                evt.initEvent(name, false, true);
                element.dispatchEvent(evt);
            } else element.fireEvent("on" + name);
        }
    }, {
        key: "dispatchEvent",
        value: function dispatchEvent(name, data) {
            var event;
            try {
                event = new CustomEvent(name, { 'detail': data });
            } catch (e) {
                //IE
                event = document.createEvent('CustomEvent');
                event.initCustomEvent(name, false, false, data);
            }
            document.dispatchEvent(event);
        }
    }, {
        key: "getValidationMessage",
        value: function getValidationMessage(error) {
            if (_sdUtils.Utils.isString(error)) {
                error = { name: error };
            }
            var key = 'validation.' + error.name;
            return _i18n.i18n.t(key, error.data);
        }
    }, {
        key: "hide",
        value: function hide(selection) {
            selection.classed('sd-hidden', true);
        }
    }, {
        key: "show",
        value: function show(selection) {
            var _show = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            selection.classed('sd-hidden', !_show);
        }
    }, {
        key: "isHidden",
        value: function isHidden(el) {
            var exact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!el) {
                return true;
            }
            if (exact) {
                var style = window.getComputedStyle(el);
                return style.display === 'none';
            }
            return el.offsetParent === null;
        }
    }, {
        key: "getJSON",
        value: function getJSON(url, callback) {
            var xhr = new XMLHttpRequest();
            xhr.open('get', url, true);
            xhr.responseType = 'json';
            xhr.onload = function () {
                var status = xhr.status;
                if (status == 200) {
                    callback(xhr.response, null);
                } else {
                    callback(null, status);
                }
            };
            xhr.send();
        }
    }]);

    return AppUtils;
}();

exports.AppUtils = AppUtils;

AppUtils.sanitizeHeight = function (height, container) {
    return height || parseInt(container.style('height'), 10) || 400;
};

AppUtils.sanitizeWidth = function (width, container) {
    return width || parseInt(container.style('width'), 10) || 960;
};

AppUtils.availableHeight = function (height, container, margin) {
    return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);
};

AppUtils.availableWidth = function (width, container, margin) {
    return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);
};

},{"./d3":139,"./i18n/i18n":143,"./templates":151,"sd-utils":"sd-utils"}],133:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContextMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require('../d3');

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*based on:
 * github.com/patorjk/d3-context-menu */

var ContextMenu = exports.ContextMenu = function () {
    function ContextMenu(menu, opts) {
        _classCallCheck(this, ContextMenu);

        var self = this;

        if (typeof opts === 'function') {
            self.openCallback = opts;
        } else {
            opts = opts || {};
            self.openCallback = opts.onOpen;
            self.closeCallback = opts.onClose;
        }

        // create the div element that will hold the context menu
        d3.selectAll('.d3-context-menu').data([1]).enter().append('div').attr('class', 'd3-context-menu');

        // close menu
        d3.select('body').on('click.d3-context-menu', function () {
            d3.select('.d3-context-menu').style('display', 'none');
            if (self.closeCallback) {
                self.closeCallback();
            }
        });

        // this gets executed when a contextmenu event occurs
        return function (data, index) {
            var elm = this;

            d3.selectAll('.d3-context-menu').html('');
            var list = d3.selectAll('.d3-context-menu').on('contextmenu', function (d) {
                d3.select('.d3-context-menu').style('display', 'none');
                d3.event.preventDefault();
                d3.event.stopPropagation();
            }).append('ul');
            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter().append('li').attr('class', function (d) {
                var ret = '';
                if (d.divider) {
                    ret += ' is-divider';
                }
                if (d.disabled) {
                    ret += ' is-disabled';
                }
                if (!d.action) {
                    ret += ' is-header';
                }
                return ret;
            }).html(function (d) {
                if (d.divider) {
                    return '<hr>';
                }
                if (!d.title) {
                    console.error('No title attribute set. Check the spelling of your options.');
                }
                return typeof d.title === 'string' ? d.title : d.title(data);
            }).on('click', function (d, i) {
                if (d.disabled) return; // do nothing if disabled
                if (!d.action) return; // headers have no "action"
                d.action(elm, data, index);
                d3.select('.d3-context-menu').style('display', 'none');

                if (self.closeCallback) {
                    self.closeCallback();
                }
            });

            // the openCallback allows an action to fire before the menu is displayed
            // an example usage would be closing a tooltip
            if (self.openCallback) {
                if (self.openCallback(data, index) === false) {
                    return;
                }
            }

            // display context menu
            d3.select('.d3-context-menu').style('left', d3.event.pageX - 2 + 'px').style('top', d3.event.pageY - 2 + 'px').style('display', 'block');

            d3.event.preventDefault();
            d3.event.stopPropagation();
        };
    }

    _createClass(ContextMenu, null, [{
        key: 'hide',
        value: function hide() {
            d3.select('.d3-context-menu').style('display', 'none');
        }
    }]);

    return ContextMenu;
}();

},{"../d3":139}],134:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EdgeContextMenu = undefined;

var _contextMenu = require('./context-menu');

var _i18n = require('../i18n/i18n');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EdgeContextMenu = exports.EdgeContextMenu = function (_ContextMenu) {
    _inherits(EdgeContextMenu, _ContextMenu);

    function EdgeContextMenu(treeDesigner) {
        _classCallCheck(this, EdgeContextMenu);

        var menu = function menu(d) {

            var menu = [];

            menu.push({
                title: _i18n.i18n.t('contextMenu.edge.injectDecisionNode'),
                action: function action(elm, d, i) {
                    treeDesigner.injectDecisionNode(d);
                }
            });
            menu.push({
                title: _i18n.i18n.t('contextMenu.edge.injectChanceNode'),
                action: function action(elm, d, i) {
                    treeDesigner.injectChanceNode(d);
                }
            });

            return menu;
        };

        var _this = _possibleConstructorReturn(this, (EdgeContextMenu.__proto__ || Object.getPrototypeOf(EdgeContextMenu)).call(this, menu));

        _this.treeDesigner = treeDesigner;
        return _this;
    }

    return EdgeContextMenu;
}(_contextMenu.ContextMenu);

},{"../i18n/i18n":143,"./context-menu":133}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MainContextMenu = undefined;

var _contextMenu = require('./context-menu');

var _sdModel = require('sd-model');

var _d = require('../d3');

var d3 = _interopRequireWildcard(_d);

var _i18n = require('../i18n/i18n');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MainContextMenu = exports.MainContextMenu = function (_ContextMenu) {
    _inherits(MainContextMenu, _ContextMenu);

    function MainContextMenu(treeDesigner) {
        _classCallCheck(this, MainContextMenu);

        var mousePosition = null;
        var menu = function menu(d) {

            var menu = [];
            menu.push({
                title: _i18n.i18n.t('contextMenu.main.addDecisionNode'),
                action: function action(elm, d, i) {
                    var newNode = new _sdModel.domain.DecisionNode(mousePosition);
                    treeDesigner.addNode(newNode);
                }
            });
            menu.push({
                title: _i18n.i18n.t('contextMenu.main.addChanceNode'),
                action: function action(elm, d, i) {
                    var newNode = new _sdModel.domain.ChanceNode(mousePosition);
                    treeDesigner.addNode(newNode);
                }
            });
            menu.push({ divider: true });
            menu.push({
                title: _i18n.i18n.t('contextMenu.main.addText'),
                action: function action(elm, d, i) {
                    var newText = new _sdModel.domain.Text(mousePosition);
                    treeDesigner.addText(newText);
                }

            });
            menu.push({ divider: true });
            menu.push({
                title: _i18n.i18n.t('contextMenu.main.paste'),
                action: function action(elm, d, i) {
                    treeDesigner.pasteToNewLocation(mousePosition);
                },
                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length

            });
            menu.push({ divider: true });

            menu.push({
                title: _i18n.i18n.t('contextMenu.main.selectAllNodes'),
                action: function action(elm, d, i) {
                    treeDesigner.selectAllNodes();
                }
            });
            return menu;
        };

        var _this = _possibleConstructorReturn(this, (MainContextMenu.__proto__ || Object.getPrototypeOf(MainContextMenu)).call(this, menu, { onOpen: function onOpen() {
                treeDesigner.clearSelection();
                mousePosition = new _sdModel.domain.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));
            } }));

        _this.treeDesigner = treeDesigner;
        return _this;
    }

    return MainContextMenu;
}(_contextMenu.ContextMenu);

},{"../d3":139,"../i18n/i18n":143,"./context-menu":133,"sd-model":"sd-model"}],136:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NodeContextMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _contextMenu = require('./context-menu');

var _sdModel = require('sd-model');

var _i18n = require('../i18n/i18n');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NodeContextMenu = exports.NodeContextMenu = function (_ContextMenu) {
    _inherits(NodeContextMenu, _ContextMenu);

    function NodeContextMenu(treeDesigner, operationsForObject) {
        _classCallCheck(this, NodeContextMenu);

        var menu = function menu(d) {

            var copyMenuItem = {
                title: _i18n.i18n.t('contextMenu.node.copy'),
                action: function action(elm, d, i) {
                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));
                    treeDesigner.copySelectedNodes();
                },
                disabled: !!d.sourceId
            };
            var cutMenuItem = {
                title: _i18n.i18n.t('contextMenu.node.cut'),
                action: function action(elm, d, i) {
                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));
                    treeDesigner.cutSelectedNodes();
                },
                disabled: !!d.sourceId
            };
            var pasteMenuItem = {
                title: _i18n.i18n.t('contextMenu.node.paste'),
                action: function action(elm, d, i) {
                    treeDesigner.pasteToNode(d);
                },
                disabled: d.sourceId || d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length

            };
            var pasteCloneMenuItem = {
                title: _i18n.i18n.t('contextMenu.node.pasteClone'),
                action: function action(elm, d, i) {
                    treeDesigner.pasteToNode(d, true);
                },
                disabled: d.sourceId || d.folded || !treeDesigner.copiedNodes || treeDesigner.copiedNodes.length !== 1

            };

            var deleteMenuItem = {
                title: _i18n.i18n.t('contextMenu.node.delete'),
                action: function action(elm, d, i) {

                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));
                    treeDesigner.removeSelectedNodes();
                }
            };

            var menu = [];
            if (d.type == _sdModel.domain.TerminalNode.$TYPE) {
                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];
                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);
                return menu;
            }

            if (!d.folded && !d.sourceId) {
                menu.push({
                    title: _i18n.i18n.t('contextMenu.node.addDecisionNode'),
                    action: function action(elm, d, i) {
                        treeDesigner.addDecisionNode(d);
                    }
                });
                menu.push({
                    title: _i18n.i18n.t('contextMenu.node.addChanceNode'),
                    action: function action(elm, d, i) {
                        treeDesigner.addChanceNode(d);
                    }
                });
                menu.push({
                    title: _i18n.i18n.t('contextMenu.node.addTerminalNode'),
                    action: function action(elm, d, i) {
                        treeDesigner.addTerminalNode(d);
                    }
                });
                menu.push({ divider: true });
            }

            menu.push(copyMenuItem);
            menu.push(cutMenuItem);
            menu.push(pasteMenuItem);
            menu.push(pasteCloneMenuItem);
            menu.push(deleteMenuItem);

            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);
            menu.push({ divider: true });
            menu.push({
                title: _i18n.i18n.t('contextMenu.node.selectSubtree'),
                action: function action(elm, d, i) {
                    treeDesigner.selectSubTree(d, true);
                },
                disabled: !!d.sourceId
            });

            if (!d.folded) {
                menu.push({
                    title: _i18n.i18n.t('contextMenu.node.fold'),
                    action: function action(elm, d, i) {
                        treeDesigner.foldSubtree(d);
                    }
                });
            } else {
                menu.push({
                    title: _i18n.i18n.t('contextMenu.node.unfold'),
                    action: function action(elm, d, i) {
                        treeDesigner.foldSubtree(d, false);
                    }
                });
            }

            if (operationsForObject && !d.sourceId) {
                var operations = operationsForObject(d);
                if (operations.length) {
                    menu.push({ divider: true });
                    operations.forEach(function (op) {
                        menu.push({
                            title: _i18n.i18n.t('contextMenu.node.' + op.name),
                            action: function action(elm, d, i) {
                                treeDesigner.performOperation(d, op);
                            },
                            disabled: !op.canPerform(d)
                        });
                    });
                }
            }

            return menu;
        };

        var _this = _possibleConstructorReturn(this, (NodeContextMenu.__proto__ || Object.getPrototypeOf(NodeContextMenu)).call(this, menu));

        _this.treeDesigner = treeDesigner;
        return _this;
    }

    _createClass(NodeContextMenu, null, [{
        key: 'addNodeConversionOptions',
        value: function addNodeConversionOptions(d, menu, treeDesigner) {
            var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);
            if (conversionOptions.length) {
                menu.push({ divider: true });
                conversionOptions.forEach(function (o) {
                    return menu.push(o);
                });
            }
        }
    }, {
        key: 'getNodeConversionOptions',
        value: function getNodeConversionOptions(d, treeDesigner) {
            var options = [];

            if (d.folded) {
                return [];
            }

            var allAllowedTypes = [_sdModel.domain.DecisionNode.$TYPE, _sdModel.domain.ChanceNode.$TYPE, _sdModel.domain.TerminalNode.$TYPE];

            if (!d.childEdges.length && d.$parent) {
                allAllowedTypes.filter(function (t) {
                    return t !== d.type;
                }).forEach(function (type) {
                    options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner));
                });
            } else {
                if (d instanceof _sdModel.domain.DecisionNode) {
                    options.push(NodeContextMenu.getNodeConversionOption(_sdModel.domain.ChanceNode.$TYPE, treeDesigner));
                } else {
                    options.push(NodeContextMenu.getNodeConversionOption(_sdModel.domain.DecisionNode.$TYPE, treeDesigner));
                }
            }
            return options;
        }
    }, {
        key: 'getNodeConversionOption',
        value: function getNodeConversionOption(typeToConvertTo, treeDesigner) {
            return {
                title: _i18n.i18n.t('contextMenu.node.convert.' + typeToConvertTo),
                action: function action(elm, d, i) {
                    treeDesigner.convertNode(d, typeToConvertTo);
                }
            };
        }
    }]);

    return NodeContextMenu;
}(_contextMenu.ContextMenu);

},{"../i18n/i18n":143,"./context-menu":133,"sd-model":"sd-model"}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextContextMenu = undefined;

var _contextMenu = require('./context-menu');

var _i18n = require('../i18n/i18n');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextContextMenu = exports.TextContextMenu = function (_ContextMenu) {
    _inherits(TextContextMenu, _ContextMenu);

    function TextContextMenu(treeDesigner) {
        _classCallCheck(this, TextContextMenu);

        var menu = function menu(d) {

            var deleteMenuItem = {
                title: _i18n.i18n.t('contextMenu.text.delete'),
                action: function action(elm, d, i) {

                    treeDesigner.selectText(d, true, true);
                    treeDesigner.removeSelectedTexts();
                }
            };
            var menu = [];
            menu.push(deleteMenuItem);
            return menu;
        };

        var _this = _possibleConstructorReturn(this, (TextContextMenu.__proto__ || Object.getPrototypeOf(TextContextMenu)).call(this, menu));

        _this.treeDesigner = treeDesigner;
        return _this;
    }

    return TextContextMenu;
}(_contextMenu.ContextMenu);

},{"../i18n/i18n":143,"./context-menu":133}],138:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.D3Extensions = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var D3Extensions = exports.D3Extensions = function () {
    function D3Extensions() {
        _classCallCheck(this, D3Extensions);
    }

    _createClass(D3Extensions, null, [{
        key: "extend",
        value: function extend() {

            d3.selection.prototype.enter.prototype.insertSelector = d3.selection.prototype.insertSelector = function (selector, before) {
                return D3Extensions.insertSelector(this, selector, before);
            };

            d3.selection.prototype.enter.prototype.appendSelector = d3.selection.prototype.appendSelector = function (selector) {
                return D3Extensions.appendSelector(this, selector);
            };

            d3.selection.prototype.enter.prototype.selectOrAppend = d3.selection.prototype.selectOrAppend = function (selector) {
                return D3Extensions.selectOrAppend(this, selector);
            };

            d3.selection.prototype.enter.prototype.selectOrInsert = d3.selection.prototype.selectOrInsert = function (selector, before) {
                return D3Extensions.selectOrInsert(this, selector, before);
            };
        }
    }, {
        key: "insertOrAppendSelector",
        value: function insertOrAppendSelector(parent, selector, operation, before) {

            var selectorParts = selector.split(/([\.\#])/);
            var element = parent[operation](selectorParts.shift(), before); //":first-child"

            while (selectorParts.length > 1) {
                var selectorModifier = selectorParts.shift();
                var selectorItem = selectorParts.shift();
                if (selectorModifier === ".") {
                    element = element.classed(selectorItem, true);
                } else if (selectorModifier === "#") {
                    element = element.attr('id', selectorItem);
                }
            }
            return element;
        }
    }, {
        key: "insertSelector",
        value: function insertSelector(parent, selector, before) {
            return D3Extensions.insertOrAppendSelector(parent, selector, "insert", before);
        }
    }, {
        key: "appendSelector",
        value: function appendSelector(parent, selector) {
            return D3Extensions.insertOrAppendSelector(parent, selector, "append");
        }
    }, {
        key: "selectOrAppend",
        value: function selectOrAppend(parent, selector, element) {
            var selection = parent.select(selector);
            if (selection.empty()) {
                if (element) {
                    return parent.append(element);
                }
                return D3Extensions.appendSelector(parent, selector);
            }
            return selection;
        }
    }, {
        key: "selectOrInsert",
        value: function selectOrInsert(parent, selector, before) {
            var selection = parent.select(selector);
            if (selection.empty()) {
                return D3Extensions.insertSelector(parent, selector, before);
            }
            return selection;
        }
    }]);

    return D3Extensions;
}();

},{"./d3":139}],139:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _d3Dispatch = require('d3-dispatch');

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Dispatch[key];
    }
  });
});

var _d3Scale = require('d3-scale');

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Scale[key];
    }
  });
});

var _d3Selection = require('d3-selection');

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require('d3-shape');

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Shape[key];
    }
  });
});

var _d3Drag = require('d3-drag');

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Drag[key];
    }
  });
});

var _d3Brush = require('d3-brush');

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Brush[key];
    }
  });
});

var _d3Array = require('d3-array');

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Array[key];
    }
  });
});

var _d3Hierarchy = require('d3-hierarchy');

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Hierarchy[key];
    }
  });
});

var _d3TimeFormat = require('d3-time-format');

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3TimeFormat[key];
    }
  });
});

},{"d3-array":"d3-array","d3-brush":"d3-brush","d3-dispatch":"d3-dispatch","d3-drag":"d3-drag","d3-hierarchy":"d3-hierarchy","d3-scale":"d3-scale","d3-selection":"d3-selection","d3-shape":"d3-shape","d3-time-format":"d3-time-format"}],140:[function(require,module,exports){
module.exports={
    "contextMenu":{
        "main":{
            "addDecisionNode": "Entscheidungsknoten hinzufügen",
            "addChanceNode": "Zufall Knoten hinzufügen",
            "addText": "Text hinzufügen ",
            "paste": "Einfügen",
            "selectAllNodes": "Alle Knoten auswählen"
        },
        "node":{
            "copy": "Kopieren",
            "cut": "Ausschneiden",
            "paste": "Einfügen",
            "delete": "Löschen",
            "addDecisionNode": "Entscheidungsknoten hinzufügen",
            "addChanceNode": "Zufall Knoten hinzufügen",
            "addTerminalNode": "Endknotten hinzufügen",
            "convert":{
                "decision": "Als Entscheidungsknoten",
                "chance": "Als Zufall Knoten",
                "terminal": "Als Endknoten"
            },
            "selectSubtree": "Teilbaum wählen",
            "fold": "Teilbaum falten",
            "unfold": "Teilbaum entfalten",
			
            "flipSubtree": "Teilbaum umdrehen"
        },
        "edge":{
            "injectDecisionNode": "Entscheidungsknoten Injizieren",
            "injectChanceNode": "Zufall Knoten Injizieren"
        },
        "text":{
            "delete": "Löschen"
        }
    },
    "validation":{
        "incompletePath": "Pfad, der nicht mit dem Endknoten endet",
        "probabilityDoNotSumUpTo1": "Die Summe der Wahrscheinlichkeiten ist nicht gleich 1",
        "invalidProbability": "Ungültige Wahrscheinlichkeit im Zweig #{{number}}",
        "invalidPayoff": "Ungültige Auszahlung in Zweig #{{number}}"
    },
    "growl":{
        "brushDisabled": "Auswahlbürste deaktiviert",
        "brushEnabled": "Auswahlbürste aktiviert"
    },
    "tooltip":{
        "node":{
            "payoff": {
                "default": "Auszahlung {{number}}",
                "named": "{{name}}"
            },
            "aggregatedPayoff": {
                "default": "Aggregierte Auszahlung {{number}}",
                "named": "Aggregierte {{name}}"
            },
            "probabilityToEnter": "Wahrscheinlichkeit"
        },
        "edge":{
            "payoff": {
                "default": "Auszahlung {{number}}: {{value}}",
                "named": "{{name}}: {{value}}"
            },
            "probability": "Wahrscheinlichkeit: {{value}}"
        }
    }
}

},{}],141:[function(require,module,exports){
module.exports={
    "contextMenu":{
        "main":{
            "addDecisionNode": "Add Decision Node",
            "addChanceNode": "Add Chance Node",
            "addText": "Add Text",
            "paste": "Paste",
            "selectAllNodes": "Select all nodes"
        },
        "node":{
            "copy": "Copy",
            "cut": "Cut",
            "paste": "Paste",
            "delete": "Delete",
            "addDecisionNode": "Add Decision Node",
            "addChanceNode": "Add Chance Node",
            "addTerminalNode": "Add Terminal Node",
            "convert":{
                "decision": "As Decision Node",
                "chance": "As Chance Node",
                "terminal": "As Terminal Node"
            },
            "selectSubtree": "Select subtree",
            "fold": "Fold subtree",
            "unfold": "Unfold subtree",
            "flipSubtree": "Flip subtree"
        },
        "edge":{
            "injectDecisionNode": "Inject Decision Node",
            "injectChanceNode": "Inject Chance Node"
        },
        "text":{
            "delete": "Delete"
        }
    },
    "validation":{
        "incompletePath": "Path not ending with terminal node",
        "probabilityDoNotSumUpTo1": "Probabilities do not sum up to 1",
        "invalidProbability": "Invalid probability in edge #{{number}}",
        "invalidPayoff": "Invalid payoff in edge #{{number}}"
    },
    "growl":{
        "brushDisabled": "Selection brush disabled",
        "brushEnabled": "Selection brush enabled"
    },
    "tooltip":{
        "node":{
            "payoff": {
                "default": "Payoff {{number}}",
                "named": "{{name}}"
            },
            "aggregatedPayoff": {
                "default": "Aggregated Payoff {{number}}",
                "named": "Aggregated {{name}}"
            },
            "probabilityToEnter": "Probability to enter"
        },
        "edge":{
            "payoff": {
                "default": "Payoff {{number}}: {{value}}",
                "named": "{{name}}: {{value}}"
            },
            "probability": "Probability: {{value}}"
        }
    }
}

},{}],142:[function(require,module,exports){
module.exports={
    "contextMenu":{
        "main":{
            "addDecisionNode": "Ajouter noud de décision",
            "addChanceNode": "Ajouter noud aléatoire",
            "addText": "Ajouter du texte",
            "paste": "Coller",
            "selectAllNodes": "Sélectionner tous les nouds"
        },
        "node":{
            "copy": "Copie",
            "cut": "Couper",
            "paste": "Coller",
            "delete": "Effacer",
            "addDecisionNode": "Ajouter noud de décision",
            "addChanceNode": "Ajouter noud aléatoire",
            "addTerminalNode": "Ajouter un noeud terminal",
            "convert":{
                "decision": "Comme noud de décision",
                "chance": "Comme noud aléatoire",
                "terminal": "Comme un noeud terminal"
            },
            "selectSubtree": "Sélectionner une sous-arborescence",
            "fold": "Plier sous-arbre",
            "unfold": "Déplier arbre sous-arbre",
            "flipSubtree": "Basculer sous-arbre"
        },
        "edge":{
            "injectDecisionNode": "Injecter un noeud de décision",
            "injectChanceNode": "Injecter un noeud de chance"
        },
        "text":{
            "delete": "Effacer"
        }
    },
    "validation":{
        "incompletePath": "Parcours non terminé par noeud terminal",
        "probabilityDoNotSumUpTo1": "La somme des probabilités n'est pas 1 ou plus",
        "invalidProbability": "Probabilité invalide - le bord #{{number}}",
        "invalidPayoff": "Avantage invalide - le bord #{{number}}"
    },
    "growl":{
        "brushDisabled": "Brosse de sélection désactivée",
        "brushEnabled": "Brosse de sélection activée"
    },
    "tooltip":{
        "node":{
            "payoff": {
                "default": "Avantage {{number}}",
                "named": "{{name}}"
            },
            "aggregatedPayoff": {
                "default": "Avantage agrégé {{number}}",
                "named": "Agrégé  {{name}}"
            },
            "probabilityToEnter": "Probabilité d'entrée"
        },
        "edge":{
            "payoff": {
                "default": "Avantage {{number}}: {{value}}",
                "named": "{{name}}: {{value}}"
            },
            "probability": "Probabilité: {{value}}"
        }
    }
}

},{}],143:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.i18n = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _i18next = require('i18next');

var _i18next2 = _interopRequireDefault(_i18next);

var _en = require('./en.json');

var en = _interopRequireWildcard(_en);

var _pl = require('./pl.json');

var pl = _interopRequireWildcard(_pl);

var _it = require('./it.json');

var it = _interopRequireWildcard(_it);

var _de = require('./de.json');

var de = _interopRequireWildcard(_de);

var _fr = require('./fr.json');

var fr = _interopRequireWildcard(_fr);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var i18n = exports.i18n = function () {
    function i18n() {
        _classCallCheck(this, i18n);
    }

    _createClass(i18n, null, [{
        key: 'init',
        value: function init(lng) {
            i18n.language = lng;
            var resources = {
                en: {
                    translation: en
                },
                pl: {
                    translation: pl
                },
                it: {
                    translation: it
                },
                de: {
                    translation: de
                },
                fr: {
                    translation: fr
                }
            };
            i18n.$instance = _i18next2.default.createInstance({
                lng: lng,
                fallbackLng: 'en',
                resources: resources
            }, function (err, t) {});
        }
    }, {
        key: 't',
        value: function t(key, opt) {
            return i18n.$instance.t(key, opt);
        }
    }]);

    return i18n;
}();

},{"./de.json":140,"./en.json":141,"./fr.json":142,"./it.json":144,"./pl.json":145,"i18next":"i18next"}],144:[function(require,module,exports){
module.exports={
    "contextMenu":{
        "main":{
            "addDecisionNode": "Aggiungi un nodo di decisione",
            "addChanceNode": "Aggiungi un nodo opportunità",
            "addText": "Aggiungi testo",
            "paste": "Incolla",
            "selectAllNodes": "Seleziona tutti i nodi"
        },
        "node":{
            "copy": "Copia",
            "cut": "Taglia",
            "paste": "Incolla",
            "delete": "Cancella",
            "addDecisionNode": "Aggiungi un nodo di decisione",
            "addChanceNode": "Aggiungi un nodo opportunità",
            "addTerminalNode": "Aggiungi un nodo terminale",
            "convert":{
                "decision": "Come Decision Node",
                "chance": "Come Chance Node",
                "terminal": "Come Terminal Node"
            },
            "selectSubtree": "Seleziona Sotto-albero",
            "fold": "Piega sotto-albero",
            "unfold": "Dispiegarsi sotto-albero",			
            "flipSubtree": "Ribalta sotto-albero"
        },
        "edge":{
            "injectDecisionNode": "Inietta nodo di decisione",
            "injectChanceNode": "Inietta nodo opportunità"
        },
        "text":{
            "delete": "Cancella"
        }
    },
    "validation":{
        "incompletePath": "Percorso senza nodo terminale",
        "probabilityDoNotSumUpTo1": "La somma delle probabilità è diversa da 1",
        "invalidProbability": "Probabilità non valida - bordo #{{number}}",
        "invalidPayoff": "Saldo non valido - bordo #{{number}}"
    },
    "growl":{
        "brushDisabled": "Selezione pennello disabilitata",
        "brushEnabled": "Selezione pennello abilitata"
    },
    "tooltip":{
        "node":{
            "payoff": {
                "default": "Saldo {{number}}",
                "named": "{{name}}"
            },
            "aggregatedPayoff": {
                "default": "Saldo aggregato {{number}}",
                "named": "Aggregato {{name}}"
            },
            "probabilityToEnter": "Probabilità da inserire"
        },
        "edge":{
            "payoff": {
                "default": "Saldo {{number}}: {{value}}",
                "named": "{{name}}: {{value}}"
            },
            "probability": "Probabilità: {{value}}"
        }
    }
}

},{}],145:[function(require,module,exports){
module.exports={

    "contextMenu":{
        "main":{
            "addDecisionNode": "Dodaj Węzeł Decyzyjny",
            "addChanceNode": "Dodaj Węzeł Losowy",
            "addText": "Dodaj Tekst",
            "paste": "Wklej",
            "selectAllNodes": "Zaznacz wszystkie węzły"
        },
        "node":{
            "copy": "Kopiuj",
            "cut": "Wytnij",
            "paste": "Wklej",
            "delete": "Usuń",
            "addDecisionNode": "Dodaj Węzeł Decyzyjny",
            "addChanceNode": "Dodaj Węzeł Losowy",
            "addTerminalNode": "Dodaj Węzeł Końcowy",
            "convert":{
                "decision": "Jako Węzeł Decyzyjny",
                "chance": "Jako Węzeł Losowy",
                "terminal": "Jako Węzeł Końcowy"
            },
            "selectSubtree": "Zaznacz poddrzewo",
            "fold": "Zwiń poddrzewo",
            "unfold": "Rozwiń poddrzewo",
            "flipSubtree": "Przewróć poddrzewo"
        },
        "edge":{
            "injectDecisionNode": "Wstrzyknij Węzeł Decyzyjny",
            "injectChanceNode": "Wstrzyknij Węzeł Losowy"
        },
        "text":{
            "delete": "Usuń"
        }
    },

    "validation":{
        "incompletePath": "Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy",
        "probabilityDoNotSumUpTo1": "Prawdopodobieństwa nie sumują sie do 1",
        "invalidProbability": "Niepoprawne prawdopodobieństwo na krawędzi #{{number}}",
        "invalidPayoff": "Niepoprawna wypłata na krawędzi #{{number}}"
    },
    "growl":{
        "brushDisabled": "Zaznaczanie wyłączone",
        "brushEnabled": "Zaznaczanie włączone"
    },
    "tooltip":{
        "node":{
            "payoff": {
                "default": "Wypłata {{number}}",
                "named": "{{name}}"
            },
            "aggregatedPayoff": {
                "default": "Zagregowana wypłata {{number}}",
                "named": "Zagregowana {{name}}"
            },
            "probabilityToEnter": "Prawdopodobieństwo wejścia"
        },
        "edge":{
            "payoff": {
                "default": "Wypłata {{number}}: {{value}}",
                "named": "{{name}}: {{value}}"
            },
            "probability": "Prawdopodobieństwo: {{value}}"
        }
    }
}

},{}],146:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.d3 = undefined;

var _treeDesigner = require('./tree-designer');

Object.keys(_treeDesigner).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _treeDesigner[key];
    }
  });
});

var _appUtils = require('./app-utils');

Object.keys(_appUtils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _appUtils[key];
    }
  });
});

var _templates = require('./templates');

Object.keys(_templates).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _templates[key];
    }
  });
});

var _tooltip = require('./tooltip');

Object.keys(_tooltip).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _tooltip[key];
    }
  });
});

var _d3Extensions = require('./d3-extensions');

Object.keys(_d3Extensions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _d3Extensions[key];
    }
  });
});

var _d = require('./d3');

Object.defineProperty(exports, 'd3', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_d).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_d3Extensions.D3Extensions.extend();

},{"./app-utils":132,"./d3":139,"./d3-extensions":138,"./templates":151,"./tooltip":154,"./tree-designer":155}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Layout = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sdUtils = require('sd-utils');

var _sdModel = require('sd-model');

var _d = require('./d3');

var d3 = _interopRequireWildcard(_d);

var _circle = require('./symbols/circle');

var _circle2 = _interopRequireDefault(_circle);

var _triangle = require('./symbols/triangle');

var _triangle2 = _interopRequireDefault(_triangle);

var _appUtils = require('./app-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*Tree layout manager*/
var Layout = exports.Layout = function () {
    function Layout(treeDesigner, data, config) {
        _classCallCheck(this, Layout);

        this.nodeTypeToSymbol = {
            'decision': d3.symbolSquare,
            'chance': _circle2.default,
            "terminal": _triangle2.default,
            'clone': d3.symbolStar
        };
        this.onAutoLayoutChanged = [];
        this.nodeTypeOrder = {
            'decision': 0,
            'chance': 0,
            'terminal': 1
        };
        this.treeMargin = 50;
        this.targetSymbolSize = {};

        this.nodeSeparation = function (a, b) {
            return a.parent === b.parent ? 1 : 1.2;
        };

        this.nodeSymbolSize = {};

        this.treeDesigner = treeDesigner;
        this.data = data;
        this.config = config;
    }

    _createClass(Layout, [{
        key: 'update',
        value: function update(node) {
            if (node && node.$parent) {
                node.$parent.childEdges.sort(function (a, b) {
                    return a.childNode.location.y - b.childNode.location.y;
                });
            }
            if (!this.isManualLayout()) {
                return this.autoLayout(this.config.type, true);
            }
            if (node) {
                this.moveNodeToEmptyPlace(node);
            } else {
                this.treeDesigner.redraw(true);
            }
        }
    }, {
        key: 'isManualLayout',
        value: function isManualLayout() {
            return this.config.type === Layout.MANUAL_LAYOUT_NAME;
        }
    }, {
        key: 'getNewChildLocation',
        value: function getNewChildLocation(parent) {
            if (!parent) {
                return new _sdModel.domain.Point(this.getNodeMinX(), this.getNodeMinY());
            }
            var x = parent.location.x + this.config.gridWidth;
            var y = parent.location.y;
            if (parent.childEdges.length) {
                y = parent.childEdges[parent.childEdges.length - 1].childNode.location.y + 1;
            }

            return new _sdModel.domain.Point(x, y);
        }
    }, {
        key: 'getInjectedNodeLocation',
        value: function getInjectedNodeLocation(edge) {

            var p = edge.$linePoints[2];

            return new _sdModel.domain.Point(p[0], p[1]);
        }
    }, {
        key: 'moveNodeToEmptyPlace',
        value: function moveNodeToEmptyPlace(node) {
            var redrawIfChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var positionMap = {};
            var self = this;
            node.location.x = Math.max(this.getNodeMinX(node), node.location.x);
            node.location.y = Math.max(this.getNodeMinY(node), node.location.y);

            this.nodesSortedByX = this.data.nodes.slice();
            this.nodesSortedByX.sort(function (a, b) {
                return a.location.x - b.location.x;
            });

            function findCollidingNode(node, location) {
                return _sdUtils.Utils.find(self.nodesSortedByX, function (n) {
                    if (node == n) {
                        return false;
                    }

                    var margin = self.config.nodeSize / 3;
                    var x = n.location.x;
                    var y = n.location.y;

                    return location.x - margin <= x && location.x + margin >= x && location.y - margin <= y && location.y + margin >= y;
                });
            }

            var stepX = this.config.nodeSize / 2;
            var stepY = this.config.nodeSize + 10;
            var stepXsameParent = 0;
            var stepYsameParent = 75;
            var changed = false;
            var colidingNode;
            var newLocation = new _sdModel.domain.Point(node.location);
            while (colidingNode = findCollidingNode(node, newLocation)) {
                changed = true;
                var sameParent = node.$parent && colidingNode.$parent && node.$parent === colidingNode.$parent;
                if (sameParent) {
                    newLocation.move(stepXsameParent, stepYsameParent);
                } else {
                    newLocation.move(stepX, stepY);
                }
            }
            if (changed) {
                node.moveTo(newLocation.x, newLocation.y, true);
                if (redrawIfChanged) {
                    this.treeDesigner.redraw(true);
                }
            }
        }
    }, {
        key: 'disableAutoLayout',
        value: function disableAutoLayout() {
            this.config.type = Layout.MANUAL_LAYOUT_NAME;
            this._fireOnAutoLayoutChangedCallbacks();
        }
    }, {
        key: 'drawNodeSymbol',
        value: function drawNodeSymbol(path, transition) {

            var self = this;
            var nodeSize = this.config.nodeSize;
            this.nodeSymbol = d3.symbol().type(function (d) {
                return self.nodeTypeToSymbol[d.type];
            }).size(function (d) {
                return self.nodeSymbolSize[d.id] ? _sdUtils.Utils.get(self.targetSymbolSize, d.type + "['" + self.config.nodeSize + "']", 64) : 64;
            });

            path.each(function (d) {
                var path = d3.select(this);
                var prev = path.attr("d");
                if (!prev) {
                    path.attr("d", self.nodeSymbol);
                }
                var size = _sdUtils.Utils.get(self.targetSymbolSize, d.type + "['" + self.config.nodeSize + "']");
                if (!size) {
                    var box = path.node().getBBox();
                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);
                    size = error * error * (self.nodeSymbolSize[d.id] || 64);
                    _sdUtils.Utils.set(self.targetSymbolSize, d.type + "['" + self.config.nodeSize + "']", size);
                }
                if (transition) {
                    path = path.transition();
                } else {
                    self.nodeSymbolSize[d.id] = size;
                }
                path.attr("d", self.nodeSymbol);
                if (transition) {
                    self.nodeSymbolSize[d.id] = size;
                }
            });
        }
    }, {
        key: 'nodeLabelPosition',
        value: function nodeLabelPosition(selection) {
            return selection.attr('x', 0).attr('y', -this.config.nodeSize / 2 - 7);
        }
    }, {
        key: 'nodePayoffPosition',
        value: function nodePayoffPosition(selection) {
            return Layout.setHangingPosition(selection).attr('x', 0).attr('y', this.config.nodeSize / 2 + 7).attr('text-anchor', 'middle');
        }
    }, {
        key: 'nodeAggregatedPayoffPosition',
        value: function nodeAggregatedPayoffPosition(selection) {
            var x = this.config.nodeSize / 2 + 7;
            var self = this;
            selection.attr('x', x).attr('y', function (d) {
                var fontSize = parseInt(_appUtils.AppUtils.getFontSize(this));
                var items = d.displayValue('aggregatedPayoff');
                var number = _sdUtils.Utils.isArray(items) ? items.filter(function (it) {
                    return it !== undefined;
                }).length : 1;
                if (number > 1) {
                    return -this.getBBox().height / 2 + fontSize / 2;
                }
                return -Math.max(2, 1.8 * self.config.nodeSize / fontSize);
            });

            selection.selectAll('tspan').attr('x', x);
            return selection;
            // .attr('text-anchor', 'middle')
            // .attr('dominant-baseline', 'hanging')
        }
    }, {
        key: 'nodeProbabilityToEnterPosition',
        value: function nodeProbabilityToEnterPosition(selection) {
            var self = this;

            return Layout.setHangingPosition(selection).attr('x', this.config.nodeSize / 2 + 7).attr('y', function (d) {
                var fontSize = parseInt(_appUtils.AppUtils.getFontSize(this));
                var aggregatedPayoffs = d.displayValue('aggregatedPayoff');
                var aggregatedPayoffsNumber = _sdUtils.Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(function (it) {
                    return it !== undefined;
                }).length : 1;
                if (aggregatedPayoffsNumber > 1) {

                    return fontSize * 0.6;
                }

                return Math.max(2, 1.8 * self.config.nodeSize / fontSize);
            });
            // .attr('text-anchor', 'middle')
            // .attr('dominant-baseline', 'central')
        }
    }, {
        key: 'nodeIndicatorPosition',
        value: function nodeIndicatorPosition(selection) {
            return selection.attr('x', this.config.nodeSize / 2 + 8).attr('y', -this.config.nodeSize / 2).attr('dominant-baseline', 'central').attr('text-anchor', 'middle');
        }
    }, {
        key: 'nodeUnfoldButtonPosition',
        value: function nodeUnfoldButtonPosition(selection) {

            return selection.attr('x', this.config.nodeSize / 2 + 5).attr('y', 0).attr('dominant-baseline', 'central');
        }
    }, {
        key: 'edgeLineD',
        value: function edgeLineD(edge) {
            var line = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });
            // .curve(d3.curveCatmullRom.alpha(0.5));


            var parentNode = edge.parentNode;
            var childNode = edge.childNode;

            var dX = childNode.location.x - parentNode.location.x;
            var dY = childNode.location.y - parentNode.location.y;

            var sign = dX >= 0 ? 1 : -1;

            var slantStartXOffset = Math.min(dX / 2, this.config.nodeSize / 2 + 10);
            var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX / 2 - slantStartXOffset, 0));

            var point1 = [parentNode.location.x + this.config.nodeSize / 2 + 1, parentNode.location.y];
            var point2 = [Math.max(parentNode.location.x + slantStartXOffset, point1[0]), parentNode.location.y];
            var point3 = [parentNode.location.x + slantStartXOffset + slantWidth, childNode.location.y];
            var point4 = [childNode.location.x - sign * Math.max(0, Math.min(this.config.nodeSize / 2 + 8, dX / 2)), childNode.location.y];
            // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];
            // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];

            edge.$linePoints = [point1, point2, point3, point4];
            return line(edge.$linePoints);
        }
    }, {
        key: 'edgePayoffPosition',
        value: function edgePayoffPosition(selection) {
            Layout.setHangingPosition(selection).attr('x', function (d) {
                return d.$linePoints[2][0] + 2;
            }).attr('y', function (d) {
                return d.$linePoints[2][1] + 7;
            });

            selection.selectAll('tspan').attr('x', function (d) {
                return d3.select(this.parentNode).datum().$linePoints[2][0] + 2;
            });
            return selection;
        }
    }, {
        key: 'edgeLabelPosition',
        value: function edgeLabelPosition(selection) {
            return selection.attr('transform', function (d) {
                return 'translate(' + (d.$linePoints[2][0] + 2) + ',' + (d.$linePoints[2][1] - 7) + ')';
            });
            // .attr('x', d=>d.$linePoints[2][0] + 2)
            // .attr('y', d=>d.$linePoints[2][1] - 7)
        }
    }, {
        key: 'edgeProbabilityPosition',
        value: function edgeProbabilityPosition(selection) {
            return Layout.setHangingPosition(selection).attr('x', function (d) {
                var len = this.getComputedTextLength();
                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;
                return Math.max(min, d.$linePoints[3][0] - 8);
            }).attr('y', function (d) {
                return d.$linePoints[2][1] + 7;
            });
        }
    }, {
        key: 'getMinMarginBetweenNodes',
        value: function getMinMarginBetweenNodes() {
            return this.config.nodeSize + 30;
        }
    }, {
        key: 'getNodeMinX',
        value: function getNodeMinX(d) {
            var self = this;
            if (d && d.$parent) {
                // && !self.isNodeSelected(d.$parent)
                return d.$parent.location.x + self.getMinMarginBetweenNodes();
            }
            return self.config.nodeSize / 2;
        }
    }, {
        key: 'getNodeMinY',
        value: function getNodeMinY(d) {
            return this.config.nodeSize / 2;
        }
    }, {
        key: 'getNodeMaxX',
        value: function getNodeMaxX(d) {
            var self = this;

            if (d && d.childEdges.length) {
                return d3.min(d.childEdges, function (e) {
                    return !e.childNode.$hidden ? e.childNode.location.x : 9999999;
                }) - self.getMinMarginBetweenNodes();
            }
            return 9999999;
        }
    }, {
        key: 'setGridWidth',
        value: function setGridWidth(width, withoutStateSaving) {
            var self = this;
            if (this.config.gridWidth === width) {
                return;
            }
            if (!withoutStateSaving) {
                this.data.saveState({
                    data: {
                        gridWidth: self.config.gridWidth
                    },
                    onUndo: function onUndo(data) {
                        self.setGridWidth(data.gridWidth, true);
                    },
                    onRedo: function onRedo(data) {
                        self.setGridWidth(width, true);
                    }
                });
            }

            this.config.gridWidth = width;
            this.update();
        }
    }, {
        key: 'setGridHeight',
        value: function setGridHeight(gridHeight, withoutStateSaving) {
            var self = this;
            if (this.config.gridHeight === gridHeight) {
                return;
            }
            if (!withoutStateSaving) {
                this.data.saveState({
                    data: {
                        gridHeight: self.config.gridHeight
                    },
                    onUndo: function onUndo(data) {
                        self.setGridHeight(data.gridHeight, true);
                    },
                    onRedo: function onRedo(data) {
                        self.setGridHeight(gridHeight, true);
                    }
                });
            }

            this.config.gridHeight = gridHeight;
            this.update();
        }
    }, {
        key: 'setNodeSize',
        value: function setNodeSize(nodeSize, withoutStateSaving) {
            var self = this;
            if (this.config.nodeSize === nodeSize) {
                return;
            }
            if (!withoutStateSaving) {
                this.data.saveState({
                    data: {
                        nodeSize: self.config.nodeSize
                    },
                    onUndo: function onUndo(data) {
                        self.setNodeSize(data.nodeSize, true);
                    },
                    onRedo: function onRedo(data) {
                        self.setNodeSize(nodeSize, true);
                    }
                });
            }

            this.config.nodeSize = nodeSize;
            this.update();
            if (this.isManualLayout()) {
                this.fitNodesInPlottingRegion(self.data.getRoots());
                this.treeDesigner.redraw(true);
            }
        }
    }, {
        key: 'setEdgeSlantWidthMax',
        value: function setEdgeSlantWidthMax(width, withoutStateSaving) {
            var self = this;
            if (this.config.edgeSlantWidthMax === width) {
                return;
            }
            if (!withoutStateSaving) {
                this.data.saveState({
                    data: {
                        edgeSlantWidthMax: self.config.edgeSlantWidthMax
                    },
                    onUndo: function onUndo(data) {
                        self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);
                    },
                    onRedo: function onRedo(data) {
                        self.setEdgeSlantWidthMax(width, true);
                    }
                });
            }

            this.config.edgeSlantWidthMax = width;
            this.treeDesigner.redraw(true);
        }
    }, {
        key: 'autoLayout',
        value: function autoLayout(type, withoutStateSaving) {
            var self = this;

            if (!withoutStateSaving) {
                this.data.saveState({
                    data: {
                        newLayout: type,
                        currentLayout: self.config.type
                    },
                    onUndo: function onUndo(data) {
                        self.config.type = data.currentLayout;
                        self._fireOnAutoLayoutChangedCallbacks();
                    },
                    onRedo: function onRedo(data) {
                        self.autoLayout(data.newLayout, true);
                    }
                });
            }
            this.config.type = type;
            if (!this.data.nodes.length) {
                this._fireOnAutoLayoutChangedCallbacks();
                return;
            }

            var prevTreeMaxY = self.getNodeMinY();
            this.data.getRoots().forEach(function (r) {
                var root = d3.hierarchy(r, function (d) {
                    return d.childEdges.filter(function (e) {
                        return !e.$hidden;
                    }).map(function (e) {
                        return e.childNode;
                    });
                });

                // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);
                root.sort(function (a, b) {
                    return a.data.location.y - b.data.location.y;
                });

                var layout;
                if (type === 'cluster') {
                    layout = d3.cluster();
                } else {
                    layout = d3.tree();
                }
                layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);
                layout.separation(self.nodeSeparation);

                layout(root);
                var minY = 999999999;
                root.each(function (d) {
                    minY = Math.min(minY, d.x);
                });

                var dy = root.x - minY + prevTreeMaxY;
                var dx = self.getNodeMinX();
                var maxY = 0;
                root.each(function (d) {
                    d.data.location.x = d.y + dx;
                    d.data.location.y = d.x + dy;

                    maxY = Math.max(maxY, d.data.location.y);
                });

                prevTreeMaxY = maxY + self.config.nodeSize + self.treeMargin;
            });

            // this.transition = true;
            this.treeDesigner.redraw(true);
            // this.transition = false;

            this._fireOnAutoLayoutChangedCallbacks();
            return this;
        }
    }, {
        key: 'fitNodesInPlottingRegion',
        value: function fitNodesInPlottingRegion(nodes) {
            var self = this;
            var topY = d3.min(nodes, function (n) {
                return n.location.y;
            });
            var minY = self.getNodeMinY();
            var dy = topY - minY;

            var minX = d3.min(nodes, function (n) {
                return n.location.x;
            });
            var dx = minX - self.getNodeMinX();

            if (dy < 0 || dx < 0) {
                nodes.forEach(function (n) {
                    return n.move(-dx, -dy);
                });
            }
        }
    }, {
        key: 'moveNodes',
        value: function moveNodes(nodes, dx, dy, pivot) {
            var self = this;
            var limit = self.config.limitNodePositioning;
            if (limit) {
                if (dx < 0) {
                    nodes.sort(function (a, b) {
                        return a.location.x - b.location.x;
                    });
                } else {
                    nodes.sort(function (a, b) {
                        return b.location.x - a.location.x;
                    });
                }
            }

            var minY = d3.min(nodes, function (d) {
                return d.location.y;
            });
            if (minY + dy < self.getNodeMinY()) {
                dy = self.getNodeMinY() - minY;
            }

            nodes.forEach(function (d) {
                if (limit) {
                    Layout.backupNodeLocation(d);
                    var minX = self.getNodeMinX(d);
                    var maxX = self.getNodeMaxX(d);

                    d.location.x = Math.min(Math.max(d.location.x + dx, minX), maxX);
                    d.location.y += dy;
                } else {
                    d.location.x += dx;
                    d.location.y += dy;
                }
            });

            var revertX = pivot && self.config.limitNodePositioning && pivot.location.x === pivot.$location.x;

            nodes.forEach(function (d) {
                if (revertX) {
                    d.location.x = d.$location.x;
                }
                self.treeDesigner.updateNodePosition(d);
            });
        }
    }, {
        key: '_fireOnAutoLayoutChangedCallbacks',
        value: function _fireOnAutoLayoutChangedCallbacks() {
            var _this = this;

            this.onAutoLayoutChanged.forEach(function (c) {
                return c(_this.config.type);
            });
        }
    }], [{
        key: 'backupNodeLocation',
        value: function backupNodeLocation(node) {
            node.$location = new _sdModel.domain.Point(node.location);
        }
    }, {
        key: 'setHangingPosition',
        value: function setHangingPosition(selection) {
            // window.setTimeout(function(){
            //     selection.each(function(){
            //         var h =  this.getBBox().height;
            //         d3.select(this).attr('dy', h);
            //     });
            // },0);

            if (_appUtils.AppUtils.isHidden(selection.node())) {
                // setting hanging position of hidden elements fails on firefox
                return selection;
            }

            selection.each(function () {
                var h = this.getBBox().height;
                d3.select(this).attr('dy', '0.75em');
            });

            return selection;
        }
    }]);

    return Layout;
}();

Layout.MANUAL_LAYOUT_NAME = 'manual';

},{"./app-utils":132,"./d3":139,"./symbols/circle":149,"./symbols/triangle":150,"sd-model":"sd-model","sd-utils":"sd-utils"}],148:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NodeDragHandler = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _appUtils = require('./app-utils');

var _d = require('./d3');

var d3 = _interopRequireWildcard(_d);

var _contextMenu = require('./context-menu/context-menu');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NodeDragHandler = exports.NodeDragHandler = function () {
    function NodeDragHandler(treeDesigner, data) {
        _classCallCheck(this, NodeDragHandler);

        this.treeDesigner = treeDesigner;
        this.data = data;

        var self = this;
        this.drag = d3.drag().subject(function (d) {
            if (d == null) {
                return {
                    x: event.x,
                    y: event.y
                };
            }
            var t = d3.select(this);
            return {
                x: t.attr("x") + _appUtils.AppUtils.getTranslation(t.attr("transform"))[0],
                y: t.attr("y") + _appUtils.AppUtils.getTranslation(t.attr("transform"))[1]
            };
        }).on("start", function (d) {
            self.dragStarted.call(this, d, self);
        }).on("drag", function (d) {
            self.onDrag.call(this, d, self);
        }).on("end", function (d) {
            self.dragEnded.call(this, d, self);
        });
    }

    _createClass(NodeDragHandler, [{
        key: 'dragStarted',
        value: function dragStarted(d, self) {
            if (self.ignoreDrag) {
                self.ignoreDrag = false;
                self.ignoredDrag = true;
                return;
            }
            self.ignoredDrag = false;

            // self.treeDesigner.layout.disableAutoLayout();
            _contextMenu.ContextMenu.hide();
            var node = d3.select(this);
            if (!node.classed("selected")) {
                self.treeDesigner.clearSelection();
            }

            self.treeDesigner.selectNode(d);
            node.classed("selected dragging", true);
            self.selectedNodes = self.treeDesigner.getSelectedNodes(true);
            self.prevDragEvent = d3.event;
            self.dragEventCount = 0;
        }
    }, {
        key: 'onDrag',
        value: function onDrag(draggedNode, self) {
            if (self.ignoredDrag) {
                return;
            }

            if (self.dragEventCount == 2) {
                self.data.saveState();
            }
            self.dragEventCount++;
            if (self.selectedNodes.length > 5 && self.dragEventCount % 2 != 1) {
                return;
            }

            var dx = d3.event.x - self.prevDragEvent.x;
            var dy = d3.event.y - self.prevDragEvent.y;
            self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);

            self.prevDragEvent = d3.event;
            self.treeDesigner.redrawEdges();
            self.treeDesigner.updatePlottingRegionSize();
        }
    }, {
        key: 'dragEnded',
        value: function dragEnded(draggedNode, self) {
            var node = d3.select(this).classed("dragging", false);
            if (self.ignoredDrag) {
                return;
            }
            self.treeDesigner.layout.update(draggedNode);
        }
    }, {
        key: 'cancelDrag',
        value: function cancelDrag() {
            this.ignoreDrag = true;
        }
    }]);

    return NodeDragHandler;
}();

},{"./app-utils":132,"./context-menu/context-menu":133,"./d3":139}],149:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;

exports.default = {
    /*draw: function(context, size) {
        var r = Math.sqrt(size / pi);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau);
    }*/
    draw: function draw(context, size) {

        var r = Math.sqrt(size / pi);
        var dist = 0.552284749831 * r;

        context.moveTo(-r, 0);
        // context.lineTo(2*r, 2*r)
        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);
        context.bezierCurveTo(-r, -dist, -dist, -r, 0, -r);

        context.bezierCurveTo(dist, -r, r, -dist, r, 0);

        context.bezierCurveTo(r, dist, dist, r, 0, r);

        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);
    }
};

},{}],150:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var sqrt3 = Math.sqrt(3);

exports.default = {
    draw: function draw(context, size) {
        var r = Math.sqrt(size / Math.PI);
        context.moveTo(-r, 0);
        context.lineTo(0.9 * r, -r);
        context.lineTo(0.9 * r, r);
        context.closePath();
    }
};

},{}],151:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Templates = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sdUtils = require('sd-utils');

var _i18n = require('./i18n/i18n');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Templates = exports.Templates = function () {
    function Templates() {
        _classCallCheck(this, Templates);
    }

    _createClass(Templates, null, [{
        key: 'get',
        value: function get(templateName, variables) {
            var compiled = _sdUtils.Utils.template(Templates[templateName], { 'imports': { 'i18n': _i18n.i18n, 'Templates': Templates, 'include': function include(n, v) {
                        return Templates.get(n, v);
                    } } });
            if (variables) {
                variables.variables = variables;
            } else {
                variables = { variables: {} };
            }
            return compiled(variables);
        }
    }, {
        key: 'styleRule',
        value: function styleRule(selector, props) {
            var s = selector + '{';
            props.forEach(function (p) {
                return s += Templates.styleProp(p[0], p[1]);
            });
            s += '} ';
            return s;
        }
    }, {
        key: 'styleProp',
        value: function styleProp(styleName, variableName) {
            return styleName + ': <%= ' + variableName + ' %>; ';
        }
    }, {
        key: 'nodeSelector',
        value: function nodeSelector(type, clazz) {
            var s = Templates.treeDesignerSelector + ' .node';
            if (type) {
                s += '.' + type + '-node';
            }
            if (clazz) {
                s += '.' + clazz;
            }
            return s;
        }
    }, {
        key: 'edgeSelector',
        value: function edgeSelector(clazz) {
            var s = Templates.treeDesignerSelector + ' .edge';
            if (clazz) {
                s += '.' + clazz;
            }
            return s;
        }
    }]);

    return Templates;
}();

Templates.growl = require('./templates/growl_message.html');
Templates.treeDesignerSelector = 'svg.sd-tree-designer';
Templates.treeDesignerStyles = Templates.styleRule(Templates.treeDesignerSelector, [['font-size', 'fontSize'], ['font-family', 'fontFamily'], ['font-weight', 'fontWeight'], ['font-style', 'fontStyle']]) +
//   node
Templates.styleRule(Templates.nodeSelector() + ' path', [['fill', 'node.fill'], ['stroke-width', 'node.strokeWidth']]) + Templates.styleRule(Templates.nodeSelector('decision', 'optimal') + ' path, ' + Templates.nodeSelector('chance', 'optimal') + ' path,' + Templates.nodeSelector('terminal', 'optimal') + ' path', [['stroke', 'node.optimal.stroke'], ['stroke-width', 'node.optimal.strokeWidth']]) + Templates.styleRule(Templates.nodeSelector() + ' .label', [['font-size', 'node.label.fontSize'], ['fill', 'node.label.color']]) + Templates.styleRule(Templates.nodeSelector() + ' .payoff', [['font-size', 'node.payoff.fontSize'], ['fill', 'node.payoff.color']]) + Templates.styleRule(Templates.nodeSelector() + ' .payoff.negative', [['fill', 'node.payoff.negativeColor']]) +

//    decision node
Templates.styleRule(Templates.nodeSelector('decision') + ' path', [['fill', 'node.decision.fill'], ['stroke', 'node.decision.stroke']]) + Templates.styleRule(Templates.nodeSelector('decision', 'selected') + ' path', [['fill', 'node.decision.selected.fill']]) +

//    chance node
Templates.styleRule(Templates.nodeSelector('chance') + ' path', [['fill', 'node.chance.fill'], ['stroke', 'node.chance.stroke']]) + Templates.styleRule(Templates.nodeSelector('chance', 'selected') + ' path', [['fill', 'node.chance.selected.fill']]) +

//    terminal node
Templates.styleRule(Templates.nodeSelector('terminal') + ' path', [['fill', 'node.terminal.fill'], ['stroke', 'node.terminal.stroke']]) + Templates.styleRule(Templates.nodeSelector('terminal', 'selected') + ' path', [['fill', 'node.terminal.selected.fill']]) + Templates.styleRule(Templates.nodeSelector('terminal') + ' .aggregated-payoff', [['font-size', 'node.terminal.payoff.fontSize'], ['fill', 'node.terminal.payoff.color']]) + Templates.styleRule(Templates.nodeSelector('terminal') + ' .aggregated-payoff.negative', [['fill', 'node.terminal.payoff.negativeColor']]) +

//probability
Templates.styleRule(Templates.treeDesignerSelector + ' .node .probability-to-enter, ' + Templates.treeDesignerSelector + ' .edge .probability', [['font-size', 'probability.fontSize'], ['fill', 'probability.color']]) +

//edge
Templates.styleRule(Templates.edgeSelector() + ' path', [['stroke', 'edge.stroke'], ['stroke-width', 'edge.strokeWidth']]) + Templates.styleRule(Templates.treeDesignerSelector + ' marker#arrow path', [['fill', 'edge.stroke']]) + Templates.styleRule(Templates.edgeSelector('optimal') + ' path', [['stroke', 'edge.optimal.stroke'], ['stroke-width', 'edge.optimal.strokeWidth']]) + Templates.styleRule(Templates.treeDesignerSelector + ' marker#arrow-optimal path', [['fill', 'edge.optimal.stroke']]) + Templates.styleRule(Templates.edgeSelector('selected') + ' path', [['stroke', 'edge.selected.stroke'], ['stroke-width', 'edge.selected.strokeWidth']]) + Templates.styleRule(Templates.treeDesignerSelector + ' marker#arrow-selected path', [['fill', 'edge.selected.stroke']]) + Templates.styleRule(Templates.edgeSelector() + ' .label', [['font-size', 'edge.label.fontSize'], ['fill', 'edge.label.color']]) + Templates.styleRule(Templates.edgeSelector() + ' .payoff', [['font-size', 'edge.payoff.fontSize'], ['fill', 'edge.payoff.color']]) + Templates.styleRule(Templates.edgeSelector() + ' .payoff.negative', [['fill', 'edge.payoff.negativeColor']]) + Templates.styleRule(Templates.treeDesignerSelector + ' .sd-title-container text.sd-title', [['font-size', 'title.fontSize'], ['font-weight', 'title.fontWeight'], ['font-style', 'title.fontStyle'], ['fill', 'title.color']]) + Templates.styleRule(Templates.treeDesignerSelector + ' .sd-title-container text.sd-description', [['font-size', 'description.fontSize'], ['font-weight', 'description.fontWeight'], ['font-style', 'description.fontStyle'], ['fill', 'description.color']]);

},{"./i18n/i18n":143,"./templates/growl_message.html":152,"sd-utils":"sd-utils"}],152:[function(require,module,exports){
module.exports = "<div class=\"sd-growl-message <%=type%>\">\n    <div class=\"sd-growl-message-text\">\n        <%= message %>\n    </div>\n</div>\n";

},{}],153:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextDragHandler = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _appUtils = require('./app-utils');

var _d = require('./d3');

var d3 = _interopRequireWildcard(_d);

var _contextMenu = require('./context-menu/context-menu');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextDragHandler = exports.TextDragHandler = function () {
    function TextDragHandler(treeDesigner, data) {
        _classCallCheck(this, TextDragHandler);

        this.treeDesigner = treeDesigner;
        this.data = data;

        var self = this;
        this.drag = d3.drag().subject(function (d) {
            if (d == null) {
                return {
                    x: event.x,
                    y: event.y
                };
            }
            var t = d3.select(this);
            return {
                x: t.attr("x") + _appUtils.AppUtils.getTranslation(t.attr("transform"))[0],
                y: t.attr("y") + _appUtils.AppUtils.getTranslation(t.attr("transform"))[1]
            };
        }).on("start", function (d) {
            self.dragStarted.call(this, d, self);
        }).on("drag", function (d) {
            self.onDrag.call(this, d, self);
        }).on("end", function (d) {
            self.dragEnded.call(this, d, self);
        });
    }

    _createClass(TextDragHandler, [{
        key: 'dragStarted',
        value: function dragStarted(d, self) {
            // self.treeDesigner.layout.disableAutoLayout();
            _contextMenu.ContextMenu.hide();
            var text = d3.select(this);
            if (!text.classed("selected")) {
                self.treeDesigner.clearSelection();
            }

            self.treeDesigner.selectText(d);
            text.classed("selected dragging", true);
            self.selectedNodes = self.treeDesigner.getSelectedNodes();
            self.prevDragEvent = d3.event;
            self.dragEventCount = 0;
        }
    }, {
        key: 'onDrag',
        value: function onDrag(draggedText, self) {
            if (self.dragEventCount == 2) {
                self.data.saveState();
            }
            self.dragEventCount++;

            var dx = d3.event.x - self.prevDragEvent.x;
            var dy = d3.event.y - self.prevDragEvent.y;

            draggedText.location.move(dx, dy);
            self.treeDesigner.updateTextPosition(draggedText);

            self.prevDragEvent = d3.event;
            self.treeDesigner.updatePlottingRegionSize();
        }
    }, {
        key: 'dragEnded',
        value: function dragEnded(draggedNode, self) {
            d3.select(this).classed("dragging", false);
        }
    }]);

    return TextDragHandler;
}();

},{"./app-utils":132,"./context-menu/context-menu":133,"./d3":139}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Tooltip = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require('./d3');

var d3 = _interopRequireWildcard(_d);

var _sdUtils = require('sd-utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tooltip = exports.Tooltip = function () {
    function Tooltip() {
        _classCallCheck(this, Tooltip);
    }

    _createClass(Tooltip, null, [{
        key: 'getContainer',
        value: function getContainer() {
            return d3.select("body").selectOrAppend('div.sd-tooltip');
        }
    }, {
        key: 'show',
        value: function show(html) {
            var xOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
            var yOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 28;
            var event = arguments[3];
            var duration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

            var container = Tooltip.getContainer().style("opacity", 0);
            container.transition().duration(200).style("opacity", .98);
            container.html(html);
            Tooltip.updatePosition(xOffset, yOffset, event);
            if (duration) {
                setTimeout(function () {
                    Tooltip.hide();
                }, duration);
            }
        }
    }, {
        key: 'updatePosition',
        value: function updatePosition() {
            var xOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;
            var yOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 28;
            var event = arguments[2];

            event = event || d3.event;
            Tooltip.getContainer().style("left", event.pageX + xOffset + "px").style("top", event.pageY - yOffset + "px");
        }
    }, {
        key: 'hide',
        value: function hide() {
            var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;

            var t = Tooltip.getContainer();
            if (duration) {
                t = t.transition().duration(duration);
            }
            t.style("opacity", 0);
        }
    }, {
        key: 'attach',
        value: function attach(target, htmlOrFn, xOffset, yOffset) {
            target.on('mouseover', function (d, i) {
                var html = null;
                if (_sdUtils.Utils.isFunction(htmlOrFn)) {
                    html = htmlOrFn(d, i);
                } else {
                    html = htmlOrFn;
                }

                if (html !== null && html !== undefined && html !== '') {
                    Tooltip.show(html, xOffset, yOffset);
                } else {
                    Tooltip.hide(0);
                }
            }).on('mousemove', function (d) {
                Tooltip.updatePosition(xOffset, yOffset);
            }).on("mouseout", function (d) {
                Tooltip.hide();
            });
        }
    }]);

    return Tooltip;
}();

},{"./d3":139,"sd-utils":"sd-utils"}],155:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TreeDesigner = exports.TreeDesignerConfig = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require("./d3");

var d3 = _interopRequireWildcard(_d);

var _sdUtils = require("sd-utils");

var _appUtils = require("./app-utils");

var _sdModel = require("sd-model");

var _contextMenu = require("./context-menu/context-menu");

var _mainContextMenu = require("./context-menu/main-context-menu");

var _nodeContextMenu = require("./context-menu/node-context-menu");

var _layout = require("./layout");

var _nodeDragHandler = require("./node-drag-handler");

var _tooltip = require("./tooltip");

var _templates = require("./templates");

var _textDragHandler = require("./text-drag-handler");

var _textContextMenu = require("./context-menu/text-context-menu");

var _edgeContextMenu = require("./context-menu/edge-context-menu");

var _hammerjs = require("hammerjs");

var Hammer = _interopRequireWildcard(_hammerjs);

var _i18n = require("./i18n/i18n");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TreeDesignerConfig = exports.TreeDesignerConfig = function TreeDesignerConfig(custom) {
    _classCallCheck(this, TreeDesignerConfig);

    this.width = undefined;
    this.height = undefined;
    this.margin = {
        left: 25,
        right: 25,
        top: 25,
        bottom: 25
    };
    this.lng = 'en';
    this.layout = {
        type: 'tree',
        nodeSize: 40,
        limitNodePositioning: true,
        gridHeight: 75,
        gridWidth: 150,
        edgeSlantWidthMax: 20
    };
    this.fontFamily = 'sans-serif';
    this.fontSize = '12px';
    this.fontWeight = 'normal';
    this.fontStyle = 'normal';
    this.node = {
        strokeWidth: '1px',
        optimal: {
            stroke: '#006f00',
            strokeWidth: '1.5px'
        },
        label: {
            fontSize: '1em',
            color: 'black'
        },
        payoff: {
            fontSize: '1em',
            color: 'black',
            negativeColor: '#b60000'
        },
        decision: {
            fill: '#ff7777',
            stroke: '#660000',

            selected: {
                fill: '#aa3333'
                // stroke: '#666600'
            }
        },
        chance: {
            fill: '#ffff44',
            stroke: '#666600',

            selected: {
                fill: '#aaaa00'
                // stroke: '#666600'
            }
        },
        terminal: {
            fill: '#44ff44',
            stroke: 'black',
            selected: {
                fill: '#00aa00'
                // stroke: 'black'
            },
            payoff: {
                fontSize: '1em',
                color: 'black',
                negativeColor: '#b60000'
            }
        }
    };
    this.edge = {
        stroke: '#424242',
        strokeWidth: '1.5',
        optimal: {
            stroke: '#006f00',
            strokeWidth: '2.4'
        },
        selected: {
            stroke: '#045ad1',
            strokeWidth: '3.5'
        },
        label: {
            fontSize: '1em',
            color: 'back'
        },
        payoff: {
            fontSize: '1em',
            color: 'black',
            negativeColor: '#b60000'
        }

    };
    this.probability = {
        fontSize: '1em',
        color: '#0000d7'
    };
    this.title = {
        fontSize: '16px',
        fontWeight: 'bold',
        fontStyle: 'normal',
        color: '#000000',
        margin: {
            top: 15,
            bottom: 10
        }
    };
    this.description = {
        show: true,
        fontSize: '12px',
        fontWeight: 'bold',
        fontStyle: 'normal',
        color: '#000000',
        margin: {
            top: 5,
            bottom: 10
        }
    };
    this.readOnly = false;
    this.disableAnimations = false;
    this.forceFullEdgeRedraw = false;
    this.hideLabels = false;
    this.hidePayoffs = false;
    this.hideProbabilities = false;
    this.raw = false;

    this.payoffNumberFormatter = function (v, i) {
        return v;
    };

    this.probabilityNumberFormatter = function (v) {
        return v;
    };

    this.onNodeSelected = function (node) {};

    this.onEdgeSelected = function (edge) {};

    this.onTextSelected = function (text) {};

    this.onSelectionCleared = function () {};

    this.operationsForObject = function (o) {
        return [];
    };

    this.payoffNames = [null, null];
    this.maxPayoffsToDisplay = 1;

    if (custom) {
        _sdUtils.Utils.deepExtend(this, custom);
    }
};

var TreeDesigner = exports.TreeDesigner = function () {
    function TreeDesigner(container, dataModel, config) {
        _classCallCheck(this, TreeDesigner);

        this.setConfig(config);
        this.data = dataModel;
        this.initContainer(container);
        this.init();
    } //data model manager


    _createClass(TreeDesigner, [{
        key: "setConfig",
        value: function setConfig(config) {
            this.config = new TreeDesignerConfig(config);
            if (this.layout) {
                this.layout.config = this.config.layout;
            }
            this.updateCustomStyles();
            return this;
        }
    }, {
        key: "init",
        value: function init() {

            this.initSvg();
            this.initLayout();
            this.initI18n();
            this.initBrush();
            this.initEdgeMarkers();

            this.updateCustomStyles();
            if (!this.config.readOnly) {
                this.initMainContextMenu();
                this.initNodeContextMenu();
                this.initEdgeContextMenu();
                this.initNodeDragHandler();
                this.initTextDragHandler();
                this.initTextContextMenu();
            }
            this.redraw();
        }
    }, {
        key: "initI18n",
        value: function initI18n() {
            _i18n.i18n.init(this.config.lng);
        }
    }, {
        key: "updateCustomStyles",
        value: function updateCustomStyles() {
            d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(_templates.Templates.get('treeDesignerStyles', this.config));
            return this;
        }
    }, {
        key: "initLayout",
        value: function initLayout() {
            this.layout = new _layout.Layout(this, this.data, this.config.layout);
        }
    }, {
        key: "initNodeDragHandler",
        value: function initNodeDragHandler() {
            this.nodeDragHandler = new _nodeDragHandler.NodeDragHandler(this, this.data);
        }
    }, {
        key: "initTextDragHandler",
        value: function initTextDragHandler() {
            this.textDragHandler = new _textDragHandler.TextDragHandler(this, this.data);
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var withTransitions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


            var self = this;
            withTransitions = !self.config.disableAnimations && withTransitions;
            this.redrawDiagramTitle();
            this.redrawDiagramDescription();
            this.updateMargin(withTransitions);
            if (withTransitions) {
                self.transitionPrev = self.transition;
                self.transition = true;
            }
            this.redrawNodes();
            this.redrawEdges();
            this.redrawFloatingTexts();
            this.updateValidationMessages();
            if (withTransitions) {
                self.transition = self.transitionPrev;
            }
            setTimeout(function () {
                self.updatePlottingRegionSize();
            }, 10);

            return this;
        }
    }, {
        key: "computeAvailableSpace",
        value: function computeAvailableSpace() {
            this.availableHeight = _appUtils.AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);
            this.availableWidth = _appUtils.AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);
        }
    }, {
        key: "initSvg",
        value: function initSvg() {
            var c = this;
            var self = this;
            this.computeAvailableSpace();
            this.svg = this.container.selectOrAppend('svg.sd-tree-designer');
            this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);

            this.mainGroup = this.svg.selectOrAppend('g.main-group');
            this.updateMargin();

            if (!this.config.width) {
                d3.select(window).on("resize.tree-designer", function () {
                    self.updatePlottingRegionSize();
                    self.redrawDiagramTitle();
                });
            }

            var mc = new Hammer.Manager(this.svg.node(), { touchAction: 'auto' });
            mc.add(new Hammer.Press({
                pointerType: 'touch'
            }));

            mc.add(new Hammer.Pinch({
                pointerType: 'touch'
            }));

            var cancel;
            mc.on('pinchstart', function () {
                self.disableBrush();
            });
            mc.on('pinch', function () {
                cancel = _sdUtils.Utils.waitForFinalEvent(function () {
                    return self.enableBrush();
                }, 'pinchend', 5000);
            });
        }
    }, {
        key: "updateMargin",
        value: function updateMargin(withTransitions) {
            var self = this;
            var margin = this.config.margin;
            var group = this.mainGroup;
            if (withTransitions) {
                group = group.transition();
            }

            this.topMargin = margin.top;
            if (this.diagramTitle || this.diagramDescription) {
                this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight() + Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));
            }

            group.attr("transform", "translate(" + margin.left + "," + this.topMargin + ")").on("end", function () {
                return self.updatePlottingRegionSize();
            });
        }
    }, {
        key: "setMargin",
        value: function setMargin(margin, withoutStateSaving) {
            var self = this;
            if (!withoutStateSaving) {
                this.data.saveState({
                    data: {
                        margin: _sdUtils.Utils.clone(self.config.margin)
                    },
                    onUndo: function onUndo(data) {
                        self.setMargin(data.margin, true);
                    },
                    onRedo: function onRedo(data) {
                        self.setMargin(margin, true);
                    }
                });
            }
            _sdUtils.Utils.deepExtend(this.config.margin, margin);
            this.redrawDiagramTitle();
            this.updateMargin(true);
        }
    }, {
        key: "initContainer",
        value: function initContainer(containerIdOrElem) {
            if (_sdUtils.Utils.isString(containerIdOrElem)) {
                var selector = containerIdOrElem.trim();

                if (!_sdUtils.Utils.startsWith(selector, '#') && !_sdUtils.Utils.startsWith(selector, '.')) {
                    selector = '#' + selector;
                }
                this.container = d3.select(selector);
            } else if (containerIdOrElem._parents) {
                this.container = containerIdOrElem;
            } else {
                this.container = d3.select(containerIdOrElem);
            }
        }
    }, {
        key: "updatePlottingRegionSize",
        value: function updatePlottingRegionSize() {
            var changed = false;
            this.computeAvailableSpace();
            var margin = this.config.margin;
            var svgWidth = this.svg.attr('width');
            var svgHeight = this.svg.attr('height');
            var mainGroupBox = this.mainGroup.node().getBBox();
            var newSvgWidth = mainGroupBox.width + mainGroupBox.x + margin.left + margin.right;
            this.container.classed('with-overflow-x', newSvgWidth >= this.availableWidth);
            newSvgWidth = Math.max(newSvgWidth, this.availableWidth);
            if (svgWidth != newSvgWidth) {
                changed = true;
                this.svg.attr('width', newSvgWidth);
            }
            var newSvgHeight = mainGroupBox.height + mainGroupBox.y + this.topMargin + margin.bottom;

            this.container.classed('with-overflow-y', newSvgHeight >= this.availableHeight);
            newSvgHeight = Math.max(newSvgHeight, this.availableHeight);
            if (svgHeight != newSvgHeight) {
                changed = true;
                this.svg.attr('height', newSvgHeight);
            }
            if (changed) {
                this.updateBrushExtent();
            }
        }
    }, {
        key: "redrawNodes",
        value: function redrawNodes() {
            var self = this;

            var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');
            var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(function (d) {
                return !d.$hidden;
            }), function (d, i) {
                return d.id;
            });
            nodes.exit().remove();
            var nodesEnter = nodes.enter().append('g').attr('id', function (d) {
                return 'node-' + d.id;
            }).attr('class', function (d) {
                return d.type + '-node node';
            }).attr('transform', function (d) {
                return 'translate(' + d.location.x + '  ' + d.location.y + ')';
            });
            nodesEnter.append('path');

            var labelEnter = nodesEnter.append('text').attr('class', 'label');
            var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');
            var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');
            var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');
            var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');

            var nodesMerge = nodesEnter.merge(nodes);
            nodesMerge.classed('optimal', function (d) {
                return self.isOptimal(d);
            });

            var nodesMergeT = nodesMerge;
            if (this.transition) {
                nodesMergeT = nodesMerge.transition();
                nodesMergeT.on('end', function () {
                    return self.updatePlottingRegionSize();
                });
            }
            nodesMergeT.attr('transform', function (d) {
                return 'translate(' + d.location.x + '  ' + d.location.y + ')';
            });

            var path = nodesMerge.select('path');
            this.layout.drawNodeSymbol(path, this.transition);

            /*path
                .style('fill', d=> {
                    // if(self.isNodeSelected(d)){
                    //     return self.config.node[d.type].selected.fill
                    // }
                    return self.config.node[d.type].fill
                })
                .style('stroke', d=> self.config.node[d.type].stroke)
                .style('stroke-width', d=> {
                    if(self.config.node[d.type].strokeWidth!==undefined){
                        return self.config.node[d.type].strokeWidth;
                    }
                    return self.config.node.strokeWidth;
                });
            */
            this.layout.nodeLabelPosition(labelEnter);
            var labelMerge = nodesMerge.select('text.label');
            labelMerge.classed('sd-hidden', this.config.hideLabels);
            var labelMergeT = nodesMergeT.select('text.label');
            labelMergeT.each(this.updateTextLines);
            this.layout.nodeLabelPosition(labelMergeT).attr('text-anchor', 'middle');

            var payoff = nodesMerge.select('text.payoff');

            var payoffTspans = payoff.selectAll('tspan').data(function (d) {
                var item = d.displayValue('childrenPayoff');
                return _sdUtils.Utils.isArray(item) ? item.filter(function (i) {
                    return i !== undefined;
                }) : [item];
            });
            payoffTspans.exit().remove();

            var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);
            payoffTspansM
            // .attr('dominant-baseline', 'hanging')
            .attr('dy', function (d, i) {
                return i > 0 ? '1.1em' : undefined;
            }).attr('x', '0').classed('negative', function (d) {
                return d !== null && d < 0;
            }).classed('sd-hidden', this.config.hidePayoffs || this.config.raw).text(function (d, i) {
                var val = d;

                return val !== null ? isNaN(val) ? val : self.config.payoffNumberFormatter(val, i) : '';
            });
            this.attachPayoffTooltip(payoffTspansM);

            var payoffT = payoff;
            if (this.transition) {
                payoffT = payoff.transition();
            }

            this.layout.nodePayoffPosition(payoffEnter);
            this.layout.nodePayoffPosition(payoffT);

            var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');
            var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(function (d) {
                var item = d.displayValue('aggregatedPayoff');
                return _sdUtils.Utils.isArray(item) ? item.filter(function (i) {
                    return i !== undefined;
                }) : [item];
            });
            aggregatedPayoffTspans.exit().remove();
            var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans).attr('dy', function (d, i) {
                return i > 0 ? '0.95em' : undefined;
            }).classed('negative', function (d) {
                return d !== null && d < 0;
            }).classed('sd-hidden', this.config.hidePayoffs || this.config.raw).text(function (val, i) {
                return val !== null ? isNaN(val) ? val : self.config.payoffNumberFormatter(val, i) : '';
            });

            this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');

            var aggregatedPayoffT = aggregatedPayoff;
            if (this.transition) {
                aggregatedPayoffT = aggregatedPayoff.transition();
            }

            this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);
            this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);

            var probabilityToEnter = nodesMerge.select('text.probability-to-enter').text(function (d) {
                var val = d.displayValue('probabilityToEnter');
                return val !== null ? isNaN(val) ? val : self.config.probabilityNumberFormatter(val) : '';
            }).classed('sd-hidden', this.config.hideProbabilities || this.config.raw);
            _tooltip.Tooltip.attach(probabilityToEnter, _i18n.i18n.t('tooltip.node.probabilityToEnter'));

            var probabilityToEnterT = probabilityToEnter;
            if (this.transition) {
                probabilityToEnterT = probabilityToEnter.transition();
            }
            this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);
            this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);

            var indicator = nodesMerge.select('text.error-indicator');
            indicator.classed('sd-hidden', this.config.raw);
            this.layout.nodeIndicatorPosition(indicatorEnter);
            this.layout.nodeIndicatorPosition(indicator);

            if (this.nodeDragHandler) {
                nodesMerge.call(this.nodeDragHandler.drag);
            }

            nodesMerge.on('contextmenu', this.nodeContextMenu);
            nodesMerge.on('dblclick', this.nodeContextMenu);
            nodesMerge.each(function (d, i) {
                var nodeElem = this;
                var mc = new Hammer.Manager(nodeElem);
                mc.add(new Hammer.Press({
                    pointerType: 'touch'
                }));
                mc.on('press', function (e) {
                    if (e.pointerType == 'touch') {
                        self.nodeDragHandler.cancelDrag();
                    }
                });

                if (d.folded) {
                    var button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button').text("[+]").on('click dbclick mousedown', function () {
                        return self.foldSubtree(d, false);
                    }); //firefox detects only mousedown event - related to drag handler

                    self.layout.nodeUnfoldButtonPosition(button);
                    _tooltip.Tooltip.attach(button, _i18n.i18n.t('contextMenu.node.unfold'));
                } else {
                    d3.select(nodeElem).select('.sd-unfold-button').remove();
                }
            });
        }
    }, {
        key: "attachPayoffTooltip",
        value: function attachPayoffTooltip(selection) {
            var payoffFiledName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'payoff';
            var object = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'node';

            var self = this;
            _tooltip.Tooltip.attach(selection, function (d, i) {
                if (self.config.payoffNames.length > i && self.config.payoffNames[i] !== null) {
                    return _i18n.i18n.t('tooltip.' + object + '.' + payoffFiledName + '.named', { value: d.payoff, number: i + 1, name: self.config.payoffNames[i] });
                }
                return _i18n.i18n.t('tooltip.' + object + '.' + payoffFiledName + '.default', { value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i + 1 });
            });
        }
    }, {
        key: "updateTextLines",
        value: function updateTextLines(d) {
            //helper method for splitting text to tspans
            var lines = d.name ? d.name.split('\n') : [];
            lines.reverse();
            var tspans = d3.select(this).selectAll('tspan').data(lines);
            tspans.enter().append('tspan').merge(tspans).text(function (l) {
                return l;
            }).attr('dy', function (d, i) {
                return i > 0 ? '-1.1em' : undefined;
            }).attr('x', '0');

            tspans.exit().remove();
        }
    }, {
        key: "isOptimal",
        value: function isOptimal(d) {
            return d.displayValue('optimal');
        }
    }, {
        key: "redrawEdges",
        value: function redrawEdges() {
            var _this = this;

            var self = this;
            var edgesContainer = this.mainGroup.selectOrAppend('g.edges');
            if (self.config.forceFullEdgeRedraw) {
                edgesContainer.selectAll("*").remove();
            }

            var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(function (e) {
                return !e.$hidden;
            }), function (d, i) {
                return d.id;
            });
            edges.exit().remove();
            var edgesEnter = edges.enter().append('g').attr('id', function (d) {
                return 'edge-' + d.id;
            }).attr('class', 'edge');

            edgesEnter.append('path');
            var labelEnter = edgesEnter.appendSelector('g.label-group');
            labelEnter.append('text').attr('class', 'label');
            var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');
            var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');

            var edgesMerge = edgesEnter.merge(edges);

            var optimalClassName = 'optimal';
            edgesMerge.classed(optimalClassName, function (d) {
                return self.isOptimal(d);
            });

            var edgesMergeT = edgesMerge;
            if (this.transition) {
                edgesMergeT = edgesMerge.transition();
            }

            edgesMergeT.select('path').attr('d', function (d) {
                return _this.layout.edgeLineD(d);
            })
            // .attr("stroke", "black")
            // .attr("stroke-width", 2)
            .attr("fill", "none").attr("marker-end", function (d) {
                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : self.isOptimal(d) ? '-optimal' : '';
                return "url(#arrow" + suffix + ")";
            });
            // .attr("shape-rendering", "optimizeQuality")


            edgesMerge.on('click', function (d) {
                self.selectEdge(d, true);
            });

            this.layout.edgeLabelPosition(labelEnter);
            edgesMergeT.select('text.label').each(this.updateTextLines);
            var labelMerge = edgesMerge.select('g.label-group');
            labelMerge.classed('sd-hidden', this.config.hideLabels);
            var labelMergeT = edgesMergeT.select('g.label-group');
            this.layout.edgeLabelPosition(labelMergeT);
            // .text(d=>d.name);

            var payoff = edgesMerge.select('text.payoff');

            var payoffTspans = payoff.selectAll('tspan').data(function (d) {
                var item = d.displayValue('payoff');
                return _sdUtils.Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(function (_) {
                    return d;
                }) : [d];
            });
            payoffTspans.exit().remove();

            var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);
            payoffTspansM
            // .attr('dominant-baseline', 'hanging')
            .attr('dy', function (d, i) {
                return i > 0 ? '1.1em' : undefined;
            })
            // .attr('x', '0')

            // .attr('dominant-baseline', 'hanging')
            .classed('negative', function (d, i) {
                var val = d.displayPayoff(undefined, i);
                return val !== null && val < 0;
            }).classed('sd-hidden', this.config.hidePayoffs)
            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))
            .text(function (d, i) {
                if (_this.config.raw) {
                    return d.payoff[i];
                }

                var item = d.displayValue('payoff');
                var items = _sdUtils.Utils.isArray(item) ? item : [item];

                var val = items[i];
                if (val !== null) {
                    if (!isNaN(val)) {
                        return self.config.payoffNumberFormatter(val, i);
                    }
                    if (_sdUtils.Utils.isString(val)) {
                        return val;
                    }
                }

                if (d.payoff[i] !== null && !isNaN(d.payoff[i])) return self.config.payoffNumberFormatter(d.payoff[i], i);

                return d.payoff[i];
            });

            _tooltip.Tooltip.attach(payoffTspansM, function (d, i) {
                if (self.config.payoffNames.length > i && self.config.payoffNames[i] !== null) {
                    return _i18n.i18n.t('tooltip.edge.payoff.named', { value: d.payoff[i], number: i + 1, name: self.config.payoffNames[i] });
                }
                return _i18n.i18n.t('tooltip.edge.payoff.default', { value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i + 1 });
            });

            var payoffTextT = payoff;
            if (this.transition) {
                payoffTextT = payoff.transition();
            }
            this.layout.edgePayoffPosition(payoffEnter);
            this.layout.edgePayoffPosition(payoffTextT);

            _tooltip.Tooltip.attach(edgesMerge.select('text.probability'), function (d) {
                return _i18n.i18n.t('tooltip.edge.probability', { value: d.probability === undefined ? d.displayProbability() : d.probability });
            });

            edgesMerge.select('text.probability').classed('sd-hidden', this.config.hideProbabilities);
            var probabilityMerge = edgesMerge.select('text.probability');
            probabilityMerge.attr('text-anchor', 'end').text(function (d) {
                if (_this.config.raw) {
                    return d.probability;
                }
                var val = d.displayProbability();

                if (val !== null) {
                    if (!isNaN(val)) {
                        return self.config.probabilityNumberFormatter(val);
                    }
                    if (_sdUtils.Utils.isString(val)) {
                        return val;
                    }
                }

                if (d.probability !== null && !isNaN(d.probability)) return self.config.probabilityNumberFormatter(d.probability);

                return d.probability;
            });
            var probabilityMergeT = probabilityMerge;
            if (this.transition) {
                probabilityMergeT = probabilityMerge.transition();
            }

            this.layout.edgeProbabilityPosition(probabilityEnter);
            this.layout.edgeProbabilityPosition(probabilityMergeT);

            edgesContainer.selectAll('.edge.' + optimalClassName).raise();

            edgesMerge.on('contextmenu', this.edgeContextMenu);
            edgesMerge.on('dblclick', this.edgeContextMenu);
            edgesMerge.each(function (d, i) {
                var elem = this;
                var mc = new Hammer.Manager(elem);
                mc.add(new Hammer.Press({
                    pointerType: Hammer.POINTER_TOUCH
                }));
            });
        }
    }, {
        key: "redrawFloatingTexts",
        value: function redrawFloatingTexts() {
            var self = this;

            var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');
            var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, function (d, i) {
                return d.id;
            });
            texts.exit().remove();
            var textsEnter = texts.enter().appendSelector('g.floating-text').attr('id', function (d) {
                return 'text-' + d.id;
            });

            var rectWidth = 40;
            var rectHeight = 20;

            textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);
            textsEnter.append('text');

            var textsMerge = textsEnter.merge(texts);
            var textsMergeT = textsMerge;
            if (this.transition) {
                textsMergeT = textsMerge.transition();
            }

            textsMergeT.attr('transform', function (d) {
                return 'translate(' + d.location.x + '  ' + d.location.y + ')';
            });

            var tspans = textsMerge.select('text').selectAll('tspan').data(function (d) {
                return d.value ? d.value.split('\n') : [];
            });

            tspans.enter().append('tspan').merge(tspans).html(function (l) {
                return _appUtils.AppUtils.replaceUrls(_appUtils.AppUtils.escapeHtml(l));
            }).attr('dy', function (d, i) {
                return i > 0 ? '1.1em' : undefined;
            }).attr('x', '0');

            tspans.exit().remove();
            textsMerge.classed('sd-empty', function (d) {
                return !d.value || !d.value.trim();
            });
            textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);

            textsMerge.each(function (d) {
                if (!d.value) {
                    return;
                }
                var bb = d3.select(this).select('text').node().getBBox();
                d3.select(this).select('rect').attr('y', bb.y - 5).attr('width', Math.max(bb.width + 10, rectWidth)).attr('height', Math.max(bb.height + 10, rectHeight));
            });

            if (this.textDragHandler) {
                textsMerge.call(this.textDragHandler.drag);
            }
            textsMerge.on('contextmenu', this.textContextMenu);
            textsMerge.on('dblclick', this.textContextMenu);
            textsMerge.each(function (d, i) {
                var elem = this;
                var mc = new Hammer.Manager(elem);
                mc.add(new Hammer.Press({
                    pointerType: 'touch'
                }));
            });
        }
    }, {
        key: "updateValidationMessages",
        value: function updateValidationMessages() {
            var _this2 = this;

            var nodes = this.mainGroup.selectAll('.node');
            nodes.classed('error', false);

            this.data.validationResults.forEach(function (validationResult) {
                if (validationResult.isValid()) {
                    return;
                }

                Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(function (id) {
                    var errors = validationResult.objectIdToError[id];
                    var nodeSelection = _this2.getNodeD3SelectionById(id);
                    nodeSelection.classed('error', true);
                    var tooltipHtml = '';
                    errors.forEach(function (e) {
                        if (tooltipHtml) {
                            tooltipHtml += '<br/>';
                        }
                        tooltipHtml += _appUtils.AppUtils.getValidationMessage(e);
                    });

                    _tooltip.Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);
                });
            });
        }
    }, {
        key: "initEdgeMarkers",
        value: function initEdgeMarkers() {
            var defs = this.svg.append("svg:defs");

            this.initArrowMarker("arrow");
            this.initArrowMarker("arrow-optimal");
            this.initArrowMarker("arrow-selected");
        }
    }, {
        key: "initArrowMarker",
        value: function initArrowMarker(id) {

            var defs = this.svg.select("defs");
            defs.append("marker").attr("id", id).attr("viewBox", "0 -5 10 10").attr("refX", 5).attr("refY", 0).attr("markerWidth", 4).attr("markerHeight", 4).attr("orient", "auto").append("path").attr("d", "M0,-5L10,0L0,5").attr("class", "arrowHead");
        }
    }, {
        key: "updateBrushExtent",
        value: function updateBrushExtent() {
            var self = this;
            this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);
            this.brushContainer.call(this.brush);
        }
    }, {
        key: "initBrush",
        value: function initBrush() {
            var self = this;

            var brushContainer = self.brushContainer = this.brushContainer = this.svg.selectOrInsert("g.brush", ":first-child").attr("class", "brush");

            var brush = this.brush = d3.brush().on("start", brushstart).on("brush", brushmove).on("end", brushend);

            this.updateBrushExtent();

            brushContainer.select('.overlay').on("mousemove.edgeSelection", mousemoved);
            function mousemoved() {
                var m = d3.mouse(this);
                var mgt = self.getMainGroupTranslation();
                var margin = 10;

                var closest = [null, 999999999];
                var closeEdges = [];
                self.mainGroup.selectAll('.edge').each(function (d) {
                    var selection = d3.select(this);
                    selection.classed('sd-hover', false);
                    var pathNode = selection.select('path').node();
                    var b = pathNode.getBBox();
                    if (b.x + mgt[0] <= m[0] && b.x + b.width + mgt[0] >= m[0] && b.y + mgt[1] - margin <= m[1] && b.y + b.height + mgt[1] + margin >= m[1]) {

                        var cp = _appUtils.AppUtils.closestPoint(pathNode, [m[0] - mgt[0], m[1] - mgt[1]]);
                        if (cp.distance < margin && cp.distance < closest[1]) {
                            closest = [selection, cp.distance];
                        }
                    }
                });

                self.hoveredEdge = null;
                if (closest[0]) {
                    closest[0].classed('sd-hover', true);
                    self.hoveredEdge = closest[0];
                }
            }

            function brushstart() {
                if (!d3.event.selection) return;
                if (self.hoveredEdge) {
                    self.selectEdge(self.hoveredEdge.datum(), true);
                } else {
                    self.clearSelection();
                }
                _contextMenu.ContextMenu.hide();
            }

            // Highlight the selected nodes.
            function brushmove() {
                var s = d3.event.selection;
                if (!s) return;

                self.mainGroup.selectAll(".node").classed('selected', function (d) {
                    var mainGroupTranslation = self.getMainGroupTranslation();
                    var x = d.location.x + mainGroupTranslation[0];
                    var y = d.location.y + mainGroupTranslation[1];
                    var nodeSize = self.config.layout.nodeSize;
                    var offset = nodeSize * 0.25;
                    return s[0][0] <= x + offset && x - offset <= s[1][0] && s[0][1] <= y + offset && y - offset <= s[1][1];
                });
            }
            // If the brush is empty, select all circles.
            function brushend() {
                if (!d3.event.selection) return;
                brush.move(brushContainer, null);

                var selectedNodes = self.getSelectedNodes();
                if (selectedNodes && selectedNodes.length === 1) {
                    self.selectNode(selectedNodes[0]);
                }
                // if (!d3.event.selection) self.mainGroup.selectAll(".selected").classed('selected', false);
            }
        }
    }, {
        key: "disableBrush",
        value: function disableBrush() {
            if (!this.brushDisabled) {
                _appUtils.AppUtils.growl(_i18n.i18n.t('growl.brushDisabled'), 'info', 'left');
            }
            this.brushDisabled = true;
            this.brushContainer.remove();
        }
    }, {
        key: "enableBrush",
        value: function enableBrush() {
            if (this.brushDisabled) {
                _appUtils.AppUtils.growl(_i18n.i18n.t('growl.brushEnabled'), 'info', 'left');
                this.initBrush();
                this.brushDisabled = false;
            }
        }
    }, {
        key: "getMainGroupTranslation",
        value: function getMainGroupTranslation(invert) {
            var translation = _appUtils.AppUtils.getTranslation(this.mainGroup.attr("transform"));
            if (invert) {
                translation[0] = -translation[0];
                translation[1] = -translation[1];
            }
            return translation;
        }
    }, {
        key: "initNodeContextMenu",
        value: function initNodeContextMenu() {
            this.nodeContextMenu = new _nodeContextMenu.NodeContextMenu(this, this.config.operationsForObject);
        }
    }, {
        key: "initEdgeContextMenu",
        value: function initEdgeContextMenu() {
            this.edgeContextMenu = new _edgeContextMenu.EdgeContextMenu(this);
        }
    }, {
        key: "initTextContextMenu",
        value: function initTextContextMenu() {
            this.textContextMenu = new _textContextMenu.TextContextMenu(this);
        }
    }, {
        key: "initMainContextMenu",
        value: function initMainContextMenu() {
            this.mainContextMenu = new _mainContextMenu.MainContextMenu(this);
            this.svg.on('contextmenu', this.mainContextMenu);
            this.svg.on('dblclick', this.mainContextMenu);
        }
    }, {
        key: "addText",
        value: function addText(text) {
            this.data.saveState();
            this.data.addText(text);
            this.redraw();
            this.selectText(text);
        }
    }, {
        key: "addNode",
        value: function addNode(node, parent) {
            var redraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            this.data.saveState();
            this.data.addNode(node, parent);
            this.redraw(true);
            this.layout.update(node);
            return node;
        }
    }, {
        key: "addDecisionNode",
        value: function addDecisionNode(parent) {
            var newNode = new _sdModel.domain.DecisionNode(this.layout.getNewChildLocation(parent));
            this.addNode(newNode, parent);
        }
    }, {
        key: "addChanceNode",
        value: function addChanceNode(parent) {
            var newNode = new _sdModel.domain.ChanceNode(this.layout.getNewChildLocation(parent));
            this.addNode(newNode, parent);
        }
    }, {
        key: "addTerminalNode",
        value: function addTerminalNode(parent) {
            var newNode = new _sdModel.domain.TerminalNode(this.layout.getNewChildLocation(parent));
            this.addNode(newNode, parent);
        }
    }, {
        key: "injectNode",
        value: function injectNode(node, edge) {
            this.data.saveState();
            this.data.injectNode(node, edge);
            this.redraw();
            this.layout.update(node);
            return node;
        }
    }, {
        key: "injectDecisionNode",
        value: function injectDecisionNode(edge) {
            var newNode = new _sdModel.domain.DecisionNode(this.layout.getInjectedNodeLocation(edge));
            this.injectNode(newNode, edge);
        }
    }, {
        key: "injectChanceNode",
        value: function injectChanceNode(edge) {
            var newNode = new _sdModel.domain.ChanceNode(this.layout.getInjectedNodeLocation(edge));
            this.injectNode(newNode, edge);
        }
    }, {
        key: "removeNode",
        value: function removeNode(node) {
            this.data.saveState();
            this.data.removeNode(node);

            if (!this.layout.isManualLayout()) {
                this.layout.update();
            } else {
                this.redraw();
            }
        }
    }, {
        key: "removeSelectedNodes",
        value: function removeSelectedNodes() {
            var selectedNodes = this.getSelectedNodes();
            if (!selectedNodes.length) {
                return;
            }
            this.data.saveState();
            this.data.removeNodes(selectedNodes);
            this.clearSelection();
            this.redraw();
            this.layout.update();
        }
    }, {
        key: "removeSelectedTexts",
        value: function removeSelectedTexts() {
            var selectedTexts = this.getSelectedTexts();

            if (!selectedTexts.length) {
                return;
            }
            this.data.saveState();
            this.data.removeTexts(selectedTexts);
            this.clearSelection();
            this.redraw();
        }
    }, {
        key: "copyNode",
        value: function copyNode(d, notClearPrevSelection) {
            var clone = this.data.cloneSubtree(d);
            if (notClearPrevSelection) {
                if (!this.copiedNodes) {
                    this.copiedNodes = [];
                }
                this.copiedNodes.push(clone);
            } else {
                this.copiedNodes = [clone];
            }
        }
    }, {
        key: "cutNode",
        value: function cutNode(d) {
            this.copyNode(d);
            this.removeNode(d);
        }
    }, {
        key: "cutSelectedNodes",
        value: function cutSelectedNodes() {
            var selectedNodes = this.getSelectedNodes();
            var selectedRoots = this.data.findSubtreeRoots(selectedNodes);
            this.copyNodes(selectedRoots);
            this.removeSelectedNodes();
        }
    }, {
        key: "copySelectedNodes",
        value: function copySelectedNodes() {
            var self;
            var selectedNodes = this.getSelectedNodes();

            var selectedRoots = this.data.findSubtreeRoots(selectedNodes);
            this.copyNodes(selectedRoots);
        }
    }, {
        key: "copyNodes",
        value: function copyNodes(nodes) {
            var _this3 = this;

            if (this.copiedNodes !== nodes) {
                this.originalCopiedNodes = nodes;
            }
            this.copiedNodes = nodes.map(function (d) {
                return _this3.data.cloneSubtree(d);
            });
        }
    }, {
        key: "getTrackedClonesOfCopiedNodes",
        value: function getTrackedClonesOfCopiedNodes() {
            var _this4 = this;

            return this.originalCopiedNodes.map(function (d) {
                return _this4.data.cloneSubtree(d, false, true);
            });
        }
    }, {
        key: "pasteToNode",
        value: function pasteToNode(node) {
            var _this5 = this;

            var asTrackedClone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!this.copiedNodes || !this.copiedNodes.length) {
                return;
            }
            this.data.saveState();
            var self = this;
            self.clearSelection();
            var nodesToAttach = this.copiedNodes;
            if (asTrackedClone) {
                nodesToAttach = self.getTrackedClonesOfCopiedNodes();
            } else {
                self.copyNodes(this.copiedNodes);
            }

            nodesToAttach.forEach(function (toAttach) {
                var attached = _this5.data.attachSubtree(toAttach, node).childNode;
                attached.folded = true;
                if (attached.folded) {
                    self.foldSubtree(attached, attached.folded, false);
                }
                var location = self.layout.getNewChildLocation(node);
                attached.moveTo(location.x, location.y, true);
                self.layout.moveNodeToEmptyPlace(attached, false);
                self.layout.fitNodesInPlottingRegion(_this5.data.getAllDescendantNodes(attached));

                self.selectSubTree(attached, false, nodesToAttach.length > 1);
            });

            if (node.folded) {
                self.foldSubtree(node, node.folded, false);
            }

            setTimeout(function () {
                self.redraw();
                self.layout.update();
            }, 10);
        }
    }, {
        key: "pasteToNewLocation",
        value: function pasteToNewLocation(point) {
            var _this6 = this;

            this.data.saveState();
            var self = this;
            self.clearSelection();
            var nodesToAttach = this.copiedNodes;
            self.copyNodes(this.copiedNodes);
            nodesToAttach.forEach(function (toAttach) {
                var attached = _this6.data.attachSubtree(toAttach);
                if (attached.folded) {
                    self.foldSubtree(attached, attached.folded, false);
                }
                attached.moveTo(point.x, point.y, true);
                self.layout.moveNodeToEmptyPlace(attached, false);
                self.layout.fitNodesInPlottingRegion(_this6.data.getAllDescendantNodes(attached));

                self.selectSubTree(attached, false, nodesToAttach.length > 1);
            });

            setTimeout(function () {
                self.redraw();
                self.layout.update();
            }, 10);
        }
    }, {
        key: "convertNode",
        value: function convertNode(node, typeToConvertTo) {
            var self = this;
            this.data.saveState();
            this.data.convertNode(node, typeToConvertTo);
            setTimeout(function () {
                self.redraw(true);
            }, 10);
        }
    }, {
        key: "performOperation",
        value: function performOperation(object, operation) {
            var self = this;
            this.data.saveState();
            operation.perform(object);
            setTimeout(function () {
                self.redraw();
                self.layout.update();
            }, 10);
        }
    }, {
        key: "foldSubtree",
        value: function foldSubtree(node) {
            var fold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var redraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var self = this;
            node.folded = fold;

            this.data.getAllDescendantNodes(node).forEach(function (n) {
                n.$hidden = fold;
                n.folded = false;
            });
            this.data.getAllDescendantEdges(node).forEach(function (e) {
                return e.$hidden = fold;
            });

            if (!redraw) {
                return;
            }
            setTimeout(function () {
                self.redraw();
                self.layout.update();
            }, 10);
        }
    }, {
        key: "updateVisibility",
        value: function updateVisibility() {
            var _this7 = this;

            var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (!node) {
                this.data.getRoots().forEach(function (n) {
                    return _this7.updateVisibility(n);
                });
                return;
            }

            if (node.folded) {
                this.foldSubtree(node, true, false);
                return;
            }

            node.childEdges.forEach(function (e) {
                return _this7.updateVisibility(e.childNode);
            });
        }
    }, {
        key: "moveNodeTo",
        value: function moveNodeTo(x, y) {}
    }, {
        key: "updateNodePosition",
        value: function updateNodePosition(node) {
            this.getNodeD3Selection(node).raise().attr('transform', 'translate(' + node.location.x + ' ' + node.location.y + ')');
        }
    }, {
        key: "updateTextPosition",
        value: function updateTextPosition(text) {
            this.getTextD3Selection(text).raise().attr('transform', 'translate(' + text.location.x + ' ' + text.location.y + ')');
        }
    }, {
        key: "getNodeD3Selection",
        value: function getNodeD3Selection(node) {
            return this.getNodeD3SelectionById(node.id);
        }
    }, {
        key: "getNodeD3SelectionById",
        value: function getNodeD3SelectionById(id) {
            return this.mainGroup.select('#node-' + id);
        }
    }, {
        key: "getTextD3Selection",
        value: function getTextD3Selection(text) {
            return this.getTextD3SelectionById(text.id);
        }
    }, {
        key: "getTextD3SelectionById",
        value: function getTextD3SelectionById(id) {
            return this.mainGroup.select('#text-' + id);
        }
    }, {
        key: "getSelectedNodes",
        value: function getSelectedNodes() {
            var _this8 = this;

            var visibleOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var selectedVisible = this.mainGroup.selectAll(".node.selected").data();
            if (visibleOnly) {
                return selectedVisible;
            }

            var allSelected = [];
            allSelected.push.apply(allSelected, _toConsumableArray(selectedVisible));

            selectedVisible.forEach(function (n) {
                if (n.folded) {
                    var descendants = _this8.data.getAllDescendantNodes(n);
                    if (descendants) {
                        allSelected.push.apply(allSelected, _toConsumableArray(descendants));
                    }
                }
            });

            return allSelected;
        }
    }, {
        key: "getSelectedTexts",
        value: function getSelectedTexts() {
            return this.mainGroup.selectAll(".floating-text.selected").data();
        }
    }, {
        key: "clearSelection",
        value: function clearSelection() {
            var _this9 = this;

            this.mainGroup.selectAll(".edge.selected").select('path').attr("marker-end", function (d) {
                return "url(#arrow" + (_this9.isOptimal(d) ? '-optimal' : '') + ")";
            });
            this.mainGroup.selectAll(".selected").classed('selected', false);
            this.config.onSelectionCleared();
        }
    }, {
        key: "selectEdge",
        value: function selectEdge(edge, clearSelectionBeforeSelect) {
            if (clearSelectionBeforeSelect) {
                this.clearSelection();
            }
            this.config.onEdgeSelected(edge);
            this.mainGroup.select('#edge-' + edge.id).classed('selected', true).select('path').attr("marker-end", function (d) {
                return "url(#arrow-selected)";
            });
        }
    }, {
        key: "isNodeSelected",
        value: function isNodeSelected(node) {
            return this.getNodeD3Selection(node).classed('selected');
        }
    }, {
        key: "selectNode",
        value: function selectNode(node, clearSelectionBeforeSelect, skipCallback) {
            if (clearSelectionBeforeSelect) {
                this.clearSelection();
            }

            if (!skipCallback) {
                this.config.onNodeSelected(node);
            }

            this.getNodeD3SelectionById(node.id).classed('selected', true);
        }
    }, {
        key: "selectText",
        value: function selectText(text, clearSelectionBeforeSelect, skipCallback) {
            if (clearSelectionBeforeSelect) {
                this.clearSelection();
            }

            if (!skipCallback) {
                this.config.onTextSelected(text);
            }

            this.getTextD3SelectionById(text.id).classed('selected', true);
        }
    }, {
        key: "selectSubTree",
        value: function selectSubTree(node, clearSelectionBeforeSelect, skipCallback) {
            var _this10 = this;

            if (clearSelectionBeforeSelect) {
                this.clearSelection();
            }
            this.selectNode(node, false, skipCallback);
            node.childEdges.forEach(function (e) {
                return _this10.selectSubTree(e.childNode, false, true);
            });
        }
    }, {
        key: "selectAllNodes",
        value: function selectAllNodes() {
            this.mainGroup.selectAll(".node").classed('selected', true);
        }
    }, {
        key: "autoLayout",
        value: function autoLayout(type, withoutStateSaving) {
            this.layout.autoLayout(type, withoutStateSaving);
        }
    }, {
        key: "updateDiagramTitle",
        value: function updateDiagramTitle(titleValue) {
            if (!titleValue) {
                titleValue = '';
            }
            this.diagramTitle = titleValue;
            this.redrawDiagramTitle();
            this.redrawDiagramDescription();
            this.updateMargin(true);
        }
    }, {
        key: "redrawDiagramTitle",
        value: function redrawDiagramTitle() {
            var svgWidth = this.svg.attr('width');
            var svgHeight = this.svg.attr('height');
            this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');

            var title = this.titleContainer.selectOrAppend('text.sd-title');
            title.text(this.diagramTitle);
            _layout.Layout.setHangingPosition(title);

            var marginTop = parseInt(this.config.title.margin.top);
            this.titleContainer.attr('transform', 'translate(' + svgWidth / 2 + ',' + marginTop + ')');
        }
    }, {
        key: "redrawDiagramDescription",
        value: function redrawDiagramDescription() {
            var svgWidth = this.svg.attr('width');
            var svgHeight = this.svg.attr('height');
            this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');

            var desc = this.titleContainer.selectOrAppend('text.sd-description');

            if (!this.config.description.show) {
                desc.remove();
                return;
            }

            var lines = this.diagramDescription ? this.diagramDescription.split('\n') : [];
            var tspans = desc.selectAll('tspan').data(lines);
            tspans.enter().append('tspan').merge(tspans).html(function (l) {
                return _appUtils.AppUtils.replaceUrls(_appUtils.AppUtils.escapeHtml(l));
            }).attr('dy', function (d, i) {
                return i > 0 ? '1.1em' : undefined;
            }).attr('x', '0');

            tspans.exit().remove();
            _layout.Layout.setHangingPosition(desc);

            var title = this.titleContainer.selectOrAppend('text.sd-title');

            var marginTop = 0;
            if (this.diagramTitle) {
                marginTop += title.node().getBBox().height;
                marginTop += Math.max(parseInt(this.config.description.margin.top), 0);
            }

            desc.attr('transform', 'translate(0,' + marginTop + ')');
        }
    }, {
        key: "updateDiagramDescription",
        value: function updateDiagramDescription(descriptionValue) {
            if (!descriptionValue) {
                descriptionValue = '';
            }
            this.diagramDescription = descriptionValue;
            this.redrawDiagramTitle();
            this.redrawDiagramDescription();
            this.updateMargin(true);
        }
    }, {
        key: "getTitleGroupHeight",
        value: function getTitleGroupHeight(withMargins) {
            if (!this.titleContainer) {
                return 0;
            }
            var h = this.titleContainer.node().getBBox().height;
            if (withMargins) {
                h += parseInt(this.config.title.margin.bottom);
                h += parseInt(this.config.title.margin.top);
            }
            return h;
        }
    }]);

    return TreeDesigner;
}();

},{"./app-utils":132,"./context-menu/context-menu":133,"./context-menu/edge-context-menu":134,"./context-menu/main-context-menu":135,"./context-menu/node-context-menu":136,"./context-menu/text-context-menu":137,"./d3":139,"./i18n/i18n":143,"./layout":147,"./node-drag-handler":148,"./templates":151,"./text-drag-handler":153,"./tooltip":154,"hammerjs":"hammerjs","sd-model":"sd-model","sd-utils":"sd-utils"}]},{},[83])(83)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZC9hdXRvLWJpbmQuanMiLCJub2RlX21vZHVsZXMvZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L2FycmF5LyMvY2xlYXIuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9hcnJheS8jL2UtaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9hcnJheS9mcm9tL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvYXJyYXkvZnJvbS9pcy1pbXBsZW1lbnRlZC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L2FycmF5L2Zyb20vc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L2Z1bmN0aW9uL2lzLWFyZ3VtZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L2Z1bmN0aW9uL2lzLWZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvZnVuY3Rpb24vbm9vcC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L21hdGgvc2lnbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L21hdGgvc2lnbi9pcy1pbXBsZW1lbnRlZC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L21hdGgvc2lnbi9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvbnVtYmVyL2lzLW5hbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L251bWJlci9pcy1uYW4vaXMtaW1wbGVtZW50ZWQuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9udW1iZXIvaXMtbmFuL3NoaW0uanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9udW1iZXIvdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L251bWJlci90by1wb3MtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9faXRlcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9hc3NpZ24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL2lzLWltcGxlbWVudGVkLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2NvcHkuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Zvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2lzLWNhbGxhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2lzLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9pcy12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvaXMtaW1wbGVtZW50ZWQuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L21hcC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YvaXMtaW1wbGVtZW50ZWQuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9pcy1pbXBsZW1lbnRlZC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL3NoaW0uanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvaXMtc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1pdGVyYXRvci9hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9lczYtaXRlcmF0b3IvZm9yLW9mLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1pdGVyYXRvci9nZXQuanMiLCJub2RlX21vZHVsZXMvZXM2LWl0ZXJhdG9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VzNi1pdGVyYXRvci9pcy1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9lczYtaXRlcmF0b3Ivc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1pdGVyYXRvci92YWxpZC1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9lczYtc2V0L2ltcGxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9lczYtc2V0L2lzLWltcGxlbWVudGVkLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1zZXQvaXMtbmF0aXZlLWltcGxlbWVudGVkLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1zZXQvbGliL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1zZXQvcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvZXM2LXN5bWJvbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczYtc3ltYm9sL2lzLWltcGxlbWVudGVkLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1zeW1ib2wvaXMtc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2VzNi1zeW1ib2wvcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvZXM2LXN5bWJvbC92YWxpZGF0ZS1zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvZXZlbnQtZW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9qcXVlcnktdWkvdWkvZGF0YS5qcyIsInBhY2thZ2UuanNvbiIsInNyYy9hcHAtdXRpbHMuanMiLCJzcmMvYXBwLmpzIiwic3JjL2F1dG9jb21wbGV0ZS5qcyIsInNyYy9kMy5qcyIsInNyYy9kaWFsb2dzL2Fib3V0LWRpYWxvZy5qcyIsInNyYy9kaWFsb2dzL2RlZmluaXRpb25zLWRpYWxvZy5qcyIsInNyYy9kaWFsb2dzL2RpYWxvZy5qcyIsInNyYy9kaWFsb2dzL3NlbnNpdGl2aXR5LWFuYWx5c2lzLWRpYWxvZy5qcyIsInNyYy9kaWFsb2dzL3NldHRpbmdzLWRpYWxvZy5qcyIsInNyYy9leHBvcnRlci5qcyIsInNyYy9maWxlLWxvYWRlci5qcyIsInNyYy9mb3JtL2lucHV0LWZpZWxkLmpzIiwic3JjL2Zvcm0vcGF0aC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNyYy9pMThuL2RlLmpzb24iLCJzcmMvaTE4bi9lbi5qc29uIiwic3JjL2kxOG4vZnIuanNvbiIsInNyYy9pMThuL2kxOG4uanMiLCJzcmMvaTE4bi9pdC5qc29uIiwic3JjL2kxOG4vcGwuanNvbiIsInNyYy9pbmRleC5qcyIsInNyYy9qb2JzL2pvYi1wYXJhbWV0ZXJzLWJ1aWxkZXIuanMiLCJzcmMvam9icy9qb2ItcmVzdWx0LXRhYmxlLmpzIiwic3JjL2pvYnMvcHJvYmFiaWxpc3RpYy1zZW5zaXRpdml0eS1hbmFseXNpcy1yZXN1bHQtdGFibGUuanMiLCJzcmMvam9icy9zZW5zaXRpdml0eS1hbmFseXNpcy1yZXN1bHQtdGFibGUuanMiLCJzcmMvam9icy9zcGlkZXItcGxvdC5qcyIsInNyYy9qb2JzL3Rvcm5hZG8tZGlhZ3JhbS1wbG90LmpzIiwic3JjL2xlYWd1ZS10YWJsZS9sZWFndWUtdGFibGUtZGlhbG9nLmpzIiwic3JjL2xlYWd1ZS10YWJsZS9sZWFndWUtdGFibGUtcGxvdC5qcyIsInNyYy9sZWFndWUtdGFibGUvbGVhZ3VlLXRhYmxlLmpzIiwic3JjL2xvYWRpbmctaW5kaWNhdG9yLmpzIiwic3JjL3Bpdm90LXRhYmxlLmpzIiwic3JjL3NpZGViYXIuanMiLCJzcmMvdGVtcGxhdGVzLmpzIiwic3JjL3RlbXBsYXRlcy9hYm91dC9kZS5odG1sIiwic3JjL3RlbXBsYXRlcy9hYm91dC9lbi5odG1sIiwic3JjL3RlbXBsYXRlcy9hYm91dC9mci5odG1sIiwic3JjL3RlbXBsYXRlcy9hYm91dC9pdC5odG1sIiwic3JjL3RlbXBsYXRlcy9hYm91dC9wbC5odG1sIiwic3JjL3RlbXBsYXRlcy9hYm91dF9kaWFsb2cuaHRtbCIsInNyYy90ZW1wbGF0ZXMvZGVmaW5pdGlvbnNfZGlhbG9nLmh0bWwiLCJzcmMvdGVtcGxhdGVzL2V2YWx1YXRlZF92YXJpYWJsZXMuaHRtbCIsInNyYy90ZW1wbGF0ZXMvZnVsbHNjcmVlbl9wb3B1cC5odG1sIiwic3JjL3RlbXBsYXRlcy9oZWxwLmh0bWwiLCJzcmMvdGVtcGxhdGVzL2lucHV0X2dyb3VwLmh0bWwiLCJzcmMvdGVtcGxhdGVzL2pvYnMvam9iX3BhcmFtZXRlci5odG1sIiwic3JjL3RlbXBsYXRlcy9qb2JzL2pvYl9wYXJhbWV0ZXJzX2J1aWxkZXIuaHRtbCIsInNyYy90ZW1wbGF0ZXMvbGVhZ3VlX3RhYmxlX2RpYWxvZy5odG1sIiwic3JjL3RlbXBsYXRlcy9sb2FkaW5nX2luZGljYXRvci5odG1sIiwic3JjL3RlbXBsYXRlcy9tYWluLmh0bWwiLCJzcmMvdGVtcGxhdGVzL3NlbGVjdF9pbnB1dF9ncm91cC5odG1sIiwic3JjL3RlbXBsYXRlcy9zZW5zaXRpdml0eV9hbmFseXNpc19kaWFsb2cuaHRtbCIsInNyYy90ZW1wbGF0ZXMvc2V0dGluZ3NfZGlhbG9nLmh0bWwiLCJzcmMvdGVtcGxhdGVzL3NldHRpbmdzX2RpYWxvZ19mb3JtX2dyb3VwLmh0bWwiLCJzcmMvdGVtcGxhdGVzL3NpZGViYXIvZGVmaW5pdGlvbnMuaHRtbCIsInNyYy90ZW1wbGF0ZXMvc2lkZWJhci9kaWFncmFtX2RldGFpbHNfYm94Lmh0bWwiLCJzcmMvdGVtcGxhdGVzL3NpZGViYXIvbGF5b3V0X29wdGlvbnMuaHRtbCIsInNyYy90ZW1wbGF0ZXMvc2lkZWJhci9tdWx0aXBsZV9jcml0ZXJpYS5odG1sIiwic3JjL3RlbXBsYXRlcy9zaWRlYmFyL29iamVjdF9wcm9wZXJ0aWVzLmh0bWwiLCJzcmMvdGVtcGxhdGVzL3NpZGViYXIvc2lkZWJhci5odG1sIiwic3JjL3RlbXBsYXRlcy90b29sYmFyLmh0bWwiLCJzcmMvdGVtcGxhdGVzL3dhcm5pbmdfbWVzc2FnZS5odG1sIiwic3JjL3Rvb2xiYXIuanMiLCJzcmMvdmFsaWRhdGlvbi9udW1iZXItaW5wdXQtdmFsaWRhdG9yLmpzIiwic3JjL3ZhbGlkYXRpb24vcGF5b2ZmLWlucHV0LXZhbGlkYXRvci5qcyIsInNyYy92YWxpZGF0aW9uL3Byb2JhYmlsaXR5LWlucHV0LXZhbGlkYXRvci5qcyIsInNyYy92YWxpZGF0aW9uL3JlcXVpcmVkLWlucHV0LXZhbGlkYXRvci5qcyIsInRtcC9idWlsZC1jb25maWcuanMiLCIuLi9zZC10cmVlLWRlc2lnbmVyL2luZGV4LmpzIiwiLi4vc2QtdHJlZS1kZXNpZ25lci9zcmMvYXBwLXV0aWxzLmpzIiwiLi4vc2QtdHJlZS1kZXNpZ25lci9zcmMvY29udGV4dC1tZW51L2NvbnRleHQtbWVudS5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2NvbnRleHQtbWVudS9lZGdlLWNvbnRleHQtbWVudS5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2NvbnRleHQtbWVudS9tYWluLWNvbnRleHQtbWVudS5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2NvbnRleHQtbWVudS9ub2RlLWNvbnRleHQtbWVudS5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2NvbnRleHQtbWVudS90ZXh0LWNvbnRleHQtbWVudS5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2QzLWV4dGVuc2lvbnMuanMiLCIuLi9zZC10cmVlLWRlc2lnbmVyL3NyYy9kMy5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2kxOG4vZGUuanNvbiIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2kxOG4vZW4uanNvbiIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2kxOG4vZnIuanNvbiIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2kxOG4vaTE4bi5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2kxOG4vaXQuanNvbiIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2kxOG4vcGwuanNvbiIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL2luZGV4LmpzIiwiLi4vc2QtdHJlZS1kZXNpZ25lci9zcmMvbGF5b3V0LmpzIiwiLi4vc2QtdHJlZS1kZXNpZ25lci9zcmMvbm9kZS1kcmFnLWhhbmRsZXIuanMiLCIuLi9zZC10cmVlLWRlc2lnbmVyL3NyYy9zeW1ib2xzL2NpcmNsZS5qcyIsIi4uL3NkLXRyZWUtZGVzaWduZXIvc3JjL3N5bWJvbHMvdHJpYW5nbGUuanMiLCIuLi9zZC10cmVlLWRlc2lnbmVyL3NyYy90ZW1wbGF0ZXMuanMiLCIuLi9zZC10cmVlLWRlc2lnbmVyL3NyYy90ZW1wbGF0ZXMvZ3Jvd2xfbWVzc2FnZS5odG1sIiwiLi4vc2QtdHJlZS1kZXNpZ25lci9zcmMvdGV4dC1kcmFnLWhhbmRsZXIuanMiLCIuLi9zZC10cmVlLWRlc2lnbmVyL3NyYy90b29sdGlwLmpzIiwiLi4vc2QtdHJlZS1kZXNpZ25lci9zcmMvdHJlZS1kZXNpZ25lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0dBOztJLEFBQVk7O0FBQ1o7O0ksQUFBWTs7QUFDWjs7QUFDQTs7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9pQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlpQkE7Ozs7QUFDQTs7SSxBQUFZOztBQUNaOztJLEFBQVk7O0FBQ1o7O0ksQUFBWTs7QUFDWjs7SSxBQUFZOztBQUNaOztJLEFBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJLEFBRUMsZSxBQUFBOzs7Ozs7OzZCLEFBS0csS0FBSSxBQUNaO2lCQUFBLEFBQUssV0FBTCxBQUFnQixBQUNoQjtpQkFBQSxBQUFLLDhCQUFZLEFBQVE7cUJBQWUsQUFDL0IsQUFDTDs2QkFGb0MsQUFFdkIsQUFDYjs7O3FDQUFXLEFBQ0gsQUFDYSxBQUVqQjtBQUhJLEFBQ0E7O3FDQUZHLEFBSUgsQUFDYSxBQUVqQjtBQUhJLEFBQ0E7O3FDQUxHLEFBT0gsQUFDYSxBQUVqQjtBQUhJLEFBQ0E7O3FDQVJHLEFBVUgsQUFDYSxBQUVqQjtBQUhJLEFBQ0E7O3FDQWRLLEFBQXVCLEFBR3pCLEFBYUgsQUFDYTtBQURiLEFBQ0E7QUFkRyxBQUNQO0FBSmdDLEFBQ3BDLGFBRGEsRUFvQmQsVUFBQSxBQUFDLEtBQUQsQUFBTSxHQUFNLEFBQ2QsQ0FyQkQsQUFBaUIsQUFzQnBCOzs7OzBCLEFBRVEsSyxBQUFLLEtBQUksQUFDZDttQkFBTyxLQUFBLEFBQUssVUFBTCxBQUFlLEVBQWYsQUFBaUIsS0FBeEIsQUFBTyxBQUFzQixBQUNoQzs7Ozs7Ozs7QUN4Q0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDN2lCQTs7QUFDQTs7QUFDQTs7QUFIQSxRQUFBLEFBQVE7O0FBSVIsNkJBQUEsQUFBYTs7QUFFYixTQUFBLEFBQUk7QUFDSixPQUFBLEFBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUFA7O0FB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Q0FBaEI7QUFDQSxnQkFBSSxVQUFVLEtBQVYsRUFBSixFQUF1QjtBQUNuQix1QkFBTyxhQUFhLGNBQWIsQ0FBNEIsTUFBNUIsRUFBb0MsUUFBcEMsRUFBOEMsTUFBOUMsQ0FBUDtBQUNIO0FBQ0QsbUJBQU8sU0FBUDtBQUNIOzs7Ozs7Ozs7Ozs7Ozs7QUN6RUw7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0FBeUIsR0FBbEMsQ0FBSjtBQUNIO0FBQ0QsbUJBQU8sQ0FBUDtBQUNIIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvcHkgICAgICAgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9jb3B5JylcbiAgLCBub3JtYWxpemVPcHRpb25zID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMnKVxuICAsIGVuc3VyZUNhbGxhYmxlICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZScpXG4gICwgbWFwICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L21hcCcpXG4gICwgY2FsbGFibGUgICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlJylcbiAgLCB2YWxpZFZhbHVlICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtdmFsdWUnKVxuXG4gICwgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIGRlZmluZTtcblxuZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlc2MsIG9wdGlvbnMpIHtcblx0dmFyIHZhbHVlID0gdmFsaWRWYWx1ZShkZXNjKSAmJiBjYWxsYWJsZShkZXNjLnZhbHVlKSwgZGdzO1xuXHRkZ3MgPSBjb3B5KGRlc2MpO1xuXHRkZWxldGUgZGdzLndyaXRhYmxlO1xuXHRkZWxldGUgZGdzLnZhbHVlO1xuXHRkZ3MuZ2V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICghb3B0aW9ucy5vdmVyd3JpdGVEZWZpbml0aW9uICYmIGhhc093blByb3BlcnR5LmNhbGwodGhpcywgbmFtZSkpIHJldHVybiB2YWx1ZTtcblx0XHRkZXNjLnZhbHVlID0gYmluZC5jYWxsKHZhbHVlLCBvcHRpb25zLnJlc29sdmVDb250ZXh0ID8gb3B0aW9ucy5yZXNvbHZlQ29udGV4dCh0aGlzKSA6IHRoaXMpO1xuXHRcdGRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIGRlc2MpO1xuXHRcdHJldHVybiB0aGlzW25hbWVdO1xuXHR9O1xuXHRyZXR1cm4gZGdzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocHJvcHMvKiwgb3B0aW9ucyovKSB7XG5cdHZhciBvcHRpb25zID0gbm9ybWFsaXplT3B0aW9ucyhhcmd1bWVudHNbMV0pO1xuXHRpZiAob3B0aW9ucy5yZXNvbHZlQ29udGV4dCAhPSBudWxsKSBlbnN1cmVDYWxsYWJsZShvcHRpb25zLnJlc29sdmVDb250ZXh0KTtcblx0cmV0dXJuIG1hcChwcm9wcywgZnVuY3Rpb24gKGRlc2MsIG5hbWUpIHsgcmV0dXJuIGRlZmluZShuYW1lLCBkZXNjLCBvcHRpb25zKTsgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L2Fzc2lnbicpXG4gICwgbm9ybWFsaXplT3B0cyA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L25vcm1hbGl6ZS1vcHRpb25zJylcbiAgLCBpc0NhbGxhYmxlICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvaXMtY2FsbGFibGUnKVxuICAsIGNvbnRhaW5zICAgICAgPSByZXF1aXJlKCdlczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zJylcblxuICAsIGQ7XG5cbmQgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkc2NyLCB2YWx1ZS8qLCBvcHRpb25zKi8pIHtcblx0dmFyIGMsIGUsIHcsIG9wdGlvbnMsIGRlc2M7XG5cdGlmICgoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHx8ICh0eXBlb2YgZHNjciAhPT0gJ3N0cmluZycpKSB7XG5cdFx0b3B0aW9ucyA9IHZhbHVlO1xuXHRcdHZhbHVlID0gZHNjcjtcblx0XHRkc2NyID0gbnVsbDtcblx0fSBlbHNlIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzWzJdO1xuXHR9XG5cdGlmIChkc2NyID09IG51bGwpIHtcblx0XHRjID0gdyA9IHRydWU7XG5cdFx0ZSA9IGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdGMgPSBjb250YWlucy5jYWxsKGRzY3IsICdjJyk7XG5cdFx0ZSA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ2UnKTtcblx0XHR3ID0gY29udGFpbnMuY2FsbChkc2NyLCAndycpO1xuXHR9XG5cblx0ZGVzYyA9IHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IGMsIGVudW1lcmFibGU6IGUsIHdyaXRhYmxlOiB3IH07XG5cdHJldHVybiAhb3B0aW9ucyA/IGRlc2MgOiBhc3NpZ24obm9ybWFsaXplT3B0cyhvcHRpb25zKSwgZGVzYyk7XG59O1xuXG5kLmdzID0gZnVuY3Rpb24gKGRzY3IsIGdldCwgc2V0LyosIG9wdGlvbnMqLykge1xuXHR2YXIgYywgZSwgb3B0aW9ucywgZGVzYztcblx0aWYgKHR5cGVvZiBkc2NyICE9PSAnc3RyaW5nJykge1xuXHRcdG9wdGlvbnMgPSBzZXQ7XG5cdFx0c2V0ID0gZ2V0O1xuXHRcdGdldCA9IGRzY3I7XG5cdFx0ZHNjciA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1szXTtcblx0fVxuXHRpZiAoZ2V0ID09IG51bGwpIHtcblx0XHRnZXQgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoZ2V0KSkge1xuXHRcdG9wdGlvbnMgPSBnZXQ7XG5cdFx0Z2V0ID0gc2V0ID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKHNldCA9PSBudWxsKSB7XG5cdFx0c2V0ID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKHNldCkpIHtcblx0XHRvcHRpb25zID0gc2V0O1xuXHRcdHNldCA9IHVuZGVmaW5lZDtcblx0fVxuXHRpZiAoZHNjciA9PSBudWxsKSB7XG5cdFx0YyA9IHRydWU7XG5cdFx0ZSA9IGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdGMgPSBjb250YWlucy5jYWxsKGRzY3IsICdjJyk7XG5cdFx0ZSA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ2UnKTtcblx0fVxuXG5cdGRlc2MgPSB7IGdldDogZ2V0LCBzZXQ6IHNldCwgY29uZmlndXJhYmxlOiBjLCBlbnVtZXJhYmxlOiBlIH07XG5cdHJldHVybiAhb3B0aW9ucyA/IGRlc2MgOiBhc3NpZ24obm9ybWFsaXplT3B0cyhvcHRpb25zKSwgZGVzYyk7XG59O1xuIiwiLy8gSW5zcGlyZWQgYnkgR29vZ2xlIENsb3N1cmU6XG4vLyBodHRwOi8vY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL3N2bi9kb2NzL1xuLy8gY2xvc3VyZV9nb29nX2FycmF5X2FycmF5LmpzLmh0bWwjZ29vZy5hcnJheS5jbGVhclxuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHZhbHVlID0gcmVxdWlyZShcIi4uLy4uL29iamVjdC92YWxpZC12YWx1ZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHZhbHVlKHRoaXMpLmxlbmd0aCA9IDA7XG5cdHJldHVybiB0aGlzO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbnVtYmVySXNOYU4gICAgICAgPSByZXF1aXJlKFwiLi4vLi4vbnVtYmVyL2lzLW5hblwiKVxuICAsIHRvUG9zSW50ICAgICAgICAgID0gcmVxdWlyZShcIi4uLy4uL251bWJlci90by1wb3MtaW50ZWdlclwiKVxuICAsIHZhbHVlICAgICAgICAgICAgID0gcmVxdWlyZShcIi4uLy4uL29iamVjdC92YWxpZC12YWx1ZVwiKVxuICAsIGluZGV4T2YgICAgICAgICAgID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2ZcbiAgLCBvYmpIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBhYnMgICAgICAgICAgICAgICA9IE1hdGguYWJzXG4gICwgZmxvb3IgICAgICAgICAgICAgPSBNYXRoLmZsb29yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXgqLykge1xuXHR2YXIgaSwgbGVuZ3RoLCBmcm9tSW5kZXgsIHZhbDtcblx0aWYgKCFudW1iZXJJc05hTihzZWFyY2hFbGVtZW50KSkgcmV0dXJuIGluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuXHRsZW5ndGggPSB0b1Bvc0ludCh2YWx1ZSh0aGlzKS5sZW5ndGgpO1xuXHRmcm9tSW5kZXggPSBhcmd1bWVudHNbMV07XG5cdGlmIChpc05hTihmcm9tSW5kZXgpKSBmcm9tSW5kZXggPSAwO1xuXHRlbHNlIGlmIChmcm9tSW5kZXggPj0gMCkgZnJvbUluZGV4ID0gZmxvb3IoZnJvbUluZGV4KTtcblx0ZWxzZSBmcm9tSW5kZXggPSB0b1Bvc0ludCh0aGlzLmxlbmd0aCkgLSBmbG9vcihhYnMoZnJvbUluZGV4KSk7XG5cblx0Zm9yIChpID0gZnJvbUluZGV4OyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRpZiAob2JqSGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBpKSkge1xuXHRcdFx0dmFsID0gdGhpc1tpXTtcblx0XHRcdGlmIChudW1iZXJJc05hTih2YWwpKSByZXR1cm4gaTsgLy8gSnNsaW50OiBpZ25vcmVcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2lzLWltcGxlbWVudGVkXCIpKClcblx0PyBBcnJheS5mcm9tXG5cdDogcmVxdWlyZShcIi4vc2hpbVwiKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGZyb20gPSBBcnJheS5mcm9tLCBhcnIsIHJlc3VsdDtcblx0aWYgKHR5cGVvZiBmcm9tICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBmYWxzZTtcblx0YXJyID0gW1wicmF6XCIsIFwiZHdhXCJdO1xuXHRyZXN1bHQgPSBmcm9tKGFycik7XG5cdHJldHVybiBCb29sZWFuKHJlc3VsdCAmJiAocmVzdWx0ICE9PSBhcnIpICYmIChyZXN1bHRbMV0gPT09IFwiZHdhXCIpKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGl0ZXJhdG9yU3ltYm9sID0gcmVxdWlyZShcImVzNi1zeW1ib2xcIikuaXRlcmF0b3JcbiAgLCBpc0FyZ3VtZW50cyAgICA9IHJlcXVpcmUoXCIuLi8uLi9mdW5jdGlvbi9pcy1hcmd1bWVudHNcIilcbiAgLCBpc0Z1bmN0aW9uICAgICA9IHJlcXVpcmUoXCIuLi8uLi9mdW5jdGlvbi9pcy1mdW5jdGlvblwiKVxuICAsIHRvUG9zSW50ICAgICAgID0gcmVxdWlyZShcIi4uLy4uL251bWJlci90by1wb3MtaW50ZWdlclwiKVxuICAsIGNhbGxhYmxlICAgICAgID0gcmVxdWlyZShcIi4uLy4uL29iamVjdC92YWxpZC1jYWxsYWJsZVwiKVxuICAsIHZhbGlkVmFsdWUgICAgID0gcmVxdWlyZShcIi4uLy4uL29iamVjdC92YWxpZC12YWx1ZVwiKVxuICAsIGlzVmFsdWUgICAgICAgID0gcmVxdWlyZShcIi4uLy4uL29iamVjdC9pcy12YWx1ZVwiKVxuICAsIGlzU3RyaW5nICAgICAgID0gcmVxdWlyZShcIi4uLy4uL3N0cmluZy9pcy1zdHJpbmdcIilcbiAgLCBpc0FycmF5ICAgICAgICA9IEFycmF5LmlzQXJyYXlcbiAgLCBjYWxsICAgICAgICAgICA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsXG4gICwgZGVzYyAgICAgICAgICAgPSB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBudWxsIH1cbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFycmF5TGlrZSAvKiwgbWFwRm4sIHRoaXNBcmcqLykge1xuXHR2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV1cblx0ICAsIHRoaXNBcmcgPSBhcmd1bWVudHNbMl1cblx0ICAsIENvbnRleHRcblx0ICAsIGlcblx0ICAsIGpcblx0ICAsIGFyclxuXHQgICwgbGVuZ3RoXG5cdCAgLCBjb2RlXG5cdCAgLCBpdGVyYXRvclxuXHQgICwgcmVzdWx0XG5cdCAgLCBnZXRJdGVyYXRvclxuXHQgICwgdmFsdWU7XG5cblx0YXJyYXlMaWtlID0gT2JqZWN0KHZhbGlkVmFsdWUoYXJyYXlMaWtlKSk7XG5cblx0aWYgKGlzVmFsdWUobWFwRm4pKSBjYWxsYWJsZShtYXBGbik7XG5cdGlmICghdGhpcyB8fCB0aGlzID09PSBBcnJheSB8fCAhaXNGdW5jdGlvbih0aGlzKSkge1xuXHRcdC8vIFJlc3VsdDogUGxhaW4gYXJyYXlcblx0XHRpZiAoIW1hcEZuKSB7XG5cdFx0XHRpZiAoaXNBcmd1bWVudHMoYXJyYXlMaWtlKSkge1xuXHRcdFx0XHQvLyBTb3VyY2U6IEFyZ3VtZW50c1xuXHRcdFx0XHRsZW5ndGggPSBhcnJheUxpa2UubGVuZ3RoO1xuXHRcdFx0XHRpZiAobGVuZ3RoICE9PSAxKSByZXR1cm4gQXJyYXkuYXBwbHkobnVsbCwgYXJyYXlMaWtlKTtcblx0XHRcdFx0YXJyID0gbmV3IEFycmF5KDEpO1xuXHRcdFx0XHRhcnJbMF0gPSBhcnJheUxpa2VbMF07XG5cdFx0XHRcdHJldHVybiBhcnI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXNBcnJheShhcnJheUxpa2UpKSB7XG5cdFx0XHRcdC8vIFNvdXJjZTogQXJyYXlcblx0XHRcdFx0YXJyID0gbmV3IEFycmF5KGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGgpO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIGFycltpXSA9IGFycmF5TGlrZVtpXTtcblx0XHRcdFx0cmV0dXJuIGFycjtcblx0XHRcdH1cblx0XHR9XG5cdFx0YXJyID0gW107XG5cdH0gZWxzZSB7XG5cdFx0Ly8gUmVzdWx0OiBOb24gcGxhaW4gYXJyYXlcblx0XHRDb250ZXh0ID0gdGhpcztcblx0fVxuXG5cdGlmICghaXNBcnJheShhcnJheUxpa2UpKSB7XG5cdFx0aWYgKChnZXRJdGVyYXRvciA9IGFycmF5TGlrZVtpdGVyYXRvclN5bWJvbF0pICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdC8vIFNvdXJjZTogSXRlcmF0b3Jcblx0XHRcdGl0ZXJhdG9yID0gY2FsbGFibGUoZ2V0SXRlcmF0b3IpLmNhbGwoYXJyYXlMaWtlKTtcblx0XHRcdGlmIChDb250ZXh0KSBhcnIgPSBuZXcgQ29udGV4dCgpO1xuXHRcdFx0cmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuXHRcdFx0aSA9IDA7XG5cdFx0XHR3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG5cdFx0XHRcdHZhbHVlID0gbWFwRm4gPyBjYWxsLmNhbGwobWFwRm4sIHRoaXNBcmcsIHJlc3VsdC52YWx1ZSwgaSkgOiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdGlmIChDb250ZXh0KSB7XG5cdFx0XHRcdFx0ZGVzYy52YWx1ZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGRlZmluZVByb3BlcnR5KGFyciwgaSwgZGVzYyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YXJyW2ldID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuXHRcdFx0XHQrK2k7XG5cdFx0XHR9XG5cdFx0XHRsZW5ndGggPSBpO1xuXHRcdH0gZWxzZSBpZiAoaXNTdHJpbmcoYXJyYXlMaWtlKSkge1xuXHRcdFx0Ly8gU291cmNlOiBTdHJpbmdcblx0XHRcdGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG5cdFx0XHRpZiAoQ29udGV4dCkgYXJyID0gbmV3IENvbnRleHQoKTtcblx0XHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dmFsdWUgPSBhcnJheUxpa2VbaV07XG5cdFx0XHRcdGlmIChpICsgMSA8IGxlbmd0aCkge1xuXHRcdFx0XHRcdGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApO1xuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtZGVwdGhcblx0XHRcdFx0XHRpZiAoY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRiZmYpIHZhbHVlICs9IGFycmF5TGlrZVsrK2ldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbHVlID0gbWFwRm4gPyBjYWxsLmNhbGwobWFwRm4sIHRoaXNBcmcsIHZhbHVlLCBqKSA6IHZhbHVlO1xuXHRcdFx0XHRpZiAoQ29udGV4dCkge1xuXHRcdFx0XHRcdGRlc2MudmFsdWUgPSB2YWx1ZTtcblx0XHRcdFx0XHRkZWZpbmVQcm9wZXJ0eShhcnIsIGosIGRlc2MpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFycltqXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCsrajtcblx0XHRcdH1cblx0XHRcdGxlbmd0aCA9IGo7XG5cdFx0fVxuXHR9XG5cdGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIFNvdXJjZTogYXJyYXkgb3IgYXJyYXktbGlrZVxuXHRcdGxlbmd0aCA9IHRvUG9zSW50KGFycmF5TGlrZS5sZW5ndGgpO1xuXHRcdGlmIChDb250ZXh0KSBhcnIgPSBuZXcgQ29udGV4dChsZW5ndGgpO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0dmFsdWUgPSBtYXBGbiA/IGNhbGwuY2FsbChtYXBGbiwgdGhpc0FyZywgYXJyYXlMaWtlW2ldLCBpKSA6IGFycmF5TGlrZVtpXTtcblx0XHRcdGlmIChDb250ZXh0KSB7XG5cdFx0XHRcdGRlc2MudmFsdWUgPSB2YWx1ZTtcblx0XHRcdFx0ZGVmaW5lUHJvcGVydHkoYXJyLCBpLCBkZXNjKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFycltpXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZiAoQ29udGV4dCkge1xuXHRcdGRlc2MudmFsdWUgPSBudWxsO1xuXHRcdGFyci5sZW5ndGggPSBsZW5ndGg7XG5cdH1cblx0cmV0dXJuIGFycjtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG9ialRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuICAsIGlkID0gb2JqVG9TdHJpbmcuY2FsbChcblx0KGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzO1xuXHR9KSgpXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IGlkO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLCBpZCA9IG9ialRvU3RyaW5nLmNhbGwocmVxdWlyZShcIi4vbm9vcFwiKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gaWQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eS1mdW5jdGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7fTtcbiIsIi8qIGVzbGludCBzdHJpY3Q6IFwib2ZmXCIgKi9cblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcztcbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pcy1pbXBsZW1lbnRlZFwiKSgpXG5cdD8gTWF0aC5zaWduXG5cdDogcmVxdWlyZShcIi4vc2hpbVwiKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNpZ24gPSBNYXRoLnNpZ247XG5cdGlmICh0eXBlb2Ygc2lnbiAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAoc2lnbigxMCkgPT09IDEpICYmIChzaWduKC0yMCkgPT09IC0xKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXHRpZiAoaXNOYU4odmFsdWUpIHx8ICh2YWx1ZSA9PT0gMCkpIHJldHVybiB2YWx1ZTtcblx0cmV0dXJuIHZhbHVlID4gMCA/IDEgOiAtMTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pcy1pbXBsZW1lbnRlZFwiKSgpXG5cdD8gTnVtYmVyLmlzTmFOXG5cdDogcmVxdWlyZShcIi4vc2hpbVwiKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOO1xuXHRpZiAodHlwZW9mIG51bWJlcklzTmFOICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuICFudW1iZXJJc05hTih7fSkgJiYgbnVtYmVySXNOYU4oTmFOKSAmJiAhbnVtYmVySXNOYU4oMzQpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzaWduID0gcmVxdWlyZShcIi4uL21hdGgvc2lnblwiKVxuXG4gICwgYWJzID0gTWF0aC5hYnMsIGZsb29yID0gTWF0aC5mbG9vcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIDA7XG5cdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0aWYgKCh2YWx1ZSA9PT0gMCkgfHwgIWlzRmluaXRlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXHRyZXR1cm4gc2lnbih2YWx1ZSkgKiBmbG9vcihhYnModmFsdWUpKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoXCIuL3RvLWludGVnZXJcIilcblxuICAsIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuIHJldHVybiBtYXgoMCwgdG9JbnRlZ2VyKHZhbHVlKSk7XG59O1xuIiwiLy8gSW50ZXJuYWwgbWV0aG9kLCB1c2VkIGJ5IGl0ZXJhdGlvbiBmdW5jdGlvbnMuXG4vLyBDYWxscyBhIGZ1bmN0aW9uIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIGZvdW5kIGluIG9iamVjdFxuLy8gT3B0aW9uYWxseSB0YWtlcyBjb21wYXJlRm4gdG8gaXRlcmF0ZSBvYmplY3QgaW4gc3BlY2lmaWMgb3JkZXJcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYWxsYWJsZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3ZhbGlkLWNhbGxhYmxlXCIpXG4gICwgdmFsdWUgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi92YWxpZC12YWx1ZVwiKVxuICAsIGJpbmQgICAgICAgICAgICAgICAgICAgID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgLCBjYWxsICAgICAgICAgICAgICAgICAgICA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsXG4gICwga2V5cyAgICAgICAgICAgICAgICAgICAgPSBPYmplY3Qua2V5c1xuICAsIG9ialByb3BlcnR5SXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBkZWZWYWwpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChvYmosIGNiIC8qLCB0aGlzQXJnLCBjb21wYXJlRm4qLykge1xuXHRcdHZhciBsaXN0LCB0aGlzQXJnID0gYXJndW1lbnRzWzJdLCBjb21wYXJlRm4gPSBhcmd1bWVudHNbM107XG5cdFx0b2JqID0gT2JqZWN0KHZhbHVlKG9iaikpO1xuXHRcdGNhbGxhYmxlKGNiKTtcblxuXHRcdGxpc3QgPSBrZXlzKG9iaik7XG5cdFx0aWYgKGNvbXBhcmVGbikge1xuXHRcdFx0bGlzdC5zb3J0KHR5cGVvZiBjb21wYXJlRm4gPT09IFwiZnVuY3Rpb25cIiA/IGJpbmQuY2FsbChjb21wYXJlRm4sIG9iaikgOiB1bmRlZmluZWQpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIG1ldGhvZCAhPT0gXCJmdW5jdGlvblwiKSBtZXRob2QgPSBsaXN0W21ldGhvZF07XG5cdFx0cmV0dXJuIGNhbGwuY2FsbChtZXRob2QsIGxpc3QsIGZ1bmN0aW9uIChrZXksIGluZGV4KSB7XG5cdFx0XHRpZiAoIW9ialByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBrZXkpKSByZXR1cm4gZGVmVmFsO1xuXHRcdFx0cmV0dXJuIGNhbGwuY2FsbChjYiwgdGhpc0FyZywgb2JqW2tleV0sIGtleSwgb2JqLCBpbmRleCk7XG5cdFx0fSk7XG5cdH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaXMtaW1wbGVtZW50ZWRcIikoKVxuXHQ/IE9iamVjdC5hc3NpZ25cblx0OiByZXF1aXJlKFwiLi9zaGltXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbiwgb2JqO1xuXHRpZiAodHlwZW9mIGFzc2lnbiAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gZmFsc2U7XG5cdG9iaiA9IHsgZm9vOiBcInJhelwiIH07XG5cdGFzc2lnbihvYmosIHsgYmFyOiBcImR3YVwiIH0sIHsgdHJ6eTogXCJ0cnp5XCIgfSk7XG5cdHJldHVybiAob2JqLmZvbyArIG9iai5iYXIgKyBvYmoudHJ6eSkgPT09IFwicmF6ZHdhdHJ6eVwiO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIga2V5cyAgPSByZXF1aXJlKFwiLi4va2V5c1wiKVxuICAsIHZhbHVlID0gcmVxdWlyZShcIi4uL3ZhbGlkLXZhbHVlXCIpXG4gICwgbWF4ICAgPSBNYXRoLm1heDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVzdCwgc3JjIC8qLCDigKZzcmNuKi8pIHtcblx0dmFyIGVycm9yLCBpLCBsZW5ndGggPSBtYXgoYXJndW1lbnRzLmxlbmd0aCwgMiksIGFzc2lnbjtcblx0ZGVzdCA9IE9iamVjdCh2YWx1ZShkZXN0KSk7XG5cdGFzc2lnbiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHR0cnkge1xuXHRcdFx0ZGVzdFtrZXldID0gc3JjW2tleV07XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlO1xuXHRcdH1cblx0fTtcblx0Zm9yIChpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0c3JjID0gYXJndW1lbnRzW2ldO1xuXHRcdGtleXMoc3JjKS5mb3JFYWNoKGFzc2lnbik7XG5cdH1cblx0aWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGVycm9yO1xuXHRyZXR1cm4gZGVzdDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGFGcm9tICA9IHJlcXVpcmUoXCIuLi9hcnJheS9mcm9tXCIpXG4gICwgYXNzaWduID0gcmVxdWlyZShcIi4vYXNzaWduXCIpXG4gICwgdmFsdWUgID0gcmVxdWlyZShcIi4vdmFsaWQtdmFsdWVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iai8qLCBwcm9wZXJ0eU5hbWVzLCBvcHRpb25zKi8pIHtcblx0dmFyIGNvcHkgPSBPYmplY3QodmFsdWUob2JqKSksIHByb3BlcnR5TmFtZXMgPSBhcmd1bWVudHNbMV0sIG9wdGlvbnMgPSBPYmplY3QoYXJndW1lbnRzWzJdKTtcblx0aWYgKGNvcHkgIT09IG9iaiAmJiAhcHJvcGVydHlOYW1lcykgcmV0dXJuIGNvcHk7XG5cdHZhciByZXN1bHQgPSB7fTtcblx0aWYgKHByb3BlcnR5TmFtZXMpIHtcblx0XHRhRnJvbShwcm9wZXJ0eU5hbWVzLCBmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5lbnN1cmUgfHwgcHJvcGVydHlOYW1lIGluIG9iaikgcmVzdWx0W3Byb3BlcnR5TmFtZV0gPSBvYmpbcHJvcGVydHlOYW1lXTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRhc3NpZ24ocmVzdWx0LCBvYmopO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gV29ya2Fyb3VuZCBmb3IgaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjgwNFxuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsIHNoaW07XG5cbmlmICghcmVxdWlyZShcIi4vc2V0LXByb3RvdHlwZS1vZi9pcy1pbXBsZW1lbnRlZFwiKSgpKSB7XG5cdHNoaW0gPSByZXF1aXJlKFwiLi9zZXQtcHJvdG90eXBlLW9mL3NoaW1cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIG51bGxPYmplY3QsIHBvbHlQcm9wcywgZGVzYztcblx0aWYgKCFzaGltKSByZXR1cm4gY3JlYXRlO1xuXHRpZiAoc2hpbS5sZXZlbCAhPT0gMSkgcmV0dXJuIGNyZWF0ZTtcblxuXHRudWxsT2JqZWN0ID0ge307XG5cdHBvbHlQcm9wcyA9IHt9O1xuXHRkZXNjID0ge1xuXHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0dmFsdWU6IHVuZGVmaW5lZFxuXHR9O1xuXHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0aWYgKG5hbWUgPT09IFwiX19wcm90b19fXCIpIHtcblx0XHRcdHBvbHlQcm9wc1tuYW1lXSA9IHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiB1bmRlZmluZWRcblx0XHRcdH07XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHBvbHlQcm9wc1tuYW1lXSA9IGRlc2M7XG5cdH0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhudWxsT2JqZWN0LCBwb2x5UHJvcHMpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaGltLCBcIm51bGxQb2x5ZmlsbFwiLCB7XG5cdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0dmFsdWU6IG51bGxPYmplY3Rcblx0fSk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChwcm90b3R5cGUsIHByb3BzKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZShwcm90b3R5cGUgPT09IG51bGwgPyBudWxsT2JqZWN0IDogcHJvdG90eXBlLCBwcm9wcyk7XG5cdH07XG59KCkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vX2l0ZXJhdGVcIikoXCJmb3JFYWNoXCIpO1xuIiwiLy8gRGVwcmVjYXRlZFxuXG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIjtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzVmFsdWUgPSByZXF1aXJlKFwiLi9pcy12YWx1ZVwiKTtcblxudmFyIG1hcCA9IHsgZnVuY3Rpb246IHRydWUsIG9iamVjdDogdHJ1ZSB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gKGlzVmFsdWUodmFsdWUpICYmIG1hcFt0eXBlb2YgdmFsdWVdKSB8fCBmYWxzZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF91bmRlZmluZWQgPSByZXF1aXJlKFwiLi4vZnVuY3Rpb24vbm9vcFwiKSgpOyAvLyBTdXBwb3J0IEVTMyBlbmdpbmVzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbCkge1xuIHJldHVybiAodmFsICE9PSBfdW5kZWZpbmVkKSAmJiAodmFsICE9PSBudWxsKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pcy1pbXBsZW1lbnRlZFwiKSgpXG5cdD8gT2JqZWN0LmtleXNcblx0OiByZXF1aXJlKFwiLi9zaGltXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR0cnkge1xuXHRcdE9iamVjdC5rZXlzKFwicHJpbWl0aXZlXCIpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG4gcmV0dXJuIGZhbHNlO1xufVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNWYWx1ZSA9IHJlcXVpcmUoXCIuLi9pcy12YWx1ZVwiKTtcblxudmFyIGtleXMgPSBPYmplY3Qua2V5cztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG5cdHJldHVybiBrZXlzKGlzVmFsdWUob2JqZWN0KSA/IE9iamVjdChvYmplY3QpIDogb2JqZWN0KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNhbGxhYmxlID0gcmVxdWlyZShcIi4vdmFsaWQtY2FsbGFibGVcIilcbiAgLCBmb3JFYWNoICA9IHJlcXVpcmUoXCIuL2Zvci1lYWNoXCIpXG4gICwgY2FsbCAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBjYiAvKiwgdGhpc0FyZyovKSB7XG5cdHZhciByZXN1bHQgPSB7fSwgdGhpc0FyZyA9IGFyZ3VtZW50c1syXTtcblx0Y2FsbGFibGUoY2IpO1xuXHRmb3JFYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXksIHRhcmdldE9iaiwgaW5kZXgpIHtcblx0XHRyZXN1bHRba2V5XSA9IGNhbGwuY2FsbChjYiwgdGhpc0FyZywgdmFsdWUsIGtleSwgdGFyZ2V0T2JqLCBpbmRleCk7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNWYWx1ZSA9IHJlcXVpcmUoXCIuL2lzLXZhbHVlXCIpO1xuXG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLCBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG52YXIgcHJvY2VzcyA9IGZ1bmN0aW9uIChzcmMsIG9iaikge1xuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBzcmMpIG9ialtrZXldID0gc3JjW2tleV07XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMxIC8qLCDigKZvcHRpb25zKi8pIHtcblx0dmFyIHJlc3VsdCA9IGNyZWF0ZShudWxsKTtcblx0Zm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHRpZiAoIWlzVmFsdWUob3B0aW9ucykpIHJldHVybjtcblx0XHRwcm9jZXNzKE9iamVjdChvcHRpb25zKSwgcmVzdWx0KTtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaXMtaW1wbGVtZW50ZWRcIikoKVxuXHQ/IE9iamVjdC5zZXRQcm90b3R5cGVPZlxuXHQ6IHJlcXVpcmUoXCIuL3NoaW1cIik7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBwbGFpbk9iamVjdCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKiBDdXN0b21DcmVhdGUqLykge1xuXHR2YXIgc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YsIGN1c3RvbUNyZWF0ZSA9IGFyZ3VtZW50c1swXSB8fCBjcmVhdGU7XG5cdGlmICh0eXBlb2Ygc2V0UHJvdG90eXBlT2YgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gZ2V0UHJvdG90eXBlT2Yoc2V0UHJvdG90eXBlT2YoY3VzdG9tQ3JlYXRlKG51bGwpLCBwbGFpbk9iamVjdCkpID09PSBwbGFpbk9iamVjdDtcbn07XG4iLCIvKiBlc2xpbnQgbm8tcHJvdG86IFwib2ZmXCIgKi9cblxuLy8gQmlnIHRoYW5rcyB0byBAV2ViUmVmbGVjdGlvbiBmb3Igc29ydGluZyB0aGlzIG91dFxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi81NTkzNTU0XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPYmplY3QgICAgICAgID0gcmVxdWlyZShcIi4uL2lzLW9iamVjdFwiKVxuICAsIHZhbHVlICAgICAgICAgICA9IHJlcXVpcmUoXCIuLi92YWxpZC12YWx1ZVwiKVxuICAsIG9iaklzUHJvdG90eXBPZiA9IE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZlxuICAsIGRlZmluZVByb3BlcnR5ICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIG51bGxEZXNjICAgICAgICA9IHtcblx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0d3JpdGFibGU6IHRydWUsXG5cdHZhbHVlOiB1bmRlZmluZWRcbn1cbiAgLCB2YWxpZGF0ZTtcblxudmFsaWRhdGUgPSBmdW5jdGlvbiAob2JqLCBwcm90b3R5cGUpIHtcblx0dmFsdWUob2JqKTtcblx0aWYgKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBpc09iamVjdChwcm90b3R5cGUpKSByZXR1cm4gb2JqO1xuXHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJvdG90eXBlIG11c3QgYmUgbnVsbCBvciBhbiBvYmplY3RcIik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdHZhciBmbiwgc2V0O1xuXHRpZiAoIXN0YXR1cykgcmV0dXJuIG51bGw7XG5cdGlmIChzdGF0dXMubGV2ZWwgPT09IDIpIHtcblx0XHRpZiAoc3RhdHVzLnNldCkge1xuXHRcdFx0c2V0ID0gc3RhdHVzLnNldDtcblx0XHRcdGZuID0gZnVuY3Rpb24gKG9iaiwgcHJvdG90eXBlKSB7XG5cdFx0XHRcdHNldC5jYWxsKHZhbGlkYXRlKG9iaiwgcHJvdG90eXBlKSwgcHJvdG90eXBlKTtcblx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZuID0gZnVuY3Rpb24gKG9iaiwgcHJvdG90eXBlKSB7XG5cdFx0XHRcdHZhbGlkYXRlKG9iaiwgcHJvdG90eXBlKS5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmbiA9IGZ1bmN0aW9uIHNlbGYob2JqLCBwcm90b3R5cGUpIHtcblx0XHRcdHZhciBpc051bGxCYXNlO1xuXHRcdFx0dmFsaWRhdGUob2JqLCBwcm90b3R5cGUpO1xuXHRcdFx0aXNOdWxsQmFzZSA9IG9iaklzUHJvdG90eXBPZi5jYWxsKHNlbGYubnVsbFBvbHlmaWxsLCBvYmopO1xuXHRcdFx0aWYgKGlzTnVsbEJhc2UpIGRlbGV0ZSBzZWxmLm51bGxQb2x5ZmlsbC5fX3Byb3RvX187XG5cdFx0XHRpZiAocHJvdG90eXBlID09PSBudWxsKSBwcm90b3R5cGUgPSBzZWxmLm51bGxQb2x5ZmlsbDtcblx0XHRcdG9iai5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG5cdFx0XHRpZiAoaXNOdWxsQmFzZSkgZGVmaW5lUHJvcGVydHkoc2VsZi5udWxsUG9seWZpbGwsIFwiX19wcm90b19fXCIsIG51bGxEZXNjKTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBcImxldmVsXCIsIHtcblx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHR2YWx1ZTogc3RhdHVzLmxldmVsXG5cdH0pO1xufShcblx0KGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdG1wT2JqMSA9IE9iamVjdC5jcmVhdGUobnVsbClcblx0XHQgICwgdG1wT2JqMiA9IHt9XG5cdFx0ICAsIHNldFxuXHRcdCAgLCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCBcIl9fcHJvdG9fX1wiKTtcblxuXHRcdGlmIChkZXNjKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzZXQgPSBkZXNjLnNldDsgLy8gT3BlcmEgY3Jhc2hlcyBhdCB0aGlzIHBvaW50XG5cdFx0XHRcdHNldC5jYWxsKHRtcE9iajEsIHRtcE9iajIpO1xuXHRcdFx0fSBjYXRjaCAoaWdub3JlKSB7fVxuXHRcdFx0aWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih0bXBPYmoxKSA9PT0gdG1wT2JqMikgcmV0dXJuIHsgc2V0OiBzZXQsIGxldmVsOiAyIH07XG5cdFx0fVxuXG5cdFx0dG1wT2JqMS5fX3Byb3RvX18gPSB0bXBPYmoyO1xuXHRcdGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodG1wT2JqMSkgPT09IHRtcE9iajIpIHJldHVybiB7IGxldmVsOiAyIH07XG5cblx0XHR0bXBPYmoxID0ge307XG5cdFx0dG1wT2JqMS5fX3Byb3RvX18gPSB0bXBPYmoyO1xuXHRcdGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodG1wT2JqMSkgPT09IHRtcE9iajIpIHJldHVybiB7IGxldmVsOiAxIH07XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0pKClcbikpO1xuXG5yZXF1aXJlKFwiLi4vY3JlYXRlXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihmbiArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHRyZXR1cm4gZm47XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc1ZhbHVlID0gcmVxdWlyZShcIi4vaXMtdmFsdWVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdGlmICghaXNWYWx1ZSh2YWx1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaXMtaW1wbGVtZW50ZWRcIikoKVxuXHQ/IFN0cmluZy5wcm90b3R5cGUuY29udGFpbnNcblx0OiByZXF1aXJlKFwiLi9zaGltXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHIgPSBcInJhemR3YXRyenlcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh0eXBlb2Ygc3RyLmNvbnRhaW5zICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIChzdHIuY29udGFpbnMoXCJkd2FcIikgPT09IHRydWUpICYmIChzdHIuY29udGFpbnMoXCJmb29cIikgPT09IGZhbHNlKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGluZGV4T2YgPSBTdHJpbmcucHJvdG90eXBlLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlYXJjaFN0cmluZy8qLCBwb3NpdGlvbiovKSB7XG5cdHJldHVybiBpbmRleE9mLmNhbGwodGhpcywgc2VhcmNoU3RyaW5nLCBhcmd1bWVudHNbMV0pID4gLTE7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBvYmpUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsIGlkID0gb2JqVG9TdHJpbmcuY2FsbChcIlwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIChcblx0XHR0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHxcblx0XHQodmFsdWUgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuXHRcdFx0KHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nIHx8IG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBpZCkpIHx8XG5cdFx0ZmFsc2Vcblx0KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcImVzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIilcbiAgLCBjb250YWlucyAgICAgICA9IHJlcXVpcmUoXCJlczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zXCIpXG4gICwgZCAgICAgICAgICAgICAgPSByZXF1aXJlKFwiZFwiKVxuICAsIFN5bWJvbCAgICAgICAgID0gcmVxdWlyZShcImVzNi1zeW1ib2xcIilcbiAgLCBJdGVyYXRvciAgICAgICA9IHJlcXVpcmUoXCIuL1wiKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBBcnJheUl0ZXJhdG9yO1xuXG5BcnJheUl0ZXJhdG9yID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJyLCBraW5kKSB7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBBcnJheUl0ZXJhdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnN0cnVjdG9yIHJlcXVpcmVzICduZXcnXCIpO1xuXHRJdGVyYXRvci5jYWxsKHRoaXMsIGFycik7XG5cdGlmICgha2luZCkga2luZCA9IFwidmFsdWVcIjtcblx0ZWxzZSBpZiAoY29udGFpbnMuY2FsbChraW5kLCBcImtleSt2YWx1ZVwiKSkga2luZCA9IFwia2V5K3ZhbHVlXCI7XG5cdGVsc2UgaWYgKGNvbnRhaW5zLmNhbGwoa2luZCwgXCJrZXlcIikpIGtpbmQgPSBcImtleVwiO1xuXHRlbHNlIGtpbmQgPSBcInZhbHVlXCI7XG5cdGRlZmluZVByb3BlcnR5KHRoaXMsIFwiX19raW5kX19cIiwgZChcIlwiLCBraW5kKSk7XG59O1xuaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihBcnJheUl0ZXJhdG9yLCBJdGVyYXRvcik7XG5cbi8vIEludGVybmFsICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSBkb2Vzbid0IGV4cG9zZSBpdHMgY29uc3RydWN0b3JcbmRlbGV0ZSBBcnJheUl0ZXJhdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuQXJyYXlJdGVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yLnByb3RvdHlwZSwge1xuXHRfcmVzb2x2ZTogZChmdW5jdGlvbiAoaSkge1xuXHRcdGlmICh0aGlzLl9fa2luZF9fID09PSBcInZhbHVlXCIpIHJldHVybiB0aGlzLl9fbGlzdF9fW2ldO1xuXHRcdGlmICh0aGlzLl9fa2luZF9fID09PSBcImtleSt2YWx1ZVwiKSByZXR1cm4gW2ksIHRoaXMuX19saXN0X19baV1dO1xuXHRcdHJldHVybiBpO1xuXHR9KVxufSk7XG5kZWZpbmVQcm9wZXJ0eShBcnJheUl0ZXJhdG9yLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkKFwiY1wiLCBcIkFycmF5IEl0ZXJhdG9yXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKFwiZXM1LWV4dC9mdW5jdGlvbi9pcy1hcmd1bWVudHNcIilcbiAgLCBjYWxsYWJsZSAgICA9IHJlcXVpcmUoXCJlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZVwiKVxuICAsIGlzU3RyaW5nICAgID0gcmVxdWlyZShcImVzNS1leHQvc3RyaW5nL2lzLXN0cmluZ1wiKVxuICAsIGdldCAgICAgICAgID0gcmVxdWlyZShcIi4vZ2V0XCIpO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXksIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCwgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgY2IgLyosIHRoaXNBcmcqLykge1xuXHR2YXIgbW9kZSwgdGhpc0FyZyA9IGFyZ3VtZW50c1syXSwgcmVzdWx0LCBkb0JyZWFrLCBicm9rZW4sIGksIGxlbmd0aCwgY2hhciwgY29kZTtcblx0aWYgKGlzQXJyYXkoaXRlcmFibGUpIHx8IGlzQXJndW1lbnRzKGl0ZXJhYmxlKSkgbW9kZSA9IFwiYXJyYXlcIjtcblx0ZWxzZSBpZiAoaXNTdHJpbmcoaXRlcmFibGUpKSBtb2RlID0gXCJzdHJpbmdcIjtcblx0ZWxzZSBpdGVyYWJsZSA9IGdldChpdGVyYWJsZSk7XG5cblx0Y2FsbGFibGUoY2IpO1xuXHRkb0JyZWFrID0gZnVuY3Rpb24gKCkge1xuXHRcdGJyb2tlbiA9IHRydWU7XG5cdH07XG5cdGlmIChtb2RlID09PSBcImFycmF5XCIpIHtcblx0XHRzb21lLmNhbGwoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0Y2FsbC5jYWxsKGNiLCB0aGlzQXJnLCB2YWx1ZSwgZG9CcmVhayk7XG5cdFx0XHRyZXR1cm4gYnJva2VuO1xuXHRcdH0pO1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAobW9kZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdGxlbmd0aCA9IGl0ZXJhYmxlLmxlbmd0aDtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdGNoYXIgPSBpdGVyYWJsZVtpXTtcblx0XHRcdGlmIChpICsgMSA8IGxlbmd0aCkge1xuXHRcdFx0XHRjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuXHRcdFx0XHRpZiAoY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRiZmYpIGNoYXIgKz0gaXRlcmFibGVbKytpXTtcblx0XHRcdH1cblx0XHRcdGNhbGwuY2FsbChjYiwgdGhpc0FyZywgY2hhciwgZG9CcmVhayk7XG5cdFx0XHRpZiAoYnJva2VuKSBicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHJlc3VsdCA9IGl0ZXJhYmxlLm5leHQoKTtcblxuXHR3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG5cdFx0Y2FsbC5jYWxsKGNiLCB0aGlzQXJnLCByZXN1bHQudmFsdWUsIGRvQnJlYWspO1xuXHRcdGlmIChicm9rZW4pIHJldHVybjtcblx0XHRyZXN1bHQgPSBpdGVyYWJsZS5uZXh0KCk7XG5cdH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzQXJndW1lbnRzICAgID0gcmVxdWlyZShcImVzNS1leHQvZnVuY3Rpb24vaXMtYXJndW1lbnRzXCIpXG4gICwgaXNTdHJpbmcgICAgICAgPSByZXF1aXJlKFwiZXM1LWV4dC9zdHJpbmcvaXMtc3RyaW5nXCIpXG4gICwgQXJyYXlJdGVyYXRvciAgPSByZXF1aXJlKFwiLi9hcnJheVwiKVxuICAsIFN0cmluZ0l0ZXJhdG9yID0gcmVxdWlyZShcIi4vc3RyaW5nXCIpXG4gICwgaXRlcmFibGUgICAgICAgPSByZXF1aXJlKFwiLi92YWxpZC1pdGVyYWJsZVwiKVxuICAsIGl0ZXJhdG9yU3ltYm9sID0gcmVxdWlyZShcImVzNi1zeW1ib2xcIikuaXRlcmF0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuXHRpZiAodHlwZW9mIGl0ZXJhYmxlKG9iailbaXRlcmF0b3JTeW1ib2xdID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBvYmpbaXRlcmF0b3JTeW1ib2xdKCk7XG5cdGlmIChpc0FyZ3VtZW50cyhvYmopKSByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3Iob2JqKTtcblx0aWYgKGlzU3RyaW5nKG9iaikpIHJldHVybiBuZXcgU3RyaW5nSXRlcmF0b3Iob2JqKTtcblx0cmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKG9iaik7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjbGVhciAgICA9IHJlcXVpcmUoXCJlczUtZXh0L2FycmF5LyMvY2xlYXJcIilcbiAgLCBhc3NpZ24gICA9IHJlcXVpcmUoXCJlczUtZXh0L29iamVjdC9hc3NpZ25cIilcbiAgLCBjYWxsYWJsZSA9IHJlcXVpcmUoXCJlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZVwiKVxuICAsIHZhbHVlICAgID0gcmVxdWlyZShcImVzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlXCIpXG4gICwgZCAgICAgICAgPSByZXF1aXJlKFwiZFwiKVxuICAsIGF1dG9CaW5kID0gcmVxdWlyZShcImQvYXV0by1iaW5kXCIpXG4gICwgU3ltYm9sICAgPSByZXF1aXJlKFwiZXM2LXN5bWJvbFwiKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsIEl0ZXJhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEl0ZXJhdG9yID0gZnVuY3Rpb24gKGxpc3QsIGNvbnRleHQpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIEl0ZXJhdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnN0cnVjdG9yIHJlcXVpcmVzICduZXcnXCIpO1xuXHRkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0XHRfX2xpc3RfXzogZChcIndcIiwgdmFsdWUobGlzdCkpLFxuXHRcdF9fY29udGV4dF9fOiBkKFwid1wiLCBjb250ZXh0KSxcblx0XHRfX25leHRJbmRleF9fOiBkKFwid1wiLCAwKVxuXHR9KTtcblx0aWYgKCFjb250ZXh0KSByZXR1cm47XG5cdGNhbGxhYmxlKGNvbnRleHQub24pO1xuXHRjb250ZXh0Lm9uKFwiX2FkZFwiLCB0aGlzLl9vbkFkZCk7XG5cdGNvbnRleHQub24oXCJfZGVsZXRlXCIsIHRoaXMuX29uRGVsZXRlKTtcblx0Y29udGV4dC5vbihcIl9jbGVhclwiLCB0aGlzLl9vbkNsZWFyKTtcbn07XG5cbi8vIEludGVybmFsICVJdGVyYXRvclByb3RvdHlwZSUgZG9lc24ndCBleHBvc2UgaXRzIGNvbnN0cnVjdG9yXG5kZWxldGUgSXRlcmF0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5kZWZpbmVQcm9wZXJ0aWVzKFxuXHRJdGVyYXRvci5wcm90b3R5cGUsXG5cdGFzc2lnbihcblx0XHR7XG5cdFx0XHRfbmV4dDogZChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBpO1xuXHRcdFx0XHRpZiAoIXRoaXMuX19saXN0X18pIHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmICh0aGlzLl9fcmVkb19fKSB7XG5cdFx0XHRcdFx0aSA9IHRoaXMuX19yZWRvX18uc2hpZnQoKTtcblx0XHRcdFx0XHRpZiAoaSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gaTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fX25leHRJbmRleF9fIDwgdGhpcy5fX2xpc3RfXy5sZW5ndGgpIHJldHVybiB0aGlzLl9fbmV4dEluZGV4X18rKztcblx0XHRcdFx0dGhpcy5fdW5CaW5kKCk7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9KSxcblx0XHRcdG5leHQ6IGQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fY3JlYXRlUmVzdWx0KHRoaXMuX25leHQoKSk7XG5cdFx0XHR9KSxcblx0XHRcdF9jcmVhdGVSZXN1bHQ6IGQoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0aWYgKGkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuXHRcdFx0XHRyZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRoaXMuX3Jlc29sdmUoaSkgfTtcblx0XHRcdH0pLFxuXHRcdFx0X3Jlc29sdmU6IGQoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX19saXN0X19baV07XG5cdFx0XHR9KSxcblx0XHRcdF91bkJpbmQ6IGQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aGlzLl9fbGlzdF9fID0gbnVsbDtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuX19yZWRvX187XG5cdFx0XHRcdGlmICghdGhpcy5fX2NvbnRleHRfXykgcmV0dXJuO1xuXHRcdFx0XHR0aGlzLl9fY29udGV4dF9fLm9mZihcIl9hZGRcIiwgdGhpcy5fb25BZGQpO1xuXHRcdFx0XHR0aGlzLl9fY29udGV4dF9fLm9mZihcIl9kZWxldGVcIiwgdGhpcy5fb25EZWxldGUpO1xuXHRcdFx0XHR0aGlzLl9fY29udGV4dF9fLm9mZihcIl9jbGVhclwiLCB0aGlzLl9vbkNsZWFyKTtcblx0XHRcdFx0dGhpcy5fX2NvbnRleHRfXyA9IG51bGw7XG5cdFx0XHR9KSxcblx0XHRcdHRvU3RyaW5nOiBkKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIFwiW29iamVjdCBcIiArICh0aGlzW1N5bWJvbC50b1N0cmluZ1RhZ10gfHwgXCJPYmplY3RcIikgKyBcIl1cIjtcblx0XHRcdH0pXG5cdFx0fSxcblx0XHRhdXRvQmluZCh7XG5cdFx0XHRfb25BZGQ6IGQoZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0XHRcdGlmIChpbmRleCA+PSB0aGlzLl9fbmV4dEluZGV4X18pIHJldHVybjtcblx0XHRcdFx0Kyt0aGlzLl9fbmV4dEluZGV4X187XG5cdFx0XHRcdGlmICghdGhpcy5fX3JlZG9fXykge1xuXHRcdFx0XHRcdGRlZmluZVByb3BlcnR5KHRoaXMsIFwiX19yZWRvX19cIiwgZChcImNcIiwgW2luZGV4XSkpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9fcmVkb19fLmZvckVhY2goZnVuY3Rpb24gKHJlZG8sIGkpIHtcblx0XHRcdFx0XHRpZiAocmVkbyA+PSBpbmRleCkgdGhpcy5fX3JlZG9fX1tpXSA9ICsrcmVkbztcblx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHRcdHRoaXMuX19yZWRvX18ucHVzaChpbmRleCk7XG5cdFx0XHR9KSxcblx0XHRcdF9vbkRlbGV0ZTogZChmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHRcdFx0dmFyIGk7XG5cdFx0XHRcdGlmIChpbmRleCA+PSB0aGlzLl9fbmV4dEluZGV4X18pIHJldHVybjtcblx0XHRcdFx0LS10aGlzLl9fbmV4dEluZGV4X187XG5cdFx0XHRcdGlmICghdGhpcy5fX3JlZG9fXykgcmV0dXJuO1xuXHRcdFx0XHRpID0gdGhpcy5fX3JlZG9fXy5pbmRleE9mKGluZGV4KTtcblx0XHRcdFx0aWYgKGkgIT09IC0xKSB0aGlzLl9fcmVkb19fLnNwbGljZShpLCAxKTtcblx0XHRcdFx0dGhpcy5fX3JlZG9fXy5mb3JFYWNoKGZ1bmN0aW9uIChyZWRvLCBqKSB7XG5cdFx0XHRcdFx0aWYgKHJlZG8gPiBpbmRleCkgdGhpcy5fX3JlZG9fX1tqXSA9IC0tcmVkbztcblx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHR9KSxcblx0XHRcdF9vbkNsZWFyOiBkKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKHRoaXMuX19yZWRvX18pIGNsZWFyLmNhbGwodGhpcy5fX3JlZG9fXyk7XG5cdFx0XHRcdHRoaXMuX19uZXh0SW5kZXhfXyA9IDA7XG5cdFx0XHR9KVxuXHRcdH0pXG5cdClcbik7XG5cbmRlZmluZVByb3BlcnR5KFxuXHRJdGVyYXRvci5wcm90b3R5cGUsXG5cdFN5bWJvbC5pdGVyYXRvcixcblx0ZChmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0pXG4pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoXCJlczUtZXh0L2Z1bmN0aW9uL2lzLWFyZ3VtZW50c1wiKVxuICAsIGlzVmFsdWUgICAgID0gcmVxdWlyZShcImVzNS1leHQvb2JqZWN0L2lzLXZhbHVlXCIpXG4gICwgaXNTdHJpbmcgICAgPSByZXF1aXJlKFwiZXM1LWV4dC9zdHJpbmcvaXMtc3RyaW5nXCIpO1xuXG52YXIgaXRlcmF0b3JTeW1ib2wgPSByZXF1aXJlKFwiZXM2LXN5bWJvbFwiKS5pdGVyYXRvclxuICAsIGlzQXJyYXkgICAgICAgID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKCFpc1ZhbHVlKHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoaXNBcnJheSh2YWx1ZSkpIHJldHVybiB0cnVlO1xuXHRpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm4gdHJ1ZTtcblx0aWYgKGlzQXJndW1lbnRzKHZhbHVlKSkgcmV0dXJuIHRydWU7XG5cdHJldHVybiB0eXBlb2YgdmFsdWVbaXRlcmF0b3JTeW1ib2xdID09PSBcImZ1bmN0aW9uXCI7XG59O1xuIiwiLy8gVGhhbmtzIEBtYXRoaWFzYnluZW5zXG4vLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUjaXRlcmF0aW5nLW92ZXItc3ltYm9sc1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcImVzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIilcbiAgLCBkICAgICAgICAgICAgICA9IHJlcXVpcmUoXCJkXCIpXG4gICwgU3ltYm9sICAgICAgICAgPSByZXF1aXJlKFwiZXM2LXN5bWJvbFwiKVxuICAsIEl0ZXJhdG9yICAgICAgID0gcmVxdWlyZShcIi4vXCIpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIFN0cmluZ0l0ZXJhdG9yO1xuXG5TdHJpbmdJdGVyYXRvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyaW5nSXRlcmF0b3IpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ29uc3RydWN0b3IgcmVxdWlyZXMgJ25ldydcIik7XG5cdHN0ciA9IFN0cmluZyhzdHIpO1xuXHRJdGVyYXRvci5jYWxsKHRoaXMsIHN0cik7XG5cdGRlZmluZVByb3BlcnR5KHRoaXMsIFwiX19sZW5ndGhfX1wiLCBkKFwiXCIsIHN0ci5sZW5ndGgpKTtcbn07XG5pZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFN0cmluZ0l0ZXJhdG9yLCBJdGVyYXRvcik7XG5cbi8vIEludGVybmFsICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSBkb2Vzbid0IGV4cG9zZSBpdHMgY29uc3RydWN0b3JcbmRlbGV0ZSBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cblN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3IucHJvdG90eXBlLCB7XG5cdF9uZXh0OiBkKGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMuX19saXN0X18pIHJldHVybiB1bmRlZmluZWQ7XG5cdFx0aWYgKHRoaXMuX19uZXh0SW5kZXhfXyA8IHRoaXMuX19sZW5ndGhfXykgcmV0dXJuIHRoaXMuX19uZXh0SW5kZXhfXysrO1xuXHRcdHRoaXMuX3VuQmluZCgpO1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH0pLFxuXHRfcmVzb2x2ZTogZChmdW5jdGlvbiAoaSkge1xuXHRcdHZhciBjaGFyID0gdGhpcy5fX2xpc3RfX1tpXSwgY29kZTtcblx0XHRpZiAodGhpcy5fX25leHRJbmRleF9fID09PSB0aGlzLl9fbGVuZ3RoX18pIHJldHVybiBjaGFyO1xuXHRcdGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG5cdFx0aWYgKGNvZGUgPj0gMHhkODAwICYmIGNvZGUgPD0gMHhkYmZmKSByZXR1cm4gY2hhciArIHRoaXMuX19saXN0X19bdGhpcy5fX25leHRJbmRleF9fKytdO1xuXHRcdHJldHVybiBjaGFyO1xuXHR9KVxufSk7XG5kZWZpbmVQcm9wZXJ0eShTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywgZChcImNcIiwgXCJTdHJpbmcgSXRlcmF0b3JcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc0l0ZXJhYmxlID0gcmVxdWlyZShcIi4vaXMtaXRlcmFibGVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IodmFsdWUgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKCkpIHtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJ2VzNS1leHQvZ2xvYmFsJyksICdTZXQnLFxuXHRcdHsgdmFsdWU6IHJlcXVpcmUoJy4vcG9seWZpbGwnKSwgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNldCwgaXRlcmF0b3IsIHJlc3VsdDtcblx0aWYgKHR5cGVvZiBTZXQgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0c2V0ID0gbmV3IFNldChbJ3JheicsICdkd2EnLCAndHJ6eSddKTtcblx0aWYgKFN0cmluZyhzZXQpICE9PSAnW29iamVjdCBTZXRdJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAoc2V0LnNpemUgIT09IDMpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBzZXQuYWRkICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2Ygc2V0LmNsZWFyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2Ygc2V0LmRlbGV0ZSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIHNldC5lbnRyaWVzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2Ygc2V0LmZvckVhY2ggIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBzZXQuaGFzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2Ygc2V0LmtleXMgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBzZXQudmFsdWVzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cblx0aXRlcmF0b3IgPSBzZXQudmFsdWVzKCk7XG5cdHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0aWYgKHJlc3VsdC5kb25lICE9PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAocmVzdWx0LnZhbHVlICE9PSAncmF6JykgcmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIi8vIEV4cG9ydHMgdHJ1ZSBpZiBlbnZpcm9ubWVudCBwcm92aWRlcyBuYXRpdmUgYFNldGAgaW1wbGVtZW50YXRpb24sXG4vLyB3aGF0ZXZlciB0aGF0IGlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblx0aWYgKHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFNldC5wcm90b3R5cGUpID09PSAnW29iamVjdCBTZXRdJyk7XG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2V0UHJvdG90eXBlT2YgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mJylcbiAgLCBjb250YWlucyAgICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMnKVxuICAsIGQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgSXRlcmF0b3IgICAgICAgICAgPSByZXF1aXJlKCdlczYtaXRlcmF0b3InKVxuICAsIHRvU3RyaW5nVGFnU3ltYm9sID0gcmVxdWlyZSgnZXM2LXN5bWJvbCcpLnRvU3RyaW5nVGFnXG5cbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIFNldEl0ZXJhdG9yO1xuXG5TZXRJdGVyYXRvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNldCwga2luZCkge1xuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgU2V0SXRlcmF0b3IpKSByZXR1cm4gbmV3IFNldEl0ZXJhdG9yKHNldCwga2luZCk7XG5cdEl0ZXJhdG9yLmNhbGwodGhpcywgc2V0Ll9fc2V0RGF0YV9fLCBzZXQpO1xuXHRpZiAoIWtpbmQpIGtpbmQgPSAndmFsdWUnO1xuXHRlbHNlIGlmIChjb250YWlucy5jYWxsKGtpbmQsICdrZXkrdmFsdWUnKSkga2luZCA9ICdrZXkrdmFsdWUnO1xuXHRlbHNlIGtpbmQgPSAndmFsdWUnO1xuXHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19raW5kX18nLCBkKCcnLCBraW5kKSk7XG59O1xuaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihTZXRJdGVyYXRvciwgSXRlcmF0b3IpO1xuXG5TZXRJdGVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yLnByb3RvdHlwZSwge1xuXHRjb25zdHJ1Y3RvcjogZChTZXRJdGVyYXRvciksXG5cdF9yZXNvbHZlOiBkKGZ1bmN0aW9uIChpKSB7XG5cdFx0aWYgKHRoaXMuX19raW5kX18gPT09ICd2YWx1ZScpIHJldHVybiB0aGlzLl9fbGlzdF9fW2ldO1xuXHRcdHJldHVybiBbdGhpcy5fX2xpc3RfX1tpXSwgdGhpcy5fX2xpc3RfX1tpXV07XG5cdH0pLFxuXHR0b1N0cmluZzogZChmdW5jdGlvbiAoKSB7IHJldHVybiAnW29iamVjdCBTZXQgSXRlcmF0b3JdJzsgfSlcbn0pO1xuZGVmaW5lUHJvcGVydHkoU2V0SXRlcmF0b3IucHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgZCgnYycsICdTZXQgSXRlcmF0b3InKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGVhciAgICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvYXJyYXkvIy9jbGVhcicpXG4gICwgZUluZGV4T2YgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L2FycmF5LyMvZS1pbmRleC1vZicpXG4gICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mJylcbiAgLCBjYWxsYWJsZSAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlJylcbiAgLCBkICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIGVlICAgICAgICAgICAgID0gcmVxdWlyZSgnZXZlbnQtZW1pdHRlcicpXG4gICwgU3ltYm9sICAgICAgICAgPSByZXF1aXJlKCdlczYtc3ltYm9sJylcbiAgLCBpdGVyYXRvciAgICAgICA9IHJlcXVpcmUoJ2VzNi1pdGVyYXRvci92YWxpZC1pdGVyYWJsZScpXG4gICwgZm9yT2YgICAgICAgICAgPSByZXF1aXJlKCdlczYtaXRlcmF0b3IvZm9yLW9mJylcbiAgLCBJdGVyYXRvciAgICAgICA9IHJlcXVpcmUoJy4vbGliL2l0ZXJhdG9yJylcbiAgLCBpc05hdGl2ZSAgICAgICA9IHJlcXVpcmUoJy4vaXMtbmF0aXZlLWltcGxlbWVudGVkJylcblxuICAsIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbFxuICAsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZlxuICAsIFNldFBvbHksIGdldFZhbHVlcywgTmF0aXZlU2V0O1xuXG5pZiAoaXNOYXRpdmUpIE5hdGl2ZVNldCA9IFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRQb2x5ID0gZnVuY3Rpb24gU2V0KC8qaXRlcmFibGUqLykge1xuXHR2YXIgaXRlcmFibGUgPSBhcmd1bWVudHNbMF0sIHNlbGY7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXRQb2x5KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgcmVxdWlyZXMgXFwnbmV3XFwnJyk7XG5cdGlmIChpc05hdGl2ZSAmJiBzZXRQcm90b3R5cGVPZikgc2VsZiA9IHNldFByb3RvdHlwZU9mKG5ldyBOYXRpdmVTZXQoKSwgZ2V0UHJvdG90eXBlT2YodGhpcykpO1xuXHRlbHNlIHNlbGYgPSB0aGlzO1xuXHRpZiAoaXRlcmFibGUgIT0gbnVsbCkgaXRlcmF0b3IoaXRlcmFibGUpO1xuXHRkZWZpbmVQcm9wZXJ0eShzZWxmLCAnX19zZXREYXRhX18nLCBkKCdjJywgW10pKTtcblx0aWYgKCFpdGVyYWJsZSkgcmV0dXJuIHNlbGY7XG5cdGZvck9mKGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRpZiAoZUluZGV4T2YuY2FsbCh0aGlzLCB2YWx1ZSkgIT09IC0xKSByZXR1cm47XG5cdFx0dGhpcy5wdXNoKHZhbHVlKTtcblx0fSwgc2VsZi5fX3NldERhdGFfXyk7XG5cdHJldHVybiBzZWxmO1xufTtcblxuaWYgKGlzTmF0aXZlKSB7XG5cdGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoU2V0UG9seSwgTmF0aXZlU2V0KTtcblx0U2V0UG9seS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5hdGl2ZVNldC5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IGQoU2V0UG9seSkgfSk7XG59XG5cbmVlKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFNldFBvbHkucHJvdG90eXBlLCB7XG5cdGFkZDogZChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRpZiAodGhpcy5oYXModmFsdWUpKSByZXR1cm4gdGhpcztcblx0XHR0aGlzLmVtaXQoJ19hZGQnLCB0aGlzLl9fc2V0RGF0YV9fLnB1c2godmFsdWUpIC0gMSwgdmFsdWUpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9KSxcblx0Y2xlYXI6IGQoZnVuY3Rpb24gKCkge1xuXHRcdGlmICghdGhpcy5fX3NldERhdGFfXy5sZW5ndGgpIHJldHVybjtcblx0XHRjbGVhci5jYWxsKHRoaXMuX19zZXREYXRhX18pO1xuXHRcdHRoaXMuZW1pdCgnX2NsZWFyJyk7XG5cdH0pLFxuXHRkZWxldGU6IGQoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0dmFyIGluZGV4ID0gZUluZGV4T2YuY2FsbCh0aGlzLl9fc2V0RGF0YV9fLCB2YWx1ZSk7XG5cdFx0aWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXHRcdHRoaXMuX19zZXREYXRhX18uc3BsaWNlKGluZGV4LCAxKTtcblx0XHR0aGlzLmVtaXQoJ19kZWxldGUnLCBpbmRleCwgdmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9KSxcblx0ZW50cmllczogZChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3IodGhpcywgJ2tleSt2YWx1ZScpOyB9KSxcblx0Zm9yRWFjaDogZChmdW5jdGlvbiAoY2IvKiwgdGhpc0FyZyovKSB7XG5cdFx0dmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV0sIGl0ZXJhdG9yLCByZXN1bHQsIHZhbHVlO1xuXHRcdGNhbGxhYmxlKGNiKTtcblx0XHRpdGVyYXRvciA9IHRoaXMudmFsdWVzKCk7XG5cdFx0cmVzdWx0ID0gaXRlcmF0b3IuX25leHQoKTtcblx0XHR3aGlsZSAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHZhbHVlID0gaXRlcmF0b3IuX3Jlc29sdmUocmVzdWx0KTtcblx0XHRcdGNhbGwuY2FsbChjYiwgdGhpc0FyZywgdmFsdWUsIHZhbHVlLCB0aGlzKTtcblx0XHRcdHJlc3VsdCA9IGl0ZXJhdG9yLl9uZXh0KCk7XG5cdFx0fVxuXHR9KSxcblx0aGFzOiBkKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdHJldHVybiAoZUluZGV4T2YuY2FsbCh0aGlzLl9fc2V0RGF0YV9fLCB2YWx1ZSkgIT09IC0xKTtcblx0fSksXG5cdGtleXM6IGQoZ2V0VmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy52YWx1ZXMoKTsgfSksXG5cdHNpemU6IGQuZ3MoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fX3NldERhdGFfXy5sZW5ndGg7IH0pLFxuXHR2YWx1ZXM6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yKHRoaXMpOyB9KSxcblx0dG9TdHJpbmc6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gJ1tvYmplY3QgU2V0XSc7IH0pXG59KSk7XG5kZWZpbmVQcm9wZXJ0eShTZXRQb2x5LnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCBkKGdldFZhbHVlcykpO1xuZGVmaW5lUHJvcGVydHkoU2V0UG9seS5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywgZCgnYycsICdTZXQnKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKCkgPyBTeW1ib2wgOiByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB2YWxpZFR5cGVzID0geyBvYmplY3Q6IHRydWUsIHN5bWJvbDogdHJ1ZSB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHN5bWJvbDtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0c3ltYm9sID0gU3ltYm9sKCd0ZXN0IHN5bWJvbCcpO1xuXHR0cnkgeyBTdHJpbmcoc3ltYm9sKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBSZXR1cm4gJ3RydWUnIGFsc28gZm9yIHBvbHlmaWxsc1xuXHRpZiAoIXZhbGlkVHlwZXNbdHlwZW9mIFN5bWJvbC5pdGVyYXRvcl0pIHJldHVybiBmYWxzZTtcblx0aWYgKCF2YWxpZFR5cGVzW3R5cGVvZiBTeW1ib2wudG9QcmltaXRpdmVdKSByZXR1cm4gZmFsc2U7XG5cdGlmICghdmFsaWRUeXBlc1t0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnXSkgcmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkge1xuXHRpZiAoIXgpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykgcmV0dXJuIHRydWU7XG5cdGlmICgheC5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuXHRpZiAoeC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnU3ltYm9sJykgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gKHhbeC5jb25zdHJ1Y3Rvci50b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnKTtcbn07XG4iLCIvLyBFUzIwMTUgU3ltYm9sIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgKG9yIHBhcnRpYWxseSkgc3VwcG9ydCBpdFxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBkICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIHZhbGlkYXRlU3ltYm9sID0gcmVxdWlyZSgnLi92YWxpZGF0ZS1zeW1ib2wnKVxuXG4gICwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSwgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIG9ialByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGVcbiAgLCBOYXRpdmVTeW1ib2wsIFN5bWJvbFBvbHlmaWxsLCBIaWRkZW5TeW1ib2wsIGdsb2JhbFN5bWJvbHMgPSBjcmVhdGUobnVsbClcbiAgLCBpc05hdGl2ZVNhZmU7XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdE5hdGl2ZVN5bWJvbCA9IFN5bWJvbDtcblx0dHJ5IHtcblx0XHRTdHJpbmcoTmF0aXZlU3ltYm9sKCkpO1xuXHRcdGlzTmF0aXZlU2FmZSA9IHRydWU7XG5cdH0gY2F0Y2ggKGlnbm9yZSkge31cbn1cblxudmFyIGdlbmVyYXRlTmFtZSA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciBjcmVhdGVkID0gY3JlYXRlKG51bGwpO1xuXHRyZXR1cm4gZnVuY3Rpb24gKGRlc2MpIHtcblx0XHR2YXIgcG9zdGZpeCA9IDAsIG5hbWUsIGllMTFCdWdXb3JrYXJvdW5kO1xuXHRcdHdoaWxlIChjcmVhdGVkW2Rlc2MgKyAocG9zdGZpeCB8fCAnJyldKSArK3Bvc3RmaXg7XG5cdFx0ZGVzYyArPSAocG9zdGZpeCB8fCAnJyk7XG5cdFx0Y3JlYXRlZFtkZXNjXSA9IHRydWU7XG5cdFx0bmFtZSA9ICdAQCcgKyBkZXNjO1xuXHRcdGRlZmluZVByb3BlcnR5KG9ialByb3RvdHlwZSwgbmFtZSwgZC5ncyhudWxsLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdC8vIEZvciBJRTExIGlzc3VlIHNlZTpcblx0XHRcdC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrZGV0YWlsL3ZpZXcvMTkyODUwOC9cblx0XHRcdC8vICAgIGllMTEtYnJva2VuLWdldHRlcnMtb24tZG9tLW9iamVjdHNcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpa29vL2VzNi1zeW1ib2wvaXNzdWVzLzEyXG5cdFx0XHRpZiAoaWUxMUJ1Z1dvcmthcm91bmQpIHJldHVybjtcblx0XHRcdGllMTFCdWdXb3JrYXJvdW5kID0gdHJ1ZTtcblx0XHRcdGRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIGQodmFsdWUpKTtcblx0XHRcdGllMTFCdWdXb3JrYXJvdW5kID0gZmFsc2U7XG5cdFx0fSkpO1xuXHRcdHJldHVybiBuYW1lO1xuXHR9O1xufSgpKTtcblxuLy8gSW50ZXJuYWwgY29uc3RydWN0b3IgKG5vdCBvbmUgZXhwb3NlZCkgZm9yIGNyZWF0aW5nIFN5bWJvbCBpbnN0YW5jZXMuXG4vLyBUaGlzIG9uZSBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IGBzb21lU3ltYm9sIGluc3RhbmNlb2YgU3ltYm9sYCBhbHdheXMgcmV0dXJuIGZhbHNlXG5IaWRkZW5TeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woZGVzY3JpcHRpb24pIHtcblx0aWYgKHRoaXMgaW5zdGFuY2VvZiBIaWRkZW5TeW1ib2wpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuXHRyZXR1cm4gU3ltYm9sUG9seWZpbGwoZGVzY3JpcHRpb24pO1xufTtcblxuLy8gRXhwb3NlZCBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gKHJldHVybnMgaW5zdGFuY2VzIG9mIEhpZGRlblN5bWJvbClcbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sUG9seWZpbGwgPSBmdW5jdGlvbiBTeW1ib2woZGVzY3JpcHRpb24pIHtcblx0dmFyIHN5bWJvbDtcblx0aWYgKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuXHRpZiAoaXNOYXRpdmVTYWZlKSByZXR1cm4gTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcblx0c3ltYm9sID0gY3JlYXRlKEhpZGRlblN5bWJvbC5wcm90b3R5cGUpO1xuXHRkZXNjcmlwdGlvbiA9IChkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gJycgOiBTdHJpbmcoZGVzY3JpcHRpb24pKTtcblx0cmV0dXJuIGRlZmluZVByb3BlcnRpZXMoc3ltYm9sLCB7XG5cdFx0X19kZXNjcmlwdGlvbl9fOiBkKCcnLCBkZXNjcmlwdGlvbiksXG5cdFx0X19uYW1lX186IGQoJycsIGdlbmVyYXRlTmFtZShkZXNjcmlwdGlvbikpXG5cdH0pO1xufTtcbmRlZmluZVByb3BlcnRpZXMoU3ltYm9sUG9seWZpbGwsIHtcblx0Zm9yOiBkKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRpZiAoZ2xvYmFsU3ltYm9sc1trZXldKSByZXR1cm4gZ2xvYmFsU3ltYm9sc1trZXldO1xuXHRcdHJldHVybiAoZ2xvYmFsU3ltYm9sc1trZXldID0gU3ltYm9sUG9seWZpbGwoU3RyaW5nKGtleSkpKTtcblx0fSksXG5cdGtleUZvcjogZChmdW5jdGlvbiAocykge1xuXHRcdHZhciBrZXk7XG5cdFx0dmFsaWRhdGVTeW1ib2wocyk7XG5cdFx0Zm9yIChrZXkgaW4gZ2xvYmFsU3ltYm9scykgaWYgKGdsb2JhbFN5bWJvbHNba2V5XSA9PT0gcykgcmV0dXJuIGtleTtcblx0fSksXG5cblx0Ly8gVG8gZW5zdXJlIHByb3BlciBpbnRlcm9wZXJhYmlsaXR5IHdpdGggb3RoZXIgbmF0aXZlIGZ1bmN0aW9ucyAoZS5nLiBBcnJheS5mcm9tKVxuXHQvLyBmYWxsYmFjayB0byBldmVudHVhbCBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgZ2l2ZW4gc3ltYm9sXG5cdGhhc0luc3RhbmNlOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5oYXNJbnN0YW5jZSkgfHwgU3ltYm9sUG9seWZpbGwoJ2hhc0luc3RhbmNlJykpLFxuXHRpc0NvbmNhdFNwcmVhZGFibGU6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSkgfHxcblx0XHRTeW1ib2xQb2x5ZmlsbCgnaXNDb25jYXRTcHJlYWRhYmxlJykpLFxuXHRpdGVyYXRvcjogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuaXRlcmF0b3IpIHx8IFN5bWJvbFBvbHlmaWxsKCdpdGVyYXRvcicpKSxcblx0bWF0Y2g6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLm1hdGNoKSB8fCBTeW1ib2xQb2x5ZmlsbCgnbWF0Y2gnKSksXG5cdHJlcGxhY2U6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnJlcGxhY2UpIHx8IFN5bWJvbFBvbHlmaWxsKCdyZXBsYWNlJykpLFxuXHRzZWFyY2g6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnNlYXJjaCkgfHwgU3ltYm9sUG9seWZpbGwoJ3NlYXJjaCcpKSxcblx0c3BlY2llczogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuc3BlY2llcykgfHwgU3ltYm9sUG9seWZpbGwoJ3NwZWNpZXMnKSksXG5cdHNwbGl0OiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5zcGxpdCkgfHwgU3ltYm9sUG9seWZpbGwoJ3NwbGl0JykpLFxuXHR0b1ByaW1pdGl2ZTogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wudG9QcmltaXRpdmUpIHx8IFN5bWJvbFBvbHlmaWxsKCd0b1ByaW1pdGl2ZScpKSxcblx0dG9TdHJpbmdUYWc6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnRvU3RyaW5nVGFnKSB8fCBTeW1ib2xQb2x5ZmlsbCgndG9TdHJpbmdUYWcnKSksXG5cdHVuc2NvcGFibGVzOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC51bnNjb3BhYmxlcykgfHwgU3ltYm9sUG9seWZpbGwoJ3Vuc2NvcGFibGVzJykpXG59KTtcblxuLy8gSW50ZXJuYWwgdHdlYWtzIGZvciByZWFsIHN5bWJvbCBwcm9kdWNlclxuZGVmaW5lUHJvcGVydGllcyhIaWRkZW5TeW1ib2wucHJvdG90eXBlLCB7XG5cdGNvbnN0cnVjdG9yOiBkKFN5bWJvbFBvbHlmaWxsKSxcblx0dG9TdHJpbmc6IGQoJycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX19uYW1lX187IH0pXG59KTtcblxuLy8gUHJvcGVyIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgZXhwb3NlZCBvbiBTeW1ib2wucHJvdG90eXBlXG4vLyBUaGV5IHdvbid0IGJlIGFjY2Vzc2libGUgb24gcHJvZHVjZWQgc3ltYm9sIGluc3RhbmNlcyBhcyB0aGV5IGRlcml2ZSBmcm9tIEhpZGRlblN5bWJvbC5wcm90b3R5cGVcbmRlZmluZVByb3BlcnRpZXMoU3ltYm9sUG9seWZpbGwucHJvdG90eXBlLCB7XG5cdHRvU3RyaW5nOiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuICdTeW1ib2wgKCcgKyB2YWxpZGF0ZVN5bWJvbCh0aGlzKS5fX2Rlc2NyaXB0aW9uX18gKyAnKSc7IH0pLFxuXHR2YWx1ZU9mOiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlU3ltYm9sKHRoaXMpOyB9KVxufSk7XG5kZWZpbmVQcm9wZXJ0eShTeW1ib2xQb2x5ZmlsbC5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvUHJpbWl0aXZlLCBkKCcnLCBmdW5jdGlvbiAoKSB7XG5cdHZhciBzeW1ib2wgPSB2YWxpZGF0ZVN5bWJvbCh0aGlzKTtcblx0aWYgKHR5cGVvZiBzeW1ib2wgPT09ICdzeW1ib2wnKSByZXR1cm4gc3ltYm9sO1xuXHRyZXR1cm4gc3ltYm9sLnRvU3RyaW5nKCk7XG59KSk7XG5kZWZpbmVQcm9wZXJ0eShTeW1ib2xQb2x5ZmlsbC5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCBkKCdjJywgJ1N5bWJvbCcpKTtcblxuLy8gUHJvcGVyIGltcGxlbWVudGF0b24gb2YgdG9QcmltaXRpdmUgYW5kIHRvU3RyaW5nVGFnIGZvciByZXR1cm5lZCBzeW1ib2wgaW5zdGFuY2VzXG5kZWZpbmVQcm9wZXJ0eShIaWRkZW5TeW1ib2wucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZyxcblx0ZCgnYycsIFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZVtTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZ10pKTtcblxuLy8gTm90ZTogSXQncyBpbXBvcnRhbnQgdG8gZGVmaW5lIGB0b1ByaW1pdGl2ZWAgYXMgbGFzdCBvbmUsIGFzIHNvbWUgaW1wbGVtZW50YXRpb25zXG4vLyBpbXBsZW1lbnQgYHRvUHJpbWl0aXZlYCBuYXRpdmVseSB3aXRob3V0IGltcGxlbWVudGluZyBgdG9TdHJpbmdUYWdgIChvciBvdGhlciBzcGVjaWZpZWQgc3ltYm9scylcbi8vIEFuZCB0aGF0IG1heSBpbnZva2UgZXJyb3IgaW4gZGVmaW5pdGlvbiBmbG93OlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbWVkaWtvby9lczYtc3ltYm9sL2lzc3Vlcy8xMyNpc3N1ZWNvbW1lbnQtMTY0MTQ2MTQ5XG5kZWZpbmVQcm9wZXJ0eShIaWRkZW5TeW1ib2wucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1ByaW1pdGl2ZSxcblx0ZCgnYycsIFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZVtTeW1ib2xQb2x5ZmlsbC50b1ByaW1pdGl2ZV0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pcy1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IodmFsdWUgKyBcIiBpcyBub3QgYSBzeW1ib2xcIik7XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIGNhbGxhYmxlID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUnKVxuXG4gICwgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHksIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbFxuICAsIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICwgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICwgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgZGVzY3JpcHRvciA9IHsgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUgfVxuXG4gICwgb24sIG9uY2UsIG9mZiwgZW1pdCwgbWV0aG9kcywgZGVzY3JpcHRvcnMsIGJhc2U7XG5cbm9uID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG5cdHZhciBkYXRhO1xuXG5cdGNhbGxhYmxlKGxpc3RlbmVyKTtcblxuXHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19fZWVfXycpKSB7XG5cdFx0ZGF0YSA9IGRlc2NyaXB0b3IudmFsdWUgPSBjcmVhdGUobnVsbCk7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ19fZWVfXycsIGRlc2NyaXB0b3IpO1xuXHRcdGRlc2NyaXB0b3IudmFsdWUgPSBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdGRhdGEgPSB0aGlzLl9fZWVfXztcblx0fVxuXHRpZiAoIWRhdGFbdHlwZV0pIGRhdGFbdHlwZV0gPSBsaXN0ZW5lcjtcblx0ZWxzZSBpZiAodHlwZW9mIGRhdGFbdHlwZV0gPT09ICdvYmplY3QnKSBkYXRhW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuXHRlbHNlIGRhdGFbdHlwZV0gPSBbZGF0YVt0eXBlXSwgbGlzdGVuZXJdO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxub25jZSA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuXHR2YXIgb25jZSwgc2VsZjtcblxuXHRjYWxsYWJsZShsaXN0ZW5lcik7XG5cdHNlbGYgPSB0aGlzO1xuXHRvbi5jYWxsKHRoaXMsIHR5cGUsIG9uY2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0b2ZmLmNhbGwoc2VsZiwgdHlwZSwgb25jZSk7XG5cdFx0YXBwbHkuY2FsbChsaXN0ZW5lciwgdGhpcywgYXJndW1lbnRzKTtcblx0fSk7XG5cblx0b25jZS5fX2VlT25jZUxpc3RlbmVyX18gPSBsaXN0ZW5lcjtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5vZmYgPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcblx0dmFyIGRhdGEsIGxpc3RlbmVycywgY2FuZGlkYXRlLCBpO1xuXG5cdGNhbGxhYmxlKGxpc3RlbmVyKTtcblxuXHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19fZWVfXycpKSByZXR1cm4gdGhpcztcblx0ZGF0YSA9IHRoaXMuX19lZV9fO1xuXHRpZiAoIWRhdGFbdHlwZV0pIHJldHVybiB0aGlzO1xuXHRsaXN0ZW5lcnMgPSBkYXRhW3R5cGVdO1xuXG5cdGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnb2JqZWN0Jykge1xuXHRcdGZvciAoaSA9IDA7IChjYW5kaWRhdGUgPSBsaXN0ZW5lcnNbaV0pOyArK2kpIHtcblx0XHRcdGlmICgoY2FuZGlkYXRlID09PSBsaXN0ZW5lcikgfHxcblx0XHRcdFx0XHQoY2FuZGlkYXRlLl9fZWVPbmNlTGlzdGVuZXJfXyA9PT0gbGlzdGVuZXIpKSB7XG5cdFx0XHRcdGlmIChsaXN0ZW5lcnMubGVuZ3RoID09PSAyKSBkYXRhW3R5cGVdID0gbGlzdGVuZXJzW2kgPyAwIDogMV07XG5cdFx0XHRcdGVsc2UgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYgKChsaXN0ZW5lcnMgPT09IGxpc3RlbmVyKSB8fFxuXHRcdFx0XHQobGlzdGVuZXJzLl9fZWVPbmNlTGlzdGVuZXJfXyA9PT0gbGlzdGVuZXIpKSB7XG5cdFx0XHRkZWxldGUgZGF0YVt0eXBlXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmVtaXQgPSBmdW5jdGlvbiAodHlwZSkge1xuXHR2YXIgaSwgbCwgbGlzdGVuZXIsIGxpc3RlbmVycywgYXJncztcblxuXHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19fZWVfXycpKSByZXR1cm47XG5cdGxpc3RlbmVycyA9IHRoaXMuX19lZV9fW3R5cGVdO1xuXHRpZiAoIWxpc3RlbmVycykgcmV0dXJuO1xuXG5cdGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnb2JqZWN0Jykge1xuXHRcdGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdGFyZ3MgPSBuZXcgQXJyYXkobCAtIDEpO1xuXHRcdGZvciAoaSA9IDE7IGkgPCBsOyArK2kpIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXG5cdFx0bGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKCk7XG5cdFx0Zm9yIChpID0gMDsgKGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldKTsgKytpKSB7XG5cdFx0XHRhcHBseS5jYWxsKGxpc3RlbmVyLCB0aGlzLCBhcmdzKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0c3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0Y2FzZSAxOlxuXHRcdFx0Y2FsbC5jYWxsKGxpc3RlbmVycywgdGhpcyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHRjYWxsLmNhbGwobGlzdGVuZXJzLCB0aGlzLCBhcmd1bWVudHNbMV0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAzOlxuXHRcdFx0Y2FsbC5jYWxsKGxpc3RlbmVycywgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdFx0YXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG5cdFx0XHRmb3IgKGkgPSAxOyBpIDwgbDsgKytpKSB7XG5cdFx0XHRcdGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0fVxuXHRcdFx0YXBwbHkuY2FsbChsaXN0ZW5lcnMsIHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fVxufTtcblxubWV0aG9kcyA9IHtcblx0b246IG9uLFxuXHRvbmNlOiBvbmNlLFxuXHRvZmY6IG9mZixcblx0ZW1pdDogZW1pdFxufTtcblxuZGVzY3JpcHRvcnMgPSB7XG5cdG9uOiBkKG9uKSxcblx0b25jZTogZChvbmNlKSxcblx0b2ZmOiBkKG9mZiksXG5cdGVtaXQ6IGQoZW1pdClcbn07XG5cbmJhc2UgPSBkZWZpbmVQcm9wZXJ0aWVzKHt9LCBkZXNjcmlwdG9ycyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZ1bmN0aW9uIChvKSB7XG5cdHJldHVybiAobyA9PSBudWxsKSA/IGNyZWF0ZShiYXNlKSA6IGRlZmluZVByb3BlcnRpZXMoT2JqZWN0KG8pLCBkZXNjcmlwdG9ycyk7XG59O1xuZXhwb3J0cy5tZXRob2RzID0gbWV0aG9kcztcbiIsIi8qIVxuICogalF1ZXJ5IFVJIDpkYXRhIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiA6ZGF0YSBTZWxlY3RvclxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IFNlbGVjdHMgZWxlbWVudHMgd2hpY2ggaGF2ZSBkYXRhIHN0b3JlZCB1bmRlciB0aGUgc3BlY2lmaWVkIGtleS5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kYXRhLXNlbGVjdG9yL1xuXG4oIGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZSggWyBcImpxdWVyeVwiLCBcIi4vdmVyc2lvblwiIF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59ICggZnVuY3Rpb24oICQgKSB7XG5yZXR1cm4gJC5leHRlbmQoICQuZXhwclsgXCI6XCIgXSwge1xuXHRkYXRhOiAkLmV4cHIuY3JlYXRlUHNldWRvID9cblx0XHQkLmV4cHIuY3JlYXRlUHNldWRvKCBmdW5jdGlvbiggZGF0YU5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAhISQuZGF0YSggZWxlbSwgZGF0YU5hbWUgKTtcblx0XHRcdH07XG5cdFx0fSApIDpcblxuXHRcdC8vIFN1cHBvcnQ6IGpRdWVyeSA8MS44XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkge1xuXHRcdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBtYXRjaFsgMyBdICk7XG5cdFx0fVxufSApO1xufSApICk7XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcInNpbHZlci1kZWNpc2lvbnNcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjBcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlNvZnR3YXJlIGZvciBjcmVhdGluZyBhbmQgYW5hbHl6aW5nIGRlY2lzaW9uIHRyZWVzLlwiLFxuICBcIm1haW5cIjogXCJpbmRleC5qc1wiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwidGVzdFwiOiBcImVjaG8gXFxcIkVycm9yOiBubyB0ZXN0IHNwZWNpZmllZFxcXCIgJiYgZXhpdCAxXCJcbiAgfSxcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vU2lsdmVyRGVjaXNpb25zL1NpbHZlckRlY2lzaW9ucy5naXRcIlxuICB9LFxuICBcImF1dGhvclwiOiBcIk1pY2hhxYIgV2FzaWx1aywgQm9ndW1pxYIgS2FtacWEc2tpLCBQcnplbXlzxYJhdyBTenVmZWxcIixcbiAgXCJsaWNlbnNlXCI6IFwiTEdQTC0zLjBcIixcbiAgXCJidWdzXCI6IHtcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9TaWx2ZXJEZWNpc2lvbnMvU2lsdmVyRGVjaXNpb25zL2lzc3Vlc1wiXG4gIH0sXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vU2lsdmVyRGVjaXNpb25zL1NpbHZlckRlY2lzaW9ucyNyZWFkbWVcIixcbiAgXCJicm93c2VyaWZ5XCI6IHtcbiAgICBcInRyYW5zZm9ybVwiOiBbXG4gICAgICBbXG4gICAgICAgIFwiYmFiZWxpZnlcIixcbiAgICAgICAge1xuICAgICAgICAgIFwicHJlc2V0c1wiOiBbXG4gICAgICAgICAgICBcImVzMjAxNVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInBsdWdpbnNcIjogW1xuICAgICAgICAgICAgW1widHJhbnNmb3JtLWNsYXNzLXByb3BlcnRpZXNcIiwgeyBcInNwZWNcIjogdHJ1ZSB9XSxcbiAgICAgICAgICAgIFwidHJhbnNmb3JtLW9iamVjdC1hc3NpZ25cIixcbiAgICAgICAgICAgIFwidHJhbnNmb3JtLWVzMjAxNS1zcHJlYWRcIixcbiAgICAgICAgICAgIFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFwiLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tYnVpbHRpbi1leHRlbmRcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiZ2xvYmFsc1wiOiBbXG4gICAgICAgICAgICAgICAgICBcIkVycm9yXCJcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tYnVpbHRpbi1leHRlbmRcIjogXCJeMS4xLjJcIixcbiAgICBcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tY2xhc3MtcHJvcGVydGllc1wiOiBcIl42LjExLjVcIixcbiAgICBcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tZXMyMDE1LXNwcmVhZFwiOiBcIl42LjIyLjBcIixcbiAgICBcImJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tb2JqZWN0LWFzc2lnblwiOiBcIl42LjguMFwiLFxuICAgIFwiYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcIjogXCJeNi4yMy4wXCIsXG4gICAgXCJiYWJlbC1wcmVzZXQtZXMyMDE1XCI6IFwiXjYuMTQuMFwiLFxuICAgIFwiYmFiZWxpZnlcIjogXCJeNy4zLjBcIixcbiAgICBcImJyb3dzZXItc3luY1wiOiBcIl4yLjEzLjBcIixcbiAgICBcImJyb3dzZXJpZnlcIjogXCJeMTQuNS4wXCIsXG4gICAgXCJicm93c2VyaWZ5LXJlc29sdXRpb25zXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJicm93c2VyaWZ5LXNoaW1cIjogXCJeMy44LjEzXCIsXG4gICAgXCJjaGFsa1wiOiBcIl4yLjMuMFwiLFxuICAgIFwiZGVsXCI6IFwiXjMuMC4wXCIsXG4gICAgXCJlczYtc2V0XCI6IFwiXjAuMS41XCIsXG4gICAgXCJndWxwXCI6IFwiXjMuOS4xXCIsXG4gICAgXCJndWxwLWNvbmNhdFwiOiBcIl4yLjYuMFwiLFxuICAgIFwiZ3VscC1maWxlbGlzdFwiOiBcIl4xLjAuMFwiLFxuICAgIFwiZ3VscC1odG1sMmpzXCI6IFwiXjAuNC4yXCIsXG4gICAgXCJndWxwLWxvYWQtcGx1Z2luc1wiOiBcIl4xLjIuNFwiLFxuICAgIFwiZ3VscC1taW5pZnktY3NzXCI6IFwiXjEuMi40XCIsXG4gICAgXCJndWxwLXBsdW1iZXJcIjogXCJeMS4xLjBcIixcbiAgICBcImd1bHAtcmVuYW1lXCI6IFwiXjEuMi4yXCIsXG4gICAgXCJndWxwLXJlcGxhY2VcIjogXCJeMC42LjFcIixcbiAgICBcImd1bHAtc2Fzc1wiOiBcIl4zLjEuMFwiLFxuICAgIFwiZ3VscC1zb3VyY2VtYXBzXCI6IFwiXjIuNi4xXCIsXG4gICAgXCJndWxwLXN0cmlwLWRlYnVnXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJndWxwLXRlbXBsYXRlXCI6IFwiXjQuMC4wXCIsXG4gICAgXCJndWxwLXVnbGlmeVwiOiBcIl4zLjAuMFwiLFxuICAgIFwiZ3VscC11dGlsXCI6IFwiXjMuMC43XCIsXG4gICAgXCJqYXNtaW5lXCI6IFwiXjIuNS4yXCIsXG4gICAgXCJqYXNtaW5lLWpxdWVyeVwiOiBcIl4yLjEuMVwiLFxuICAgIFwia2FybWFcIjogXCJeMS43LjBcIixcbiAgICBcImthcm1hLWJyb3dzZXJpZnlcIjogXCJeNS4xLjFcIixcbiAgICBcImthcm1hLWNocm9tZS1sYXVuY2hlclwiOiBcIl4yLjAuMFwiLFxuICAgIFwia2FybWEtaW50bC1zaGltXCI6IFwiXjEuMC4zXCIsXG4gICAgXCJrYXJtYS1qYXNtaW5lXCI6IFwiXjEuMC4yXCIsXG4gICAgXCJtZXJnZS1zdHJlYW1cIjogXCJeMS4wLjBcIixcbiAgICBcIm9kYy1kM1wiOiBcIl4xLjEuNlwiLFxuICAgIFwicnVuLXNlcXVlbmNlXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJzdHJpbmdpZnlcIjogXCJeNS4xLjBcIixcbiAgICBcInN2ZzJwZGYuanNcIjogXCJeMS4xLjFcIixcbiAgICBcInZpbnlsLWJ1ZmZlclwiOiBcIl4xLjAuMFwiLFxuICAgIFwidmlueWwtc291cmNlLXN0cmVhbVwiOiBcIl4xLjEuMFwiLFxuICAgIFwieWFyZ3NcIjogXCJeMTAuMC4zXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYXV0b3NpemVcIjogXCJeNC4wLjBcIixcbiAgICBcImJsdWVpbXAtY2FudmFzLXRvLWJsb2JcIjogXCJeMy4zLjBcIixcbiAgICBcImQzLWFycmF5XCI6IFwiXjEuMC4xXCIsXG4gICAgXCJkMy1kaXNwYXRjaFwiOiBcIl4xLjAuMVwiLFxuICAgIFwiZDMtZHJhZ1wiOiBcIl4xLjAuMVwiLFxuICAgIFwiZDMtc2NhbGVcIjogXCJeMS4wLjNcIixcbiAgICBcImQzLXNlbGVjdGlvblwiOiBcIl4xLjAuMlwiLFxuICAgIFwiZDMtdGltZS1mb3JtYXRcIjogXCJeMi4wLjJcIixcbiAgICBcImZpbGUtc2F2ZXJcIjogXCJeMS4zLjJcIixcbiAgICBcImhhbW1lcmpzXCI6IFwiXjIuMC44XCIsXG4gICAgXCJpMThuZXh0XCI6IFwiXjEwLjAuM1wiLFxuICAgIFwianF1ZXJ5XCI6IFwiXjMuMS4xXCIsXG4gICAgXCJqcXVlcnktdWlcIjogXCJeMS4xMi4xXCIsXG4gICAgXCJwaXZvdHRhYmxlXCI6IFwiXjIuMTEuMFwiLFxuICAgIFwic2QtY29tcHV0YXRpb25zXCI6IFwiMC4zLjZcIixcbiAgICBcInNkLW1vZGVsXCI6IFwiMC4zLjBcIixcbiAgICBcInNkLXV0aWxzXCI6IFwiMC4xLjExXCIsXG4gICAgXCJzZC10cmVlLWRlc2lnbmVyXCI6IFwiMC4xLjhcIlxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiLi9kM1wiO1xuaW1wb3J0ICogYXMgYXV0b3NpemUgZnJvbSBcImF1dG9zaXplXCI7XG5pbXBvcnQge1RlbXBsYXRlc30gZnJvbSBcIi4vdGVtcGxhdGVzXCI7XG5pbXBvcnQge2kxOG59IGZyb20gXCIuL2kxOG4vaTE4blwiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge0FwcFV0aWxzIGFzIFRkVXRpbHN9IGZyb20gXCJzZC10cmVlLWRlc2lnbmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBBcHBVdGlscyBleHRlbmRzIFRkVXRpbHN7XG5cblxuXG4gICAgc3RhdGljIHVwZGF0ZUlucHV0Q2xhc3Moc2VsZWN0aW9uKXtcbiAgICAgICAgdmFyIHZhbHVlID0gc2VsZWN0aW9uLm5vZGUoKS52YWx1ZTtcbiAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoJ2VtcHR5JywgdmFsdWUhPT0wICYmICF2YWx1ZSk7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb247XG4gICAgfVxuXG4gICAgc3RhdGljIGF1dG9SZXNpemVUZXh0YXJlYShlbGVtZW50KXtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IFwiXCI7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICAgICAgaWYod2lkdGgpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCsncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXV0b3NpemUudXBkYXRlKGVsZW1lbnQpO1xuICAgICAgICB9LCAxMCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGVsYXN0aWNUZXh0YXJlYShzZWxlY3Rpb24pe1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3Rpb24uc3R5bGUoJ3dpZHRoJyx1bmRlZmluZWQpO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gc2VsZWN0aW9uLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgIGlmKHdpZHRoKXtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc3R5bGUoJ3dpZHRoJywgd2lkdGgrJ3B4JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF1dG9zaXplLmRlZmF1bHQoc2VsZWN0aW9uLm5vZGUoKSk7XG4gICAgICAgIH0sMTApXG4gICAgfVxuXG4gICAgc3RhdGljIHBvc3RCeUZvcm0odXJsLCBkYXRhKSB7XG4gICAgICAgIHZhciBuYW1lLFxuICAgICAgICAgICAgZm9ybTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIGZvcm1cbiAgICAgICAgZm9ybSA9IEFwcFV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nLCBBcHBVdGlscy5tZXJnZURlZXAoe1xuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICBhY3Rpb246IHVybCxcbiAgICAgICAgICAgIGVuY3R5cGU6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9KSwgZG9jdW1lbnQuYm9keSk7XG5cbiAgICAgICAgZm9yIChuYW1lIGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmKGRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkpe1xuICAgICAgICAgICAgICAgIEFwcFV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRhdGFbbmFtZV1cbiAgICAgICAgICAgICAgICB9LCBmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm0uc3VibWl0KCk7XG5cbiAgICAgICAgQXBwVXRpbHMucmVtb3ZlRWxlbWVudChmb3JtKTtcbiAgICB9O1xuXG4gICAgc3RhdGljIHNob3dGdWxsU2NyZWVuUG9wdXAodGl0bGUsIGh0bWwsIGNsb3NlQ2FsbGJhY2spe1xuICAgICAgICB2YXIgcG9wdXAgPSBkMy5zZWxlY3QoXCJib2R5XCIpLnNlbGVjdE9yQXBwZW5kKFwiZGl2LnNkLWZ1bGwtc2NyZWVuLXBvcHVwLWNvbnRhaW5lclwiKS5odG1sKFRlbXBsYXRlcy5nZXQoJ2Z1bGxzY3JlZW5Qb3B1cCcsIHt0aXRsZTp0aXRsZSxib2R5Omh0bWx9KSk7XG4gICAgICAgIHBvcHVwLnNlbGVjdCgnLnNkLWNsb3NlLXBvcHVwJykub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgIHBvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYoY2xvc2VDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNsb3NlQ2FsbGJhY2soKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcIi4vZDNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge1V0aWxzLCBsb2d9IGZyb20gXCJzZC11dGlsc1wiO1xuaW1wb3J0IHtBcHBVdGlsc30gZnJvbSBcIi4vYXBwLXV0aWxzXCI7XG5pbXBvcnQgKiBhcyBtb2RlbCBmcm9tIFwic2QtbW9kZWxcIjtcbmltcG9ydCB7VHJlZURlc2lnbmVyfSBmcm9tIFwic2QtdHJlZS1kZXNpZ25lclwiO1xuaW1wb3J0IHtUZW1wbGF0ZXN9IGZyb20gXCIuL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHtTaWRlYmFyfSBmcm9tIFwiLi9zaWRlYmFyXCI7XG5pbXBvcnQge1Rvb2xiYXJ9IGZyb20gXCIuL3Rvb2xiYXJcIjtcbmltcG9ydCB7U2V0dGluZ3NEaWFsb2d9IGZyb20gXCIuL2RpYWxvZ3Mvc2V0dGluZ3MtZGlhbG9nXCI7XG5pbXBvcnQge0Fib3V0RGlhbG9nfSBmcm9tIFwiLi9kaWFsb2dzL2Fib3V0LWRpYWxvZ1wiO1xuaW1wb3J0IHtFeHBvcnRlcn0gZnJvbSBcIi4vZXhwb3J0ZXJcIjtcbmltcG9ydCB7RGVmaW5pdGlvbnNEaWFsb2d9IGZyb20gXCIuL2RpYWxvZ3MvZGVmaW5pdGlvbnMtZGlhbG9nXCI7XG5pbXBvcnQge0NvbXB1dGF0aW9uc01hbmFnZXJ9IGZyb20gXCJzZC1jb21wdXRhdGlvbnNcIjtcbmltcG9ydCB7U2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZ30gZnJvbSBcIi4vZGlhbG9ncy9zZW5zaXRpdml0eS1hbmFseXNpcy1kaWFsb2dcIjtcbmltcG9ydCB7TG9hZGluZ0luZGljYXRvcn0gZnJvbSBcIi4vbG9hZGluZy1pbmRpY2F0b3JcIjtcbmltcG9ydCB7TGVhZ3VlVGFibGVEaWFsb2d9IGZyb20gXCIuL2xlYWd1ZS10YWJsZS9sZWFndWUtdGFibGUtZGlhbG9nXCI7XG5cbnZhciBidWlsZENvbmZpZyA9IHJlcXVpcmUoJy4uL3RtcC9idWlsZC1jb25maWcuanMnKTtcblxuZXhwb3J0IGNsYXNzIEFwcENvbmZpZyB7XG4gICAgcmVhZE9ubHkgPSBmYWxzZTtcbiAgICBsb2dMZXZlbCA9ICd3YXJuJztcbiAgICB3b3JrZXJVcmwgPSBudWxsO1xuICAgIGpvYlJlcG9zaXRvcnlUeXBlID0gJ2lkYic7XG4gICAgY2xlYXJSZXBvc2l0b3J5ID0gZmFsc2U7XG4gICAgYnV0dG9ucyA9IHtcbiAgICAgICAgbmV3OiB0cnVlLFxuICAgICAgICBzYXZlOiB0cnVlLFxuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBleHBvcnRUb1BuZzogdHJ1ZSxcbiAgICAgICAgZXhwb3J0VG9Tdmc6IHRydWUsXG4gICAgICAgIGV4cG9ydFRvUGRmOiB0cnVlXG4gICAgfTtcbiAgICBleHBvcnRzID0ge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBzZXJ2ZXJVcmw6ICdodHRwOi8vZXhwb3J0LmhpZ2hjaGFydHMuY29tJywgLy91cmwgb2YgdGhlIGV4cG9ydCBzZXJ2ZXJcbiAgICAgICAgcGRmOiB7XG4gICAgICAgICAgICBtb2RlOiAnc2VydmVyJywgLy8gYXZhaWxhYmxlIG9wdGlvbnM6ICdjbGllbnQnLCAnc2VydmVyJywgJ2ZhbGxiYWNrJyxcbiAgICAgICAgfSxcbiAgICAgICAgcG5nOiB7XG4gICAgICAgICAgICBtb2RlOiAnZmFsbGJhY2snLCAvLyBhdmFpbGFibGUgb3B0aW9uczogJ2NsaWVudCcsICdzZXJ2ZXInLCAnZmFsbGJhY2snLFxuICAgICAgICB9XG4gICAgfTtcbiAgICBzaG93RGV0YWlscyA9IHRydWU7XG4gICAgc2hvd0RlZmluaXRpb25zID0gdHJ1ZTtcbiAgICBqc29uRmlsZURvd25sb2FkID0gdHJ1ZTtcbiAgICB3aWR0aCA9IHVuZGVmaW5lZDtcbiAgICBoZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgcnVsZSA9IFwiZXhwZWN0ZWQtdmFsdWUtbWF4aW1pemF0aW9uXCI7XG4gICAgbG5nID0gJ2VuJztcbiAgICBmb3JtYXQgPSB7Ly8gTnVtYmVyRm9ybWF0ICBvcHRpb25zXG4gICAgICAgIGxvY2FsZXM6ICdlbicsXG4gICAgICAgIHBheW9mZjE6IHtcbiAgICAgICAgICAgIHN0eWxlOiAnY3VycmVuY3knLFxuICAgICAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgICAgICAgY3VycmVuY3lEaXNwbGF5OiAnc3ltYm9sJyxcbiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMCxcbiAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMixcbiAgICAgICAgICAgIC8vIG1pbmltdW1TaWduaWZpY2FudERpZ2l0czogMSxcbiAgICAgICAgICAgIHVzZUdyb3VwaW5nOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHBheW9mZjI6IHtcbiAgICAgICAgICAgIHN0eWxlOiAnZGVjaW1hbCcsXG4gICAgICAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gICAgICAgICAgICBjdXJyZW5jeURpc3BsYXk6ICdzeW1ib2wnLFxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAwLFxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAyLFxuICAgICAgICAgICAgLy8gbWluaW11bVNpZ25pZmljYW50RGlnaXRzOiAxLFxuICAgICAgICAgICAgdXNlR3JvdXBpbmc6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcHJvYmFiaWxpdHk6IHsgLy8gTnVtYmVyRm9ybWF0ICBvcHRpb25zXG4gICAgICAgICAgICBzdHlsZTogJ2RlY2ltYWwnLFxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyLFxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAzLFxuICAgICAgICAgICAgdXNlR3JvdXBpbmc6IHRydWVcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGl0bGUgPSAnJztcbiAgICBkZXNjcmlwdGlvbiA9ICcnO1xuICAgIHRyZWVEZXNpZ25lciA9IHt9O1xuICAgIGxlYWd1ZVRhYmxlID0ge1xuICAgICAgICBwbG90OiB7XG4gICAgICAgICAgICBtYXhXaWR0aDogXCI4MDBweFwiLFxuICAgICAgICAgICAgZ3JvdXBzOiB7XG4gICAgICAgICAgICAgICAgJ2hpZ2hsaWdodGVkJzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDgwMDAnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnaGlnaGxpZ2h0ZWQtZGVmYXVsdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDBiZDAwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2V4dGVuZGVkLWRvbWluYXRlZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZmZhNTAwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2RvbWluYXRlZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZmYwMDAwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2RlZmF1bHQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy9odHRwczovL2dpdGh1Yi5jb20vZDMvZDMtZm9ybWF0L2Jsb2IvbWFzdGVyL1JFQURNRS5tZCNmb3JtYXRcblxuICAgIGNvbnN0cnVjdG9yKGN1c3RvbSkge1xuICAgICAgICBpZiAoY3VzdG9tKSB7XG4gICAgICAgICAgICBVdGlscy5kZWVwRXh0ZW5kKHRoaXMsIGN1c3RvbSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuICAgIHN0YXRpYyB2ZXJzaW9uID0gJyc7IC8vIHZlcnNpb24gaXMgc2V0IGZyb20gcGFja2FnZS5qc29uXG4gICAgc3RhdGljIGJ1aWxkVGltZXN0YW1wID0gYnVpbGRDb25maWcuYnVpbGRUaW1lc3RhbXA7XG4gICAgc3RhdGljIHV0aWxzID0gVXRpbHM7XG4gICAgc3RhdGljIGFwcFV0aWxzID0gQXBwVXRpbHM7XG4gICAgc3RhdGljIGQzID0gZDM7XG5cbiAgICBjb25maWc7XG4gICAgY29udGFpbmVyO1xuICAgIGRhdGFNb2RlbDsgLy9EYXRhIG1vZGVsIG1hbmFnZXJcbiAgICBleHByZXNzaW9uRW5naW5lO1xuICAgIGNvbXB1dGF0aW9uc01hbmFnZXI7XG4gICAgdHJlZURlc2lnbmVyO1xuICAgIHRvb2xiYXI7XG4gICAgc2lkZWJhcjtcbiAgICB2aWV3TW9kZXMgPSBbXTtcbiAgICBjdXJyZW50Vmlld01vZGU7XG5cbiAgICBwYXlvZmZzTWF4aW1pemF0aW9uPVt0cnVlLCBmYWxzZV07XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXJJZE9yRWxlbSwgY29uZmlnLCBkaWFncmFtRGF0YSkge1xuICAgICAgICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLmluaXRJMThuKCk7XG4gICAgICAgIHRoaXMuaW5pdENvbnRhaW5lcihjb250YWluZXJJZE9yRWxlbSk7XG4gICAgICAgIHRoaXMuaW5pdFZpZXdNb2RlcygpO1xuICAgICAgICB0aGlzLmluaXREYXRhTW9kZWwoKTtcbiAgICAgICAgcCA9IHRoaXMuaW5pdENvbXB1dGF0aW9uc01hbmFnZXIoKTtcbiAgICAgICAgdGhpcy5pbml0UHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQoKTtcbiAgICAgICAgdGhpcy5pbml0UGF5b2ZmTnVtYmVyRm9ybWF0KCk7XG4gICAgICAgIHRoaXMuaW5pdFRyZWVEZXNpZ25lcigpO1xuICAgICAgICB0aGlzLmluaXRTaWRlYmFyKCk7XG4gICAgICAgIHRoaXMuaW5pdFNldHRpbmdzRGlhbG9nKCk7XG4gICAgICAgIHRoaXMuaW5pdEFib3V0RGlhbG9nKCk7XG4gICAgICAgIHRoaXMuaW5pdERlZmluaXRpb25zRGlhbG9nKCk7XG4gICAgICAgIHRoaXMuaW5pdFNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2coKTtcbiAgICAgICAgdGhpcy5pbml0TGVhZ3VlVGFibGVEaWFsb2coKTtcbiAgICAgICAgdGhpcy5pbml0T25CZWZvcmVVbmxvYWQoKTtcbiAgICAgICAgdGhpcy5pbml0S2V5Q29kZXMoKTtcbiAgICAgICAgcC50aGVuKCgpPT4ge1xuICAgICAgICAgICAgdGhpcy5pbml0VG9vbGJhcigpO1xuICAgICAgICAgICAgaWYgKGRpYWdyYW1EYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuRGlhZ3JhbShkaWFncmFtRGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChlPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IG5ldyBBcHBDb25maWcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gbmV3IEFwcENvbmZpZyhjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TG9nTGV2ZWwodGhpcy5jb25maWcubG9nTGV2ZWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdGF0aWMgZ3Jvd2woKSB7XG4gICAgICAgIHJldHVybiBBcHBVdGlscy5ncm93bChhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgICAgICAgbG9nLnNldExldmVsKGxldmVsKVxuICAgIH1cblxuICAgIGluaXRDb250YWluZXIoY29udGFpbmVySWRPckVsZW0pIHtcblxuICAgICAgICBpZiAoVXRpbHMuaXNTdHJpbmcoY29udGFpbmVySWRPckVsZW0pKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBjb250YWluZXJJZE9yRWxlbS50cmltKCk7XG5cbiAgICAgICAgICAgIGlmICghVXRpbHMuc3RhcnRzV2l0aChzZWxlY3RvciwgJyMnKSAmJiAhVXRpbHMuc3RhcnRzV2l0aChzZWxlY3RvciwgJy4nKSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gJyMnICsgc2VsZWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGQzLnNlbGVjdChzZWxlY3Rvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXJJZE9yRWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGxldCBodG1sID0gVGVtcGxhdGVzLmdldCgnbWFpbicsIHtcbiAgICAgICAgICAgIHZlcnNpb246IEFwcC52ZXJzaW9uLFxuICAgICAgICAgICAgYnVpbGRUaW1lc3RhbXA6IEFwcC5idWlsZFRpbWVzdGFtcCxcbiAgICAgICAgICAgICdsbmcnOiBzZWxmLmNvbmZpZy5sbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmh0bWwoaHRtbCk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KCcjc2lsdmVyLWRlY2lzaW9ucycpLmNsYXNzZWQoJ3NkLXJlYWQtb25seScsIHRoaXMuY29uZmlnLnJlYWRPbmx5KTtcbiAgICB9XG5cbiAgICBpbml0STE4bigpIHtcbiAgICAgICAgaTE4bi5pbml0KHRoaXMuY29uZmlnLmxuZyk7XG4gICAgfVxuXG4gICAgaW5pdERhdGFNb2RlbCgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmRhdGFNb2RlbCA9IG5ldyBtb2RlbC5EYXRhTW9kZWwoKTtcbiAgICAgICAgLy8gdGhpcy5kYXRhTW9kZWwubm9kZUFkZGVkQ2FsbGJhY2sgPSB0aGlzLmRhdGFNb2RlbC5ub2RlUmVtb3ZlZENhbGxiYWNrID0gKCk9PnNlbGYub25Ob2RlQWRkZWRPclJlbW92ZWQoKTtcbiAgICAgICAgdGhpcy5kYXRhTW9kZWwubm9kZUFkZGVkQ2FsbGJhY2sgPSB0aGlzLmRhdGFNb2RlbC5ub2RlUmVtb3ZlZENhbGxiYWNrID0gKG5vZGUpPT4gVXRpbHMud2FpdEZvckZpbmFsRXZlbnQoKCk9PnRoaXMub25Ob2RlQWRkZWRPclJlbW92ZWQoKSwgJ29uTm9kZUFkZGVkT3JSZW1vdmVkJywgNSk7XG5cbiAgICAgICAgdGhpcy5kYXRhTW9kZWwudGV4dEFkZGVkQ2FsbGJhY2sgPSAodGV4dCk9PiBVdGlscy53YWl0Rm9yRmluYWxFdmVudCgoKT0+dGhpcy5vblRleHRBZGRlZCh0ZXh0KSwgJ29uVGV4dEFkZGVkJyk7XG4gICAgICAgIHRoaXMuZGF0YU1vZGVsLnRleHRSZW1vdmVkQ2FsbGJhY2sgPSAodGV4dCk9PiBVdGlscy53YWl0Rm9yRmluYWxFdmVudCgoKT0+dGhpcy5vblRleHRSZW1vdmVkKHRleHQpLCAnb25UZXh0QWRkZWQnKTtcbiAgICB9XG5cbiAgICBpbml0Q29tcHV0YXRpb25zTWFuYWdlcigpIHtcbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyID0gbmV3IENvbXB1dGF0aW9uc01hbmFnZXIoe1xuICAgICAgICAgICAgcnVsZU5hbWU6IHRoaXMuY29uZmlnLnJ1bGVOYW1lLFxuICAgICAgICAgICAgd29ya2VyOiB7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNvbmZpZy53b3JrZXJVcmwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgam9iUmVwb3NpdG9yeVR5cGU6IHRoaXMuY29uZmlnLmpvYlJlcG9zaXRvcnlUeXBlLFxuICAgICAgICAgICAgY2xlYXJSZXBvc2l0b3J5OiB0aGlzLmNvbmZpZy5jbGVhclJlcG9zaXRvcnlcbiAgICAgICAgfSwgdGhpcy5kYXRhTW9kZWwpO1xuICAgICAgICB0aGlzLmV4cHJlc3Npb25FbmdpbmUgPSB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZXhwcmVzc2lvbkVuZ2luZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tWYWxpZGl0eUFuZFJlY29tcHV0ZU9iamVjdGl2ZShmYWxzZSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcblxuICAgIH1cblxuICAgIGluaXRTaWRlYmFyKCkge1xuICAgICAgICB0aGlzLnNpZGViYXIgPSBuZXcgU2lkZWJhcih0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNzZC1zaWRlYmFyJyksIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgaW5pdFNldHRpbmdzRGlhbG9nKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzRGlhbG9nID0gbmV3IFNldHRpbmdzRGlhbG9nKHRoaXMpO1xuICAgIH1cblxuICAgIGluaXRBYm91dERpYWxvZygpIHtcbiAgICAgICAgdGhpcy5hYm91dERpYWxvZyA9IG5ldyBBYm91dERpYWxvZyh0aGlzKTtcbiAgICB9XG5cbiAgICBpbml0RGVmaW5pdGlvbnNEaWFsb2coKSB7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNEaWFsb2cgPSBuZXcgRGVmaW5pdGlvbnNEaWFsb2codGhpcyk7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNEaWFsb2cub25DbG9zZWQgPSAoKT0+IHRoaXMucmVjb21wdXRlKHRydWUsIHRydWUpO1xuXG4gICAgfVxuXG4gICAgaW5pdExlYWd1ZVRhYmxlRGlhbG9nKCkge1xuICAgICAgICB0aGlzLmxlYWd1ZVRhYmxlRGlhbG9nID0gbmV3IExlYWd1ZVRhYmxlRGlhbG9nKHRoaXMpO1xuICAgIH1cblxuICAgIGlzTGVhZ3VlVGFibGVBdmFpbGFibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzTXVsdGlwbGVDcml0ZXJpYSgpICYmIHRoaXMuZGF0YU1vZGVsLmdldFJvb3RzKCkubGVuZ3RoID09PSAxICYmIHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5pc1ZhbGlkKCkgJiYgdGhpcy5sZWFndWVUYWJsZURpYWxvZy52YWxpZGF0ZVBhcmFtcygpO1xuICAgIH1cblxuICAgIGluaXRTZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nKCkge1xuICAgICAgICB0aGlzLnNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2cgPSBuZXcgU2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZyh0aGlzKTtcblxuICAgIH1cblxuICAgIGlzU2Vuc2l0aXZpdHlBbmFseXNpc0F2YWlsYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzTXVsdGlwbGVDcml0ZXJpYSgpICYmIHRoaXMuZGF0YU1vZGVsLmdldFJvb3RzKCkubGVuZ3RoID09PSAxICYmIHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5pc1ZhbGlkKCkgJiYgdGhpcy5kYXRhTW9kZWwuZ2V0R2xvYmFsVmFyaWFibGVOYW1lcyh0cnVlKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgaW5pdFRvb2xiYXIoKSB7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3NkLXRvb2xiYXInKSwgdGhpcyk7XG5cbiAgICB9XG5cbiAgICBpbml0UGF5b2ZmTnVtYmVyRm9ybWF0KCkge1xuXG4gICAgICAgIHRoaXMucGF5b2ZmTnVtYmVyRm9ybWF0ID0gW1xuICAgICAgICAgICAgbmV3IEludGwuTnVtYmVyRm9ybWF0KHRoaXMuY29uZmlnLmZvcm1hdC5sb2NhbGVzLCB0aGlzLmNvbmZpZy5mb3JtYXQucGF5b2ZmMSksXG4gICAgICAgICAgICBuZXcgSW50bC5OdW1iZXJGb3JtYXQodGhpcy5jb25maWcuZm9ybWF0LmxvY2FsZXMsIHRoaXMuY29uZmlnLmZvcm1hdC5wYXlvZmYyKVxuICAgICAgICBdXG5cbiAgICB9XG5cbiAgICBpbml0UHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQoKSB7XG4gICAgICAgIHRoaXMucHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQodGhpcy5jb25maWcuZm9ybWF0LmxvY2FsZXMsIHRoaXMuY29uZmlnLmZvcm1hdC5wcm9iYWJpbGl0eSk7XG4gICAgfVxuXG4gICAgaW5pdFRyZWVEZXNpZ25lcigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY29uZmlnID0gdGhpcy5nZXRUcmVlRGVzaWduZXJJbml0aWFsQ29uZmlnKCk7XG4gICAgICAgIGxldCBjb250YWluZXIyID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCcjdHJlZS1kZXNpZ25lci1jb250YWluZXInKTtcblxuICAgICAgICB0aGlzLnRyZWVEZXNpZ25lciA9IG5ldyBUcmVlRGVzaWduZXIoY29udGFpbmVyMiwgdGhpcy5kYXRhTW9kZWwsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZ2V0VHJlZURlc2lnbmVySW5pdGlhbENvbmZpZygpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBVdGlscy5kZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgIGxuZzogc2VsZi5jb25maWcubG5nLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHNlbGYuY29uZmlnLnJlYWRPbmx5LFxuICAgICAgICAgICAgb25Ob2RlU2VsZWN0ZWQ6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vbk9iamVjdFNlbGVjdGVkKG5vZGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRWRnZVNlbGVjdGVkOiBmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICAgICAgICAgIHNlbGYub25PYmplY3RTZWxlY3RlZChlZGdlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblRleHRTZWxlY3RlZDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm9uT2JqZWN0U2VsZWN0ZWQodGV4dCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TZWxlY3Rpb25DbGVhcmVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vblNlbGVjdGlvbkNsZWFyZWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXlvZmZOdW1iZXJGb3JtYXR0ZXI6ICh2LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHByZWZpeCA9ICcnO1xuICAgICAgICAgICAgICAgIGlmKHNlbGYuY3VycmVudFZpZXdNb2RlLm11bHRpQ3JpdGVyaWEpe1xuICAgICAgICAgICAgICAgICAgICBwcmVmaXggPSAgc2VsZi5kYXRhTW9kZWwucGF5b2ZmTmFtZXNbaV0uY2hhckF0KDApICsgJzogJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgc2VsZi5wYXlvZmZOdW1iZXJGb3JtYXRbaSB8fCBzZWxmLmN1cnJlbnRWaWV3TW9kZS5wYXlvZmZJbmRleCB8fCAwXS5mb3JtYXQodilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9iYWJpbGl0eU51bWJlckZvcm1hdHRlcjogKHYpID0+IHNlbGYucHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQuZm9ybWF0KHYpLFxuICAgICAgICAgICAgb3BlcmF0aW9uc0Zvck9iamVjdDogKG8pID0+IHNlbGYuY29tcHV0YXRpb25zTWFuYWdlci5vcGVyYXRpb25zRm9yT2JqZWN0KG8pXG4gICAgICAgIH0sIHNlbGYuY29uZmlnLnRyZWVEZXNpZ25lcik7XG4gICAgfVxuXG4gICAgb25PYmplY3RTZWxlY3RlZChvYmplY3QpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE9iamVjdCA9PT0gb2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3RlZE9iamVjdCA9IG9iamVjdDtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLnNpZGViYXIudXBkYXRlT2JqZWN0UHJvcGVydGllc1ZpZXcoc2VsZi5zZWxlY3RlZE9iamVjdCk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVZhcmlhYmxlRGVmaW5pdGlvbnMoKTtcbiAgICAgICAgICAgIHNlbGYudHJlZURlc2lnbmVyLnVwZGF0ZVBsb3R0aW5nUmVnaW9uU2l6ZSgpO1xuICAgICAgICB9LCAxMClcbiAgICB9XG5cbiAgICBvblNlbGVjdGlvbkNsZWFyZWQoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5zZWxlY3RlZE9iamVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2lkZWJhci5oaWRlT2JqZWN0UHJvcGVydGllcygpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlVmFyaWFibGVEZWZpbml0aW9ucygpO1xuICAgICAgICAgICAgc2VsZi50cmVlRGVzaWduZXIudXBkYXRlUGxvdHRpbmdSZWdpb25TaXplKCk7XG4gICAgICAgIH0sIDEwKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coKTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50VmFyaWFibGVEZWZpbml0aW9uc1NvdXJjZU9iamVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkT2JqZWN0IGluc3RhbmNlb2YgbW9kZWwuZG9tYWluLk5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZE9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkT2JqZWN0IGluc3RhbmNlb2YgbW9kZWwuZG9tYWluLkVkZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZE9iamVjdC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFNb2RlbDtcbiAgICB9XG5cbiAgICB1cGRhdGVWYXJpYWJsZURlZmluaXRpb25zKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBkZWZpbml0aW9uc1NvdXJjZU9iamVjdCA9IHNlbGYuZ2V0Q3VycmVudFZhcmlhYmxlRGVmaW5pdGlvbnNTb3VyY2VPYmplY3QoKTtcbiAgICAgICAgdmFyIHJlYWRPbmx5ID0gKHRoaXMuc2VsZWN0ZWRPYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5kb21haW4uRWRnZSkgfHwgKHRoaXMuc2VsZWN0ZWRPYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5kb21haW4uVGVybWluYWxOb2RlKTtcbiAgICAgICAgc2VsZi5zaWRlYmFyLnVwZGF0ZURlZmluaXRpb25zKGRlZmluaXRpb25zU291cmNlT2JqZWN0LCByZWFkT25seSwgKGNvZGUpPT4ge1xuICAgICAgICAgICAgc2VsZi5kYXRhTW9kZWwuc2F2ZVN0YXRlKCk7XG4gICAgICAgICAgICBkZWZpbml0aW9uc1NvdXJjZU9iamVjdC5jb2RlID0gY29kZTtcbiAgICAgICAgICAgIHNlbGYucmVjb21wdXRlKHRydWUsIHRydWUpXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgb3BlbkRlZmluaXRpb25zRGlhbG9nKCkge1xuICAgICAgICB2YXIgZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QgPSB0aGlzLmdldEN1cnJlbnRWYXJpYWJsZURlZmluaXRpb25zU291cmNlT2JqZWN0KCk7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNEaWFsb2cub3BlbihkZWZpbml0aW9uc1NvdXJjZU9iamVjdCwgKGNvZGUpPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhTW9kZWwuc2F2ZVN0YXRlKCk7XG4gICAgICAgICAgICBkZWZpbml0aW9uc1NvdXJjZU9iamVjdC5jb2RlID0gY29kZTtcbiAgICAgICAgICAgIHRoaXMucmVjb21wdXRlKHRydWUsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVWaWV3KHdpdGhUcmFuc2l0aW9ucyA9IHRydWUpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ191cGRhdGVWaWV3Jyk7XG4gICAgICAgIHRoaXMudHJlZURlc2lnbmVyLnJlZHJhdyh3aXRoVHJhbnNpdGlvbnMpO1xuICAgICAgICB0aGlzLnNpZGViYXIudXBkYXRlT2JqZWN0UHJvcGVydGllc1ZpZXcodGhpcy5zZWxlY3RlZE9iamVjdCk7XG4gICAgICAgIHRoaXMudXBkYXRlVmFyaWFibGVEZWZpbml0aW9ucygpO1xuICAgICAgICB0aGlzLnRvb2xiYXIudXBkYXRlKCk7XG4gICAgICAgIHRoaXMuc2lkZWJhci51cGRhdGVMYXlvdXRPcHRpb25zKCk7XG4gICAgICAgIHRoaXMuc2lkZWJhci51cGRhdGVEaWFncmFtRGV0YWlscygpO1xuICAgICAgICB0aGlzLnNpZGViYXIudXBkYXRlTXVsdGlwbGVDcml0ZXJpYSgpO1xuICAgIH1cblxuICAgIHVuZG8oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2VsZi5kYXRhTW9kZWwudW5kbygpO1xuICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZE9iamVjdCkge1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE9iamVjdCA9IHNlbGYuZGF0YU1vZGVsLmZpbmRCeUlkKHNlbGYuc2VsZWN0ZWRPYmplY3QuaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrVmFsaWRpdHlBbmRSZWNvbXB1dGVPYmplY3RpdmUoZmFsc2UsIGZhbHNlLCBmYWxzZSkudGhlbigoKT0+IHtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlVmlldygpO1xuICAgICAgICB9KVxuXG4gICAgfVxuXG4gICAgcmVkbygpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLmRhdGFNb2RlbC5yZWRvKCk7XG4gICAgICAgIGlmIChzZWxmLnNlbGVjdGVkT2JqZWN0KSB7XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkT2JqZWN0ID0gc2VsZi5kYXRhTW9kZWwuZmluZEJ5SWQoc2VsZi5zZWxlY3RlZE9iamVjdC5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja1ZhbGlkaXR5QW5kUmVjb21wdXRlT2JqZWN0aXZlKGZhbHNlLCBmYWxzZSwgZmFsc2UpLnRoZW4oKCk9PiB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVZpZXcoKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBvbk5vZGVBZGRlZE9yUmVtb3ZlZCgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5jaGVja1ZhbGlkaXR5QW5kUmVjb21wdXRlT2JqZWN0aXZlKCkudGhlbigoKT0+IHtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlVmlldygpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIG9uVGV4dEFkZGVkKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25PYmplY3RTZWxlY3RlZCh0ZXh0KTtcbiAgICB9XG5cbiAgICBvblRleHRSZW1vdmVkKHRleHQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XG4gICAgfVxuXG4gICAgb25PYmplY3RVcGRhdGVkKG9iamVjdCwgZmllbGROYW1lKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgbW9kZWwuZG9tYWluLlRleHQpICYmIGZpZWxkTmFtZSAhPT0gJ25hbWUnKSB7XG4gICAgICAgICAgICBwID0gcC50aGVuKCgpPT50aGlzLmNoZWNrVmFsaWRpdHlBbmRSZWNvbXB1dGVPYmplY3RpdmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcy5zaWRlYmFyLnVwZGF0ZU9iamVjdFByb3BlcnRpZXNWaWV3KHRoaXMuc2VsZWN0ZWRPYmplY3QpO1xuICAgICAgICByZXR1cm4gcC50aGVuKCgpPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi50cmVlRGVzaWduZXIucmVkcmF3KHRydWUpO1xuICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uTXVsdGlDcml0ZXJpYVVwZGF0ZWQoZmllbGROYW1lKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgaWYgKGZpZWxkTmFtZSA9PT0gJ2RlZmF1bHRDcml0ZXJpb24xV2VpZ2h0Jykge1xuICAgICAgICAgICAgcCA9IHAudGhlbigoKT0+dGhpcy5jaGVja1ZhbGlkaXR5QW5kUmVjb21wdXRlT2JqZWN0aXZlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2lkZWJhci51cGRhdGVNdWx0aXBsZUNyaXRlcmlhKCk7XG5cbiAgICAgICAgcmV0dXJuIHAudGhlbigoKT0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYudHJlZURlc2lnbmVyLnJlZHJhdyh0cnVlKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNpZGViYXIudXBkYXRlT2JqZWN0UHJvcGVydGllc1ZpZXcoc2VsZi5zZWxlY3RlZE9iamVjdCk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0T2JqZWN0aXZlUnVsZShydWxlTmFtZSwgZXZhbENvZGUgPSBmYWxzZSwgZXZhbE51bWVyaWMgPSBmYWxzZSwgdXBkYXRlVmlldyA9IHRydWUsIHJlY29tcHV0ZSA9IHRydWUpIHtcbiAgICAgICAgbGV0IHByZXZSdWxlID0gdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldEN1cnJlbnRSdWxlKCk7XG4gICAgICAgIHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5zZXRDdXJyZW50UnVsZUJ5TmFtZShydWxlTmFtZSk7XG4gICAgICAgIGxldCBjdXJyZW50UnVsZSA9IHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5nZXRDdXJyZW50UnVsZSgpO1xuICAgICAgICBsZXQgbXVsdGlDcml0ZXJpYSA9IGN1cnJlbnRSdWxlLm11bHRpQ3JpdGVyaWE7XG4gICAgICAgIHRoaXMudHJlZURlc2lnbmVyLmNvbmZpZy5tYXhQYXlvZmZzVG9EaXNwbGF5ID0gbXVsdGlDcml0ZXJpYSA/IDIgOiAxO1xuXG4gICAgICAgIGlmIChtdWx0aUNyaXRlcmlhKSB7XG4gICAgICAgICAgICB0aGlzLnBheW9mZnNNYXhpbWl6YXRpb24gPSBjdXJyZW50UnVsZS5wYXlvZmZDb2VmZnMubWFwKGM9PmM+MCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRhTW9kZWwucGF5b2ZmTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhTW9kZWwucGF5b2ZmTmFtZXMucHVzaChudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFNb2RlbC5wYXlvZmZOYW1lc1swXSA9IGkxOG4udCgnbXVsdGlwbGVDcml0ZXJpYS5kZWZhdWx0TWluaW1pemVkQ3JpdGVyaW9uTmFtZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YU1vZGVsLnBheW9mZk5hbWVzWzFdID0gaTE4bi50KCdtdWx0aXBsZUNyaXRlcmlhLmRlZmF1bHRNYXhpbWl6ZWRDcml0ZXJpb25OYW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5jb25maWcucGF5b2ZmTmFtZXMgPSB0aGlzLmRhdGFNb2RlbC5wYXlvZmZOYW1lcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF5b2Zmc01heGltaXphdGlvblt0aGlzLmN1cnJlbnRWaWV3TW9kZS5wYXlvZmZJbmRleF0gPSBjdXJyZW50UnVsZS5tYXhpbWl6YXRpb247XG4gICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5jb25maWcucGF5b2ZmTmFtZXMgPSBbbnVsbCwgbnVsbF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZWNvbXB1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrVmFsaWRpdHlBbmRSZWNvbXB1dGVPYmplY3RpdmUoZmFsc2UsIGV2YWxDb2RlLCBldmFsTnVtZXJpYykudGhlbigoKT0+IHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVWaWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBpc011bHRpcGxlQ3JpdGVyaWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZ2V0Q3VycmVudFJ1bGUoKS5tdWx0aUNyaXRlcmlhO1xuICAgIH1cblxuICAgIGZsaXBDcml0ZXJpYSgpIHtcbiAgICAgICAgbGV0IHRtcCA9IHRoaXMuY29uZmlnLmZvcm1hdC5wYXlvZmYxO1xuICAgICAgICB0aGlzLmNvbmZpZy5mb3JtYXQucGF5b2ZmMSA9IHRoaXMuY29uZmlnLmZvcm1hdC5wYXlvZmYyO1xuICAgICAgICB0aGlzLmNvbmZpZy5mb3JtYXQucGF5b2ZmMiA9IHRtcDtcbiAgICAgICAgdGhpcy5pbml0UGF5b2ZmTnVtYmVyRm9ybWF0KCk7XG5cbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmZsaXBDcml0ZXJpYSgpLnRoZW4oKCk9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoZmFsc2UpO1xuICAgICAgICB9KS5jYXRjaChlPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9KVxuICAgIH1cblxuXG4gICAgZ2V0Q3VycmVudE9iamVjdGl2ZVJ1bGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZ2V0Q3VycmVudFJ1bGUoKTtcbiAgICB9XG5cbiAgICBnZXRPYmplY3RpdmVSdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5nZXRPYmplY3RpdmVSdWxlcygpLmZpbHRlcihydWxlPT5ydWxlLm11bHRpQ3JpdGVyaWEgPT09IHRoaXMuY3VycmVudFZpZXdNb2RlLm11bHRpQ3JpdGVyaWEpO1xuICAgIH1cblxuXG4gICAgaW5pdFZpZXdNb2RlcygpIHtcbiAgICAgICAgdGhpcy52aWV3TW9kZXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBcImNyaXRlcmlvbjFcIixcbiAgICAgICAgICAgIG11bHRpQ3JpdGVyaWE6IGZhbHNlLFxuICAgICAgICAgICAgcGF5b2ZmSW5kZXg6IDAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlld01vZGVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogXCJjcml0ZXJpb24yXCIsXG4gICAgICAgICAgICBtdWx0aUNyaXRlcmlhOiBmYWxzZSxcbiAgICAgICAgICAgIHBheW9mZkluZGV4OiAxLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZXdNb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IFwidHdvQ3JpdGVyaWFcIixcbiAgICAgICAgICAgIG11bHRpQ3JpdGVyaWE6IHRydWUsXG4gICAgICAgICAgICBwYXlvZmZJbmRleDogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3VycmVudFZpZXdNb2RlID0gdGhpcy52aWV3TW9kZXNbMF07XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudFZpZXdNb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Vmlld01vZGU7XG4gICAgfVxuXG4gICAgc2V0Vmlld01vZGVCeU5hbWUobmFtZSwgcmVjb21wdXRlID0gdHJ1ZSwgdXBkYXRlVmlldyA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0Vmlld01vZGUoVXRpbHMuZmluZCh0aGlzLnZpZXdNb2RlcywgbW9kZT0+bW9kZS5uYW1lID09PSBuYW1lKSwgcmVjb21wdXRlLCB1cGRhdGVWaWV3KVxuICAgIH1cblxuICAgIHNldFZpZXdNb2RlKG1vZGUsIHJlY29tcHV0ZSA9IHRydWUsIHVwZGF0ZVZpZXcgPSB0cnVlKSB7XG4gICAgICAgIGxldCBwcmV2TW9kZSA9IHRoaXMuY3VycmVudFZpZXdNb2RlO1xuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3TW9kZSA9IG1vZGU7XG5cbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLm9iamVjdGl2ZVJ1bGVzTWFuYWdlci5zZXRQYXlvZmZJbmRleCh0aGlzLmN1cnJlbnRWaWV3TW9kZS5wYXlvZmZJbmRleCk7XG5cblxuICAgICAgICBpZiAoIXJlY29tcHV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBydWxlcyA9IHRoaXMuZ2V0T2JqZWN0aXZlUnVsZXMoKTtcbiAgICAgICAgbGV0IHByZXZSdWxlID0gdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldEN1cnJlbnRSdWxlKCk7XG4gICAgICAgIGxldCBuZXdSdWxlID0gcnVsZXNbMF07XG5cblxuICAgICAgICBpZih0aGlzLmN1cnJlbnRWaWV3TW9kZS5wYXlvZmZJbmRleCAhPT0gbnVsbCl7XG4gICAgICAgICAgICBuZXdSdWxlID0gVXRpbHMuZmluZChydWxlcywgciA9PiByLm1heGltaXphdGlvbiA9PSB0aGlzLnBheW9mZnNNYXhpbWl6YXRpb25bdGhpcy5jdXJyZW50Vmlld01vZGUucGF5b2ZmSW5kZXhdKVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIG5ld1J1bGUgPSBVdGlscy5maW5kKHJ1bGVzLCByID0+IHIucGF5b2ZmQ29lZmZzLm1hcChjPT5jPjApLmV2ZXJ5KChtYXgsIGkpPT4gdGhpcy5wYXlvZmZzTWF4aW1pemF0aW9uW2ldID09PSBtYXgpKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRPYmplY3RpdmVSdWxlKG5ld1J1bGUubmFtZSwgZmFsc2UsIGZhbHNlLCB1cGRhdGVWaWV3LCByZWNvbXB1dGUpXG4gICAgfVxuXG4gICAgc2V0RGVmYXVsdFZpZXdNb2RlRm9yUnVsZShydWxlLCByZWNvbXB1dGUgPSB0cnVlLCB1cGRhdGVWaWV3ID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRWaWV3TW9kZShVdGlscy5maW5kKHRoaXMudmlld01vZGVzLCBtb2RlPT5tb2RlLm11bHRpQ3JpdGVyaWEgPT09IHJ1bGUubXVsdGlDcml0ZXJpYSksIHJlY29tcHV0ZSwgdXBkYXRlVmlldylcbiAgICB9XG5cbiAgICBnZXRWaWV3TW9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdNb2RlcztcbiAgICB9XG5cbiAgICBzaG93TGVhZ3VlVGFibGUoKSB7XG4gICAgICAgIHRoaXMubGVhZ3VlVGFibGVEaWFsb2cub3BlbigpO1xuICAgIH1cblxuICAgIG9wZW5TZW5zaXRpdml0eUFuYWx5c2lzKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCFzZWxmLmlzU2Vuc2l0aXZpdHlBbmFseXNpc0F2YWlsYWJsZSgpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2cub3BlbigpO1xuICAgICAgICB9LCAyMDApO1xuXG4gICAgfVxuXG4gICAgc2hvd1RyZWVQcmV2aWV3KGRhdGFEVE8sIGNsb3NlQ2FsbGJhY2ssIGF1dG9MYXlvdXQgPSB0cnVlKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5vcmlnaW5hbERhdGFNb2RlbFNuYXBzaG90ID0gdGhpcy5kYXRhTW9kZWwuY3JlYXRlU3RhdGVTbmFwc2hvdCgpO1xuICAgICAgICB0aGlzLmRhdGFNb2RlbC5sb2FkRnJvbURUTyhkYXRhRFRPLCB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZXhwcmVzc2lvbkVuZ2luZS5nZXRKc29uUmV2aXZlcigpKTtcbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLnVwZGF0ZURpc3BsYXlWYWx1ZXModGhpcy5kYXRhTW9kZWwpO1xuICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoZmFsc2UpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlVmlldyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ZnU3RyaW5nID0gRXhwb3J0ZXIuZ2V0U1ZHU3RyaW5nKHNlbGYudHJlZURlc2lnbmVyLnN2Zy5ub2RlKCkpO1xuICAgICAgICAgICAgICAgIEFwcFV0aWxzLnNob3dGdWxsU2NyZWVuUG9wdXAoJycsIHN2Z1N0cmluZywgKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGFNb2RlbC5fc2V0TmV3U3RhdGUoc2VsZi5vcmlnaW5hbERhdGFNb2RlbFNuYXBzaG90KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlVmlldyhmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlVmlldyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICB9LCAxKVxuXG4gICAgfVxuXG4gICAgc2hvd1BvbGljeVByZXZpZXcodGl0bGUsIHBvbGljeSwgY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMub3JpZ2luYWxEYXRhTW9kZWxTbmFwc2hvdCA9IHRoaXMuZGF0YU1vZGVsLmNyZWF0ZVN0YXRlU25hcHNob3QoKTtcbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmRpc3BsYXlQb2xpY3kocG9saWN5KTtcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgQXBwVXRpbHMuc2hvd0Z1bGxTY3JlZW5Qb3B1cCh0aXRsZSwgJycpO1xuICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLnNob3coKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVZpZXcoZmFsc2UpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN2Z1N0cmluZyA9IEV4cG9ydGVyLmdldFNWR1N0cmluZyhzZWxmLnRyZWVEZXNpZ25lci5zdmcubm9kZSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBBcHBVdGlscy5zaG93RnVsbFNjcmVlblBvcHVwKHRpdGxlLCBzdmdTdHJpbmcsICgpPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YU1vZGVsLl9zZXROZXdTdGF0ZShzZWxmLm9yaWdpbmFsRGF0YU1vZGVsU25hcHNob3QpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGYuY29tcHV0YXRpb25zTWFuYWdlci51cGRhdGVEaXNwbGF5VmFsdWVzKHNlbGYuZGF0YU1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlVmlldyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICB9LCAxKVxuICAgIH1cblxuXG4gICAgcmVjb21wdXRlKHVwZGF0ZVZpZXcgPSB0cnVlLCBkZWJvdW5jZSA9IGZhbHNlLCBmb3JjZVdoZW5BdXRvSXNEaXNhYmxlZD10cnVlKSB7XG4gICAgICAgIGlmIChkZWJvdW5jZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRlYm91bmNlZFJlY29tcHV0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVib3VuY2VkUmVjb21wdXRlID0gVXRpbHMuZGVib3VuY2UoKHVwZGF0ZVZpZXcpPT50aGlzLnJlY29tcHV0ZSh1cGRhdGVWaWV3LCBmYWxzZSksIDIwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlZFJlY29tcHV0ZSh1cGRhdGVWaWV3KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrVmFsaWRpdHlBbmRSZWNvbXB1dGVPYmplY3RpdmUoZmFsc2UsIHRydWUsIHRydWUsIGZvcmNlV2hlbkF1dG9Jc0Rpc2FibGVkKS50aGVuKCgpPT4ge1xuICAgICAgICAgICAgaWYgKHVwZGF0ZVZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBvblJhd09wdGlvbkNoYW5nZWQoKXtcbiAgICAgICAgaWYodGhpcy5pc0F1dG9SZWNhbGN1bGF0aW9uRW5hYmxlZCgpKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVmFsaWRpdHlBbmRSZWNvbXB1dGVPYmplY3RpdmUoZmFsc2UsIGZhbHNlKS50aGVuKCgpPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzQXV0b1JlY2FsY3VsYXRpb25FbmFibGVkKCl7XG4gICAgICAgIHJldHVybiAhdGhpcy50cmVlRGVzaWduZXIuY29uZmlnLnJhdztcbiAgICB9XG5cbiAgICBjaGVja1ZhbGlkaXR5QW5kUmVjb21wdXRlT2JqZWN0aXZlKGFsbFJ1bGVzLCBldmFsQ29kZSA9IGZhbHNlLCBldmFsTnVtZXJpYyA9IHRydWUsIGZvcmNlV2hlbkF1dG9Jc0Rpc2FibGVkPWZhbHNlKSB7XG4gICAgICAgIGlmKCFmb3JjZVdoZW5BdXRvSXNEaXNhYmxlZCAmJiAhdGhpcy5pc0F1dG9SZWNhbGN1bGF0aW9uRW5hYmxlZCgpKXtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuY2hlY2tWYWxpZGl0eUFuZFJlY29tcHV0ZU9iamVjdGl2ZShhbGxSdWxlcywgZXZhbENvZGUsIGV2YWxOdW1lcmljKS50aGVuKCgpPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWxpZGF0aW9uTWVzc2FnZXMoKTtcbiAgICAgICAgICAgIEFwcFV0aWxzLmRpc3BhdGNoRXZlbnQoJ1NpbHZlckRlY2lzaW9uc1JlY29tcHV0ZWRFdmVudCcsIHRoaXMpO1xuICAgICAgICB9KS5jYXRjaChlPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHVwZGF0ZVZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYudHJlZURlc2lnbmVyLnVwZGF0ZVZhbGlkYXRpb25NZXNzYWdlcygpO1xuICAgICAgICB9LCAxKTtcbiAgICB9XG5cbiAgICBuZXdEaWFncmFtKCkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmRhdGFNb2RlbC5jbGVhcigpO1xuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3TW9kZSA9IHRoaXMudmlld01vZGVzWzBdO1xuICAgICAgICB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuc2V0Q3VycmVudFJ1bGVCeU5hbWUodGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldE9iamVjdGl2ZVJ1bGVzKClbMF0ubmFtZSk7XG4gICAgICAgIHRoaXMuc2V0RGlhZ3JhbVRpdGxlKCcnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zZXREaWFncmFtRGVzY3JpcHRpb24oJycsIHRydWUpO1xuICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5zZXRDb25maWcoVXRpbHMuZGVlcEV4dGVuZCh0aGlzLmdldFRyZWVEZXNpZ25lckluaXRpYWxDb25maWcoKSkpO1xuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uQ2xlYXJlZCgpO1xuICAgICAgICB0aGlzLnNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2cuY2xlYXIodHJ1ZSwgdHJ1ZSlcblxuICAgIH1cblxuICAgIG9wZW5EaWFncmFtKGRpYWdyYW1EYXRhKSB7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZXJyb3JzID0gW107XG5cbiAgICAgICAgaWYgKFV0aWxzLmlzU3RyaW5nKGRpYWdyYW1EYXRhKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkaWFncmFtRGF0YSA9IEpTT04ucGFyc2UoZGlhZ3JhbURhdGEsIHNlbGYuY29tcHV0YXRpb25zTWFuYWdlci5leHByZXNzaW9uRW5naW5lLmdldEpzb25SZXZpdmVyKCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKCdlcnJvci5qc29uUGFyc2UnKTtcbiAgICAgICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLmpzb25QYXJzZScpKTtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGFNb2RlbE9iamVjdCA9IGRpYWdyYW1EYXRhLmRhdGE7XG5cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAoIWRpYWdyYW1EYXRhLlNpbHZlckRlY2lzaW9ucykge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ2Vycm9yLm5vdFNpbHZlckRlY2lzaW9uc0ZpbGUnKTtcbiAgICAgICAgICAgIGFsZXJ0KGkxOG4udCgnZXJyb3Iubm90U2lsdmVyRGVjaXNpb25zRmlsZScpKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXJyb3JzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghVXRpbHMuaXNWYWxpZFZlcnNpb25TdHJpbmcoZGlhZ3JhbURhdGEuU2lsdmVyRGVjaXNpb25zKSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ2Vycm9yLmluY29ycmVjdFZlcnNpb25Gb3JtYXQnKTtcbiAgICAgICAgICAgIGFsZXJ0KGkxOG4udCgnZXJyb3IuaW5jb3JyZWN0VmVyc2lvbkZvcm1hdCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vQ2hlY2sgaWYgdmVyc2lvbiBpbiBmaWxlIGlzIG5ld2VyIHRoYW4gdmVyc2lvbiBvZiBhcHBsaWNhdGlvblxuICAgICAgICAgICAgaWYgKFV0aWxzLmNvbXBhcmVWZXJzaW9uTnVtYmVycyhkaWFncmFtRGF0YS5TaWx2ZXJEZWNpc2lvbnMsIEFwcC52ZXJzaW9uKSA+IDApIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCgnZXJyb3IuZmlsZVZlcnNpb25OZXdlclRoYW5BcHBsaWNhdGlvblZlcnNpb24nKTtcbiAgICAgICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLmZpbGVWZXJzaW9uTmV3ZXJUaGFuQXBwbGljYXRpb25WZXJzaW9uJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoVXRpbHMuY29tcGFyZVZlcnNpb25OdW1iZXJzKGRpYWdyYW1EYXRhLlNpbHZlckRlY2lzaW9ucywgXCIwLjcuMFwiKSA8IDApIHtcbiAgICAgICAgICAgICAgICBkYXRhTW9kZWxPYmplY3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGRpYWdyYW1EYXRhLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25TY29wZTogZGlhZ3JhbURhdGEuZXhwcmVzc2lvblNjb3BlLFxuICAgICAgICAgICAgICAgICAgICB0cmVlczogZGlhZ3JhbURhdGEudHJlZXMsXG4gICAgICAgICAgICAgICAgICAgIHRleHRzOiBkaWFncmFtRGF0YS50ZXh0c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZGlhZ3JhbURhdGEubG5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcubG5nID0gZGlhZ3JhbURhdGEubG5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGlhZ3JhbURhdGEucnVsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuaXNSdWxlTmFtZShkaWFncmFtRGF0YS5ydWxlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5ydWxlID0gZGlhZ3JhbURhdGEucnVsZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jb25maWcucnVsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaWFncmFtRGF0YS52aWV3TW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Vmlld01vZGVCeU5hbWUoZGlhZ3JhbURhdGEudmlld01vZGUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdFZpZXdNb2RlRm9yUnVsZSh0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZ2V0T2JqZWN0aXZlUnVsZUJ5TmFtZSh0aGlzLmNvbmZpZy5ydWxlKSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRpYWdyYW1EYXRhLmZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmZvcm1hdCA9IGRpYWdyYW1EYXRhLmZvcm1hdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRDb25maWcodGhpcy5jb25maWcpO1xuICAgICAgICAgICAgdGhpcy5kYXRhTW9kZWwubG9hZChkYXRhTW9kZWxPYmplY3QpO1xuXG4gICAgICAgICAgICBpZiAoZGlhZ3JhbURhdGEudHJlZURlc2lnbmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlRGVzaWduZXIuc2V0Q29uZmlnKFV0aWxzLmRlZXBFeHRlbmQoc2VsZi5nZXRUcmVlRGVzaWduZXJJbml0aWFsQ29uZmlnKCksIGRpYWdyYW1EYXRhLnRyZWVEZXNpZ25lcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmVlRGVzaWduZXIudXBkYXRlVmlzaWJpbGl0eSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNldERpYWdyYW1UaXRsZShkaWFncmFtRGF0YS50aXRsZSB8fCAnJywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldERpYWdyYW1EZXNjcmlwdGlvbihkaWFncmFtRGF0YS5kZXNjcmlwdGlvbiB8fCAnJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChkaWFncmFtRGF0YS5zZW5zaXRpdml0eUFuYWx5c2lzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nLmxvYWRTYXZlZFBhcmFtVmFsdWVzKGRpYWdyYW1EYXRhLnNlbnNpdGl2aXR5QW5hbHlzaXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdlcnJvci5tYWxmb3JtZWREYXRhJyk7XG4gICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLm1hbGZvcm1lZERhdGEnKSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ21hbGZvcm1lZERhdGEnLCBlKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXJyb3JzKTtcblxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU51bWJlckZvcm1hdHMoZmFsc2UpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ2luY29ycmVjdE51bWJlckZvcm1hdE9wdGlvbnMnLCBlKTtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdlcnJvci5pbmNvcnJlY3ROdW1iZXJGb3JtYXRPcHRpb25zJyk7XG4gICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLmluY29ycmVjdE51bWJlckZvcm1hdE9wdGlvbnMnKSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jb25maWcuZm9ybWF0O1xuICAgICAgICAgICAgdGhpcy5zZXRDb25maWcodGhpcy5jb25maWcpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVOdW1iZXJGb3JtYXRzKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zZXRPYmplY3RpdmVSdWxlKHRoaXMuY29uZmlnLnJ1bGUsIGZhbHNlLCB0cnVlLCBmYWxzZSkuY2F0Y2goZT0+IHtcbiAgICAgICAgICAgIGxvZy5lcnJvcignZGlhZ3JhbURyYXdpbmdGYWlsdXJlJywgZSk7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCgnZXJyb3IuZGlhZ3JhbURyYXdpbmdGYWlsdXJlJyk7XG4gICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLmRpYWdyYW1EcmF3aW5nRmFpbHVyZScpKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcnNcbiAgICAgICAgfSkudGhlbigoKT0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldyhmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICB9KS5jYXRjaChlPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKCdkaWFncmFtRHJhd2luZ0ZhaWx1cmUnLCBlKTtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdlcnJvci5kaWFncmFtRHJhd2luZ0ZhaWx1cmUnKTtcbiAgICAgICAgICAgIGFsZXJ0KGkxOG4udCgnZXJyb3IuZGlhZ3JhbURyYXdpbmdGYWlsdXJlJykpO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcnNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VyaWFsaXplKGZpbHRlckxvY2F0aW9uID0gZmFsc2UsIGZpbHRlckNvbXB1dGVkID0gZmFsc2UsIGZpbHRlclByaXZhdGUgPSB0cnVlKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hlY2tWYWxpZGl0eUFuZFJlY29tcHV0ZU9iamVjdGl2ZSh0cnVlLCBmYWxzZSwgZmFsc2UsIHRydWUpLnRoZW4oKCk9PiB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgICAgICAgIFNpbHZlckRlY2lzaW9uczogQXBwLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgYnVpbGRUaW1lc3RhbXA6IEFwcC5idWlsZFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICBzYXZldGltZTogZDMuaXNvRm9ybWF0KG5ldyBEYXRlKCkpLFxuICAgICAgICAgICAgICAgIGxuZzogc2VsZi5jb25maWcubG5nLFxuICAgICAgICAgICAgICAgIHZpZXdNb2RlOiBzZWxmLmN1cnJlbnRWaWV3TW9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIHJ1bGU6IHNlbGYuY29tcHV0YXRpb25zTWFuYWdlci5nZXRDdXJyZW50UnVsZSgpLm5hbWUsXG4gICAgICAgICAgICAgICAgdGl0bGU6IHNlbGYuY29uZmlnLnRpdGxlLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzZWxmLmNvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IHNlbGYuY29uZmlnLmZvcm1hdCxcbiAgICAgICAgICAgICAgICB0cmVlRGVzaWduZXI6IHNlbGYudHJlZURlc2lnbmVyLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBkYXRhOiBzZWxmLmRhdGFNb2RlbC5zZXJpYWxpemUoZmFsc2UpLFxuICAgICAgICAgICAgICAgIHNlbnNpdGl2aXR5QW5hbHlzaXM6IHRoaXMuc2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZy5qb2JOYW1lVG9QYXJhbVZhbHVlc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnN0cmluZ2lmeShvYmosIHNlbGYuZGF0YU1vZGVsLmdldEpzb25SZXBsYWNlcihmaWx0ZXJMb2NhdGlvbiwgZmlsdGVyQ29tcHV0ZWQsIHNlbGYuY29tcHV0YXRpb25zTWFuYWdlci5leHByZXNzaW9uRW5naW5lLmdldEpzb25SZXBsYWNlcigpLCBmaWx0ZXJQcml2YXRlKSwgZmlsdGVyUHJpdmF0ZSA/IFsnJCddIDogW10pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzYXZlVG9GaWxlKGZpbHRlckxvY2F0aW9uID0gZmFsc2UsIGZpbHRlckNvbXB1dGVkID0gZmFsc2UsIGZpbHRlclByaXZhdGUgPSB0cnVlKXtcbiAgICAgICAgdGhpcy5zZXJpYWxpemUoZmlsdGVyTG9jYXRpb24sIGZpbHRlckNvbXB1dGVkLCBmaWx0ZXJQcml2YXRlKS50aGVuKChqc29uKT0+e1xuICAgICAgICAgICAgQXBwVXRpbHMuZGlzcGF0Y2hFdmVudCgnU2lsdmVyRGVjaXNpb25zU2F2ZUV2ZW50JywganNvbik7XG4gICAgICAgICAgICBpZih0aGlzLmNvbmZpZy5qc29uRmlsZURvd25sb2FkKXtcbiAgICAgICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtqc29uXSwge3R5cGU6IFwiYXBwbGljYXRpb24vanNvblwifSk7XG4gICAgICAgICAgICAgICAgRXhwb3J0ZXIuc2F2ZUFzKGJsb2IsIEV4cG9ydGVyLmdldEV4cG9ydEZpbGVOYW1lKCdqc29uJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVOdW1iZXJGb3JtYXRzKHVwZGF0ZVZpZXcgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuaW5pdFBheW9mZk51bWJlckZvcm1hdCgpO1xuICAgICAgICB0aGlzLmluaXRQcm9iYWJpbGl0eU51bWJlckZvcm1hdCgpO1xuICAgICAgICBpZiAodXBkYXRlVmlldykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVQYXlvZmZOdW1iZXJGb3JtYXQodXBkYXRlVmlldyA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5pbml0UGF5b2ZmTnVtYmVyRm9ybWF0KCk7XG4gICAgICAgIGlmICh1cGRhdGVWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdXBkYXRlUHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQodXBkYXRlVmlldyA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5pbml0UHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQoKTtcbiAgICAgICAgaWYgKHVwZGF0ZVZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdE9uQmVmb3JlVW5sb2FkKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIShzZWxmLmRhdGFNb2RlbC5pc1VuZG9BdmFpbGFibGUoKSB8fCBzZWxmLmRhdGFNb2RlbC5pc1JlZG9BdmFpbGFibGUoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkaWFsb2dUZXh0ID0gaTE4bi50KCdjb25maXJtLmJlZm9yZXVubG9hZCcpO1xuICAgICAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGRpYWxvZ1RleHQ7XG4gICAgICAgICAgICByZXR1cm4gZGlhbG9nVGV4dDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0Q29uZmlnUGFyYW0ocGF0aCwgdmFsdWUsIHdpdGhvdXRTdGF0ZVNhdmluZywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gVXRpbHMuZ2V0KHRoaXMuY29uZmlnLCBwYXRoKTtcblxuICAgICAgICBpZiAocHJldlZhbHVlID09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF3aXRob3V0U3RhdGVTYXZpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YU1vZGVsLnNhdmVTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWU6IHByZXZWYWx1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25VbmRvOiAoZGF0YSk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Q29uZmlnUGFyYW0ocGF0aCwgZGF0YS5wcmV2VmFsdWUsIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uUmVkbzogKGRhdGEpPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbmZpZ1BhcmFtKHBhdGgsIHZhbHVlLCB0cnVlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgVXRpbHMuc2V0KHRoaXMuY29uZmlnLCBwYXRoLCB2YWx1ZSk7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBzZXREaWFncmFtVGl0bGUodGl0bGUsIHdpdGhvdXRTdGF0ZVNhdmluZykge1xuICAgICAgICB0aGlzLnNldENvbmZpZ1BhcmFtKCd0aXRsZScsIHRpdGxlLCB3aXRob3V0U3RhdGVTYXZpbmcsICh2KSA9PiB0aGlzLnRyZWVEZXNpZ25lci51cGRhdGVEaWFncmFtVGl0bGUodikpO1xuICAgIH1cblxuICAgIHNldERpYWdyYW1EZXNjcmlwdGlvbihkZXNjcmlwdGlvbiwgd2l0aG91dFN0YXRlU2F2aW5nKSB7XG4gICAgICAgIHRoaXMuc2V0Q29uZmlnUGFyYW0oJ2Rlc2NyaXB0aW9uJywgZGVzY3JpcHRpb24sIHdpdGhvdXRTdGF0ZVNhdmluZywgKHYpID0+IHRoaXMudHJlZURlc2lnbmVyLnVwZGF0ZURpYWdyYW1EZXNjcmlwdGlvbih2KSk7XG4gICAgfVxuXG4gICAgaW5pdEtleUNvZGVzKCkge1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLm9uKFwia2V5dXBcIiwgKGQpPT4ge1xuICAgICAgICAgICAgbGV0IHNyY0VsZW1lbnQgPSBkMy5ldmVudC50YXJnZXQgfHwgZDMuZXZlbnQuc3JjRWxlbWVudDtcblxuICAgICAgICAgICAgaWYgKHNyY0VsZW1lbnQgJiYgWydJTlBVVCcsICdURVhUQVJFQSddLmluZGV4T2Yoc3JjRWxlbWVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpKSA+IC0xKSB7IC8vaWdub3JlIGV2ZW50cyBmcm9tIGlucHV0IGFuZCB0ZXh0YXJlYSBlbGVtZW50c1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGtleSA9IGQzLmV2ZW50LmtleUNvZGU7XG4gICAgICAgICAgICBpZiAoa2V5ID09IDQ2KSB7Ly9kZWxldGVcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5yZW1vdmVTZWxlY3RlZE5vZGVzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlRGVzaWduZXIucmVtb3ZlU2VsZWN0ZWRUZXh0cygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZDMuZXZlbnQuY3RybEtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoZDMuZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5kb21haW4uTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWROb2RlID0gdGhpcy5zZWxlY3RlZE9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkTm9kZSBpbnN0YW5jZW9mIG1vZGVsLmRvbWFpbi5UZXJtaW5hbE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09IDY4KSB7IC8vIGN0cmwgKyBhbHQgKyBkXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5hZGREZWNpc2lvbk5vZGUoc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gNjcpIHsgLy8gY3RybCArIGFsdCArIGNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZURlc2lnbmVyLmFkZENoYW5jZU5vZGUoc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gODQpIHsgLy8gY3RybCArIGFsdCArIHRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZURlc2lnbmVyLmFkZFRlcm1pbmFsTm9kZShzZWxlY3RlZE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRPYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5kb21haW4uRWRnZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09IDY4KSB7IC8vIGN0cmwgKyBhbHQgKyBkXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5pbmplY3REZWNpc2lvbk5vZGUodGhpcy5zZWxlY3RlZE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IDY3KSB7IC8vIGN0cmwgKyBhbHQgKyBjXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5pbmplY3RDaGFuY2VOb2RlKHRoaXMuc2VsZWN0ZWRPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKGtleSA9PSA5MCkgey8vY3RybCArIHpcbiAgICAgICAgICAgICAgICB0aGlzLnVuZG8oKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5ID09IDg5KSB7Ly9jdHJsICsgeVxuICAgICAgICAgICAgICAgIHRoaXMucmVkbygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyppZihrZXk9PTY1KXsvL2N0cmwgKyBhXG4gICAgICAgICAgICAgaWYoc2VsZWN0ZWROb2Rlcy5sZW5ndGg9PTEpe1xuICAgICAgICAgICAgIHRoaXMudHJlZURlc2lnbmVyLnNlbGVjdFN1YlRyZWUoc2VsZWN0ZWROb2Rlc1swXSlcbiAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5zZWxlY3RBbGxOb2RlcygpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAvLyBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZXMgPSB0aGlzLnRyZWVEZXNpZ25lci5nZXRTZWxlY3RlZE5vZGVzKCk7XG4gICAgICAgICAgICBpZiAoa2V5ID09IDg2KSB7Ly9jdHJsICsgdlxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE5vZGVzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZE5vZGUgPSBzZWxlY3RlZE5vZGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWROb2RlIGluc3RhbmNlb2YgbW9kZWwuZG9tYWluLlRlcm1pbmFsTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZURlc2lnbmVyLnBhc3RlVG9Ob2RlKHNlbGVjdGVkTm9kZSlcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkTm9kZXMubGVuZ3RoID09IDApIHtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChrZXkgPT0gODgpIHsvL2N0cmwgKyB4XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlRGVzaWduZXIuY3V0U2VsZWN0ZWROb2RlcygpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSA2Nykgey8vY3RybCArIGNcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5jb3B5U2VsZWN0ZWROb2RlcygpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tIFwiLi9hcHAtdXRpbHNcIjtcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5VdGlscy5nZXRHbG9iYWxPYmplY3QoKS5qUXVlcnkgPSAkOyAvL0ZJWE1FXG5yZXF1aXJlKCdqcXVlcnktdWkvdWkvZGF0YScpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3dpZGdldCcpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3dpZGdldHMvbW91c2UnKTtcbnJlcXVpcmUoJ2pxdWVyeS11aS91aS93aWRnZXRzL2J1dHRvbicpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3dpZGdldHMvbWVudScpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3VuaXF1ZS1pZCcpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3Bvc2l0aW9uJyk7XG5yZXF1aXJlKCdqcXVlcnktdWkvdWkva2V5Y29kZScpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3NhZmUtYWN0aXZlLWVsZW1lbnQnKTtcbnJlcXVpcmUoJ2pxdWVyeS11aS91aS93aWRnZXRzL2F1dG9jb21wbGV0ZScpO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnLi9kMydcblxuJCggZnVuY3Rpb24oKSB7XG4gICAgJC53aWRnZXQoIFwic2QuY29tYm9ib3hcIiwge1xuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMud3JhcHBlciA9ICQoIFwiPHNwYW4+XCIgKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggXCJzZC1jb21ib2JveFwiIClcbiAgICAgICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIoIHRoaXMuZWxlbWVudCApO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVTaG93QWxsQnV0dG9uKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NyZWF0ZUF1dG9jb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oIFwiOnNlbGVjdGVkXCIgKSxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlbGVjdGVkLnZhbCgpID8gc2VsZWN0ZWQudGV4dCgpIDogXCJcIjtcblxuICAgICAgICAgICAgdGhpcy5pbnB1dCA9ICQoIFwiPGlucHV0PlwiIClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oIHRoaXMud3JhcHBlciApXG4gICAgICAgICAgICAgICAgLnZhbCggdmFsdWUgKVxuICAgICAgICAgICAgICAgIC5hdHRyKCBcInRpdGxlXCIsIFwiXCIgKVxuICAgICAgICAgICAgICAgIC5hdHRyKCBcInR5cGVcIiwgXCJ0ZXh0XCIgKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggXCJzZC1jb21ib2JveC1pbnB1dCB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItbGVmdFwiIClcbiAgICAgICAgICAgICAgICAuYXV0b2NvbXBsZXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAkLnByb3h5KCB0aGlzLCBcIl9zb3VyY2VcIiApLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInVpLWF1dG9jb21wbGV0ZVwiOiBcInNkLWNvbWJvYm94LWF1dG9jb21wbGV0ZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoIFwiPHNwYW4gY2xhc3M9J2Jhcic+XCIgKS5hcHBlbmRUbyggdGhpcy53cmFwcGVyIClcblxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX29uKCB0aGlzLmlucHV0LCB7XG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlc2VsZWN0OiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuICAgICAgICAgICAgICAgICAgICB1aS5pdGVtLm9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoIFwic2VsZWN0XCIsIGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtOiB1aS5pdGVtLm9wdGlvblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGVjaGFuZ2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dEQzID0gZDMuc2VsZWN0KCQoaW5wdXQpLmdldCgwKSk7XG4gICAgICAgICAgICAgICAgICAgIEFwcFV0aWxzLmRpc3BhdGNoSHRtbEV2ZW50KGlucHV0RDMubm9kZSgpLCBcImNoYW5nZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBfY3JlYXRlU2hvd0FsbEJ1dHRvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0LFxuICAgICAgICAgICAgICAgIHdhc09wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgJCggXCI8YnV0dG9uPlwiIClcbiAgICAgICAgICAgICAgICAuYXR0ciggXCJ0YWJJbmRleFwiLCAtMSApXG4gICAgICAgICAgICAgICAgLmF0dHIoIFwidHlwZVwiLCBcImJ1dHRvblwiIClcbiAgICAgICAgICAgICAgICAuaHRtbCgnPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPmFycm93X2Ryb3BfZG93bjwvaT4nKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggdGhpcy53cmFwcGVyIClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoIFwic2QtY29tYm9ib3gtdG9nZ2xlIHVpLWNvcm5lci1yaWdodFwiIClcbiAgICAgICAgICAgICAgICAub24oIFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB3YXNPcGVuID0gaW5wdXQuYXV0b2NvbXBsZXRlKCBcIndpZGdldFwiICkuaXMoIFwiOnZpc2libGVcIiApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCBcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC50cmlnZ2VyKCBcImZvY3VzXCIgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xvc2UgaWYgYWxyZWFkeSB2aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIGlmICggd2FzT3BlbiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFBhc3MgZW1wdHkgc3RyaW5nIGFzIHZhbHVlIHRvIHNlYXJjaCBmb3IsIGRpc3BsYXlpbmcgYWxsIHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuYXV0b2NvbXBsZXRlKCBcInNlYXJjaFwiLCBcIlwiICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3NvdXJjZTogZnVuY3Rpb24oIHJlcXVlc3QsIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCAkLnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleChyZXF1ZXN0LnRlcm0pLCBcImlcIiApO1xuICAgICAgICAgICAgcmVzcG9uc2UoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiggXCJvcHRpb25cIiApLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICQoIHRoaXMgKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLnZhbHVlICYmICggIXJlcXVlc3QudGVybSB8fCBtYXRjaGVyLnRlc3QodGV4dCkgKSApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSApO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMud3JhcHBlci5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zaG93KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5wdXRfZWxlbWVudDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG59ICk7XG5cbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGV7XG5cblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcil7XG4gICAgICAgIHRoaXMuY29udGFpbmVyPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuY29tYm9ib3ggPSAkKCB0aGlzLmNvbnRhaW5lci5ub2RlKCkgKS5jb21ib2JveCgpO1xuICAgIH1cblxuICAgIGdldElucHV0KCl7XG4gICAgICAgIHJldHVybiBkMy5zZWxlY3QoJCh0aGlzLmNvbWJvYm94KS5jb21ib2JveCgnaW5wdXRfZWxlbWVudCcpLmdldCgwKSlcbiAgICB9XG5cbn1cbiIsImV4cG9ydCAqIGZyb20gJ2QzLWRpc3BhdGNoJztcbmV4cG9ydCAqIGZyb20gJ2QzLXNjYWxlJztcbmV4cG9ydCAqIGZyb20gJ2QzLXNlbGVjdGlvbic7XG5leHBvcnQgKiBmcm9tICdkMy1zaGFwZSdcbmV4cG9ydCAqIGZyb20gJ2QzLWRyYWcnO1xuZXhwb3J0ICogZnJvbSAnZDMtYnJ1c2gnXG5leHBvcnQgKiBmcm9tICdkMy1hcnJheSdcbmV4cG9ydCAqIGZyb20gJ2QzLWhpZXJhcmNoeSdcbmV4cG9ydCAqIGZyb20gJ2QzLXRpbWUtZm9ybWF0J1xuIiwiaW1wb3J0IHtEaWFsb2d9IGZyb20gJy4vZGlhbG9nJ1xuXG5leHBvcnQgY2xhc3MgQWJvdXREaWFsb2cgZXh0ZW5kcyBEaWFsb2d7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHApe1xuICAgICAgICBzdXBlcihhcHAuY29udGFpbmVyLnNlbGVjdCgnI3NkLWFib3V0LWRpYWxvZycpLCBhcHApO1xuICAgIH1cblxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnLi4vZDMnXG5pbXBvcnQge0RpYWxvZ30gZnJvbSAnLi9kaWFsb2cnXG5pbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcbmltcG9ydCB7QXBwVXRpbHN9IGZyb20gXCIuLi9hcHAtdXRpbHNcIjtcbmltcG9ydCB7VGVtcGxhdGVzfSBmcm9tIFwiLi4vdGVtcGxhdGVzXCI7XG5pbXBvcnQge2RvbWFpbiBhcyBtb2RlbH0gZnJvbSBcInNkLW1vZGVsXCI7XG5pbXBvcnQge2kxOG59IGZyb20gXCIuLi9pMThuL2kxOG5cIjtcblxuZXhwb3J0IGNsYXNzIERlZmluaXRpb25zRGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgICBjaGFuZ2VDYWxsYmFjaztcblxuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHAuY29udGFpbmVyLnNlbGVjdCgnI3NkLWRlZmluaXRpb25zLWRpYWxvZycpLCBhcHApO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc1Njb3BlTGFiZWwgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2QtZGVmaW5pdGlvbnMtZGlhbG9nLXNjb3BlLWxhYmVsXCIpO1xuXG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNDb2RlID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCd0ZXh0YXJlYSNzZC1kZWZpbml0aW9ucy1kaWFsb2ctZGVmaW5pdGlvbnMtY29kZScpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIEFwcFV0aWxzLnVwZGF0ZUlucHV0Q2xhc3MoZDMuc2VsZWN0KHRoaXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvZGUgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJ3RleHRhcmVhI3NkLWRlZmluaXRpb25zLWRpYWxvZy1kZWZpbml0aW9ucy1jb2RlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNoYW5nZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jaGFuZ2VDYWxsYmFjayh0aGlzLnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlQnV0dG9uID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCdidXR0b24jc2QtZGVmaW5pdGlvbnMtZGlhbG9nLXJlY2FsY3VsYXRlLWJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuYXBwLnJlY29tcHV0ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZhcmlhYmxlVmFsdWVzQ29udGFpbmVyID0gdGhpcy5jb250YWluZXIuc2VsZWN0KFwiI3NkLWRlZmluaXRpb25zLWRpYWxvZy12YXJpYWJsZS12YWx1ZXNcIik7XG4gICAgICAgIEFwcFV0aWxzLmVsYXN0aWNUZXh0YXJlYSh0aGlzLmRlZmluaXRpb25zQ29kZSk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignU2lsdmVyRGVjaXNpb25zUmVjb21wdXRlZEV2ZW50JywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmRldGFpbCA9PT0gYXBwICYmIHNlbGYuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIG9wZW4oZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QsIGNoYW5nZUNhbGxiYWNrKSB7XG4gICAgICAgIHN1cGVyLm9wZW4oKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VDYWxsYmFjayA9IGNoYW5nZUNhbGxiYWNrO1xuICAgICAgICB0aGlzLmRlZmluaXRpb25zU291cmNlT2JqZWN0ID0gZGVmaW5pdGlvbnNTb3VyY2VPYmplY3Q7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFmb3JjZSAmJiAhdGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNjb3BlVHlwZSA9ICdnbG9iYWwnO1xuICAgICAgICBsZXQgbGFiZWxTdWZmaXg9XCJcIjtcbiAgICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5Ob2RlKSB7XG4gICAgICAgICAgICBzY29wZVR5cGUgPSAnbm9kZSc7XG4gICAgICAgICAgICBsZXQgbmFtZSA9ICB0aGlzLmRlZmluaXRpb25zU291cmNlT2JqZWN0Lm5hbWU7XG4gICAgICAgICAgICBpZihuYW1lKXtcbiAgICAgICAgICAgICAgICBsYWJlbFN1ZmZpeCArPSBcIiAoXCIrbmFtZStcIilcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNTY29wZUxhYmVsLnRleHQoaTE4bi50KFwiZGVmaW5pdGlvbnNEaWFsb2cuc2NvcGUuXCIrc2NvcGVUeXBlKStsYWJlbFN1ZmZpeCk7XG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvZGUubm9kZSgpLnZhbHVlID0gdGhpcy5kZWZpbml0aW9uc1NvdXJjZU9iamVjdC5jb2RlO1xuICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKHRoaXMuZGVmaW5pdGlvbnNDb2RlKTtcbiAgICAgICAgQXBwVXRpbHMuYXV0b1Jlc2l6ZVRleHRhcmVhKHRoaXMuZGVmaW5pdGlvbnNDb2RlLm5vZGUoKSk7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNDb2RlLmNsYXNzZWQoJ2ludmFsaWQnLCAhIXRoaXMuZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QuJGNvZGVFcnJvcik7XG4gICAgICAgIGlmKHRoaXMuZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QuJGNvZGVFcnJvcil7XG4gICAgICAgICAgICB0aGlzLnByaW50RXJyb3IodGhpcy5kZWZpbml0aW9uc1NvdXJjZU9iamVjdC4kY29kZUVycm9yKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLnByaW50VmFyaWFibGVzKHRoaXMuZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QuZXhwcmVzc2lvblNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHJpbnRFcnJvcihlcnJvcikge1xuICAgICAgICB2YXIgaHRtbCA9IGVycm9yO1xuICAgICAgICB0aGlzLnZhcmlhYmxlVmFsdWVzQ29udGFpbmVyLmh0bWwoaHRtbCk7XG4gICAgfVxuXG4gICAgcHJpbnRWYXJpYWJsZXMoc2NvcGUpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBUZW1wbGF0ZXMuZ2V0KCdldmFsdWF0ZWRWYXJpYWJsZXMnLCB7c2NvcGVWYXJpYWJsZXM6IFV0aWxzLmdldFZhcmlhYmxlc0FzTGlzdChzY29wZSl9KTtcbiAgICAgICAgdGhpcy52YXJpYWJsZVZhbHVlc0NvbnRhaW5lci5odG1sKGh0bWwpO1xuICAgIH1cblxuXG59XG4iLCJcbmV4cG9ydCBjbGFzcyBEaWFsb2d7XG5cbiAgICBhcHA7XG5cbiAgICBjb250YWluZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsYXBwKXtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuY29udGFpbmVyPWNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KCcuc2QtY2xvc2UtbW9kYWwnKS5vbignY2xpY2snLCAoKT0+dGhpcy5jbG9zZSgpKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KCcuc2QtZXh0ZW5kLW1vZGFsJykub24oJ2NsaWNrJywgKCk9PnRoaXMuZXh0ZW5kKCkpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJy5zZC1zaHJpbmstbW9kYWwnKS5vbignY2xpY2snLCAoKT0+dGhpcy5zaHJpbmsoKSk7XG4gICAgfVxuXG4gICAgb3Blbigpe1xuICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc2VkKCdvcGVuJywgdHJ1ZSk7XG4gICAgfVxuICAgIGNsb3NlKCl7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzZWQoJ29wZW4nLCBmYWxzZSk7XG4gICAgICAgIHRoaXMub25DbG9zZWQoKTtcbiAgICB9XG5cbiAgICBzZXRGdWxsU2NyZWVuKGZ1bGxTY3JlZW49dHJ1ZSl7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NlZCgnc2QtZnVsbC1zY3JlZW4nLCBmdWxsU2NyZWVuKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpeyBzZWxmLm9uUmVzaXplZCgpIH0sIDEwKVxuICAgIH1cblxuICAgIGV4dGVuZCgpe1xuICAgICAgICB0aGlzLnNldEZ1bGxTY3JlZW4oKTtcbiAgICB9XG5cbiAgICBzaHJpbmsoKXtcbiAgICAgICAgdGhpcy5zZXRGdWxsU2NyZWVuKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpc1Zpc2libGUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmNsYXNzZWQoJ29wZW4nKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlZCgpe1xuXG4gICAgfVxuXG4gICAgb25PcGVuKCl7XG5cbiAgICB9XG5cbiAgICBvblJlc2l6ZWQoKXtcblxuICAgIH1cbn1cbiIsImltcG9ydCB7RGlhbG9nfSBmcm9tIFwiLi9kaWFsb2dcIjtcbmltcG9ydCB7Sm9iUGFyYW1ldGVyc0J1aWxkZXJ9IGZyb20gXCIuLi9qb2JzL2pvYi1wYXJhbWV0ZXJzLWJ1aWxkZXJcIjtcbmltcG9ydCB7VXRpbHMsIGxvZ30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge1RlbXBsYXRlc30gZnJvbSBcIi4uL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHtpMThufSBmcm9tIFwiLi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tIFwiLi4vYXBwLXV0aWxzXCI7XG5pbXBvcnQge1Rvb2x0aXB9IGZyb20gXCJzZC10cmVlLWRlc2lnbmVyXCI7XG5pbXBvcnQge0xvYWRpbmdJbmRpY2F0b3J9IGZyb20gXCIuLi9sb2FkaW5nLWluZGljYXRvclwiO1xuaW1wb3J0IHtFeHBvcnRlcn0gZnJvbSBcIi4uL2V4cG9ydGVyXCI7XG5pbXBvcnQge1NlbnNpdGl2aXR5QW5hbHlzaXNKb2JSZXN1bHRUYWJsZX0gZnJvbSBcIi4uL2pvYnMvc2Vuc2l0aXZpdHktYW5hbHlzaXMtcmVzdWx0LXRhYmxlXCI7XG5pbXBvcnQge1Byb2JhYmlsaXN0aWNTZW5zaXRpdml0eUFuYWx5c2lzSm9iUmVzdWx0VGFibGV9IGZyb20gXCIuLi9qb2JzL3Byb2JhYmlsaXN0aWMtc2Vuc2l0aXZpdHktYW5hbHlzaXMtcmVzdWx0LXRhYmxlXCI7XG5pbXBvcnQge1BvbGljeX0gZnJvbSBcInNkLWNvbXB1dGF0aW9ucy9zcmMvcG9saWNpZXMvcG9saWN5XCI7XG5pbXBvcnQge1Rvcm5hZG9EaWFncmFtUGxvdH0gZnJvbSBcIi4uL2pvYnMvdG9ybmFkby1kaWFncmFtLXBsb3RcIjtcbmltcG9ydCB7U3BpZGVyUGxvdH0gZnJvbSBcIi4uL2pvYnMvc3BpZGVyLXBsb3RcIjtcblxuZXhwb3J0IGNsYXNzIFNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2cgZXh0ZW5kcyBEaWFsb2cge1xuICAgIGNvbXB1dGF0aW9uc01hbmFnZXI7XG4gICAgam9iQ29uZmlndXJhdGlvbkNvbnRhaW5lcjtcblxuICAgIGpvYkNvbmZpZ3VyYXRpb25zID0gW107XG4gICAgam9iSW5zdGFuY2VNYW5hZ2VyO1xuICAgIGpvYk5hbWVUb1BhcmFtVmFsdWVzID0ge307XG5cbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgc3VwZXIoYXBwLmNvbnRhaW5lci5zZWxlY3QoJy5zZC1zZW5zaXRpdml0eS1hbmFseXNpcy1kaWFsb2cnKSwgYXBwKTtcbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyID0gdGhpcy5hcHAuY29tcHV0YXRpb25zTWFuYWdlcjtcbiAgICAgICAgLy8gdGhpcy5pbml0Sm9iQ29uZmlndXJhdGlvbnMoKTtcblxuICAgICAgICB0aGlzLmpvYkNvbmZpZ3VyYXRpb25Db250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2Qtc2Vuc2l0aXZpdHktYW5hbHlzaXMtam9iLWNvbmZpZ3VyYXRpb25cIik7XG4gICAgICAgIHRoaXMucGFyYW1ldGVyQnVpbGRlckNvbnRhaW5lciA9IHRoaXMuam9iQ29uZmlndXJhdGlvbkNvbnRhaW5lci5zZWxlY3QoXCIuc2Qtam9iLXBhcmFtZXRlcnMtYnVpbGRlclwiKTtcbiAgICAgICAgdGhpcy5qb2JQYXJhbWV0ZXJzQnVpbGRlciA9IG5ldyBKb2JQYXJhbWV0ZXJzQnVpbGRlcih0aGlzLnBhcmFtZXRlckJ1aWxkZXJDb250YWluZXIsICdqb2InLCAoKSA9PiB0aGlzLm9uSm9iUGFyYW1ldGVyc0NoYW5nZWQoKSk7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2Qtam9iLXByb2dyZXNzLWJhci1jb250YWluZXJcIik7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIgPSB0aGlzLnByb2dyZXNzQmFyQ29udGFpbmVyLnNlbGVjdChcIi5zZC1wcm9ncmVzcy1iYXJcIik7XG4gICAgICAgIHRoaXMuam9iUmVzdWx0c0NvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLnNlbGVjdChcIi5zZC1zZW5zaXRpdml0eS1hbmFseXNpcy1qb2ItcmVzdWx0c1wiKTtcbiAgICAgICAgdGhpcy5qb2JSZXN1bHRQbG90Q29udGFpbmVyID0gdGhpcy5qb2JSZXN1bHRzQ29udGFpbmVyLnNlbGVjdChcIi5zZC1qb2ItcmVzdWx0LXBsb3QtY29udGFpbmVyXCIpO1xuXG4gICAgICAgIHRoaXMuZGVib3VuY2VkQ2hlY2tXYXJuaW5ncyA9IFV0aWxzLmRlYm91bmNlKCgpPT50aGlzLmNoZWNrV2FybmluZ3MoKSwgMjAwKTtcblxuICAgICAgICB0aGlzLmluaXRCdXR0b25zKCk7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignU2lsdmVyRGVjaXNpb25zUmVjb21wdXRlZEV2ZW50JywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmRldGFpbCA9PT0gYXBwICYmIHNlbGYuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG5cbiAgICAgICAgdGhpcy5pbml0Sm9iQ29uZmlndXJhdGlvbnMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmpvYlNlbGVjdCkge1xuICAgICAgICAgICAgdGhpcy5pbml0Sm9iU2VsZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGF5b2ZmQ29uZiA9IFV0aWxzLmNsb25lRGVlcCh0aGlzLmFwcC5jb25maWcuZm9ybWF0LnBheW9mZjEpO1xuICAgICAgICBwYXlvZmZDb25mLnN0eWxlID0gJ2RlY2ltYWwnO1xuICAgICAgICBwYXlvZmZDb25mLnVzZUdyb3VwaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGF5b2ZmTnVtYmVyRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbicsIHBheW9mZkNvbmYpO1xuICAgICAgICAvLyB0aGlzLnBheW9mZk51bWJlckZvcm1hdCA9IHtcbiAgICAgICAgLy8gICAgIGZvcm1hdDogdiA9PiB0aGlzLmFwcC5jb21wdXRhdGlvbnNNYW5hZ2VyLmV4cHJlc3Npb25FbmdpbmUuY29uc3RydWN0b3IudG9GbG9hdCh2LCBwYXlvZmZDb25mLm1heGltdW1GcmFjdGlvbkRpZ2l0cylcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlZCgpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAoIXRoaXMuam9iSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIudGVybWluYXRlKCk7XG4gICAgfVxuXG5cblxuICAgIG9uSm9iU2VsZWN0ZWQoam9iQ29uZmlnKSB7XG5cbiAgICAgICAgdGhpcy5jbGVhcldhcm5pbmdzKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRKb2JDb25maWcgPSBqb2JDb25maWc7XG4gICAgICAgIGlmICgham9iQ29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5qb2JTZWxlY3Qubm9kZSgpLnZhbHVlID0gam9iQ29uZmlnLmpvYk5hbWU7XG4gICAgICAgIGxldCBqb2JOYW1lID0gdGhpcy5zZWxlY3RlZEpvYkNvbmZpZy5qb2JOYW1lO1xuICAgICAgICB0aGlzLmpvYiA9IHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5nZXRKb2JCeU5hbWUoam9iTmFtZSk7XG5cbiAgICAgICAgdmFyIGpvYlBhcmFtc1ZhbHVlcyA9IHRoaXMuam9iTmFtZVRvUGFyYW1WYWx1ZXNbam9iTmFtZV0gfHwge307XG5cbiAgICAgICAgdGhpcy5zZXRKb2JQYXJhbXNWYWx1ZXMoam9iUGFyYW1zVmFsdWVzKVxuICAgIH1cblxuICAgIHJlZnJlc2hTZWxlY3RlZEpvYkNvbmZpZygpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRKb2JDb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRKb2JDb25maWcgPSBVdGlscy5maW5kKHRoaXMuam9iQ29uZmlndXJhdGlvbnMsIChjKT0+Yy5qb2JOYW1lID09PSB0aGlzLnNlbGVjdGVkSm9iQ29uZmlnLmpvYk5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Sm9iUGFyYW1zVmFsdWVzKGpvYlBhcmFtc1ZhbHVlcywgZGVsZXRlSWQgPSB0cnVlKSB7XG4gICAgICAgIGlmKCF0aGlzLmpvYil7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZyZXNoU2VsZWN0ZWRKb2JDb25maWcoKTtcblxuICAgICAgICBpZihkZWxldGVJZCl7XG4gICAgICAgICAgICBkZWxldGUgam9iUGFyYW1zVmFsdWVzLmlkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuam9iUGFyYW1ldGVycyA9IHRoaXMuam9iLmNyZWF0ZUpvYlBhcmFtZXRlcnMoam9iUGFyYW1zVmFsdWVzKTtcblxuICAgICAgICB0aGlzLmpvYk5hbWVUb1BhcmFtVmFsdWVzW3RoaXMuam9iLm5hbWVdID0gdGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcztcblxuICAgICAgICB0aGlzLmpvYlBhcmFtZXRlcnNCdWlsZGVyLnNldEpvYlBhcmFtZXRlcnModGhpcy5qb2IubmFtZSwgdGhpcy5qb2JQYXJhbWV0ZXJzLCB0aGlzLnNlbGVjdGVkSm9iQ29uZmlnLmN1c3RvbVBhcmFtc0NvbmZpZyk7XG4gICAgfVxuXG4gICAgb25Kb2JQYXJhbWV0ZXJzQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRDaGVja1dhcm5pbmdzKCk7XG5cbiAgICB9XG5cbiAgICBnZXRHbG9iYWxWYXJpYWJsZU5hbWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAuZGF0YU1vZGVsLmdldEdsb2JhbFZhcmlhYmxlTmFtZXModHJ1ZSk7XG4gICAgfVxuXG4gICAgaW5pdEpvYkNvbmZpZ3VyYXRpb25zKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuam9iQ29uZmlndXJhdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgICAgbGV0IEV4cHJlc3Npb25FbmdpbmUgPSB0aGlzLmFwcC5leHByZXNzaW9uRW5naW5lLmNvbnN0cnVjdG9yO1xuICAgICAgICBsZXQgY3VzdG9tVmFyaWFibGVzVmFsaWRhdG9yID0gdmFsdWVzID0+IHtcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkQXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgdmFyIG5hbWVzID0gW107XG4gICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCgodiwgaSk9PntcbiAgICAgICAgICAgICAgICBsZXQgaXNWYXJpYWJsZUluR2xvYmFsU2NvcGUgPSBzZWxmLmFwcC5kYXRhTW9kZWwuZXhwcmVzc2lvblNjb3BlLmhhc093blByb3BlcnR5KHYubmFtZSk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkID0gbmFtZXMuaW5kZXhPZih2Lm5hbWUpPDAgJiYgaXNWYXJpYWJsZUluR2xvYmFsU2NvcGU7XG4gICAgICAgICAgICAgICAgbmFtZXMucHVzaCh2Lm5hbWUpO1xuICAgICAgICAgICAgICAgIGlzVmFsaWRBcnJheS5wdXNoKHZhbGlkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZEFycmF5O1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBsYXJnZVNjZW5hcmlvc051bWJlcldhcm5pbmcgPSB7XG4gICAgICAgICAgICBuYW1lOiAnbGFyZ2VTY2VuYXJpb3NOdW1iZXInLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG51bWJlcjogMTAwMDAsXG4gICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0dGVkOiBcIjEwLDAwMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hlY2s6IGZ1bmN0aW9uIChqb2JQYXJhbWV0ZXJzKSB7IC8vIGNhbGxlZCB3aXRoIHRoaXMgc2V0IHRvIHdhcm5pbmcgY29uZmlnIG9iamVjdFxuICAgICAgICAgICAgICAgIGxldCBjb21iaW5hdGlvbnMgPSBqb2JQYXJhbWV0ZXJzLnZhbHVlcy52YXJpYWJsZXMubWFwKHYgPT4gdi5sZW5ndGgpLnJlZHVjZSgoYSwgYikgPT4gYSAqIChiIHx8IDEpLCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tYmluYXRpb25zID4gdGhpcy5kYXRhLm51bWJlclxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmpvYkNvbmZpZ3VyYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgam9iTmFtZTogJ3NlbnNpdGl2aXR5LWFuYWx5c2lzJyxcbiAgICAgICAgICAgIGN1c3RvbVBhcmFtc0NvbmZpZzoge1xuICAgICAgICAgICAgICAgICdpZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWU6IHVuZGVmaW5lZCwgLy9sZWF2ZSBkZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdmYWlsT25JbnZhbGlkVHJlZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3J1bGVOYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldEN1cnJlbnRSdWxlKCkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5nZXRHbG9iYWxWYXJpYWJsZU5hbWVzKClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2Rlcml2ZWRWYWx1ZXM6W1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic3RlcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAodmFyaWFibGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlLm1heCA9PT0gdW5kZWZpbmVkIHx8IHZhcmlhYmxlLm1heCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlLm1pbiA9PT0gdW5kZWZpbmVkIHx8IHZhcmlhYmxlLm1pbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlLmxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHZhcmlhYmxlLmxlbmd0aCA9PT0gbnVsbCB8fCB2YXJpYWJsZS5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUubWluID4gdmFyaWFibGUubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHByZXNzaW9uRW5naW5lLnRvRmxvYXQoRXhwcmVzc2lvbkVuZ2luZS5kaXZpZGUoRXhwcmVzc2lvbkVuZ2luZS5zdWJ0cmFjdCh2YXJpYWJsZS5tYXgsIHZhcmlhYmxlLm1pbiksIHZhcmlhYmxlLmxlbmd0aC0xKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tVmFsaWRhdG9yOiBjdXN0b21WYXJpYWJsZXNWYWxpZGF0b3JcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3YXJuaW5nczogW1xuICAgICAgICAgICAgICAgIGxhcmdlU2NlbmFyaW9zTnVtYmVyV2FybmluZyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdsYXJnZVBhcmFtZXRlcnNOdW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXI6IDIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrOiBmdW5jdGlvbiAoam9iUGFyYW1ldGVycykgeyAvLyBjYWxsZWQgd2l0aCB0aGlzIHNldCB0byB3YXJuaW5nIGNvbmZpZyBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqb2JQYXJhbWV0ZXJzLnZhbHVlcy52YXJpYWJsZXMubGVuZ3RoID4gdGhpcy5kYXRhLm51bWJlclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIHRoaXMuam9iQ29uZmlndXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBqb2JOYW1lOiAndG9ybmFkby1kaWFncmFtJyxcbiAgICAgICAgICAgIGN1c3RvbVBhcmFtc0NvbmZpZzoge1xuICAgICAgICAgICAgICAgICdpZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWU6IHVuZGVmaW5lZCwgLy9sZWF2ZSBkZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdmYWlsT25JbnZhbGlkVHJlZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3J1bGVOYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldEN1cnJlbnRSdWxlKCkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5nZXRHbG9iYWxWYXJpYWJsZU5hbWVzKClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2Rlcml2ZWRWYWx1ZXM6W1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZGVmYXVsdFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICh2YXJpYWJsZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXZhcmlhYmxlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25FbmdpbmUudG9GbG9hdCh0aGlzLmFwcC5kYXRhTW9kZWwuZXhwcmVzc2lvblNjb3BlW3ZhcmlhYmxlLm5hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzdGVwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICh2YXJpYWJsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUubWF4ID09PSB1bmRlZmluZWQgfHwgdmFyaWFibGUubWF4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUubWluID09PSB1bmRlZmluZWQgfHwgdmFyaWFibGUubWluID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGUubGVuZ3RoID09PSB1bmRlZmluZWQgfHwgdmFyaWFibGUubGVuZ3RoID09PSBudWxsIHx8IHZhcmlhYmxlLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZS5taW4gPiB2YXJpYWJsZS5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRXhwcmVzc2lvbkVuZ2luZS50b0Zsb2F0KEV4cHJlc3Npb25FbmdpbmUuZGl2aWRlKEV4cHJlc3Npb25FbmdpbmUuc3VidHJhY3QodmFyaWFibGUubWF4LCB2YXJpYWJsZS5taW4pLCB2YXJpYWJsZS5sZW5ndGgtMSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbVZhbGlkYXRvcjogKHZhbHVlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc1ZhbGlkTmFtZUFycmF5ID0gY3VzdG9tVmFyaWFibGVzVmFsaWRhdG9yKHZhbHVlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKCh2LCBpKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFpc1ZhbGlkTmFtZUFycmF5W2ldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdi5uYW1lIHx8IHYubWluID09PSB1bmRlZmluZWQgfHwgdi5taW4gPT09IG51bGwgfHwgdi5tYXggPT09IHVuZGVmaW5lZCB8fCB2Lm1heCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlZlZhbCA9IHNlbGYuYXBwLmRhdGFNb2RlbC5leHByZXNzaW9uU2NvcGVbdi5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdi5taW4gPCBkZWZWYWwgJiYgdi5tYXggPiAgZGVmVmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3YXJuaW5nczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnbGFyZ2VTY2VuYXJpb3NOdW1iZXInLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiAxMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0dGVkOiBcIjEwLDAwMFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGVjazogZnVuY3Rpb24gKGpvYlBhcmFtZXRlcnMpIHsgLy8gY2FsbGVkIHdpdGggdGhpcyBzZXQgdG8gd2FybmluZyBjb25maWcgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21iaW5hdGlvbnMgPSBqb2JQYXJhbWV0ZXJzLnZhbHVlcy52YXJpYWJsZXMubWFwKHYgPT4gdi5sZW5ndGgpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tYmluYXRpb25zID4gdGhpcy5kYXRhLm51bWJlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuam9iQ29uZmlndXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBqb2JOYW1lOiAncHJvYmFiaWxpc3RpYy1zZW5zaXRpdml0eS1hbmFseXNpcycsXG4gICAgICAgICAgICBjdXN0b21QYXJhbXNDb25maWc6IHtcbiAgICAgICAgICAgICAgICAnaWQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2ZhaWxPbkludmFsaWRUcmVlJzoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAncnVsZU5hbWUnOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZ2V0Q3VycmVudFJ1bGUoKS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLmdldEdsb2JhbFZhcmlhYmxlTmFtZXMoKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmb3JtdWxhOntcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IEV4cHJlc3Npb25FbmdpbmUucmFuZG9tTWVudUxpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zQXV0b2NvbXBsZXRlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbVZhbGlkYXRvcjogY3VzdG9tVmFyaWFibGVzVmFsaWRhdG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdhcm5pbmdzOiBbbGFyZ2VTY2VuYXJpb3NOdW1iZXJXYXJuaW5nXVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmpvYkNvbmZpZ3VyYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgam9iTmFtZTogJ3NwaWRlci1wbG90JyxcbiAgICAgICAgICAgIGN1c3RvbVBhcmFtc0NvbmZpZzoge1xuICAgICAgICAgICAgICAgICdpZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWU6IHVuZGVmaW5lZCwgLy9sZWF2ZSBkZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdmYWlsT25JbnZhbGlkVHJlZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3J1bGVOYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldEN1cnJlbnRSdWxlKCkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5nZXRHbG9iYWxWYXJpYWJsZU5hbWVzKClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX2Rlcml2ZWRWYWx1ZXM6W1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZGVmYXVsdFZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICh2YXJpYWJsZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXZhcmlhYmxlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25FbmdpbmUudG9GbG9hdCh0aGlzLmFwcC5kYXRhTW9kZWwuZXhwcmVzc2lvblNjb3BlW3ZhcmlhYmxlLm5hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21WYWxpZGF0b3I6IGN1c3RvbVZhcmlhYmxlc1ZhbGlkYXRvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3YXJuaW5nczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnbGFyZ2VTY2VuYXJpb3NOdW1iZXInLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiAxMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyRm9ybWF0dGVkOiBcIjEwLDAwMFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGVjazogZnVuY3Rpb24gKGpvYlBhcmFtZXRlcnMpIHsgLy8gY2FsbGVkIHdpdGggdGhpcyBzZXQgdG8gd2FybmluZyBjb25maWcgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21iaW5hdGlvbnMgPSBqb2JQYXJhbWV0ZXJzLnZhbHVlcy5sZW5ndGggKiBqb2JQYXJhbWV0ZXJzLnZhbHVlcy52YXJpYWJsZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tYmluYXRpb25zID4gdGhpcy5kYXRhLm51bWJlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG5cbiAgICBjaGVja1dhcm5pbmdzKCkge1xuICAgICAgICB0aGlzLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkSm9iQ29uZmlnLndhcm5pbmdzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbGVjdGVkSm9iQ29uZmlnLndhcm5pbmdzLmZvckVhY2god2FybkNvbmY9PiB7XG4gICAgICAgICAgICBpZiAod2FybkNvbmYuY2hlY2suY2FsbCh3YXJuQ29uZiwgdGhpcy5qb2JQYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkV2FybmluZyh3YXJuQ29uZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY2xlYXJXYXJuaW5ncygpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KFwiLnNkLXNlbnNpdGl2aXR5LWFuYWx5c2lzLXdhcm5pbmdzXCIpLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgYWRkV2FybmluZyh3YXJuQ29uZikge1xuICAgICAgICBsZXQgbXNnID0gaTE4bi50KFwiam9iLlwiICsgdGhpcy5qb2IubmFtZSArIFwiLndhcm5pbmdzLlwiICsgd2FybkNvbmYubmFtZSwgd2FybkNvbmYuZGF0YSk7XG5cbiAgICAgICAgdmFyIG1zZ0hUTUwgPSBUZW1wbGF0ZXMuZ2V0KFwid2FybmluZ01lc3NhZ2VcIiwge1xuICAgICAgICAgICAgbWVzc2FnZTogbXNnXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2Qtc2Vuc2l0aXZpdHktYW5hbHlzaXMtd2FybmluZ3NcIikuYXBwZW5kU2VsZWN0b3IoXCJkaXYuc2Qtc2Vuc2l0aXZpdHktYW5hbHlzaXMtd2FybmluZ1wiKS5odG1sKG1zZ0hUTUwpO1xuICAgIH1cblxuICAgIGluaXRKb2JTZWxlY3QoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5qb2JTZWxlY3QgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2Qtam9iLXNlbGVjdC1pbnB1dC1ncm91cFwiKS5odG1sKFRlbXBsYXRlcy5nZXQoXCJzZWxlY3RJbnB1dEdyb3VwXCIsIHtcbiAgICAgICAgICAgIGlkOiBVdGlscy5ndWlkKCksXG4gICAgICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6IFwic2Qtam9iLXNlbGVjdFwiLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5qb2JDb25maWd1cmF0aW9ucy5tYXAoYz0+KHtcbiAgICAgICAgICAgICAgICBsYWJlbDogaTE4bi50KFwiam9iLlwiICsgYy5qb2JOYW1lICsgXCIubmFtZVwiKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogYy5qb2JOYW1lXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgfSkpLnNlbGVjdChcInNlbGVjdFwiKS5vbignY2hhbmdlIGlucHV0JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHNlbGYub25Kb2JTZWxlY3RlZChVdGlscy5maW5kKHNlbGYuam9iQ29uZmlndXJhdGlvbnMsIGM9PmMuam9iTmFtZSA9PT0gdGhpcy52YWx1ZSkpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRSZXN1bHRUYWJsZShyZXN1bHQpIHtcbiAgICAgICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIG9uUm93U2VsZWN0ZWQ6IChyb3dzLCBpbmRleGVzLCBlKT0+IHRoaXMub25SZXN1bHRSb3dTZWxlY3RlZChyb3dzLCBpbmRleGVzLCBlKSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJzZC1cIiArIHRoaXMuam9iLm5hbWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0VGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0VGFibGUuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0VGFibGUuc2V0Q2xhc3NOYW1lKFwic2QtXCIgKyB0aGlzLmpvYi5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0VGFibGUuaGlkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuam9iLm5hbWUgPT0gXCJzZW5zaXRpdml0eS1hbmFseXNpc1wiKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlID0gbmV3IFNlbnNpdGl2aXR5QW5hbHlzaXNKb2JSZXN1bHRUYWJsZSh0aGlzLmpvYlJlc3VsdHNDb250YWluZXIuc2VsZWN0KFwiLnNkLWpvYi1yZXN1bHQtdGFibGUtY29udGFpbmVyXCIpLCBjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRUYWJsZS5zZXREYXRhKHJlc3VsdCwgdGhpcy5qb2JQYXJhbWV0ZXJzLCB0aGlzLmpvYik7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLnNob3coKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmpvYi5uYW1lID09IFwicHJvYmFiaWxpc3RpYy1zZW5zaXRpdml0eS1hbmFseXNpc1wiKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlID0gbmV3IFByb2JhYmlsaXN0aWNTZW5zaXRpdml0eUFuYWx5c2lzSm9iUmVzdWx0VGFibGUodGhpcy5qb2JSZXN1bHRzQ29udGFpbmVyLnNlbGVjdChcIi5zZC1qb2ItcmVzdWx0LXRhYmxlLWNvbnRhaW5lclwiKSwgY29uZmlnLCAodikgPT4gdGhpcy5wYXlvZmZOdW1iZXJGb3JtYXQuZm9ybWF0KHYpLCAodikgPT4gdGhpcy5hcHAucHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQuZm9ybWF0KHYpKTtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0VGFibGUuc2V0RGF0YShyZXN1bHQsIHRoaXMuam9iUGFyYW1ldGVycywgdGhpcy5qb2IpO1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRUYWJsZS5zaG93KCk7XG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICBkaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGRpc2FibGUgPSB0cnVlKSB7XG4gICAgICAgIGlmIChkaXNhYmxlKSB7XG4gICAgICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIExvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNlbGVjdCgnLnNkLXNlbnNpdGl2aXR5LWFuYWx5c2lzLWFjdGlvbi1idXR0b25zJykuc2VsZWN0QWxsKCdidXR0b24nKS5hdHRyKCdkaXNhYmxlZCcsIGRpc2FibGUgPyAnZGlzYWJsZWQnIDogdW5kZWZpbmVkKVxuICAgIH1cblxuICAgIGluaXRCdXR0b25zKCkge1xuICAgICAgICB0aGlzLnJ1bkpvYkJ1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdChcIi5zZC1ydW4tam9iLWJ1dHRvblwiKS5vbignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5qb2JQYXJhbWV0ZXJzQnVpbGRlci52YWxpZGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrV2FybmluZ3MoKTtcblxuICAgICAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLnJ1bkpvYldpdGhJbnN0YW5jZU1hbmFnZXIodGhpcy5qb2IubmFtZSwgdGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcywge1xuICAgICAgICAgICAgICAgIG9uSm9iU3RhcnRlZDogdGhpcy5vbkpvYlN0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgb25Kb2JDb21wbGV0ZWQ6IHRoaXMub25Kb2JDb21wbGV0ZWQsXG4gICAgICAgICAgICAgICAgb25Kb2JGYWlsZWQ6IHRoaXMub25Kb2JGYWlsZWQsXG4gICAgICAgICAgICAgICAgb25Kb2JTdG9wcGVkOiB0aGlzLm9uSm9iU3RvcHBlZCxcbiAgICAgICAgICAgICAgICBvbkpvYlRlcm1pbmF0ZWQ6IHRoaXMub25Kb2JUZXJtaW5hdGVkLFxuICAgICAgICAgICAgICAgIG9uUHJvZ3Jlc3M6IHRoaXMub25Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBjYWxsYmFja3NUaGlzQXJnOiB0aGlzXG4gICAgICAgICAgICB9KS50aGVuKGpvYkluc3RhbmNlTWFuYWdlcj0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmpvYkluc3RhbmNlTWFuYWdlciA9IGpvYkluc3RhbmNlTWFuYWdlcjtcbiAgICAgICAgICAgIH0pLmNhdGNoKGU9PiB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSkudGhlbigoKT0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlc3VtZUpvYkJ1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdChcIi5zZC1yZXN1bWUtam9iLWJ1dHRvblwiKS5vbignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuam9iSW5zdGFuY2VNYW5hZ2VyLnJlc3VtZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN0b3BKb2JCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2Qtc3RvcC1qb2ItYnV0dG9uXCIpLm9uKCdjbGljaycsICgpPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmpvYkluc3RhbmNlTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZUFjdGlvbkJ1dHRvbnNBbmRTaG93TG9hZGluZ0luZGljYXRvcigpO1xuICAgICAgICAgICAgdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIuc3RvcCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRlcm1pbmF0ZUpvYkJ1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdChcIi5zZC10ZXJtaW5hdGUtam9iLWJ1dHRvblwiKS5vbignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRlcm1pbmF0ZUpvYigpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJhY2tCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2QtYmFjay1idXR0b24gXCIpLm9uKCdjbGljaycsICgpPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuam9iSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kb3dubG9hZENzdkJ1dHRvbnMgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2QtZG93bmxvYWQtY3N2LWJ1dHRvbiBcIikub24oJ2NsaWNrJywgKCk9PiB7XG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkQ1NWKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY2xlYXJCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2QtY2xlYXItYnV0dG9uIFwiKS5vbignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvYWRTYXZlZFBhcmFtVmFsdWVzKGpvYk5hbWVUb1BhcmFtVmFsdWVzKXtcbiAgICAgICAgdGhpcy5qb2JOYW1lVG9QYXJhbVZhbHVlcyA9IGpvYk5hbWVUb1BhcmFtVmFsdWVzO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSm9iQ29uZmlnID0gbnVsbDtcbiAgICAgICAgdGhpcy5qb2JQYXJhbWV0ZXJzID0gbnVsbDtcbiAgICB9XG5cblxuICAgIGNsZWFyKGNsZWFyUGFyYW1zID0gZmFsc2UsIGNsZWFyQWxsUGFyYW1zID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5jbGVhclJlc3VsdHMoKTtcbiAgICAgICAgdGhpcy5jbGVhcldhcm5pbmdzKCk7XG4gICAgICAgIHRoaXMuc2V0UHJvZ3Jlc3MoMCk7XG4gICAgICAgIHRoaXMubWFya0FzRXJyb3IoZmFsc2UpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZEpvYkNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5vbkpvYlNlbGVjdGVkKHRoaXMuam9iQ29uZmlndXJhdGlvbnNbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoY2xlYXJBbGxQYXJhbXMpe1xuICAgICAgICAgICAgVXRpbHMuZm9yT3duKHRoaXMuam9iTmFtZVRvUGFyYW1WYWx1ZXMsICh2YWx1ZSwga2V5KT0+IHRoaXMuam9iTmFtZVRvUGFyYW1WYWx1ZXNba2V5XSA9IHt9KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGdsb2JhbFZhcmlhYmxlTmFtZXMgPSB0aGlzLmdldEdsb2JhbFZhcmlhYmxlTmFtZXMoKTtcbiAgICAgICAgVXRpbHMuZm9yT3duKHRoaXMuam9iTmFtZVRvUGFyYW1WYWx1ZXMsICh2YWx1ZSwga2V5KT0+IHtcbiAgICAgICAgICAgIGxldCBwYXJhbVZhbHVlcyA9IHZhbHVlO1xuICAgICAgICAgICAgaWYoY2xlYXJBbGxQYXJhbXMpe1xuICAgICAgICAgICAgICAgIHBhcmFtVmFsdWVzID0ge31cbiAgICAgICAgICAgIH1lbHNlIGlmKHBhcmFtVmFsdWVzLnZhcmlhYmxlcyl7XG4gICAgICAgICAgICAgICAgcGFyYW1WYWx1ZXMudmFyaWFibGVzID0gcGFyYW1WYWx1ZXMudmFyaWFibGVzLmZpbHRlcih2PT5nbG9iYWxWYXJpYWJsZU5hbWVzLmluZGV4T2Yodi5uYW1lKSE9PS0xKTtcbiAgICAgICAgICAgICAgICBpZighcGFyYW1WYWx1ZXMudmFyaWFibGVzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtVmFsdWVzLnZhcmlhYmxlcy5wdXNoKHt9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5qb2JOYW1lVG9QYXJhbVZhbHVlc1trZXldID0gcGFyYW1WYWx1ZXM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmpvYikge1xuICAgICAgICAgICAgaWYgKGNsZWFyUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5qb2JOYW1lVG9QYXJhbVZhbHVlc1t0aGlzLmpvYi5uYW1lXSA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Sm9iUGFyYW1zVmFsdWVzKHt9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcy5ydWxlTmFtZSA9IHRoaXMuY29tcHV0YXRpb25zTWFuYWdlci5nZXRDdXJyZW50UnVsZSgpLm5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRKb2JQYXJhbXNWYWx1ZXModGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5qb2JDb25maWd1cmF0aW9uQ29udGFpbmVyKTtcbiAgICAgICAgQXBwVXRpbHMuc2hvdyh0aGlzLnJ1bkpvYkJ1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5jbGVhckJ1dHRvbik7XG5cbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLnJlc3VtZUpvYkJ1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lcik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5zdG9wSm9iQnV0dG9uKTtcbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLmRvd25sb2FkQ3N2QnV0dG9ucyk7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy50ZXJtaW5hdGVKb2JCdXR0b24pO1xuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMuam9iUmVzdWx0c0NvbnRhaW5lcik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5iYWNrQnV0dG9uKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbGVhclJlc3VsdHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFRhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLmhpZGUoKTtcblxuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMucmVzdWx0UGxvdHMpe1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRQbG90cy5mb3JFYWNoKHA9PnAuZGVzdHJveSgpKVxuICAgICAgICAgICAgdGhpcy5qb2JSZXN1bHRQbG90Q29udGFpbmVyLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkpvYlN0YXJ0ZWQoKSB7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5qb2JDb25maWd1cmF0aW9uQ29udGFpbmVyKTtcbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLnJ1bkpvYkJ1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5yZXN1bWVKb2JCdXR0b24pO1xuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMuYmFja0J1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5jbGVhckJ1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5kb3dubG9hZENzdkJ1dHRvbnMpO1xuXG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lcik7XG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5zdG9wSm9iQnV0dG9uKTtcbiAgICAgICAgQXBwVXRpbHMuc2hvdyh0aGlzLnRlcm1pbmF0ZUpvYkJ1dHRvbik7XG5cbiAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgdGhpcy5vblByb2dyZXNzKHRoaXMuam9iSW5zdGFuY2VNYW5hZ2VyID8gdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIucHJvZ3Jlc3MgOiBudWxsKTtcblxuICAgIH1cblxuXG4gICAgb25Kb2JDb21wbGV0ZWQocmVzdWx0KSB7XG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5qb2JSZXN1bHRzQ29udGFpbmVyKTtcbiAgICAgICAgQXBwVXRpbHMuc2hvdyh0aGlzLmJhY2tCdXR0b24pO1xuICAgICAgICBBcHBVdGlscy5zaG93KHRoaXMuZG93bmxvYWRDc3ZCdXR0b25zKTtcblxuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIpO1xuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMuc3RvcEpvYkJ1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy50ZXJtaW5hdGVKb2JCdXR0b24pO1xuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMuY2xlYXJCdXR0b24pO1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZUFjdGlvbkJ1dHRvbnNBbmRTaG93TG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgICAgIHRoaXMuZGlzcGxheVJlc3VsdChyZXN1bHQpXG4gICAgfVxuXG4gICAgZGlzcGxheVJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgbG9nLmRlYnVnKHJlc3VsdCk7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmluaXRSZXN1bHRUYWJsZShyZXN1bHQpO1xuXG4gICAgICAgIHRoaXMuaW5pdFJlc3VsdFBsb3RzKHJlc3VsdCk7XG5cblxuXG4gICAgfVxuXG4gICAgaW5pdFJlc3VsdFBsb3RzKHJlc3VsdCkge1xuXG5cbiAgICAgICAgaWYgKHRoaXMuam9iLm5hbWUgPT09IFwidG9ybmFkby1kaWFncmFtXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFRvcm5hZG9SZXN1bHRQbG90cyhyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuam9iLm5hbWUgPT09IFwic3BpZGVyLXBsb3RcIikge1xuICAgICAgICAgICAgdGhpcy5pbml0U3BpZGVyUmVzdWx0UGxvdHMocmVzdWx0KTtcbiAgICAgICAgfVxuXG5cblxuICAgIH1cblxuICAgIGluaXRUb3JuYWRvUmVzdWx0UGxvdHMocmVzdWx0KSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5yZXN1bHRQbG90cyA9IFtdO1xuXG4gICAgICAgIHJlc3VsdC5wb2xpY2llcy5mb3JFYWNoKChwb2xpY3ksIGluZGV4KSA9PiB7XG5cbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSB0aGlzLmpvYlJlc3VsdFBsb3RDb250YWluZXIuc2VsZWN0T3JBcHBlbmQoXCJkaXYuc2QtcmVzdWx0LXBsb3QtY29udGFpbmVyLVwiK2luZGV4KTtcbiAgICAgICAgICAgIGxldCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgcG9saWN5SW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBzZWxmLmFwcC5jb25maWcubGVhZ3VlVGFibGUucGxvdC5tYXhXaWR0aCxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCByZXN1bHRQbG90ID0gbmV3IFRvcm5hZG9EaWFncmFtUGxvdChjb250YWluZXIubm9kZSgpLCByZXN1bHQsIGNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFBsb3RzLnB1c2gocmVzdWx0UGxvdCk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFBsb3QuaW5pdCgpXG4gICAgICAgICAgICB9LCAxMDApXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgaW5pdFNwaWRlclJlc3VsdFBsb3RzKHJlc3VsdCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMucmVzdWx0UGxvdHMgPSBbXTtcblxuICAgICAgICByZXN1bHQucG9saWNpZXMuZm9yRWFjaCgocG9saWN5LCBpbmRleCkgPT4ge1xuXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyID0gdGhpcy5qb2JSZXN1bHRQbG90Q29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKFwiZGl2LnNkLXJlc3VsdC1wbG90LWNvbnRhaW5lci1cIitpbmRleCk7XG4gICAgICAgICAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIHBvbGljeUluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogc2VsZi5hcHAuY29uZmlnLmxlYWd1ZVRhYmxlLnBsb3QubWF4V2lkdGgsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgcmVzdWx0UGxvdCA9IG5ldyBTcGlkZXJQbG90KGNvbnRhaW5lci5ub2RlKCksIHJlc3VsdCwgY29uZmlnKTtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0UGxvdHMucHVzaChyZXN1bHRQbG90KTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0UGxvdC5pbml0KClcbiAgICAgICAgICAgIH0sIDEwMClcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBvblJlc2l6ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFBsb3RzKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFBsb3RzLmZvckVhY2gocD0+cC5pbml0KCkpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXJtaW5hdGVKb2IoKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZUFjdGlvbkJ1dHRvbnNBbmRTaG93TG9hZGluZ0luZGljYXRvcigpO1xuICAgICAgICB0aGlzLmpvYkluc3RhbmNlTWFuYWdlci50ZXJtaW5hdGUoKTtcbiAgICB9XG5cbiAgICBvbkpvYkZhaWxlZChlcnJvcnMpIHtcbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLnN0b3BKb2JCdXR0b24pO1xuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMuYmFja0J1dHRvbik7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5kb3dubG9hZENzdkJ1dHRvbnMpO1xuICAgICAgICBBcHBVdGlscy5oaWRlKHRoaXMuY2xlYXJCdXR0b24pO1xuICAgICAgICB0aGlzLmRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgICAgICB0aGlzLm1hcmtBc0Vycm9yKCk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJcIjtcbiAgICAgICAgICAgIGVycm9ycy5mb3JFYWNoKChlLCBpKT0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5cXG5cIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbXNnS2V5QmFzZSA9IFwiam9iLlwiICsgc2VsZi5qb2IubmFtZSArIFwiLmVycm9ycy5cIjtcbiAgICAgICAgICAgICAgICBsZXQgbXNnS2V5ID0gbXNnS2V5QmFzZSArIGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gaTE4bi50KG1zZ0tleSwgZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAobXNnID09PSBtc2dLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gaTE4bi50KFwiam9iLmVycm9ycy5nZW5lcmljXCIsIGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPSBtc2c7XG4gICAgICAgICAgICAgICAgaWYgKGUuZGF0YSAmJiBlLmRhdGEudmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmZvck93bihlLmRhdGEudmFyaWFibGVzLCAodmFsdWUsIGtleSk9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPSBrZXkgKyBcIiA9IFwiICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGFsZXJ0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICBzZWxmLnRlcm1pbmF0ZUpvYigpO1xuICAgICAgICB9LCAxMCk7XG5cbiAgICB9XG5cbiAgICBtYXJrQXNFcnJvcihlcnJvciA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NlZCgnc2Qtam9iLWVycm9yJywgZXJyb3IpO1xuICAgIH1cblxuICAgIG9uSm9iU3RvcHBlZCgpIHtcbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLnN0b3BKb2JCdXR0b24pO1xuICAgICAgICBBcHBVdGlscy5zaG93KHRoaXMucmVzdW1lSm9iQnV0dG9uKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgIH1cblxuICAgIG9uSm9iVGVybWluYXRlZCgpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIG9uUHJvZ3Jlc3MocHJvZ3Jlc3MpIHtcbiAgICAgICAgdGhpcy5zZXRQcm9ncmVzcyhwcm9ncmVzcylcbiAgICB9XG5cbiAgICBzZXRQcm9ncmVzcyhwcm9ncmVzcykge1xuICAgICAgICB2YXIgcGVyY2VudHMgPSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBcIjAlXCI7XG4gICAgICAgIGlmIChwcm9ncmVzcykge1xuICAgICAgICAgICAgdmFsdWUgPSBwcm9ncmVzcy5jdXJyZW50ICsgXCIgLyBcIiArIHByb2dyZXNzLnRvdGFsO1xuICAgICAgICAgICAgcGVyY2VudHMgPSBwcm9ncmVzcy5jdXJyZW50ICogMTAwIC8gcHJvZ3Jlc3MudG90YWw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlKFwid2lkdGhcIiwgcGVyY2VudHMgKyBcIiVcIik7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuaHRtbCh2YWx1ZSlcbiAgICB9XG5cblxuICAgIG9uUmVzdWx0Um93U2VsZWN0ZWQocm93cywgaW5kZXhlcywgZXZlbnQpIHtcblxuICAgICAgICBpZiAoIXJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9saWN5SW5kZXhlcyA9IHJvd3MubWFwKHI9PnIucG9saWN5SW5kZXgpLmZpbHRlcigodmFsdWUsIGluZGV4LCBzZWxmKT0+c2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXgpO1xuXG4gICAgICAgIGlmIChwb2xpY3lJbmRleGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIFRvb2x0aXAuc2hvdyhpMThuLnQoJ2pvYlJlc3VsdFRhYmxlLnRvb2x0aXAubXVsdGlwbGVQb2xpY2llc0luQ2VsbCcsIHtudW1iZXI6IHBvbGljeUluZGV4ZXMubGVuZ3RofSksIDUsIDI4LCBldmVudCwgMjAwMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBwb2xpY3kgPSB0aGlzLnJlc3VsdC5wb2xpY2llc1twb2xpY3lJbmRleGVzWzBdXTtcbiAgICAgICAgbGV0IHRpdGxlID0gUG9saWN5LnRvUG9saWN5U3RyaW5nKHBvbGljeSwgZmFsc2UpO1xuXG4gICAgICAgIGlmKHJvd3MubGVuZ3RoPT0xKXtcblxuICAgICAgICAgICAgbGV0IHJvdyA9IHJvd3NbMF07XG4gICAgICAgICAgICBpZihyb3cudmFyaWFibGVzKXtcbiAgICAgICAgICAgICAgICB0aXRsZSA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LnZhcmlhYmxlTmFtZXMuZm9yRWFjaCgodiwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYoaSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSArPSBcIjsgXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aXRsZSArPSB2ICsgXCIgPSBcIiArIHJvdy52YXJpYWJsZXNbaV07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcC5zaG93UG9saWN5UHJldmlldyh0aXRsZSwgcG9saWN5LCAoKT0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0VGFibGUuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBkb3dubG9hZENTVigpIHtcbiAgICAgICAgRXhwb3J0ZXIuc2F2ZUFzQ1NWKHRoaXMuZ2V0Um93cygpKVxuICAgIH1cblxuICAgIGdldFJvd3MoKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBVdGlscy5jbG9uZURlZXAodGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcyk7XG4gICAgICAgIHBhcmFtcy5leHRlbmRlZFBvbGljeURlc2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLmpvYi5qb2JSZXN1bHRUb0NzdlJvd3ModGhpcy5yZXN1bHQsIHRoaXMuam9iLmNyZWF0ZUpvYlBhcmFtZXRlcnMocGFyYW1zKSk7XG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJy4uL2QzJ1xuaW1wb3J0IHtEaWFsb2d9IGZyb20gJy4vZGlhbG9nJ1xuaW1wb3J0IHtpMThufSBmcm9tIFwiLi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge1RlbXBsYXRlc30gZnJvbSBcIi4uL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tIFwiLi4vYXBwLXV0aWxzXCI7XG5pbXBvcnQge0lucHV0RmllbGR9IGZyb20gXCIuLi9mb3JtL2lucHV0LWZpZWxkXCI7XG5pbXBvcnQge1BhdGhWYWx1ZUFjY2Vzc29yfSBmcm9tIFwiLi4vZm9ybS9wYXRoLXZhbHVlLWFjY2Vzc29yXCI7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc0RpYWxvZyBleHRlbmRzIERpYWxvZ3tcblxuICAgIGZvcm1Hcm91cHM9W107XG5cbiAgICBzdGF0aWMgZm9udFdlaWdodE9wdGlvbnMgPSBbJ25vcm1hbCcsICdib2xkJywgJ2xpZ2h0ZXInLCAnYm9sZGVyJ107XG4gICAgc3RhdGljIGZvbnRTdHlsZU9wdGlvbnMgPSBbJ25vcm1hbCcsICdpdGFsaWMnLCAnb2JsaXF1ZSddO1xuXG4gICAgY29uc3RydWN0b3IoYXBwKXtcbiAgICAgICAgc3VwZXIoYXBwLmNvbnRhaW5lci5zZWxlY3QoJyNzZC1zZXR0aW5ncy1kaWFsb2cnKSwgYXBwKTtcblxuICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdnZW5lcmFsJywgKCk9PiB7XG4gICAgICAgICAgICBhcHAudHJlZURlc2lnbmVyLnVwZGF0ZUN1c3RvbVN0eWxlcygpO1xuICAgICAgICAgICAgYXBwLnVwZGF0ZU51bWJlckZvcm1hdHMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGdyb3VwXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRGYW1pbHknLCAndGV4dCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZm9udEZhbWlseScpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRTaXplJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmZvbnRTaXplJylcbiAgICAgICAgICAgIC5hZGRTZWxlY3RGaWVsZCgnZm9udFdlaWdodCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZm9udFdlaWdodCcsIFNldHRpbmdzRGlhbG9nLmZvbnRXZWlnaHRPcHRpb25zKVxuICAgICAgICAgICAgLmFkZFNlbGVjdEZpZWxkKCdmb250U3R5bGUnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmZvbnRTdHlsZScsIFNldHRpbmdzRGlhbG9nLmZvbnRTdHlsZU9wdGlvbnMpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ251bWJlckZvcm1hdExvY2FsZScsICd0ZXh0JywgYXBwLCAnY29uZmlnLmZvcm1hdC5sb2NhbGVzJywge3ZhbGlkYXRlOiAodik9Pnt0cnl7bmV3IEludGwuTnVtYmVyRm9ybWF0KHYpOyByZXR1cm4gdHJ1ZTt9Y2F0Y2ggKGUpe3JldHVybiBmYWxzZX19fSk7XG4gICAgICAgIHRoaXMuZm9ybUdyb3Vwcy5wdXNoKGdyb3VwKTtcblxuXG4gICAgICAgIHZhciBwYXlvZmZHcm91cCA9IG5ldyBGb3JtR3JvdXAoJ3BheW9mZjEnLCAoKT0+YXBwLnVwZGF0ZVBheW9mZk51bWJlckZvcm1hdCgpKTtcbiAgICAgICAgcGF5b2ZmR3JvdXBcbiAgICAgICAgICAgIC5hZGRTZWxlY3RGaWVsZCgnc3R5bGUnLCBhcHAsICdjb25maWcuZm9ybWF0LnBheW9mZjEuc3R5bGUnLCBbJ2N1cnJlbmN5JywgJ2RlY2ltYWwnXSlcbiAgICAgICAgICAgIC5hZGRTZWxlY3RGaWVsZCgnY3VycmVuY3lEaXNwbGF5JywgYXBwLCAnY29uZmlnLmZvcm1hdC5wYXlvZmYxLmN1cnJlbmN5RGlzcGxheScsIFsnc3ltYm9sJywgJ2NvZGUnLCAnbmFtZSddKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdjdXJyZW5jeScsICd0ZXh0JywgYXBwLCAnY29uZmlnLmZvcm1hdC5wYXlvZmYxLmN1cnJlbmN5Jywge3ZhbGlkYXRlOiAodik9Pnt0cnl7bmV3IEludGwuTnVtYmVyRm9ybWF0KFtdLCB7Y3VycmVuY3k6dn0pOyByZXR1cm4gdHJ1ZTt9Y2F0Y2ggKGUpe3JldHVybiBmYWxzZX19fSlcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnbWluaW11bUZyYWN0aW9uRGlnaXRzJywgJ251bWJlcicsIGFwcCwgJ2NvbmZpZy5mb3JtYXQucGF5b2ZmMS5taW5pbXVtRnJhY3Rpb25EaWdpdHMnICwge3ZhbGlkYXRlOiAodik9Pnt0cnl7bmV3IEludGwuTnVtYmVyRm9ybWF0KFtdLCB7bWluaW11bUZyYWN0aW9uRGlnaXRzOnYsIG1heGltdW1GcmFjdGlvbkRpZ2l0czphcHAuY29uZmlnLmZvcm1hdC5wYXlvZmYxLm1heGltdW1GcmFjdGlvbkRpZ2l0c30pOyByZXR1cm4gdHJ1ZTt9Y2F0Y2ggKGUpe3JldHVybiBmYWxzZX19fSlcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnbWF4aW11bUZyYWN0aW9uRGlnaXRzJywgJ251bWJlcicsIGFwcCwgJ2NvbmZpZy5mb3JtYXQucGF5b2ZmMS5tYXhpbXVtRnJhY3Rpb25EaWdpdHMnLCB7dmFsaWRhdGU6ICh2KT0+e3RyeXtuZXcgSW50bC5OdW1iZXJGb3JtYXQoW10sIHttaW5pbXVtRnJhY3Rpb25EaWdpdHM6YXBwLmNvbmZpZy5mb3JtYXQucGF5b2ZmMS5taW5pbXVtRnJhY3Rpb25EaWdpdHMsIG1heGltdW1GcmFjdGlvbkRpZ2l0czp2fSk7IHJldHVybiB0cnVlO31jYXRjaCAoZSl7cmV0dXJuIGZhbHNlfX19KVxuICAgICAgICAgICAgLmFkZEZpZWxkKCd1c2VHcm91cGluZycsICdjaGVja2JveCcsIGFwcCwgJ2NvbmZpZy5mb3JtYXQucGF5b2ZmMS51c2VHcm91cGluZycpXG5cbiAgICAgICAgdGhpcy5mb3JtR3JvdXBzLnB1c2gocGF5b2ZmR3JvdXApO1xuXG4gICAgICAgIHZhciBwYXlvZmYyR3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdwYXlvZmYyJywgKCk9PmFwcC51cGRhdGVQYXlvZmZOdW1iZXJGb3JtYXQoKSk7XG4gICAgICAgIHBheW9mZjJHcm91cFxuICAgICAgICAgICAgLmFkZFNlbGVjdEZpZWxkKCdzdHlsZScsIGFwcCwgJ2NvbmZpZy5mb3JtYXQucGF5b2ZmMi5zdHlsZScsIFsnY3VycmVuY3knLCAnZGVjaW1hbCddKVxuICAgICAgICAgICAgLmFkZFNlbGVjdEZpZWxkKCdjdXJyZW5jeURpc3BsYXknLCBhcHAsICdjb25maWcuZm9ybWF0LnBheW9mZjIuY3VycmVuY3lEaXNwbGF5JywgWydzeW1ib2wnLCAnY29kZScsICduYW1lJ10pXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2N1cnJlbmN5JywgJ3RleHQnLCBhcHAsICdjb25maWcuZm9ybWF0LnBheW9mZjIuY3VycmVuY3knLCB7dmFsaWRhdGU6ICh2KT0+e3RyeXtuZXcgSW50bC5OdW1iZXJGb3JtYXQoW10sIHtjdXJyZW5jeTp2fSk7IHJldHVybiB0cnVlO31jYXRjaCAoZSl7cmV0dXJuIGZhbHNlfX19KVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdtaW5pbXVtRnJhY3Rpb25EaWdpdHMnLCAnbnVtYmVyJywgYXBwLCAnY29uZmlnLmZvcm1hdC5wYXlvZmYyLm1pbmltdW1GcmFjdGlvbkRpZ2l0cycgLCB7dmFsaWRhdGU6ICh2KT0+e3RyeXtuZXcgSW50bC5OdW1iZXJGb3JtYXQoW10sIHttaW5pbXVtRnJhY3Rpb25EaWdpdHM6diwgbWF4aW11bUZyYWN0aW9uRGlnaXRzOmFwcC5jb25maWcuZm9ybWF0LnBheW9mZjIubWF4aW11bUZyYWN0aW9uRGlnaXRzfSk7IHJldHVybiB0cnVlO31jYXRjaCAoZSl7cmV0dXJuIGZhbHNlfX19KVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdtYXhpbXVtRnJhY3Rpb25EaWdpdHMnLCAnbnVtYmVyJywgYXBwLCAnY29uZmlnLmZvcm1hdC5wYXlvZmYyLm1heGltdW1GcmFjdGlvbkRpZ2l0cycsIHt2YWxpZGF0ZTogKHYpPT57dHJ5e25ldyBJbnRsLk51bWJlckZvcm1hdChbXSwge21pbmltdW1GcmFjdGlvbkRpZ2l0czphcHAuY29uZmlnLmZvcm1hdC5wYXlvZmYyLm1pbmltdW1GcmFjdGlvbkRpZ2l0cywgbWF4aW11bUZyYWN0aW9uRGlnaXRzOnZ9KTsgcmV0dXJuIHRydWU7fWNhdGNoIChlKXtyZXR1cm4gZmFsc2V9fX0pXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3VzZUdyb3VwaW5nJywgJ2NoZWNrYm94JywgYXBwLCAnY29uZmlnLmZvcm1hdC5wYXlvZmYyLnVzZUdyb3VwaW5nJylcblxuICAgICAgICB0aGlzLmZvcm1Hcm91cHMucHVzaChwYXlvZmYyR3JvdXApO1xuXG5cbiAgICAgICAgZ3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdwcm9iYWJpbGl0eScsICgpPT57XG4gICAgICAgICAgICBhcHAudXBkYXRlUHJvYmFiaWxpdHlOdW1iZXJGb3JtYXQoKTtcbiAgICAgICAgICAgIGFwcC50cmVlRGVzaWduZXIudXBkYXRlQ3VzdG9tU3R5bGVzKCkucmVkcmF3KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBncm91cFxuICAgICAgICAgICAgLmFkZFNlbGVjdEZpZWxkKCdzdHlsZScsIGFwcCwgJ2NvbmZpZy5mb3JtYXQucHJvYmFiaWxpdHkuc3R5bGUnLCBbJ2RlY2ltYWwnLCAncGVyY2VudCddKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdtaW5pbXVtRnJhY3Rpb25EaWdpdHMnLCAnbnVtYmVyJywgYXBwLCAnY29uZmlnLmZvcm1hdC5wcm9iYWJpbGl0eS5taW5pbXVtRnJhY3Rpb25EaWdpdHMnLCB7dmFsaWRhdGU6ICh2KT0+e3RyeXtuZXcgSW50bC5OdW1iZXJGb3JtYXQoW10sIHttaW5pbXVtRnJhY3Rpb25EaWdpdHM6diwgbWF4aW11bUZyYWN0aW9uRGlnaXRzOmFwcC5jb25maWcuZm9ybWF0LnByb2JhYmlsaXR5Lm1heGltdW1GcmFjdGlvbkRpZ2l0c30pOyByZXR1cm4gdHJ1ZTt9Y2F0Y2ggKGUpe3JldHVybiBmYWxzZX19fSlcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnbWF4aW11bUZyYWN0aW9uRGlnaXRzJywgJ251bWJlcicsIGFwcCwgJ2NvbmZpZy5mb3JtYXQucHJvYmFiaWxpdHkubWF4aW11bUZyYWN0aW9uRGlnaXRzJywge3ZhbGlkYXRlOiAodik9Pnt0cnl7bmV3IEludGwuTnVtYmVyRm9ybWF0KFtdLCB7bWluaW11bUZyYWN0aW9uRGlnaXRzOmFwcC5jb25maWcuZm9ybWF0LnByb2JhYmlsaXR5Lm1pbmltdW1GcmFjdGlvbkRpZ2l0cywgbWF4aW11bUZyYWN0aW9uRGlnaXRzOnZ9KTsgcmV0dXJuIHRydWU7fWNhdGNoIChlKXtyZXR1cm4gZmFsc2V9fX0pXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRTaXplJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLnByb2JhYmlsaXR5LmZvbnRTaXplJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnY29sb3InLCAnY29sb3InLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLnByb2JhYmlsaXR5LmNvbG9yJyk7XG4gICAgICAgIHRoaXMuZm9ybUdyb3Vwcy5wdXNoKGdyb3VwKTtcblxuXG4gICAgICAgIHZhciBub2RlR3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdub2RlJywgKCk9PmFwcC50cmVlRGVzaWduZXIudXBkYXRlQ3VzdG9tU3R5bGVzKCkucmVkcmF3KCkpO1xuICAgICAgICBub2RlR3JvdXBcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnc3Ryb2tlV2lkdGgnLCAndGV4dCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5zdHJva2VXaWR0aCcpO1xuXG4gICAgICAgIG5vZGVHcm91cC5hZGRHcm91cCgnb3B0aW1hbCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3N0cm9rZVdpZHRoJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUub3B0aW1hbC5zdHJva2VXaWR0aCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3N0cm9rZScsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5vcHRpbWFsLnN0cm9rZScpO1xuXG4gICAgICAgIG5vZGVHcm91cC5hZGRHcm91cCgnbGFiZWwnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdmb250U2l6ZScsICd0ZXh0JywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5ub2RlLmxhYmVsLmZvbnRTaXplJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnY29sb3InLCAnY29sb3InLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUubGFiZWwuY29sb3InKTtcblxuICAgICAgICBub2RlR3JvdXAuYWRkR3JvdXAoJ3BheW9mZicpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRTaXplJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUucGF5b2ZmLmZvbnRTaXplJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnY29sb3InLCAnY29sb3InLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUucGF5b2ZmLmNvbG9yJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnbmVnYXRpdmVDb2xvcicsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5wYXlvZmYubmVnYXRpdmVDb2xvcicpO1xuXG4gICAgICAgIHRoaXMuZm9ybUdyb3Vwcy5wdXNoKG5vZGVHcm91cCk7XG5cbiAgICAgICAgbm9kZUdyb3VwLmFkZEdyb3VwKCdkZWNpc2lvbicpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZpbGwnLCAnY29sb3InLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUuZGVjaXNpb24uZmlsbCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3N0cm9rZScsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5kZWNpc2lvbi5zdHJva2UnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdzZWxlY3RlZC5maWxsJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5ub2RlLmRlY2lzaW9uLnNlbGVjdGVkLmZpbGwnKTtcblxuXG4gICAgICAgIG5vZGVHcm91cC5hZGRHcm91cCgnY2hhbmNlJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnZmlsbCcsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5jaGFuY2UuZmlsbCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3N0cm9rZScsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5jaGFuY2Uuc3Ryb2tlJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnc2VsZWN0ZWQuZmlsbCcsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS5jaGFuY2Uuc2VsZWN0ZWQuZmlsbCcpO1xuXG4gICAgICAgIG5vZGVHcm91cC5hZGRHcm91cCgndGVybWluYWwnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdmaWxsJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5ub2RlLnRlcm1pbmFsLmZpbGwnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdzdHJva2UnLCAnY29sb3InLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUudGVybWluYWwuc3Ryb2tlJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnc2VsZWN0ZWQuZmlsbCcsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcubm9kZS50ZXJtaW5hbC5zZWxlY3RlZC5maWxsJylcbiAgICAgICAgICAgIC5hZGRHcm91cCgncGF5b2ZmJylcbiAgICAgICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRTaXplJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLm5vZGUudGVybWluYWwucGF5b2ZmLmZvbnRTaXplJylcbiAgICAgICAgICAgICAgICAuYWRkRmllbGQoJ2NvbG9yJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5ub2RlLnRlcm1pbmFsLnBheW9mZi5jb2xvcicpXG4gICAgICAgICAgICAgICAgLmFkZEZpZWxkKCduZWdhdGl2ZUNvbG9yJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5ub2RlLnRlcm1pbmFsLnBheW9mZi5uZWdhdGl2ZUNvbG9yJyk7XG5cblxuXG4gICAgICAgIHZhciBlZGdlR3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdlZGdlJywgKCk9PmFwcC50cmVlRGVzaWduZXIudXBkYXRlQ3VzdG9tU3R5bGVzKCkucmVkcmF3KCkpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3N0cm9rZScsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZWRnZS5zdHJva2UnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdzdHJva2VXaWR0aCcsICd0ZXh0JywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5lZGdlLnN0cm9rZVdpZHRoJyk7XG5cbiAgICAgICAgZWRnZUdyb3VwLmFkZEdyb3VwKCdvcHRpbWFsJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnc3Ryb2tlV2lkdGgnLCAndGV4dCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZWRnZS5vcHRpbWFsLnN0cm9rZVdpZHRoJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnc3Ryb2tlJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5lZGdlLm9wdGltYWwuc3Ryb2tlJyk7XG5cbiAgICAgICAgZWRnZUdyb3VwLmFkZEdyb3VwKCdzZWxlY3RlZCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ3N0cm9rZVdpZHRoJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmVkZ2Uuc2VsZWN0ZWQuc3Ryb2tlV2lkdGgnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdzdHJva2UnLCAnY29sb3InLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmVkZ2Uuc2VsZWN0ZWQuc3Ryb2tlJyk7XG5cbiAgICAgICAgZWRnZUdyb3VwLmFkZEdyb3VwKCdsYWJlbCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRTaXplJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmVkZ2UubGFiZWwuZm9udFNpemUnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdjb2xvcicsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZWRnZS5sYWJlbC5jb2xvcicpO1xuXG4gICAgICAgIGVkZ2VHcm91cC5hZGRHcm91cCgncGF5b2ZmJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnZm9udFNpemUnLCAndGV4dCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZWRnZS5wYXlvZmYuZm9udFNpemUnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdjb2xvcicsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZWRnZS5wYXlvZmYuY29sb3InKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCduZWdhdGl2ZUNvbG9yJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5lZGdlLnBheW9mZi5uZWdhdGl2ZUNvbG9yJyk7XG4gICAgICAgIHRoaXMuZm9ybUdyb3Vwcy5wdXNoKGVkZ2VHcm91cCk7XG5cblxuICAgICAgICB2YXIgdGl0bGVHcm91cCA9IG5ldyBGb3JtR3JvdXAoJ2RpYWdyYW1UaXRsZScsICgpPT5hcHAudHJlZURlc2lnbmVyLnVwZGF0ZUN1c3RvbVN0eWxlcygpLnJlZHJhdygpKTtcbiAgICAgICAgdGl0bGVHcm91cFxuICAgICAgICAgICAgLmFkZEZpZWxkKCdmb250U2l6ZScsICd0ZXh0JywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy50aXRsZS5mb250U2l6ZScpXG4gICAgICAgICAgICAuYWRkU2VsZWN0RmllbGQoJ2ZvbnRXZWlnaHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLnRpdGxlLmZvbnRXZWlnaHQnLCBTZXR0aW5nc0RpYWxvZy5mb250V2VpZ2h0T3B0aW9ucylcbiAgICAgICAgICAgIC5hZGRTZWxlY3RGaWVsZCgnZm9udFN0eWxlJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy50aXRsZS5mb250U3R5bGUnLCBTZXR0aW5nc0RpYWxvZy5mb250U3R5bGVPcHRpb25zKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdjb2xvcicsICdjb2xvcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcudGl0bGUuY29sb3InKVxuXG4gICAgICAgIC5hZGRHcm91cCgnbWFyZ2luJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgndG9wJywgJ251bWJlcicsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcudGl0bGUubWFyZ2luLnRvcCcpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2JvdHRvbScsICdudW1iZXInLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLnRpdGxlLm1hcmdpbi5ib3R0b20nKTtcblxuICAgICAgICB0aXRsZUdyb3VwXG4gICAgICAgICAgICAuYWRkR3JvdXAoJ2Rlc2NyaXB0aW9uJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnc2hvdycsICdjaGVja2JveCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZGVzY3JpcHRpb24uc2hvdycpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2ZvbnRTaXplJywgJ3RleHQnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmRlc2NyaXB0aW9uLmZvbnRTaXplJylcbiAgICAgICAgICAgIC5hZGRTZWxlY3RGaWVsZCgnZm9udFdlaWdodCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZGVzY3JpcHRpb24uZm9udFdlaWdodCcsIFNldHRpbmdzRGlhbG9nLmZvbnRXZWlnaHRPcHRpb25zKVxuICAgICAgICAgICAgLmFkZFNlbGVjdEZpZWxkKCdmb250U3R5bGUnLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmRlc2NyaXB0aW9uLmZvbnRTdHlsZScsIFNldHRpbmdzRGlhbG9nLmZvbnRTdHlsZU9wdGlvbnMpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2NvbG9yJywgJ2NvbG9yJywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5kZXNjcmlwdGlvbi5jb2xvcicpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ21hcmdpblRvcCcsICdudW1iZXInLCBhcHAudHJlZURlc2lnbmVyLCAnY29uZmlnLmRlc2NyaXB0aW9uLm1hcmdpbi50b3AnKTtcblxuICAgICAgICB0aGlzLmZvcm1Hcm91cHMucHVzaCh0aXRsZUdyb3VwKTtcblxuXG5cbiAgICAgICAgdmFyIGxlYWd1ZVRhYmxlR3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdsZWFndWVUYWJsZScpO1xuICAgICAgICBsZWFndWVUYWJsZUdyb3VwXG4gICAgICAgICAgICAuYWRkR3JvdXAoJ3Bsb3QnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdtYXhXaWR0aCcsICd0ZXh0JywgYXBwLCAnY29uZmlnLmxlYWd1ZVRhYmxlLnBsb3QubWF4V2lkdGgnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdoaWdobGlnaHRlZENvbG9yJywgJ2NvbG9yJywgYXBwLCAnY29uZmlnLmxlYWd1ZVRhYmxlLnBsb3QuZ3JvdXBzLmhpZ2hsaWdodGVkLmNvbG9yJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnaGlnaGxpZ2h0ZWREZWZhdWx0Q29sb3InLCAnY29sb3InLCBhcHAsICdjb25maWcubGVhZ3VlVGFibGUucGxvdC5ncm91cHMuaGlnaGxpZ2h0ZWQtZGVmYXVsdC5jb2xvcicpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2V4dGVuZGVkRG9taW5hdGVkQ29sb3InLCAnY29sb3InLCBhcHAsICdjb25maWcubGVhZ3VlVGFibGUucGxvdC5ncm91cHMuZXh0ZW5kZWQtZG9taW5hdGVkLmNvbG9yJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnZG9taW5hdGVkQ29sb3InLCAnY29sb3InLCBhcHAsICdjb25maWcubGVhZ3VlVGFibGUucGxvdC5ncm91cHMuZG9taW5hdGVkLmNvbG9yJylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnZGVmYXVsdENvbG9yJywgJ2NvbG9yJywgYXBwLCAnY29uZmlnLmxlYWd1ZVRhYmxlLnBsb3QuZ3JvdXBzLmRlZmF1bHQuY29sb3InKTtcblxuICAgICAgICB0aGlzLmZvcm1Hcm91cHMucHVzaChsZWFndWVUYWJsZUdyb3VwKTtcblxuXG5cbiAgICAgICAgdmFyIG90aGVyR3JvdXAgPSBuZXcgRm9ybUdyb3VwKCdvdGhlcicsICgpPT5hcHAudHJlZURlc2lnbmVyLnJlZHJhdygpKTtcbiAgICAgICAgb3RoZXJHcm91cFxuICAgICAgICAgICAgLmFkZEZpZWxkKCdkaXNhYmxlQW5pbWF0aW9ucycsICdjaGVja2JveCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuZGlzYWJsZUFuaW1hdGlvbnMnKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdmb3JjZUZ1bGxFZGdlUmVkcmF3JywgJ2NoZWNrYm94JywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5mb3JjZUZ1bGxFZGdlUmVkcmF3JylcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnaGlkZUxhYmVscycsICdjaGVja2JveCcsIGFwcC50cmVlRGVzaWduZXIsICdjb25maWcuaGlkZUxhYmVscycpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2hpZGVQYXlvZmZzJywgJ2NoZWNrYm94JywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5oaWRlUGF5b2ZmcycpXG4gICAgICAgICAgICAuYWRkRmllbGQoJ2hpZGVQcm9iYWJpbGl0aWVzJywgJ2NoZWNrYm94JywgYXBwLnRyZWVEZXNpZ25lciwgJ2NvbmZpZy5oaWRlUHJvYmFiaWxpdGllcycpXG4gICAgICAgICAgICAuYWRkRmllbGQoe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdyYXcnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICAgICAgY29uZmlnOiBhcHAudHJlZURlc2lnbmVyLFxuICAgICAgICAgICAgICAgIHBhdGg6ICdjb25maWcucmF3JyxcbiAgICAgICAgICAgICAgICB2YWx1ZVVwZGF0ZUNhbGxiYWNrOiAoKT0+YXBwLm9uUmF3T3B0aW9uQ2hhbmdlZCgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZvcm1Hcm91cHMucHVzaChvdGhlckdyb3VwKTtcblxuICAgICAgICB0aGlzLmluaXRWaWV3KCk7XG5cbiAgICB9XG5cbiAgICBpbml0Rm9ybUdyb3Vwcyhjb250YWluZXIsIGRhdGEpe1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciB0ZW1wID0ge307XG4gICAgICAgIHZhciBmb3JtR3JvdXBzID0gY29udGFpbmVyLnNlbGVjdEFsbCgnZGl2LnNkLWZvcm0tZ3JvdXAnKS5maWx0ZXIoZnVuY3Rpb24oZCkgeyByZXR1cm4gdGhpcy5wYXJlbnROb2RlPT1jb250YWluZXIubm9kZSgpOyB9KS5kYXRhKGRhdGEpO1xuICAgICAgICB2YXIgZm9ybUdyb3Vwc0VudGVyID0gZm9ybUdyb3Vwcy5lbnRlcigpLmFwcGVuZFNlbGVjdG9yKCdkaXYuc2QtZm9ybS1ncm91cCcpLmF0dHIoJ2lkJywgZD0+ZC5pZCkuaHRtbChkPT5UZW1wbGF0ZXMuZ2V0KCdzZXR0aW5nc0RpYWxvZ0Zvcm1Hcm91cCcsIGQpKTtcbiAgICAgICAgZm9ybUdyb3Vwc0VudGVyLnNlbGVjdCgnLnRvZ2dsZS1idXR0b24nKS5vbignY2xpY2snLCAoZCkgPT4ge1xuICAgICAgICAgICAgdmFyIGcgPSBjb250YWluZXIuc2VsZWN0KCcjJytkLmlkKTtcbiAgICAgICAgICAgIGcuY2xhc3NlZCgnc2QtZXh0ZW5kZWQnLCAhZy5jbGFzc2VkKCdzZC1leHRlbmRlZCcpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGZvcm1Hcm91cHNNZXJnZSA9IGZvcm1Hcm91cHNFbnRlci5tZXJnZShmb3JtR3JvdXBzKTtcbiAgICAgICAgdmFyIGlucHV0R3JvdXBzID0gZm9ybUdyb3Vwc01lcmdlLnNlbGVjdCgnICAuc2QtZm9ybS1ncm91cC1jb250ZW50ID4gLnNkLWZvcm0tZ3JvdXAtaW5wdXRzJykuc2VsZWN0QWxsKCdkaXYuaW5wdXQtZ3JvdXAnKS5kYXRhKGQ9PmQuZmllbGRzKTtcblxuXG4gICAgICAgIHZhciBpbnB1dEdyb3Vwc0VudGVyID0gaW5wdXRHcm91cHMuZW50ZXIoKS5hcHBlbmRTZWxlY3RvcignZGl2LmlucHV0LWdyb3VwJykuaHRtbChkPT5kLnR5cGU9PSdzZWxlY3QnPyBUZW1wbGF0ZXMuZ2V0KCdzZWxlY3RJbnB1dEdyb3VwJywgZCk6VGVtcGxhdGVzLmdldCgnaW5wdXRHcm91cCcsIGQpKTtcblxuXG4gICAgICAgIGlucHV0R3JvdXBzRW50ZXIubWVyZ2UoaW5wdXRHcm91cHMpLnNlbGVjdCgnaW5wdXQsIHNlbGVjdCcpLm9uKCdjaGFuZ2UgaW5wdXQnLCBmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIGlmKGQudHlwZT09J2NoZWNrYm94Jyl7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNoZWNrZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQudmFsaWRhdG9yICYmICFkLnZhbGlkYXRvci52YWxpZGF0ZSh2YWx1ZSkpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKCdpbnZhbGlkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYoZDMuZXZlbnQudHlwZT09J2NoYW5nZScpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gZC52YWx1ZUFjY2Vzc29yLmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgnaW52YWxpZCcsIGZhbHNlKTtcblxuICAgICAgICAgICAgZC52YWx1ZUFjY2Vzc29yLnNldCh2YWx1ZSk7XG4gICAgICAgICAgICBpZihkLnZhbHVlVXBkYXRlQ2FsbGJhY2spe1xuICAgICAgICAgICAgICAgIGQudmFsdWVVcGRhdGVDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQXBwVXRpbHMudXBkYXRlSW5wdXRDbGFzcyhkMy5zZWxlY3QodGhpcykpO1xuXG5cbiAgICAgICAgfSkuZWFjaChmdW5jdGlvbihkLCBpKXtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGQudmFsdWVBY2Nlc3Nvci5nZXQoKTtcbiAgICAgICAgICAgIGlmKGQudHlwZT09J2NoZWNrYm94Jyl7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gdmFsdWVcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBbaV09e307XG4gICAgICAgICAgICB0ZW1wW2ldLnByaXN0aW5lVmFsID0gdmFsdWU7XG4gICAgICAgICAgICBpZihkLnZhbGlkYXRvciAmJiAhZC52YWxpZGF0b3IudmFsaWRhdGUodmFsdWUpKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgnaW52YWxpZCcsIHRydWUpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ2ludmFsaWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKGQzLnNlbGVjdCh0aGlzKSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9ybUdyb3Vwc01lcmdlLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxmLmluaXRGb3JtR3JvdXBzKGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJy5zZC1mb3JtLWdyb3VwLWNvbnRlbnQgPiAuc2QtZm9ybS1ncm91cC1jaGlsZC1ncm91cHMnKSwgZC5ncm91cHMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0VmlldygpIHtcbiAgICAgICAgdmFyIHRlbXAgPSB7fTtcbiAgICAgICAgdGhpcy5pbml0Rm9ybUdyb3Vwcyh0aGlzLmNvbnRhaW5lci5zZWxlY3QoJ2Zvcm0jc2Qtc2V0dGluZ3MtZm9ybScpLCB0aGlzLmZvcm1Hcm91cHMpO1xuXG4gICAgfVxuXG4gICAgb25PcGVuKCl7XG4gICAgICAgIHRoaXMuaW5pdFZpZXcoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEZvcm1Hcm91cHtcbiAgICBpZDtcbiAgICBuYW1lO1xuICAgIGZpZWxkcz1bXTtcbiAgICBncm91cHM9W107XG4gICAgdmFsdWVVcGRhdGVDYWxsYmFjaztcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHZhbHVlVXBkYXRlQ2FsbGJhY2spe1xuICAgICAgICB0aGlzLmlkID0gJ3NkLWZvcm0tZ3JvdXAtJytuYW1lLnJlcGxhY2UoL1xcLi9nLCAnLScpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZhbHVlVXBkYXRlQ2FsbGJhY2sgPSB2YWx1ZVVwZGF0ZUNhbGxiYWNrO1xuICAgIH1cblxuICAgIGFkZFNlbGVjdEZpZWxkKG5hbWUsIGNvbmZpZywgcGF0aCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmFkZEZpZWxkKG5hbWUsICdzZWxlY3QnLCBjb25maWcsIHBhdGgsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGRGaWVsZChmaWVsZENvbmZpZyl7XG4gICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGg+MSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkRmllbGQoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRGaWVsZChmaWVsZENvbmZpZ1snbmFtZSddLCBmaWVsZENvbmZpZ1sndHlwZSddLCBmaWVsZENvbmZpZ1snY29uZmlnJ10sIGZpZWxkQ29uZmlnWydwYXRoJ10sIGZpZWxkQ29uZmlnWyd2YWxpZGF0b3InXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRDb25maWdbJ29wdGlvbnMnXSwgZmllbGRDb25maWdbJ3ZhbHVlVXBkYXRlQ2FsbGJhY2snXSlcbiAgICB9XG5cbiAgICBfYWRkRmllbGQobmFtZSwgdHlwZSwgY29uZmlnLCBwYXRoLCB2YWxpZGF0b3IsIG9wdGlvbnMsIHZhbHVlVXBkYXRlQ2FsbGJhY2spe1xuICAgICAgICB2YXIgZmllbGRJZCA9IHRoaXMubmFtZStcIi1cIituYW1lO1xuICAgICAgICB2YXIgbGFiZWwgPSBpMThuLnQoXCJzZXR0aW5nc0RpYWxvZy5cIit0aGlzLm5hbWUrXCIuXCIrbmFtZSk7XG4gICAgICAgIHZhciBjb25maWdJbnB1dEZpZWxkID0gbmV3IENvbmZpZ0lucHV0RmllbGQoZmllbGRJZCxmaWVsZElkLCB0eXBlLGxhYmVsLCBjb25maWcsIHBhdGgsIHZhbGlkYXRvciwgb3B0aW9ucyk7XG4gICAgICAgIGlmKHZhbHVlVXBkYXRlQ2FsbGJhY2spe1xuICAgICAgICAgICAgY29uZmlnSW5wdXRGaWVsZC52YWx1ZVVwZGF0ZUNhbGxiYWNrID0gICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZVVwZGF0ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVVcGRhdGVDYWxsYmFjaygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBjb25maWdJbnB1dEZpZWxkLnZhbHVlVXBkYXRlQ2FsbGJhY2sgPSAgdGhpcy52YWx1ZVVwZGF0ZUNhbGxiYWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maWVsZHMucHVzaChjb25maWdJbnB1dEZpZWxkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkR3JvdXAobmFtZSl7XG4gICAgICAgIHZhciBncm91cE5hbWUgPSB0aGlzLm5hbWUrJy4nK25hbWU7XG4gICAgICAgIHZhciBncm91cCA9IG5ldyBGb3JtR3JvdXAoZ3JvdXBOYW1lLCB0aGlzLnZhbHVlVXBkYXRlQ2FsbGJhY2spO1xuICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbn1cblxuXG5jbGFzcyBDb25maWdJbnB1dEZpZWxkIGV4dGVuZHMgSW5wdXRGaWVsZHtcbiAgICBjb25zdHJ1Y3RvcihpZCwgbmFtZSwgdHlwZSwgbGFiZWwsIHNvdXJjZU9iamVjdCwgcGF0aCwgdmFsaWRhdG9yLCBvcHRpb25zKXtcbiAgICAgICAgc3VwZXIoaWQsIG5hbWUsIHR5cGUsIGxhYmVsLCBuZXcgUGF0aFZhbHVlQWNjZXNzb3Ioc291cmNlT2JqZWN0LCBwYXRoKSwgdmFsaWRhdG9yLCBvcHRpb25zKTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7ZGF0YVVSTHRvQmxvYn0gZnJvbSBcImJsdWVpbXAtY2FudmFzLXRvLWJsb2JcIjtcbmltcG9ydCB7c2F2ZUFzfSBmcm9tIFwiZmlsZS1zYXZlclwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcIi4vZDNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge1V0aWxzLCBsb2d9IGZyb20gXCJzZC11dGlsc1wiO1xuaW1wb3J0IHtMb2FkaW5nSW5kaWNhdG9yfSBmcm9tIFwiLi9sb2FkaW5nLWluZGljYXRvclwiO1xuXG5leHBvcnQgY2xhc3MgRXhwb3J0ZXIge1xuICAgIHN0YXRpYyBzYXZlQXMgPSBzYXZlQXM7XG4gICAgc3RhdGljIGRhdGFVUkx0b0Jsb2IgPSBkYXRhVVJMdG9CbG9iO1xuICAgIHN0YXRpYyBleHBvcnRlZFN0eWxlcyA9IFsvXmZvbnQvLCAvXmNvbG9yLywgL15vcGFjaXR5JC9dO1xuICAgIHN0YXRpYyBzdmdQcm9wZXJ0aWVzID0gWy9ec3Ryb2tlLywgL15maWxsLywgL150ZXh0L107XG5cbi8vIEJlbG93IGFyZSB0aGUgZnVuY3Rpb24gdGhhdCBoYW5kbGUgYWN0dWFsIGV4cG9ydGluZzpcbi8vIGdldFNWR1N0cmluZyAoc3ZnTm9kZSApIGFuZCBzdmdTdHJpbmcySW1hZ2UoIHN2Z1N0cmluZywgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCBjYWxsYmFjayApXG4gICAgc3RhdGljIGdldFN2Z0Nsb25lV2l0aElubGluZVN0eWxlcyhzdmdOb2RlKSB7XG4gICAgICAgIHZhciBzdmdDbG9uZSA9IHN2Z05vZGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICBhcHBlbmRJbmxpbmVTdHlsZXMoc3ZnTm9kZSwgc3ZnQ2xvbmUpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZElubGluZVN0eWxlcyhzb3VyY2UsIHRhcmdldCwgcGFyZW50Q3MpIHtcbiAgICAgICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCdFeHBvcnRlci5hcHBlbmRJbmxpbmVTdHlsZXMgLSB1bmRlZmluZWQgc291cmNlIScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHNvdXJjZS5jaGlsZHJlbjtcbiAgICAgICAgICAgIHZhciB0YXJnZXRDaGlsZHJlbiA9IHRhcmdldC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGlmICghc291cmNlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBzb3VyY2UuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICB0YXJnZXRDaGlsZHJlbiA9IHRhcmdldC5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc291cmNlLnRhZ05hbWUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgIHZhciBiQm94ID0gc291cmNlLmdldEJCb3goKTtcbiAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc291cmNlLCBiQm94KTtcbiAgICAgICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgneScsIGJCb3gueSkqL1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHZhciBjc3NTdHlsZVRleHQgPSAnJztcbiAgICAgICAgICAgIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUoc291cmNlKTtcbiAgICAgICAgICAgIGlmICghY3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjcy5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZU5hbWUgPSBjcy5pdGVtKGkpO1xuICAgICAgICAgICAgICAgIGlmIChVdGlscy5zdGFydHNXaXRoKHN0eWxlTmFtZSwgJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlWYWx1ZSA9IGNzLmdldFByb3BlcnR5VmFsdWUoc3R5bGVOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Q3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5VmFsdWUgPT09IHBhcmVudENzLmdldFByb3BlcnR5VmFsdWUoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoRXhwb3J0ZXIuZXhwb3J0ZWRTdHlsZXMuc29tZShzPT5zLnRlc3Qoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzU3R5bGVUZXh0ICs9ICc7ICcgKyBzdHlsZU5hbWUgKyAnOiAnICsgcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEV4cG9ydGVyLnN2Z1Byb3BlcnRpZXMuc29tZShzPT5zLnRlc3Qoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShzdHlsZU5hbWUsIHByb3BlcnR5VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNzc1N0eWxlVGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgY3NzU3R5bGVUZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdmFyIHRvUmVtb3ZlID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWFwcGVuZElubGluZVN0eWxlcyhub2RlLCB0YXJnZXRDaGlsZHJlbltpXSwgY3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvUmVtb3ZlLnB1c2godGFyZ2V0Q2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvUmVtb3ZlLmZvckVhY2gobj0+IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQobilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKnZhciB0ZXh0RWxlbWVudHMgPSBzdmdOb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZXh0JylcbiAgICAgICAgIF8uZWFjaCh0ZXh0RWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuXG5cbiAgICAgICAgIHZhciB0ZXh0QkJveCA9IGVsLmdldEJCb3goKTtcbiAgICAgICAgIGNvbnNvbGUubG9nKGVsLHRleHRCQm94LCBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgICAgICBfLmVhY2goZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RzcGFuJyksIHRzcGFuPT57XG4gICAgICAgICB2YXIgdHNwYW5CQm94ID0gdHNwYW4uZ2V0QkJveCgpO1xuICAgICAgICAgY29uc29sZS5sb2codHNwYW4sdHNwYW5CQm94LCB0c3Bhbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgICAgICB9KVxuXG4gICAgICAgICAvLyBlbC5zdHlsZVsnZm9udC1mYW1pbHknXSA9IGVsLnN0eWxlWydmb250LWZhbWlseSddICYmIGVsLnN0eWxlWydmb250LWZhbWlseSddLnNwbGl0KCcgJykuc3BsaWNlKC0xKTtcbiAgICAgICAgIH0pOyovXG5cblxuICAgICAgICBzdmdDbG9uZS5zZXRBdHRyaWJ1dGUoJ3hsaW5rJywgJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnKTtcbiAgICAgICAgcmV0dXJuIHN2Z0Nsb25lO1xuICAgIH1cblxuXG4gICAgc3RhdGljIGdldFNWR1N0cmluZyhzdmdOb2RlLCByZW1vdmVJZHM9ZmFsc2UpIHtcbiAgICAgICAgLy8gc3ZnTm9kZSA9IHN2Z05vZGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB2YXIgc3ZnQ2xvbmUgPSBFeHBvcnRlci5nZXRTdmdDbG9uZVdpdGhJbmxpbmVTdHlsZXMoc3ZnTm9kZSk7XG5cbiAgICAgICAgdmFyIHN2Z1N0cmluZyA9IEV4cG9ydGVyLnNlcmlhbGl6ZVN2Z05vZGUoc3ZnQ2xvbmUpO1xuICAgICAgICAvLyBzdmdTdHJpbmcgPSBzdmdTdHJpbmcucmVwbGFjZSgvKFxcdyspPzo/eGxpbms9L2csICd4bWxuczp4bGluaz0nKSAvLyBGaXggcm9vdCB4bGluayB3aXRob3V0IG5hbWVzcGFjZVxuICAgICAgICAvLyBzdmdTdHJpbmcgPSBzdmdTdHJpbmcucmVwbGFjZSgvTlNcXGQrOmhyZWYvZywgJ3hsaW5rOmhyZWYnKSAvLyBTYWZhcmkgTlMgbmFtZXNwYWNlIGZpeFxuICAgICAgICBzdmdTdHJpbmcgPSBFeHBvcnRlci5zYW5pdGl6ZVNWRyhzdmdTdHJpbmcsIHJlbW92ZUlkcyk7XG5cbiAgICAgICAgcmV0dXJuIHN2Z1N0cmluZztcbiAgICB9XG5cbiAgICBzdGF0aWMgc2VyaWFsaXplU3ZnTm9kZShzdmdOb2RlKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVyID0gbmV3IFhNTFNlcmlhbGl6ZXIoKTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcoc3ZnTm9kZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHZhbGlkYXRlU3ZnTm9kZShzdmdOb2RlKSB7XG4gICAgICAgIHZhciBzdmdTdHJpbmcgPSBFeHBvcnRlci5zZXJpYWxpemVTdmdOb2RlKHN2Z05vZGUpO1xuICAgICAgICB2YXIgb1BhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgdmFyIGRvYyA9IG9QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHN2Z1N0cmluZywgJ2ltYWdlL3N2Zyt4bWwnKTtcbiAgICAgICAgcmV0dXJuIGRvYy5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWUuaW5kZXhPZigncGFyc2VyZXJyb3InKSA9PT0gLTE7XG4gICAgfVxuXG4gICAgc3RhdGljIHN2Z1N0cmluZzJJbWFnZShzdmdTdHJpbmcsIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IGZvcm1hdCA/IGZvcm1hdCA6ICdwbmcnO1xuICAgICAgICB2YXIgaW1nc3JjID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbCwnICsgKGVuY29kZVVSSUNvbXBvbmVudChzdmdTdHJpbmcpKTsgLy8gQ29udmVydCBTVkcgc3RyaW5nIHRvIGRhdGF1cmxcblxuICAgICAgICAvLyB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2U7XG4gICAgICAgIGltYWdlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGltYWdlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdmFyIHRhcmdldCA9IG5ldyBJbWFnZTtcbiAgICAgICAgdGFyZ2V0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRhcmdldC5oZWlnaHQgPSBoZWlnaHQ7XG5cblxuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IoZnVuY3Rpb24gKGJsb2IpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZXNpemUgPSBNYXRoLnJvdW5kKGJsb2IubGVuZ3RoIC8gMTAyNCkgKyAnIEtCJztcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGJsb2IsIGZpbGVzaXplKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgaW1hZ2Uuc3JjID0gaW1nc3JjO1xuICAgIH1cblxuICAgIC8vZGVjaXNpb250cmVlQHl5eXkubW0uZGRfaGgubW0uc3NcbiAgICBzdGF0aWMgZ2V0RXhwb3J0RmlsZU5hbWUoZXh0LCBuYW1lPSdkZWNpc2lvbnRyZWUnKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSBkMy50aW1lRm9ybWF0KFwiJVkuJW0uJWRfJUguJU0uJVNcIik7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgbmFtZSArPSAnQCcgKyBmb3JtYXQoZGF0ZSk7XG4gICAgICAgIGlmIChleHQpIHtcbiAgICAgICAgICAgIG5hbWUgKz0gJy4nICsgZXh0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHNhdmVBc1BuZyhzdmcsIG9wdGlvbnMpIHtcblxuICAgICAgICB2YXIgY2xpZW50U2lkZSA9IG9wdGlvbnMucG5nLm1vZGUgPT09ICdjbGllbnQnO1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSBvcHRpb25zLnBuZy5tb2RlID09PSAnZmFsbGJhY2snO1xuICAgICAgICB2YXIgc2VydmVyU2lkZSA9IG9wdGlvbnMucG5nLm1vZGUgPT09ICdzZXJ2ZXInO1xuICAgICAgICBpZiAoVXRpbHMuZGV0ZWN0SUUoKSkge1xuICAgICAgICAgICAgaWYgKGNsaWVudFNpZGUpIHtcbiAgICAgICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLnBuZ0V4cG9ydE5vdFN1cHBvcnRlZElFJykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgZmFsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXJ2ZXJTaWRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLnNob3coKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHN2Z1N0cmluZyA9IEV4cG9ydGVyLmdldFNWR1N0cmluZyhzdmcubm9kZSgpKTtcbiAgICAgICAgICAgIHZhciBzdmdXaWR0aCA9IHN2Zy5hdHRyKCd3aWR0aCcpO1xuICAgICAgICAgICAgdmFyIHN2Z0hlaWdodCA9IHN2Zy5hdHRyKCdoZWlnaHQnKTtcblxuICAgICAgICAgICAgdmFyIHBuZ1dpZHRoID0gNCAqIHN2Z1dpZHRoO1xuICAgICAgICAgICAgdmFyIHBuZ0hlaWdodCA9IDQgKiBzdmdIZWlnaHQ7XG4gICAgICAgICAgICBpZiAoY2xpZW50U2lkZSB8fCBmYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIEV4cG9ydGVyLnN2Z1N0cmluZzJJbWFnZShzdmdTdHJpbmcsIHBuZ1dpZHRoLCBwbmdIZWlnaHQsICdwbmcnLCBzYXZlKTsgLy8gcGFzc2VzIEJsb2IgYW5kIGZpbGVzaXplIFN0cmluZyB0byB0aGUgY2FsbGJhY2tcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNhdmUoZGF0YUJsb2IsIGZpbGVzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFeHBvcnRlci5zYXZlQXMoZGF0YUJsb2IsIEV4cG9ydGVyLmdldEV4cG9ydEZpbGVOYW1lKCdwbmcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLndhcm4oJ2NsaWVudCBzaWRlIHBuZyByZW5kZXJpbmcgZmFpbGVkIScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmluZm8oJ3BlcmZvcm1pbmcgc2VydmVyIHNpZGUgZmFsbGJhY2suJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwb3J0ZXIuZXhwb3J0UG5nU2VydmVyU2lkZShzdmdTdHJpbmcsIG9wdGlvbnMuc2VydmVyVXJsLCBwbmdXaWR0aCwgcG5nSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJ2ZXJTaWRlKSB7XG4gICAgICAgICAgICAgICAgRXhwb3J0ZXIuZXhwb3J0UG5nU2VydmVyU2lkZShzdmdTdHJpbmcsIG9wdGlvbnMuc2VydmVyVXJsLCBwbmdXaWR0aCwgcG5nSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGFsZXJ0KGkxOG4udCgnZXJyb3IucG5nRXhwb3J0Tm90U3VwcG9ydGVkJykpO1xuICAgICAgICAgICAgTG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ3BuZ0V4cG9ydE5vdFN1cHBvcnRlZCcsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgc2F2ZUFzU3ZnKHN2Zykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHN2Z1N0cmluZyA9IEV4cG9ydGVyLmdldFNWR1N0cmluZyhzdmcubm9kZSgpKTtcblxuICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbc3ZnU3RyaW5nXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgICAgICAgICBFeHBvcnRlci5zYXZlQXMoYmxvYiwgRXhwb3J0ZXIuZ2V0RXhwb3J0RmlsZU5hbWUoJ3N2ZycpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYWxlcnQoaTE4bi50KCdlcnJvci5zdmdFeHBvcnROb3RTdXBwb3J0ZWQnKSk7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ3N2Z0V4cG9ydE5vdFN1cHBvcnRlZCcsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGV4cG9ydFBkZkNsaWVudFNpZGUoc3ZnU3RyaW5nLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBkb2MgPSBuZXcganNQREYoJ2wnLCAncHQnLCBbd2lkdGgsIGhlaWdodF0pO1xuICAgICAgICB2YXIgZHVtbXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdmcnKTtcbiAgICAgICAgZHVtbXkuaW5uZXJIVE1MID0gc3ZnU3RyaW5nO1xuICAgICAgICBzdmcycGRmKGR1bW15LmZpcnN0Q2hpbGQsIGRvYywge1xuICAgICAgICAgICAgeE9mZnNldDogMCxcbiAgICAgICAgICAgIHlPZmZzZXQ6IDAsXG4gICAgICAgICAgICBzY2FsZTogMVxuICAgICAgICB9KTtcbiAgICAgICAgZG9jLnNhdmUoRXhwb3J0ZXIuZ2V0RXhwb3J0RmlsZU5hbWUoJ3BkZicpKTtcbiAgICAgICAgTG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgcG9zdEFuZFNhdmUodXJsLCBkYXRhLCBmaWxlbmFtZSwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbigncG9zdCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cztcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhzdGF0dXMpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFt0aGlzLnJlc3BvbnNlXSwge3R5cGU6IHR5cGV9KTtcbiAgICAgICAgICAgICAgICBFeHBvcnRlci5zYXZlQXMoYmxvYiwgZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZmFpbENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChvRXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBleHBvcnRQZGZTZXJ2ZXJTaWRlKHN2Z1N0cmluZywgdXJsKSB7XG4gICAgICAgIHZhciBmaWxlbmFtZSA9IEV4cG9ydGVyLmdldEV4cG9ydEZpbGVOYW1lKCdwZGYnKTtcbiAgICAgICAgdmFyIGRhdGEgPSB7c3ZnOiBzdmdTdHJpbmcsIHR5cGU6ICdwZGYnLCBub0Rvd25sb2FkOiB0cnVlfTtcbiAgICAgICAgRXhwb3J0ZXIucG9zdEFuZFNhdmUodXJsLCBkYXRhLCBmaWxlbmFtZSwgTG9hZGluZ0luZGljYXRvci5oaWRlLCAoKT0+IHtcbiAgICAgICAgICAgIExvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICAgICAgYWxlcnQoaTE4bi50KCdlcnJvci5zZXJ2ZXJTaWRlRXhwb3J0UmVxdWVzdEZhaWx1cmUnKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlciBzaWRlIGV4cG9ydCBmYWlsdXJlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFV0aWxzLnBvc3RCeUZvcm0odXJsLCB7XG4gICAgICAgIC8vICAgICBmaWxlbmFtZTogZmlsZW5hbWUsXG4gICAgICAgIC8vICAgICB0eXBlOiAncGRmJyxcbiAgICAgICAgLy8gICAgIC8vIHdpZHRoOiBvcHRpb25zLndpZHRoIHx8IDAsIC8vIElFOCBmYWlscyB0byBwb3N0IHVuZGVmaW5lZCBjb3JyZWN0bHksIHNvIHVzZSAwXG4gICAgICAgIC8vICAgICAvLyBzY2FsZTogb3B0aW9ucy5zY2FsZSxcbiAgICAgICAgLy8gICAgIHN2Zzogc3ZnU3RyaW5nXG4gICAgICAgIC8vIH0pO1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGV4cG9ydFBuZ1NlcnZlclNpZGUoc3ZnU3RyaW5nLCB1cmwsIHBuZ1dpZHRoLCBwbmdIZWlnaHQpIHtcbiAgICAgICAgdmFyIGZpbGVuYW1lID0gRXhwb3J0ZXIuZ2V0RXhwb3J0RmlsZU5hbWUoJ3BuZycpO1xuICAgICAgICB2YXIgZGF0YSA9IHtzdmc6IHN2Z1N0cmluZywgdHlwZTogJ3BuZycsIG5vRG93bmxvYWQ6IHRydWUsIHdpZHRoOiBwbmdXaWR0aH07XG4gICAgICAgIEV4cG9ydGVyLnBvc3RBbmRTYXZlKHVybCwgZGF0YSwgZmlsZW5hbWUsIExvYWRpbmdJbmRpY2F0b3IuaGlkZSwgKCk9PiB7XG4gICAgICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgICAgIGFsZXJ0KGkxOG4udCgnZXJyb3Iuc2VydmVyU2lkZUV4cG9ydFJlcXVlc3RGYWlsdXJlJykpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXIgc2lkZSBleHBvcnQgZmFpbHVyZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvKlV0aWxzLnBvc3RCeUZvcm0odXJsLCB7XG4gICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUsXG4gICAgICAgICB0eXBlOiAncGRmJyxcbiAgICAgICAgIC8vIHdpZHRoOiBvcHRpb25zLndpZHRoIHx8IDAsIC8vIElFOCBmYWlscyB0byBwb3N0IHVuZGVmaW5lZCBjb3JyZWN0bHksIHNvIHVzZSAwXG4gICAgICAgICAvLyBzY2FsZTogb3B0aW9ucy5zY2FsZSxcbiAgICAgICAgIHN2Zzogc3ZnU3RyaW5nXG4gICAgICAgICB9KTsqL1xuXG4gICAgfVxuXG4gICAgc3RhdGljIHNhdmVBc1BkZihzdmcsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNsaWVudFNpZGVQZGZFeHBvcnRBdmFpbGFibGUgPSBFeHBvcnRlci5pc0NsaWVudFNpZGVQZGZFeHBvcnRBdmFpbGFibGUoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMucGRmLm1vZGUgPT09ICdjbGllbnQnKSB7XG4gICAgICAgICAgICBpZiAoIWNsaWVudFNpZGVQZGZFeHBvcnRBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICBhbGVydChpMThuLnQoJ2Vycm9yLmpzUERGaXNOb3RJbmNsdWRlZCcpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgTG9hZGluZ0luZGljYXRvci5zaG93KCk7XG4gICAgICAgIHZhciBtYXJnaW4gPSAyMDtcbiAgICAgICAgdmFyIHN2Z0VsZW1lbnQgPSBzdmcubm9kZSgpO1xuICAgICAgICB2YXIgd2lkdGggPSBzdmdFbGVtZW50LndpZHRoLmJhc2VWYWwudmFsdWUgKyAyICogbWFyZ2luLFxuICAgICAgICAgICAgaGVpZ2h0ID0gc3ZnRWxlbWVudC5oZWlnaHQuYmFzZVZhbC52YWx1ZSArIDIgKiBtYXJnaW47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc3ZnU3RyaW5nID0gRXhwb3J0ZXIuZ2V0U1ZHU3RyaW5nKHN2Z0VsZW1lbnQpO1xuXG4gICAgICAgICAgICB2YXIgZmFsbGJhY2sgPSBvcHRpb25zLnBkZi5tb2RlID09PSAnZmFsbGJhY2snO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGRmLm1vZGUgPT09ICdjbGllbnQnIHx8IGZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgRXhwb3J0ZXIuZXhwb3J0UGRmQ2xpZW50U2lkZShzdmdTdHJpbmcsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKCdjbGllbnQgc2lkZSBwZGYgcmVuZGVyaW5nIGZhaWxlZCEnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuaW5mbygncGVyZm9ybWluZyBzZXJ2ZXIgc2lkZSBmYWxsYmFjay4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV4cG9ydGVyLmV4cG9ydFBkZlNlcnZlclNpZGUoc3ZnU3RyaW5nLCBvcHRpb25zLnNlcnZlclVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnBkZi5tb2RlID09PSAnc2VydmVyJykge1xuICAgICAgICAgICAgICAgIEV4cG9ydGVyLmV4cG9ydFBkZlNlcnZlclNpZGUoc3ZnU3RyaW5nLCBvcHRpb25zLnNlcnZlclVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcigncGRmRXhwb3J0Tm90U3VwcG9ydGVkJywgZSk7XG4gICAgICAgICAgICBMb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgICAgIGFsZXJ0KGkxOG4udCgnZXJyb3IucGRmRXhwb3J0Tm90U3VwcG9ydGVkJykpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHN0YXRpYyBpc0NsaWVudFNpZGVQZGZFeHBvcnRBdmFpbGFibGUoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YganNQREYgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzdmcycGRmICE9PSAndW5kZWZpbmVkJ1xuICAgIH1cblxuXG4gICAgc3RhdGljIHNhbml0aXplU1ZHKHN2ZywgcmVtb3ZlSWRzPWZhbHNlKSB7XG4gICAgICAgIGxldCBzYW5pdGl6ZWQgPSBzdmdcbiAgICAgICAgICAgIC5yZXBsYWNlKC96SW5kZXg9XCJbXlwiXStcIi9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9pc1NoYWRvdz1cIlteXCJdK1wiL2csICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3N5bWJvbE5hbWU9XCJbXlwiXStcIi9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9qUXVlcnlbMC05XSs9XCJbXlwiXStcIi9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC91cmxcXCgoXCJ8JnF1b3Q7KShcXFMrKShcInwmcXVvdDspXFwpL2csICd1cmwoJDIpJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC91cmxcXChbXiNdKyMvZywgJ3VybCgjJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC88c3ZnIC8sICc8c3ZnIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvIChOU1swLTldK1xcOik/aHJlZj0vZywgJyB4bGluazpocmVmPScpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuLywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzxcXC9zdmc+Lio/JC8sICc8L3N2Zz4nKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyhmaWxsfHN0cm9rZSk9XCJyZ2JhXFwoKFsgMC05XSssWyAwLTldKyxbIDAtOV0rKSwoWyAwLTlcXC5dKylcXClcIi9nLCAnJDE9XCJyZ2IoJDIpXCIgJDEtb3BhY2l0eT1cIiQzXCInKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyZuYnNwOy9nLCAnXFx1MDBBMCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvJnNoeTsvZywgJ1xcdTAwQUQnKTtcblxuICAgICAgICBpZihyZW1vdmVJZHMpe1xuICAgICAgICAgICAgcmV0dXJuIHNhbml0aXplZC5yZXBsYWNlKC9pZD1cIlteXCJdK1wiL2csICcnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNhbml0aXplZDtcblxuICAgIH1cblxuICAgIHN0YXRpYyBzYXZlQXNDU1Yocm93cywgbmFtZT0nZGVjaXNpb250cmVlJykge1xuICAgICAgICB2YXIgY3N2Um93cyA9IFtdO1xuICAgICAgICByb3dzLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgIGNzdlJvd3MucHVzaChyb3cubWFwKHI9PkV4cG9ydGVyLmVzY2FwZUNzdkZpZWxkKHIpKS5qb2luKCcsJykpXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY3N2U3RyaW5nID0gY3N2Um93cy5qb2luKFwiXFxyXFxuXCIpO1xuXG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NzdlN0cmluZ10sIHt0eXBlOiBcInRleHQvY3N2XCJ9KTtcbiAgICAgICAgRXhwb3J0ZXIuc2F2ZUFzKGJsb2IsIEV4cG9ydGVyLmdldEV4cG9ydEZpbGVOYW1lKCdjc3YnLCBuYW1lKSk7XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgZXNjYXBlQ3N2RmllbGQoZmllbGQpe1xuICAgICAgICBpZihVdGlscy5pc1N0cmluZyhmaWVsZCkpe1xuICAgICAgICAgICAgcmV0dXJuICdcIicrZmllbGQucmVwbGFjZSgvXCIvZywgJ1wiXCInKSsnXCInXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7aTE4bn0gZnJvbSAnLi9pMThuL2kxOG4nXG5cbmV4cG9ydCBjbGFzcyBGaWxlTG9hZGVye1xuXG4gICAgc3RhdGljIG9wZW5GaWxlKGNhbGxiYWNrKXtcbiAgICAgICAgdmFyIGlucHV0ID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZC1maWxlLWlucHV0Jyk7XG4gICAgICAgIGlucHV0Lm9uY2hhbmdlID0gbG9hZEZpbGU7XG5cbiAgICAgICAgaW5wdXQuY2xpY2soKTtcblxuICAgICAgICBmdW5jdGlvbiBsb2FkRmlsZSgpIHtcblxuICAgICAgICAgICAgIHZhciBmaWxlLCBmcjtcblxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5GaWxlUmVhZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoaTE4bi50KCdlcnJvci5maWxlQXBpTm90U3VwcG9ydGVkJykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlucHV0ID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZC1maWxlLWlucHV0Jyk7XG4gICAgICAgICAgICBpZiAoIWlucHV0LmZpbGVzKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoaTE4bi50KCdlcnJvci5pbnB1dEZpbGVzUHJvcGVydHknKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaWxlID0gaW5wdXQuZmlsZXNbMF07XG4gICAgICAgICAgICBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICBmci5vbmxvYWQgPSByZWNlaXZlZFRleHQ7XG4gICAgICAgICAgICBmci5yZWFkQXNUZXh0KGZpbGUpO1xuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVkVGV4dChlKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZS50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiIsImV4cG9ydCBjbGFzcyBJbnB1dEZpZWxke1xuICAgIG5hbWU7XG4gICAgdHlwZTtcbiAgICB2YWxpZGF0b3I7XG4gICAgdmFsdWVBY2Nlc3NvcjtcblxuICAgIGlkO1xuICAgIGxhYmVsO1xuICAgIHZhbHVlVXBkYXRlQ2FsbGJhY2s7XG5cbiAgICBjb25zdHJ1Y3RvcihpZCwgbmFtZSwgdHlwZSwgbGFiZWwsIHZhbHVlQWNjZXNzb3IsIHZhbGlkYXRvciwgb3B0aW9ucywgcGFyc2VyLCBzdHlsZUNsYXNzKXtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy52YWx1ZUFjY2Vzc29yID0gdmFsdWVBY2Nlc3NvcjtcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSB2YWxpZGF0b3I7XG4gICAgICAgIHRoaXMuaWQ9aWQ7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgICAgIHRoaXMuc3R5bGVDbGFzcyA9IHN0eWxlQ2xhc3M7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVBY2Nlc3Nvci5nZXQoKTtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZSh2YWwpe1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUFjY2Vzc29yLnNldCh2YWwpO1xuICAgIH1cblxuICAgIHBhcnNlKHZhbCl7XG4gICAgICAgIGlmKHRoaXMucGFyc2VyKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlcih2YWwpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG59XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIFBhdGhWYWx1ZUFjY2Vzc29yIHtcbiAgICBzb3VyY2VPYmplY3Q7XG4gICAgcGF0aDtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2VPYmplY3QsIHBhdGgpe1xuICAgICAgICB0aGlzLnNvdXJjZU9iamVjdD1zb3VyY2VPYmplY3Q7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgfVxuXG4gICAgZ2V0KCl7XG4gICAgICAgIHJldHVybiBVdGlscy5nZXQodGhpcy5zb3VyY2VPYmplY3QsIHRoaXMucGF0aCk7XG4gICAgfVxuXG4gICAgc2V0KHYpe1xuICAgICAgICByZXR1cm4gVXRpbHMuc2V0KHRoaXMuc291cmNlT2JqZWN0LCB0aGlzLnBhdGgsIHYpO1xuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcInRvb2xiYXJcIjoge1xuICAgICAgICBcIm5ld0RpYWdyYW1cIjogXCJOZXVlcyBEaWFncmFtbVwiLFxuICAgICAgICBcIm9wZW5EaWFncmFtXCI6IFwiRGlhZ3JhbW0gw7ZmZm5lblwiLFxuICAgICAgICBcInNhdmVEaWFncmFtXCI6IFwiQWt0dWVsbGVzIERpYWdyYW1tIHNwZWljaGVyblwiLFxuICAgICAgICBcImV4cG9ydFwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJFeHBvcnRpZXJlbiBuYWNoXCIsXG4gICAgICAgICAgICBcInBuZ1wiOiBcIlBuZ1wiLFxuICAgICAgICAgICAgXCJzdmdcIjogXCJTdmdcIixcbiAgICAgICAgICAgIFwicGRmXCI6IFwiUGRmXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsYXlvdXRcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiTGF5b3V0XCIsXG4gICAgICAgICAgICBcIm1hbnVhbFwiOiBcIk1hbnVhbFwiLFxuICAgICAgICAgICAgXCJ0cmVlXCI6IFwiQmF1bVwiLFxuICAgICAgICAgICAgXCJjbHVzdGVyXCI6IFwiQ2x1c3RlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidmlld01vZGVcIjoge1xuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkF1c3NpY2h0XCIsXG4gICAgICAgICAgICBcIm9wdGlvbnNcIjoge1xuICAgICAgICAgICAgICAgIFwiY3JpdGVyaW9uMVwiOlwiS3JpdGVyaXVtIDFcIixcbiAgICAgICAgICAgICAgICBcImNyaXRlcmlvbjJcIjpcIktyaXRlcml1bSAyXCIsXG4gICAgICAgICAgICAgICAgXCJ0d29Dcml0ZXJpYVwiOlwiWndlaSBLcml0ZXJpZW5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm9iamVjdGl2ZVJ1bGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiUmVnZWxcIixcbiAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJleHBlY3RlZC12YWx1ZS1tYXhpbWl6YXRpb25cIjpcIm1heFwiLFxuICAgICAgICAgICAgICAgIFwiZXhwZWN0ZWQtdmFsdWUtbWluaW1pemF0aW9uXCI6XCJtaW5cIixcbiAgICAgICAgICAgICAgICBcIm1heGktbWluXCI6XCJtYXhpLW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWF4aS1tYXhcIjpcIm1heGktbWF4XCIsXG4gICAgICAgICAgICAgICAgXCJtaW5pLW1pblwiOlwibWluaS1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1pbmktbWF4XCI6XCJtaW5pLW1heFwiLFxuICAgICAgICAgICAgICAgIFwibWluLW1heFwiOlwibWluLW1heFwiLFxuICAgICAgICAgICAgICAgIFwibWF4LW1pblwiOlwibWF4LW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWluLW1pblwiOiBcIm1pbi1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1heC1tYXhcIjogXCJtYXgtbWF4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmRvXCI6IFwiUsO8Y2tnw6RuZ2lnIG1hY2hlblwiLFxuICAgICAgICBcInJlZG9cIjogXCJXaWVkZXJob2xlblwiLFxuICAgICAgICBcInNldHRpbmdzXCI6IFwiRWluc3RlbGx1bmdlblwiLFxuICAgICAgICBcImFib3V0XCI6IFwiw5xiZXJcIixcbiAgICAgICAgXCJzZW5zaXRpdml0eUFuYWx5c2lzXCI6IFwiU2Vuc2l0aXZpdMOkdHNhbmFseXNlXCIsXG4gICAgICAgIFwicmVjb21wdXRlXCI6IFwiTmV1IEJlcmVjaG5lblwiXG4gICAgfSxcbiAgICBcIm5vZGVcIjp7XG4gICAgICAgIFwibmFtZVwiOiBcIkJlc2NocmVpYnVuZ1wiXG4gICAgfSxcbiAgICBcImVkZ2VcIjp7XG4gICAgICAgIFwibmFtZVwiOiBcIkJlc2NocmVpYnVuZ1wiLFxuICAgICAgICBcInBheW9mZlwiOiBcIkF1c3phaGx1bmdcIixcbiAgICAgICAgXCJwcm9iYWJpbGl0eVwiOiBcIldhaHJzY2hlaW5saWNoa2VpdFwiXG4gICAgfSxcbiAgICBcInRleHRcIjp7XG4gICAgICAgIFwidmFsdWVcIjogXCJUZXh0XCJcbiAgICB9LFxuICAgIFwibGVhZ3VlVGFibGVEaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJSYW5nbGlzdGVcIixcbiAgICAgICAgXCJidXR0b25zXCI6IHtcbiAgICAgICAgICAgIFwiZG93bmxvYWRDc3ZcIjogXCJDU1YgSGVydW50ZXJsYWRlblwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwibGVhZ3VlVGFibGVcIjoge1xuICAgICAgICBcImhlYWRlcnNcIjp7XG4gICAgICAgICAgICBcInBvbGljeU5vXCI6IFwiUmVnZWwgI1wiLFxuICAgICAgICAgICAgXCJwb2xpY3lcIjogXCJSZWdlbFwiLFxuICAgICAgICAgICAgXCJjb21tZW50XCI6IFwiS29tbWVudGFyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb21tZW50XCI6e1xuICAgICAgICAgICAgXCJkb21pbmF0ZWRCeVwiOiBcIkRvbWluaWVydCAoZHVyY2gje3twb2xpY3l9fSlcIixcbiAgICAgICAgICAgIFwiZXh0ZW5kZWREb21pbmF0ZWRCeVwiOiBcIkVyd2VpdGVydC1kb21pbmllcnQgKGR1cmNoICN7e3BvbGljeTF9fSB1bmQgI3t7cG9saWN5Mn19KVwiLFxuICAgICAgICAgICAgXCJpbmNyYXRpb1wiOiBcIklua3JlbWVudGVsbGVzIFZlcmjDpGx0bmlzPXt7aW5jcmF0aW99fVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGxvdFwiOntcbiAgICAgICAgICAgIFwiZ3JvdXBzXCI6e1xuICAgICAgICAgICAgICAgIFwiaGlnaGxpZ2h0ZWRcIjogXCJNYXJraWVydFwiLFxuICAgICAgICAgICAgICAgIFwiaGlnaGxpZ2h0ZWQtZGVmYXVsdFwiOiBcIkVtcGZvaGxlbiAoZsO8ciBTdGFuZGFyZC1XVFApXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZC1kb21pbmF0ZWRcIiA6IFwiRXJ3ZWl0ZXJ0LWRvbWluaWVydFwiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkXCI6IFwiRG9taW5pZXJ0XCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiQW5kZXJlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInRvb2x0aXBcIjp7XG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93MVwiOiBcIlJpY2h0dW5nIHZvbnt7bmFtZX19IE9wdGltaWVydW5nXCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93MlwiOiBcIlJpY2h0dW5nIHZvbiB7e25hbWV9fSBPcHRpbWllcnVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkUmVnaW9uXCI6IFwiRG9taW5pZXJ0ZSBSZWdpb25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibGVnZW5kXCI6e1xuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkUmVnaW9uXCI6IFwiR3JhdW1hcmtpZXJ0IEJlcmVpY2ggc3RlbGx0IGRvbWluaWVydGUgUmVnaW9uIGRhclwiLFxuICAgICAgICAgICAgICAgIFwiZ3JhZGllbnRBcnJvd3NcIjogXCJQZmVpbGUgemVpZ2VuIFZlcmJlc3NlcnVuZ3NyaWNodHVuZyBhblwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwic2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNlbnNpdGl2aXTDpHRzYW5hbHlzZVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJydW5Kb2JcIjogXCJMYXVmXCIsXG4gICAgICAgICAgICBcInN0b3BKb2JcIjogXCJTdG9wXCIsXG4gICAgICAgICAgICBcInRlcm1pbmF0ZUpvYlwiOiBcIkJlZW5kZW5cIixcbiAgICAgICAgICAgIFwicmVzdW1lSm9iXCI6IFwiRm9ydHNldHplblwiLFxuICAgICAgICAgICAgXCJkb3dubG9hZENzdlwiOiBcIkNTViBIZXJ1bnRlcmxhZGVuXCIsXG4gICAgICAgICAgICBcImJhY2tcIjogXCJadXLDvGNrXCIsXG4gICAgICAgICAgICBcImNsZWFyXCI6IFwiTMO2c2NoZW5cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImpvYlBhcmFtZXRlcnNCdWlsZGVyXCI6IHtcbiAgICAgICAgXCJidXR0b25zXCI6IHtcbiAgICAgICAgICAgIFwicmVtb3ZlUGFyYW1ldGVyVmFsdWVcIjogXCJFbnRmZXJuZW5cIixcbiAgICAgICAgICAgIFwiYWRkUGFyYW1ldGVyVmFsdWVcIjogXCJIaW56dWbDvGdlblwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiam9iUmVzdWx0VGFibGVcIjp7XG4gICAgICAgIFwidG9vbHRpcFwiOiB7XG4gICAgICAgICAgICBcIm11bHRpcGxlUG9saWNpZXNJbkNlbGxcIjogXCJ7e251bWJlcn19IEdydW5kcmVnZWxuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwaXZvdFwiOiB7XG4gICAgICAgICAgICBcImFnZ3JlZ2F0b3JzXCI6e1xuICAgICAgICAgICAgICAgIFwibWF4aW11bVwiOiBcIk1heGltdW1cIixcbiAgICAgICAgICAgICAgICBcIm1pbmltdW1cIjogXCJNaW5pbXVtXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbmRlcmVyc1wiOntcbiAgICAgICAgICAgICAgICBcImhlYXRtYXBcIjogXCJXw6RybWVrYXJ0ZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicG9saWN5UHJldmlld1wiOiBcIkdydW5kcmVnZWwgVm9yc2NoYXVcIlxuICAgIH0sXG4gICAgXCJqb2JcIjp7XG4gICAgICAgIFwic2Vuc2l0aXZpdHktYW5hbHlzaXNcIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJOLVdlZ2UtU2Vuc2l0aXZpdMOkdHNhbmFseXNlXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJSZWdlbG5hbWVcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRXJ3ZWl0ZXJ0ZSBHcnVuZHJlZ2VsbiBCZXNjaHJlaWJ1bmdcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFibGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibWluXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNaW5cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1heFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWF4XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkzDpG5nZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RlcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiU2Nocml0dFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJGZWhsZXIgYmVpIGRlciBTZW5zaXRpdml0w6R0c2FuYWx5c2UgZsO8ciBmb2xnZW5kZSBQYXJhbWV0ZXI6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiQW56YWhsIGRlciBkZWZpbmllcnRlbiBTemVuYXJpZW4gZ3LDtsOfZXIgYWxzIHt7bnVtYmVyRm9ybWF0dGVkfX0uIFNlbnNpdGl2aXTDpHRzYW5hbHlzZSBrw7ZubnRlIG5pY2h0IGTDvHJjaGdlZnVocnQgd2VyZGVuIG9kZXIgd2lyZCBzZWhyIGxhbmdzYW0uXCIsXG4gICAgICAgICAgICAgICAgXCJsYXJnZVBhcmFtZXRlcnNOdW1iZXJcIjogXCJBbnphaGwgZGVyIFBhcmFtZXRlciBncsO2w59lciBhbHMge3tudW1iZXJ9fS4gRGllIEFuemVpZ2UgZGVyIFJlc3VsdGF0ZSBkZXIgU2Vuc2l0aXZpdMOkdHNhbmFseXNlIGvDtm5udGUgZmVobHNjaGxhZ2VuIG9kZXIgc2VociBsYW5nc2FtIHNlaW4uXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3JuYWRvLWRpYWdyYW1cIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJUb3JuYWRvLWRpYWdyYW1tXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJSZWdlbG5hbWVcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRXJ3ZWl0ZXJ0ZSBHcnVuZHJlZ2VsbiBCZXNjaHJlaWJ1bmdcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFibGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibWluXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNaW5cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1heFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWF4XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkzDpG5nZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RlcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiU2Nocml0dFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJTdGFuZGFyZHdlcnRcIlxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJGZWhsZXIgYmVpIGRlciBTZW5zaXRpdml0w6R0c2FuYWx5c2UgZsO8ciBmb2xnZW5kZSBQYXJhbWV0ZXI6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiQW56YWhsIGRlciBkZWZpbmllcnRlbiBTemVuYXJpZW4gZ3LDtsOfZXIgYWxzIHt7bnVtYmVyRm9ybWF0dGVkfX0uIFNlbnNpdGl2aXTDpHRzYW5hbHlzZSBrw7ZubnRlIG5pY2h0IGTDvHJjaGdlZnVocnQgd2VyZGVuIG9kZXIgd2lyZCBzZWhyIGxhbmdzYW0uXCIsXG4gICAgICAgICAgICAgICAgXCJsYXJnZVBhcmFtZXRlcnNOdW1iZXJcIjogXCJBbnphaGwgZGVyIFBhcmFtZXRlciBncsO2w59lciBhbHMge3tudW1iZXJ9fS4gRGllIEFuemVpZ2UgZGVyIFJlc3VsdGF0ZSBkZXIgU2Vuc2l0aXZpdMOkdHNhbmFseXNlIGvDtm5udGUgZmVobHNjaGxhZ2VuIG9kZXIgc2VociBsYW5nc2FtIHNlaW4uXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBsb3RcIjp7XG4gICAgICAgICAgICAgICAgXCJsZWdlbmRcIjp7XG4gICAgICAgICAgICAgICAgICAgIFwibG93XCI6IFwiVmVycmluZ2VydW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaGlnaFwiOiBcIkVyaMO2aHVuZ1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInhBeGlzVGl0bGVcIjogXCJBdXN6YWhsZW5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInByb2JhYmlsaXN0aWMtc2Vuc2l0aXZpdHktYW5hbHlzaXNcIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJQcm9iYWJpbGlzdGlzY2hlIFNlbnNpdGl2aXTDpHRzYW5hbHlzZVwiLFxuICAgICAgICAgICAgXCJwYXJhbVwiOntcbiAgICAgICAgICAgICAgICBcInJ1bGVOYW1lXCI6IFwiUmVnZWxuYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJudW1iZXJPZlJ1bnNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiQW56YWhsIGRlciBMw6R1ZmVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVyd2VpdGVydGUgR3J1bmRyZWdlbCBCZXNjaHJlaWJ1bmdcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFibGVuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRm9ybWVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhlbHBcIjogXCJXw6RobGVuIFNpZSBkaWUgRm9ybWVsdm9ybGFnZSBhdXMgZGVtIE1lbsO8IGF1cyBvZGVyIHNjaHJlaWJlbiBTaWUgYmVudXR6ZXJkZWZpbmllcnRlbiBDb2RlXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgICAgICBcImNvbXB1dGF0aW9uc1wiOiBcIkJlcmVjaG51bmdzZmVobGVyIGRlciBTZW5zaXRpdml0w6R0c2FuYWx5c2UgZsO8ciBmb2xnZW5kZSBQYXJhbWV0ZXI6XCIsXG4gICAgICAgICAgICAgICAgXCJwYXJhbS1jb21wdXRhdGlvblwiOiBcIkZlaGxlciBiZWltIEJlcmVjaG5lbiB2b24gUGFyYW1ldGVyd2VydGVuOlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ3YXJuaW5nc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJsYXJnZVNjZW5hcmlvc051bWJlclwiOiBcIkFuemFobCBkZXIgZGVmaW5pZXJ0ZW4gU3plbmFyaWVuIGdyw7bDn2VyIGFscyB7e251bWJlckZvcm1hdHRlZH19LiBTZW5zaXRpdml0w6R0c2FuYWx5c2Uga8O2bm50ZSBuaWNodCBkw7xyY2hnZWZ1aHJ0IHdlcmRlbiBvZGVyIHdpcmQgc2VociBsYW5nc2FtLlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3BpZGVyLXBsb3RcIjoge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTmV0emRpYWdyYW1tXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6IHtcbiAgICAgICAgICAgICAgICBcInJ1bGVOYW1lXCI6IFwiUmVnZWxuYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVyd2VpdGVydGUgR3J1bmRyZWdlbCBCZXNjaHJlaWJ1bmdcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJwZXJjZW50YWdlQ2hhbmdlUmFuZ2VcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiKy8tIHByb3plbnR1YWxlIFZlcsOkbmRlcnVuZyB6dW0gQmVyw7xja3NpY2h0aWdlblwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJBbnphaGwgZGVyIHp1IHRlc3RlbmRlbiBXZXJ0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImhlbHBcIjogXCJBbnphaGwgZGVyIHp1IHRlc3RlbmRlbiBXZXJ0ZSAoYW4gZWluZXIgU2VpdGUgZGVzIEJlcmVpY2hzKVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYXJpYWJsZW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlN0YW5kYXJkd2VydFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJCZXJlY2hudW5nc2ZlaGxlciBkZXIgU2Vuc2l0aXZpdMOkdHNhbmFseXNlIGbDvHIgZm9sZ2VuZGUgUGFyYW1ldGVyOlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ3YXJuaW5nc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJsYXJnZVNjZW5hcmlvc051bWJlclwiOiBcIkFuemFobCBkZXIgZGVmaW5pZXJ0ZW4gU3plbmFyaWVuIGdyw7bDn2VyIGFscyB7e251bWJlckZvcm1hdHRlZH19LiBTZW5zaXRpdml0w6R0c2FuYWx5c2Uga8O2bm50ZSBuaWNodCBkw7xyY2hnZWZ1aHJ0IHdlcmRlbiBvZGVyIHdpcmQgc2VociBsYW5nc2FtLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwbG90XCI6IHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcInhBeGlzVGl0bGVcIjogXCJQcm96ZW50dWFsZSBWZXLDpG5kZXJ1bmdcIixcbiAgICAgICAgICAgICAgICBcInlBeGlzVGl0bGVcIjogXCJBdXN6YWhsZW5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImxlYWd1ZS10YWJsZVwiOntcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlJhbmdsaXN0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXJyb3JzXCI6e1xuICAgICAgICAgICAgXCJnZW5lcmljXCI6IFwiRmVobGVyIGJlaSBkZXIgU2Vuc2l0aXZpdMOkdHNhbmFseXNlOiB7e21lc3NhZ2V9fVwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogXCJJbmtvcnJla3RlIHt7am9iTmFtZX19IFBhcmFtZXRlcm5cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInNldHRpbmdzRGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiRWluc3RlbGx1bmdlblwiLFxuICAgICAgICBcImdlbmVyYWxcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiQWxsZ2VtZWluXCIsXG4gICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiU2NocmlmdGdyw7bDn2VcIixcbiAgICAgICAgICAgIFwiZm9udEZhbWlseVwiOiBcIlNjaHJpZnRmYW1pbGllXCIsXG4gICAgICAgICAgICBcImZvbnRXZWlnaHRcIjogXCJTY2hyaWZ0Z2V3aWNodFwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTY2hyaWZ0c3RpbFwiLFxuICAgICAgICAgICAgXCJudW1iZXJGb3JtYXRMb2NhbGVcIjogXCJaYWhsZW5mb3JtYXQgR2ViaWV0c3NjaGVtYVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF5b2ZmMVwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJBdXN6YWhsdW5nIDEgWmFobGVuZm9ybWF0XCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5XCI6IFwiV8OkaHJ1bmdcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lEaXNwbGF5XCI6IFwiV8OkaHJ1bmdzYW56ZWlnZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIlN0aWxcIixcbiAgICAgICAgICAgIFwibWluaW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWluaW1hbGUgQnJ1Y2h6YWhsZW5cIixcbiAgICAgICAgICAgIFwibWF4aW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWF4aW1hbGUgQnJ1Y2h6YWhsZW5cIixcbiAgICAgICAgICAgIFwidXNlR3JvdXBpbmdcIjogXCJHcnVwcGllcnVuZyBTZXBhcmF0b3JlbiB2ZXJ3ZW5kZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcInBheW9mZjJcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiQXVzemFobHVuZyAyIFphaGxlbmZvcm1hdFwiLFxuICAgICAgICAgICAgXCJjdXJyZW5jeVwiOiBcIlfDpGhydW5nXCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5RGlzcGxheVwiOiBcIlfDpGhydW5nc2FuemVpZ2VcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJTdGlsXCIsXG4gICAgICAgICAgICBcIm1pbmltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk1pbmltYWxlIEJydWNoemFobGVuXCIsXG4gICAgICAgICAgICBcIm1heGltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk1heGltYWxlIEJydWNoemFobGVuXCIsXG4gICAgICAgICAgICBcInVzZUdyb3VwaW5nXCI6IFwiR3J1cHBpZXJ1bmcgU2VwYXJhdG9yZW4gdmVyd2VuZGVuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9iYWJpbGl0eVwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJXYWhyc2NoZWlubGljaGtlaXQgWmFobGVuZm9ybWF0XCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwiU3RpbFwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJNaW5pbWFsZSBCcnVjaHphaGxlblwiLFxuICAgICAgICAgICAgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJNYXhpbWFsZSBCcnVjaHphaGxlblwiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlNjaHJpZnRncsO2w59lXCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiRmFyYmVcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5vZGVcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiS25vdGVuXCIsXG4gICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3RyaWNoYnJlaXRlXCIsXG4gICAgICAgICAgICBcIm9wdGltYWxcIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk9wdGltYWxcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIkZhcmJlXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VXaWR0aFwiOiBcIlN0cmljaGJyZWl0ZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsYWJlbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkJlc2NocmVpYnVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJCZXNjaHJlaWJ1bmcgU2NocmlmdGdyw7bDn2VcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQmVzY2hyZWlidW5nc2ZhcmJlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkF1c3phaGx1bmdcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiU2NocmlmdGdyw7bDn2VcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiRmFyYmVcIixcbiAgICAgICAgICAgICAgICBcIm5lZ2F0aXZlQ29sb3JcIjogXCJOZWdhdGl2ZSBGYXJiZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZWNpc2lvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkVudHNjaGVpZHVuZ3Nrbm90ZW5cIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJGw7xsbGZhcmJlXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJTdHJpY2hmYXJiZVwiLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJBdXNnZXfDpGhsdGUgRsO8bGxmYXJiZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiY2hhbmNlXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiWnVmYWxsIEtub3RlblwiLFxuICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIkbDvGxsZmFyYmVcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIlN0cmljaGZhcmJlXCIsXG4gICAgICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIkF1c2dld8OkaGx0ZSBGw7xsbGZhcmJlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0ZXJtaW5hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiRW5ka25vdGVuXCIsXG4gICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiRsO8bGxmYXJiZVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiU3RyaWNoZmFyYmVcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiQXVzZ2V3w6RobHRlIEbDvGxsZmFyYmVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQXVzemFobHVuZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiU2NocmlmdGdyw7bDn2VcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkZhcmJlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIk5lZ2F0aXZlIEZhcmJlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZWRnZVwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCIgWndlaWdcIixcbiAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiRmFyYmVcIixcbiAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJTdHJpY2hicmVpdGVcIixcbiAgICAgICAgICAgIFwib3B0aW1hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiT3B0aW1hbFwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiRmFyYmVcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3RyaWNoYnJlaXRlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJBdXNnZXfDpGhsdFwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiRmFyYmVcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3RyaWNoYnJlaXRlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxhYmVsXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQmVzY2hyZWlidW5nXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlNjaHJpZnRncsO2w59lXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkZhcmJlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQXVzemFobHVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJTY2hyaWZ0Z3LDtsOfZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJGYXJiZVwiLFxuICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIk5lZ2F0aXZlIEZhcmJlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkaWFncmFtVGl0bGVcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiRGlhZ3JhbW10aXRlbFwiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlNjaHJpZnRncsO2w59lXCIsXG4gICAgICAgICAgICBcImZvbnRXZWlnaHRcIjogXCJTY2hyaWZ0Z2V3aWNodFwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTY2hyaWZ0c3RpbFwiLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBcIkZhcmJlXCIsXG4gICAgICAgICAgICBcIm1hcmdpblwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiUmFuZFwiLFxuICAgICAgICAgICAgICAgIFwidG9wXCI6IFwiT2JlblwiLFxuICAgICAgICAgICAgICAgIFwiYm90dG9tXCI6IFwiVW50ZW5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlVudGVydGl0ZWwgKERpYWdyYW1tYmVzY2hyZWlidW5nKVwiLFxuICAgICAgICAgICAgICAgIFwic2hvd1wiOiBcIkFuemVpZ2VuXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlNjaHJpZnRncsO2w59lXCIsXG4gICAgICAgICAgICAgICAgXCJmb250V2VpZ2h0XCI6IFwiU2NocmlmdGdld2ljaHRcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTdHlsZVwiOiBcIlNjaHJpZnRzdGlsXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkZhcmJlXCIsXG4gICAgICAgICAgICAgICAgXCJtYXJnaW5Ub3BcIjogXCJSYW5kIE9iZW5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImxlYWd1ZVRhYmxlXCI6IHtcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJSYW5nbGlzdGVcIixcbiAgICAgICAgICAgIFwicGxvdFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlBsb3RcIixcbiAgICAgICAgICAgICAgICBcIm1heFdpZHRoXCI6IFwiTWF4IEJyZWl0ZVwiLFxuICAgICAgICAgICAgICAgIFwiaGlnaGxpZ2h0ZWRDb2xvclwiOiBcIkZhcmJlIGRlciBtYXJraWVydGVuIFJlZ2VsXCIsXG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZERlZmF1bHRDb2xvclwiOiBcIkVtcGZvaGxlbmUgUmVnZWwoZsO8ciBTdGFuZGFyZC1XVFApIEZhcmJlXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZERvbWluYXRlZENvbG9yXCI6IFwiRmFyYmUgZGVyIGVyd2VpdGVydC1kb21pbmllcnRlbiBSZWdlbFwiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkQ29sb3JcIjogXCJGYXJiZSBkZXIgZG9taW5pZXJ0ZW4gUmVnZWxcIixcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRDb2xvclwiOiBcIkZhcmJlIGRlciBhbmRlcmVuIFJlZ2VsblwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwib3RoZXJcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiV2VpdGVyZVwiLFxuICAgICAgICAgICAgXCJkaXNhYmxlQW5pbWF0aW9uc1wiOiBcIkFuaW1hdGlvbmVuIERlYWt0aXZpZXJlblwiLFxuICAgICAgICAgICAgXCJmb3JjZUZ1bGxFZGdlUmVkcmF3XCI6IFwiRXJ6d2luZ3Qgdm9sbHN0w6RuZGlnZSBOZXV6ZWljaG51bmcgZGVyIFp3ZWlnZVwiLFxuICAgICAgICAgICAgXCJoaWRlTGFiZWxzXCI6IFwiVmVyc3RlY2tlIEJlc2NocmVpYnVuZ1wiLFxuICAgICAgICAgICAgXCJoaWRlUGF5b2Zmc1wiOiBcIlZlcnN0ZWNrZSBBdXN6YWhsdW5nZW5cIixcbiAgICAgICAgICAgIFwiaGlkZVByb2JhYmlsaXRpZXNcIjogXCJWZXJzdGVja2UgV2FocnNjaGVpbmxpY2hrZWl0ZW5cIixcbiAgICAgICAgICAgIFwicmF3XCI6IFwiUmF1XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJhYm91dERpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIsOcYmVyXCJcbiAgICB9LFxuICAgIFwiaGVscFwiOntcbiAgICAgICAgXCJoZWFkZXJcIjogXCJIaWxmZVwiLFxuICAgICAgICBcIm1vdXNlXCI6IHtcbiAgICAgICAgICAgIFwiaGVhZGVyXCI6XCJNYXVzYWt0aW9uZW46XCIsXG4gICAgICAgICAgICBcImxpc3RcIjp7XG4gICAgICAgICAgICAgICAgXCIxXCI6IFwiTGlua2UgTWF1c3Rhc3RlOiBLbm90ZW4vWndlaWcgQXVzd2FobFwiLFxuICAgICAgICAgICAgICAgIFwiMlwiOiBcIlJlY2h0ZSBNYXVzdGFzdGU6IEtvbnRleHRtZW7DvCAoSGluenVmw7xnZW4gLyBNYW5pcHVsaWVyZW4gdm9uIEtub3RlbilcIixcbiAgICAgICAgICAgICAgICBcIjNcIjogXCJMaW5rZSBNYXVzIERvcHBlbGtsaWNrOiBLb250ZXh0bWVuw7xcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtleWJvYXJkXCI6IHtcbiAgICAgICAgICAgIFwiaGVhZGVyXCI6XCJUYXN0YXR1cjpcIixcbiAgICAgICAgICAgIFwibGlzdFwiOntcbiAgICAgICAgICAgICAgICBcIjFcIjogXCJEZWw6IGF1c2dld8OkaGx0ZSBLbm90ZW4gTMO2c2NoZW5cIixcbiAgICAgICAgICAgICAgICBcIjJcIjogXCJDdHJsLUMvWDogYXVzZ2V3w6RobHRlIEtub3RlbiBLb3BpZXJlbi9BdXNzY2huZWlkZW5cIixcbiAgICAgICAgICAgICAgICBcIjNcIjogXCJDdHJsLVY6IGtvcGllcnRlIEtub3RlbiBhbHMgVGVpbGJhdW0gYXVzZ2V3w6RobHRlcyBLbm90ZW5zIGVpbmbDvGdlblwiLFxuICAgICAgICAgICAgICAgIFwiNFwiOiBcIkN0cmwtWS9aOiBSw7xja2fDpG5naWcvV2llZGVyaG9sZW5cIixcbiAgICAgICAgICAgICAgICBcIjVcIjogXCJDdHJsLUFsdC1EL0MvVDogTmV1ZSBFbnRzY2hlaWR1bmdzL1p1ZmFsbC9FbmRza25vdGVuIGFscyBVbnRlcmtub3RlbiB2b24gPHN0cm9uZz5hdXNnZXfDpGhsdGVtIEtub3Rlbjwvc3Ryb25nPlwiLFxuICAgICAgICAgICAgICAgIFwiNlwiOiBcIkN0cmwtQWx0LUQvQzogTmV1ZSBFbnRzY2hlaWR1bmdzL1p1ZmFsbCBLbm90ZW4gaW4gPHN0cm9uZz5hdXNnZXfDpGhsdGVuIFp3ZWlnIDwvc3Ryb25nPiBJbmppemllcmVuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb2NzXCI6IFwiRGllIERva3VtZW50YXRpb24gdm9uIFNpbHZlckRlY2lzaW9ucyBpc3QgdW50ZXIgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL1NpbHZlckRlY2lzaW9ucy9TaWx2ZXJEZWNpc2lvbnMvd2lraS9Eb2N1bWVudGF0aW9uXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aGVyZTwvYT4gdmVyZsO8Z2JhclwiXG4gICAgfSxcbiAgICBcImRlZmluaXRpb25zRGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiVmFyaWFibGVuZGVmaW5pdGlvbmVuXCIsXG4gICAgICAgIFwic2NvcGVcIjoge1xuICAgICAgICAgICAgXCJnbG9iYWxcIjogXCJHbG9iYWxlciBBbndlbmR1bmdzYmVyZWljaFwiLFxuICAgICAgICAgICAgXCJub2RlXCI6IFwiR2V3w6RobHRlbiBLbm90ZW4gdW5kIFRlaWxiYXVtIEFud2VuZHVuZ3NiZXJlaWNoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJidXR0b25zXCI6e1xuICAgICAgICAgICAgXCJyZWNhbGN1bGF0ZVwiOiBcIk5ldSBiZXJlY2huZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIkF1c2dld2VydGV0ZSBWYXJpYWJsZW5cIlxuICAgIH0sXG4gICAgXCJzaWRlYmFyRGVmaW5pdGlvbnNcIjp7XG4gICAgICAgIFwic2NvcGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFiZWwgQW53ZW5kdW5nc2JlcmVpY2g6XCIsXG4gICAgICAgICAgICBcImdsb2JhbFwiOiBcIkdsb2JhbGVyXCIsXG4gICAgICAgICAgICBcIm5vZGVcIjogXCJHZXfDpGhsdGVuIEtub3RlbiB1bmQgVGVpbGJhdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImhlYWRlclwiOiBcIlZhcmlhYmxlblwiLFxuICAgICAgICBcImNvZGVcIjogXCJDb2RlXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOntcbiAgICAgICAgICAgIFwib3BlbkRpYWxvZ1wiIDogXCJEaWFsb2cgw5ZmZm5lblwiLFxuICAgICAgICAgICAgXCJyZWNhbGN1bGF0ZVwiOiBcIk5ldSBiZXJlY2huZW5cIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIkF1c2dld2VydGV0ZSBWYXJpYWJsZW5cIlxuICAgIH0sXG4gICAgXCJtdWx0aXBsZUNyaXRlcmlhXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIk1laHJlcmUgS3JpdGVyaWVuXCIsXG4gICAgICAgIFwiZGVmYXVsdE1heGltaXplZENyaXRlcmlvbk5hbWVcIjogXCJFZmZla3RcIixcbiAgICAgICAgXCJkZWZhdWx0TWluaW1pemVkQ3JpdGVyaW9uTmFtZVwiOiBcIktvc3RlblwiLFxuICAgICAgICBcIm5hbWVPZkNyaXRlcmlvbjFcIjogXCJOYW1lIGRlcyBLcml0ZXJpdW1zIDFcIixcbiAgICAgICAgXCJuYW1lT2ZDcml0ZXJpb24yXCI6IFwiTmFtZSBkZXMgS3JpdGVyaXVtcyAyXCIsXG4gICAgICAgIFwiZGVmYXVsdENyaXRlcmlvbjFXZWlnaHRcIjogXCJEZWZhdWx0IDEuIEtyaXRlcml1bSBHZXdpY2h0XCIsXG4gICAgICAgIFwid2VpZ2h0TG93ZXJCb3VuZFwiOiBcIkdld2ljaHQgdW50ZXJlIEdyZW56ZVwiLFxuICAgICAgICBcIndlaWdodFVwcGVyQm91bmRcIjogXCJHZXdpY2h0IG9iZXJlIEdyZW56ZVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjp7XG4gICAgICAgICAgICBcInNob3dMZWFndWVUYWJsZVwiIDogXCJSYW5nbGlzdGUgYW56ZWlnZW5cIixcbiAgICAgICAgICAgIFwiZmxpcFwiOiBcIkZsaXBcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImxheW91dE9wdGlvbnNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiTGF5b3V0XCIsXG4gICAgICAgIFwibWFyZ2luSG9yaXpvbnRhbFwiOiBcIkhvcml6b250YWxlciBSYW5kXCIsXG4gICAgICAgIFwibWFyZ2luVmVydGljYWxcIjogXCJWZXJ0aWthbGVyIFJhbmRcIixcbiAgICAgICAgXCJub2RlU2l6ZVwiOiBcIktub3Rlbmdyw7bDn2VcIixcbiAgICAgICAgXCJlZGdlU2xhbnRXaWR0aE1heFwiOiBcIkthbnRlbnNjaHLDpGdlIChtYXgpXCIsXG4gICAgICAgIFwiZ3JpZFdpZHRoXCI6IFwiQnJlaXRlXCIsXG4gICAgICAgIFwiZ3JpZEhlaWdodFwiOiBcIkjDtmhlXCJcbiAgICB9LFxuICAgIFwiZGlhZ3JhbURldGFpbHNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiRWluemVsaGVpdGVuXCIsXG4gICAgICAgIFwidGl0bGVcIiA6IFwiVGl0ZWxcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiIDogXCJCZXNjaHJlaWJ1bmdcIlxuICAgIH0sXG4gICAgXCJvYmplY3RQcm9wZXJ0aWVzXCI6e1xuICAgICAgICBcImhlYWRlclwiOntcbiAgICAgICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgICAgICBcImRlY2lzaW9uXCI6XCJFbnRzY2hlaWR1bmdza25vdGVuXCIsXG4gICAgICAgICAgICAgICAgXCJjaGFuY2VcIjpcIlp1ZmFsbCBLbm90ZW5cIixcbiAgICAgICAgICAgICAgICBcInRlcm1pbmFsXCI6XCJFbmRrbm90ZW5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZWRnZVwiOiBcIlp3ZWlnXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJTY2h3aW1tZW5kZXIgVGV4dFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY2hpbGRyZW5Qcm9wZXJ0aWVzXCI6e1xuICAgICAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgICAgIFwiaGVhZGVyXCI6IFwiVmVyYmluZHVuZ2VuXCIsXG4gICAgICAgICAgICAgICAgXCJjaGlsZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiaGVhZGVyXCI6IFwiWndlaWcgI3t7bnVtYmVyfX1cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJjb25maXJtXCI6e1xuICAgICAgICBcIm5ld0RpYWdyYW1cIjogXCJNw7ZjaHRlbiBTaWUgZGFzIGFrdHVlbGxlIERpYWdyYW1tIHdpcmtsaWNoIGzDtnNjaGVuPyBBbGxlIG5pY2h0IGdlc3BlaWNoZXJ0ZW4gRGF0ZW4gd2VyZGVuIHZlcmxvcmVuLlwiLFxuICAgICAgICBcIm9wZW5EaWFncmFtXCI6IFwiU2luZCBTaWUgc2ljaGVyPyBBbGxlIG5pY2h0IGdlc3BlaWNoZXJ0ZW4gRGlhZ3JhbW1kYXRlbiB3ZXJkZW4gdmVybG9yZW4uXCIsXG4gICAgICAgIFwiYmVmb3JldW5sb2FkXCI6IFwiU2luZCBTaWUgc2ljaGVyLCBkYXNzIFNpZSBTaWx2ZXJEZWNpc2lvbnMgc2NobGllw59lbiBtw7ZjaHRlbj8gQWxsZSBuaWNodCBnZXNwZWljaGVydGVuIERpYWdyYW1tZGF0ZW4gd2VyZGVuIHZlcmxvcmVuLlwiXG4gICAgfSxcbiAgICBcImVycm9yXCI6e1xuICAgICAgICBcImpzb25QYXJzZVwiOiBcIkZlaGxlciBiZWltIEFuYWx5c2llcmVuIGRlciBEYXRlaSFcIixcbiAgICAgICAgXCJmaWxlQXBpTm90U3VwcG9ydGVkXCI6XCJEaWUgRGF0ZWktQVBJIHdpcmQgaW4gZGllc2VtIEJyb3dzZXIgbm9jaCBuaWNodCB1bnRlcnN0w7x0enQuXCIsXG4gICAgICAgIFwiaW5wdXRGaWxlc1Byb3BlcnR5XCI6XCJJaHIgQnJvd3NlciBzY2hlaW50IGRpZSBgZmlsZXNgLUVpZ2Vuc2NoYWZ0IGRlciBEYXRlaWVpbmdhYmVuIG5pY2h0IHp1IHVudGVyc3TDvHR6ZW4uXCIsXG4gICAgICAgIFwibm90U2lsdmVyRGVjaXNpb25zRmlsZVwiOlwiS2VpbmUgU2lsdmVyRGVjaXNpb25zLURhdGVpIVwiLFxuICAgICAgICBcImluY29ycmVjdFZlcnNpb25Gb3JtYXRcIjogXCJGYWxzY2hlcyBGb3JtYXQgZGVyIFZlcnNpb25zemVpY2hlbmZvbGdlIVwiLFxuICAgICAgICBcImZpbGVWZXJzaW9uTmV3ZXJUaGFuQXBwbGljYXRpb25WZXJzaW9uXCI6IFwiVmVyc2lvbiBkZXIgRGF0ZWkgaXN0IG5ldWVyIGFscyBWZXJzaW9uIGRlcyBTb2Z0d2FyZXMuIEVpbmlnZSBGdW5rdGlvbmVuIG3DtmdsaWNoZXJ3ZWlzZSBmZWhsZW4uXCIsXG4gICAgICAgIFwib2JqZWN0aXZlQ29tcHV0YXRpb25GYWlsdXJlXCI6IFwiRmVobGVyIGJlaW0gQmVyZWNobmVuIHZvbiBPYmpla3RpdmVuIVwiLFxuICAgICAgICBcImRpYWdyYW1EcmF3aW5nRmFpbHVyZVwiOiBcIkZlaGxlciBiZWltIFplaWNobmVuIGRlcyBEaWFncmFtbXMhXCIsXG4gICAgICAgIFwibWFsZm9ybWVkRGF0YVwiOlwiRmVobGVyIGJlaW0gTGVzZW4gZGVyIEJhdW1kYXRlbiFcIixcbiAgICAgICAgXCJwbmdFeHBvcnROb3RTdXBwb3J0ZWRcIjogXCJEZXIgRXhwb3J0IG5hY2ggUE5HIHdpcmQgaW4gSWhyZW0gQnJvd3NlciBuaWNodCB1bnRlcnN0w7x0enQuXCIsXG4gICAgICAgIFwicG5nRXhwb3J0Tm90U3VwcG9ydGVkSUVcIjogXCJEZXIgRXhwb3J0IG5hY2ggUE5HIHdpcmQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgbmljaHQgdW50ZXJzdMO8dHp0LlwiLFxuICAgICAgICBcInN2Z0V4cG9ydE5vdFN1cHBvcnRlZFwiOiBcIkRlciBFeHBvcnQgbmFjaCBTVkcgd2lyZCBpbiBJaHJlbSBCcm93c2VyIG5pY2h0IHVudGVyc3TDvHR6dC5cIixcbiAgICAgICAgXCJwZGZFeHBvcnROb3RTdXBwb3J0ZWRcIjogXCJEZXIgRXhwb3J0IG5hY2ggUERGIHdpcmQgaW4gSWhyZW0gQnJvd3NlciBuaWNodCB1bnRlcnN0w7x0enQuXCIsXG4gICAgICAgIFwiaW5jb3JyZWN0UGF5b2ZmTnVtYmVyRm9ybWF0T3B0aW9uc1wiOiBcIkZhbHNjaGUgQXVzemFobHVuZ3Nmb3JtYXQgT3B0aW9uZW5cIixcbiAgICAgICAgXCJpbmNvcnJlY3RQcm9iYWJpbGl0eU51bWJlckZvcm1hdE9wdGlvbnNcIjogXCJGYWxzY2hlIFdhaHJzY2hlaW5saWNoa2VpdHNmb3JtYXQgT3B0aW9uZW5cIixcbiAgICAgICAgXCJpbmNvcnJlY3ROdW1iZXJGb3JtYXRPcHRpb25zXCI6IFwiRmFsc2NoZSBaYWhsZW5mb3JtYXQsIGRpZSBTdGFuZGFyZGVpbnN0ZWxsdW5nZW4gYW5nZXdlbmRldC5cIixcbiAgICAgICAgXCJqc1BERmlzTm90SW5jbHVkZWRcIjogXCJqc1BERiBpc3QgbmljaHQgZW50aGFsdGVuIVwiLFxuICAgICAgICBcInNlcnZlclNpZGVFeHBvcnRSZXF1ZXN0RmFpbHVyZVwiOiBcIkV4cG9ydCBTZXJ2ZXIgQW5mcmFnZSBmZWhsZ2VzY2hsYWdlbiFcIlxuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcInRvb2xiYXJcIjoge1xuICAgICAgICBcIm5ld0RpYWdyYW1cIjogXCJOZXcgZGlhZ3JhbVwiLFxuICAgICAgICBcIm9wZW5EaWFncmFtXCI6IFwiT3BlbiBleGlzdGluZyBkaWFncmFtXCIsXG4gICAgICAgIFwic2F2ZURpYWdyYW1cIjogXCJTYXZlIGN1cnJlbnQgZGlhZ3JhbVwiLFxuICAgICAgICBcImV4cG9ydFwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJFeHBvcnQgdG9cIixcbiAgICAgICAgICAgIFwicG5nXCI6IFwiUG5nXCIsXG4gICAgICAgICAgICBcInN2Z1wiOiBcIlN2Z1wiLFxuICAgICAgICAgICAgXCJwZGZcIjogXCJQZGZcIlxuICAgICAgICB9LFxuICAgICAgICBcImxheW91dFwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJMYXlvdXRcIixcbiAgICAgICAgICAgIFwibWFudWFsXCI6IFwiTWFudWFsXCIsXG4gICAgICAgICAgICBcInRyZWVcIjogXCJUcmVlXCIsXG4gICAgICAgICAgICBcImNsdXN0ZXJcIjogXCJDbHVzdGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ2aWV3TW9kZVwiOiB7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiVmlld1wiLFxuICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICBcImNyaXRlcmlvbjFcIjpcIkNyaXRlcmlvbiAxXCIsXG4gICAgICAgICAgICAgICAgXCJjcml0ZXJpb24yXCI6XCJDcml0ZXJpb24gMlwiLFxuICAgICAgICAgICAgICAgIFwidHdvQ3JpdGVyaWFcIjpcIlR3byBjcml0ZXJpYVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwib2JqZWN0aXZlUnVsZVwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJSdWxlXCIsXG4gICAgICAgICAgICBcIm9wdGlvbnNcIjoge1xuICAgICAgICAgICAgICAgIFwiZXhwZWN0ZWQtdmFsdWUtbWF4aW1pemF0aW9uXCI6XCJtYXhcIixcbiAgICAgICAgICAgICAgICBcImV4cGVjdGVkLXZhbHVlLW1pbmltaXphdGlvblwiOlwibWluXCIsXG4gICAgICAgICAgICAgICAgXCJtYXhpLW1pblwiOlwibWF4aS1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1heGktbWF4XCI6XCJtYXhpLW1heFwiLFxuICAgICAgICAgICAgICAgIFwibWluaS1taW5cIjpcIm1pbmktbWluXCIsXG4gICAgICAgICAgICAgICAgXCJtaW5pLW1heFwiOlwibWluaS1tYXhcIixcbiAgICAgICAgICAgICAgICBcIm1pbi1tYXhcIjpcIm1pbi1tYXhcIixcbiAgICAgICAgICAgICAgICBcIm1heC1taW5cIjpcIm1heC1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1pbi1taW5cIjogXCJtaW4tbWluXCIsXG4gICAgICAgICAgICAgICAgXCJtYXgtbWF4XCI6IFwibWF4LW1heFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidW5kb1wiOiBcIlVuZG9cIixcbiAgICAgICAgXCJyZWRvXCI6IFwiUmVkb1wiLFxuICAgICAgICBcInNldHRpbmdzXCI6IFwiU2V0dGluZ3NcIixcbiAgICAgICAgXCJhYm91dFwiOiBcIkFib3V0XCIsXG4gICAgICAgIFwic2Vuc2l0aXZpdHlBbmFseXNpc1wiOiBcIlNlbnNpdGl2aXR5IGFuYWx5c2lzXCIsXG4gICAgICAgIFwicmVjb21wdXRlXCI6IFwiUmVjb21wdXRlXCJcbiAgICB9LFxuICAgIFwibm9kZVwiOntcbiAgICAgICAgXCJuYW1lXCI6IFwiTGFiZWxcIlxuICAgIH0sXG4gICAgXCJlZGdlXCI6e1xuICAgICAgICBcIm5hbWVcIjogXCJMYWJlbFwiLFxuICAgICAgICBcInBheW9mZlwiOiBcIlBheW9mZlwiLFxuICAgICAgICBcInByb2JhYmlsaXR5XCI6IFwiUHJvYmFiaWxpdHlcIlxuICAgIH0sXG4gICAgXCJ0ZXh0XCI6e1xuICAgICAgICBcInZhbHVlXCI6IFwiVGV4dFwiXG4gICAgfSxcbiAgICBcImxlYWd1ZVRhYmxlRGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiTGVhZ3VlIHRhYmxlXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOiB7XG4gICAgICAgICAgICBcImRvd25sb2FkQ3N2XCI6IFwiRG93bmxvYWQgQ1NWXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJsZWFndWVUYWJsZVwiOiB7XG4gICAgICAgIFwiaGVhZGVyc1wiOntcbiAgICAgICAgICAgIFwicG9saWN5Tm9cIjogXCJQb2xpY3kgI1wiLFxuICAgICAgICAgICAgXCJwb2xpY3lcIjogXCJQb2xpY3lcIixcbiAgICAgICAgICAgIFwiY29tbWVudFwiOiBcIkNvbW1lbnRcIlxuICAgICAgICB9LFxuICAgICAgICBcImNvbW1lbnRcIjp7XG4gICAgICAgICAgICBcImRvbWluYXRlZEJ5XCI6IFwiZG9taW5hdGVkIChieSAje3twb2xpY3l9fSlcIixcbiAgICAgICAgICAgIFwiZXh0ZW5kZWREb21pbmF0ZWRCeVwiOiBcImV4dGVuZGVkLWRvbWluYXRlZCAoYnkgI3t7cG9saWN5MX19IGFuZCAje3twb2xpY3kyfX0pXCIsXG4gICAgICAgICAgICBcImluY3JhdGlvXCI6IFwiaW5jcmVtZW50YWwgcmF0aW89e3tpbmNyYXRpb319XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwbG90XCI6e1xuICAgICAgICAgICAgXCJncm91cHNcIjp7XG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZFwiOiBcIlJlY29tbWVuZGVkIChmb3Igc29tZSBXVFAgaW4gcmFuZ2UpXCIsXG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZC1kZWZhdWx0XCI6IFwiUmVjb21tZW5kZWQgKGZvciBkZWZhdWx0IFdUUClcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkLWRvbWluYXRlZFwiIDogXCJFeHRlbmRlZC1kb21pbmF0ZWRcIixcbiAgICAgICAgICAgICAgICBcImRvbWluYXRlZFwiOiBcIkRvbWluYXRlZFwiLFxuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIk90aGVyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInRvb2x0aXBcIjp7XG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93MVwiOiBcIkRpcmVjdGlvbiBvZiB7e25hbWV9fSBvcHRpbWl6YXRpb25cIixcbiAgICAgICAgICAgICAgICBcImdyYWRpZW50QXJyb3cyXCI6IFwiRGlyZWN0aW9uIG9mIHt7bmFtZX19IG9wdGltaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkUmVnaW9uXCI6IFwiTm90IHJlY29tbWVuZGVkIHJlZ2lvblwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsZWdlbmRcIjp7XG4gICAgICAgICAgICAgICAgXCJkb21pbmF0ZWRSZWdpb25cIjogXCJHcmV5IGFyZWEgaGlnaGxpZ2h0cyBub3QgcmVjb21tZW5kZWQgcmVnaW9uXCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93c1wiOiBcIkFycm93cyBpbmRpY2F0ZSBpbXByb3ZlbWVudCBkaXJlY3Rpb25cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJTZW5zaXRpdml0eSBhbmFseXNpc1wiLFxuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJydW5Kb2JcIjogXCJSdW5cIixcbiAgICAgICAgICAgIFwic3RvcEpvYlwiOiBcIlN0b3BcIixcbiAgICAgICAgICAgIFwidGVybWluYXRlSm9iXCI6IFwiVGVybWluYXRlXCIsXG4gICAgICAgICAgICBcInJlc3VtZUpvYlwiOiBcIlJlc3VtZVwiLFxuICAgICAgICAgICAgXCJkb3dubG9hZENzdlwiOiBcIkRvd25sb2FkIENTVlwiLFxuICAgICAgICAgICAgXCJiYWNrXCI6IFwiQmFja1wiLFxuICAgICAgICAgICAgXCJjbGVhclwiOiBcIkNsZWFyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJqb2JQYXJhbWV0ZXJzQnVpbGRlclwiOiB7XG4gICAgICAgIFwiYnV0dG9uc1wiOiB7XG4gICAgICAgICAgICBcInJlbW92ZVBhcmFtZXRlclZhbHVlXCI6IFwiUmVtb3ZlXCIsXG4gICAgICAgICAgICBcImFkZFBhcmFtZXRlclZhbHVlXCI6IFwiQWRkXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJqb2JSZXN1bHRUYWJsZVwiOntcbiAgICAgICAgXCJ0b29sdGlwXCI6IHtcbiAgICAgICAgICAgIFwibXVsdGlwbGVQb2xpY2llc0luQ2VsbFwiOiBcInt7bnVtYmVyfX0gcG9saWNpZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInBpdm90XCI6IHtcbiAgICAgICAgICAgIFwiYWdncmVnYXRvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJtYXhpbXVtXCI6IFwiTWF4aW11bVwiLFxuICAgICAgICAgICAgICAgIFwibWluaW11bVwiOiBcIk1pbmltdW1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicmVuZGVyZXJzXCI6e1xuICAgICAgICAgICAgICAgIFwiaGVhdG1hcFwiOiBcIkhlYXRtYXBcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInBvbGljeVByZXZpZXdcIjogXCJwb2xpY3kgcHJldmlld1wiXG4gICAgfSxcbiAgICBcImpvYlwiOntcbiAgICAgICAgXCJzZW5zaXRpdml0eS1hbmFseXNpc1wiOntcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIk4td2F5IHNlbnNpdGl2aXR5IGFuYWx5c2lzXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJSdWxlIG5hbWVcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRXh0ZW5kZWQgcG9saWN5IGRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlZhcmlhYmxlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk5hbWVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1pblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWluXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtYXhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1heFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJMZW5ndGhcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInN0ZXBcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlN0ZXBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXJyb3JzXCI6e1xuICAgICAgICAgICAgICAgIFwiY29tcHV0YXRpb25zXCI6IFwiRXJyb3IgaW4gc2Vuc2l0aXZpdHkgYW5hbHlzaXMgY29tcHV0YXRpb25zIGZvciB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTnVtYmVyIG9mIGRlZmluZWQgc2NlbmFyaW9zIGxhcmdlciB0aGFuIHt7bnVtYmVyRm9ybWF0dGVkfX0uIFNlbnNpdGl2aXR5IGFuYWx5c2lzIG1pZ2h0IGZhaWwgdG8gY29tcHV0ZSBvciBiZSB2ZXJ5IHNsb3cuXCIsXG4gICAgICAgICAgICAgICAgXCJsYXJnZVBhcmFtZXRlcnNOdW1iZXJcIjogXCJOdW1iZXIgb2YgcGFyYW1ldGVycyBsYXJnZXIgdGhhbiB7e251bWJlcn19LiBTZW5zaXRpdml0eSBhbmFseXNpcyBkaXNwbGF5IG1pZ2h0IGZhaWwgb3IgYmUgdmVyeSBzbG93LlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidG9ybmFkby1kaWFncmFtXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVG9ybmFkbyBkaWFncmFtXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJSdWxlIG5hbWVcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRXh0ZW5kZWQgcG9saWN5IGRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlZhcmlhYmxlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk5hbWVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1pblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWluXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtYXhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1heFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJMZW5ndGhcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInN0ZXBcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlN0ZXBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRGVmYXVsdCB2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJFcnJvciBpbiBzZW5zaXRpdml0eSBhbmFseXNpcyBjb21wdXRhdGlvbnMgZm9yIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwid2FybmluZ3NcIjoge1xuICAgICAgICAgICAgICAgIFwibGFyZ2VTY2VuYXJpb3NOdW1iZXJcIjogXCJOdW1iZXIgb2YgZGVmaW5lZCBzY2VuYXJpb3MgbGFyZ2VyIHRoYW4ge3tudW1iZXJGb3JtYXR0ZWR9fS4gU2Vuc2l0aXZpdHkgYW5hbHlzaXMgbWlnaHQgZmFpbCB0byBjb21wdXRlIG9yIGJlIHZlcnkgc2xvdy5cIixcbiAgICAgICAgICAgICAgICBcImxhcmdlUGFyYW1ldGVyc051bWJlclwiOiBcIk51bWJlciBvZiBwYXJhbWV0ZXJzIGxhcmdlciB0aGFuIHt7bnVtYmVyfX0uIFNlbnNpdGl2aXR5IGFuYWx5c2lzIGRpc3BsYXkgbWlnaHQgZmFpbCBvciBiZSB2ZXJ5IHNsb3cuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBsb3RcIjp7XG4gICAgICAgICAgICAgICAgXCJsZWdlbmRcIjp7XG4gICAgICAgICAgICAgICAgICAgIFwibG93XCI6IFwiRGVjcmVhc2VcIixcbiAgICAgICAgICAgICAgICAgICAgXCJoaWdoXCI6IFwiSW5jcmVhc2VcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ4QXhpc1RpdGxlXCI6IFwiUGF5b2ZmXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9iYWJpbGlzdGljLXNlbnNpdGl2aXR5LWFuYWx5c2lzXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiUHJvYmFiaWxpc3RpYyBzZW5zaXRpdml0eSBhbmFseXNpc1wiLFxuICAgICAgICAgICAgXCJwYXJhbVwiOntcbiAgICAgICAgICAgICAgICBcInJ1bGVOYW1lXCI6IFwiUnVsZSBuYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJudW1iZXJPZlJ1bnNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTnVtYmVyIG9mIHJ1bnNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkV4dGVuZGVkIHBvbGljeSBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYXJpYWJsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJmb3JtdWxhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJGb3JtdWxhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhlbHBcIjogXCJTZWxlY3QgZm9ybXVsYSB0ZW1wbGF0ZSBmcm9tIHRoZSBtZW51IG9yIHdyaXRlIGN1c3RvbSBjb2RlXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgICAgICBcImNvbXB1dGF0aW9uc1wiOiBcIkVycm9yIGluIHNlbnNpdGl2aXR5IGFuYWx5c2lzIGNvbXB1dGF0aW9ucyBmb3IgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlwiLFxuICAgICAgICAgICAgICAgIFwicGFyYW0tY29tcHV0YXRpb25cIjogXCJFcnJvciBjb21wdXRpbmcgcGFyYW1ldGVyIHZhbHVlczpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwid2FybmluZ3NcIjoge1xuICAgICAgICAgICAgICAgIFwibGFyZ2VTY2VuYXJpb3NOdW1iZXJcIjogXCJOdW1iZXIgb2YgZGVmaW5lZCBzY2VuYXJpb3MgbGFyZ2VyIHRoYW4ge3tudW1iZXJGb3JtYXR0ZWR9fS4gU2Vuc2l0aXZpdHkgYW5hbHlzaXMgbWlnaHQgZmFpbCB0byBjb21wdXRlIG9yIGJlIHZlcnkgc2xvdy5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInNwaWRlci1wbG90XCI6IHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlNwaWRlciBwbG90XCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6IHtcbiAgICAgICAgICAgICAgICBcInJ1bGVOYW1lXCI6IFwiUnVsZSBuYW1lXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkV4dGVuZGVkIHBvbGljeSBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInBlcmNlbnRhZ2VDaGFuZ2VSYW5nZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCIrLy0gcGVyY2VudGFnZSBjaGFuZ2UgdG8gY29uc2lkZXJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJsZW5ndGhcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTnVtYmVyIG9mIHZhbHVlcyB0byB0ZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaGVscFwiOiBcIk51bWJlciBvZiB2YWx1ZXMgdG8gdGVzdCAoaW4gb25lIHNpZGUgb2YgcmFuZ2UpXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlZhcmlhYmxlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk5hbWVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRGVmYXVsdCB2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjoge1xuICAgICAgICAgICAgICAgIFwiY29tcHV0YXRpb25zXCI6IFwiRXJyb3IgaW4gc2Vuc2l0aXZpdHkgYW5hbHlzaXMgY29tcHV0YXRpb25zIGZvciB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTnVtYmVyIG9mIGRlZmluZWQgc2NlbmFyaW9zIGxhcmdlciB0aGFuIHt7bnVtYmVyRm9ybWF0dGVkfX0uIFNlbnNpdGl2aXR5IGFuYWx5c2lzIG1pZ2h0IGZhaWwgdG8gY29tcHV0ZSBvciBiZSB2ZXJ5IHNsb3cuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBsb3RcIjoge1xuICAgICAgICAgICAgICAgIFwibGVnZW5kXCI6IHt9LFxuICAgICAgICAgICAgICAgIFwieEF4aXNUaXRsZVwiOiBcIlBlcmNlbnRhZ2UgY2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgXCJ5QXhpc1RpdGxlXCI6IFwiUGF5b2ZmXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJsZWFndWUtdGFibGVcIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMZWFndWUgdGFibGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgIFwiZ2VuZXJpY1wiOiBcIkVycm9yIGluIHt7am9iTmFtZX19IGNvbXB1dGF0aW9uczoge3ttZXNzYWdlfX1cIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFwiSW5jb3JyZWN0IHt7am9iTmFtZX19IHBhcmFtZXRlcnNcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInNldHRpbmdzRGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiU2V0dGluZ3NcIixcbiAgICAgICAgXCJnZW5lcmFsXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkdlbmVyYWxcIixcbiAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJGb250IHNpemVcIixcbiAgICAgICAgICAgIFwiZm9udEZhbWlseVwiOiBcIkZvbnQgZmFtaWx5XCIsXG4gICAgICAgICAgICBcImZvbnRXZWlnaHRcIjogXCJGb250IHdlaWdodFwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJGb250IHN0eWxlXCIsXG4gICAgICAgICAgICBcIm51bWJlckZvcm1hdExvY2FsZVwiOiBcIk51bWJlciBmb3JtYXQgbG9jYWxlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXlvZmYxXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlBheW9mZiAxIG51bWJlciBmb3JtYXRcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lcIjogXCJDdXJyZW5jeVwiLFxuICAgICAgICAgICAgXCJjdXJyZW5jeURpc3BsYXlcIjogXCJDdXJyZW5jeSBkaXNwbGF5XCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwiU3R5bGVcIixcbiAgICAgICAgICAgIFwibWluaW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWluaW11bSBmcmFjdGlvbiBkaWdpdHNcIixcbiAgICAgICAgICAgIFwibWF4aW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWF4aW11bSBmcmFjdGlvbiBkaWdpdHNcIixcbiAgICAgICAgICAgIFwidXNlR3JvdXBpbmdcIjogXCJVc2UgZ3JvdXBpbmcgc2VwYXJhdG9yc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF5b2ZmMlwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJQYXlvZmYgMiBudW1iZXIgZm9ybWF0XCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5XCI6IFwiQ3VycmVuY3lcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lEaXNwbGF5XCI6IFwiQ3VycmVuY3kgZGlzcGxheVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIlN0eWxlXCIsXG4gICAgICAgICAgICBcIm1pbmltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk1pbmltdW0gZnJhY3Rpb24gZGlnaXRzXCIsXG4gICAgICAgICAgICBcIm1heGltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk1heGltdW0gZnJhY3Rpb24gZGlnaXRzXCIsXG4gICAgICAgICAgICBcInVzZUdyb3VwaW5nXCI6IFwiVXNlIGdyb3VwaW5nIHNlcGFyYXRvcnNcIlxuICAgICAgICB9LFxuICAgICAgICBcInByb2JhYmlsaXR5XCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlByb2JhYmlsaXR5IG51bWJlciBmb3JtYXRcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJTdHlsZVwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJNaW5pbXVtIGZyYWN0aW9uIGRpZ2l0c1wiLFxuICAgICAgICAgICAgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJNYXhpbXVtIGZyYWN0aW9uIGRpZ2l0c1wiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkZvbnQgc2l6ZVwiLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBcIkNvbG9yXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5vZGVcIixcbiAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJTdHJva2Ugd2lkdGhcIixcbiAgICAgICAgICAgIFwib3B0aW1hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiT3B0aW1hbFwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ29sb3JcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3Ryb2tlIHdpZHRoXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxhYmVsXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTGFiZWxcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiTGFiZWwgZm9udCBzaXplXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkxhYmVsIGNvbG9yXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlBheW9mZlwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJGb250IHNpemVcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JcIixcbiAgICAgICAgICAgICAgICBcIm5lZ2F0aXZlQ29sb3JcIjogXCJOZWdhdGl2ZSBjb2xvclwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZWNpc2lvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkRlY2lzaW9uIE5vZGVcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJGaWxsIGNvbG9yXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJTdHJva2UgY29sb3JcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiU2VsZWN0ZWQgZmlsbCBjb2xvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiY2hhbmNlXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmNlIE5vZGVcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJGaWxsIGNvbG9yXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJTdHJva2UgY29sb3JcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiU2VsZWN0ZWQgZmlsbCBjb2xvclwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidGVybWluYWxcIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlRlcm1pbmFsIE5vZGVcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJGaWxsIGNvbG9yXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJTdHJva2UgY29sb3JcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiU2VsZWN0ZWQgZmlsbCBjb2xvclwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJQYXlvZmZcIixcbiAgICAgICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkZvbnQgc2l6ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuZWdhdGl2ZUNvbG9yXCI6IFwiTmVnYXRpdmUgY29sb3JcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJlZGdlXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkVkZ2VcIixcbiAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ29sb3JcIixcbiAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJTdHJva2Ugd2lkdGhcIixcbiAgICAgICAgICAgIFwib3B0aW1hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiT3B0aW1hbFwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ29sb3JcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3Ryb2tlIHdpZHRoXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJTZWxlY3RlZFwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ29sb3JcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3Ryb2tlIHdpZHRoXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxhYmVsXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTGFiZWxcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiRm9udCBzaXplXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkNvbG9yXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiUGF5b2ZmXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkZvbnQgc2l6ZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb2xvclwiLFxuICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIk5lZ2F0aXZlIGNvbG9yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkaWFncmFtVGl0bGVcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiRGlhZ3JhbSB0aXRsZVwiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkZvbnQgc2l6ZVwiLFxuICAgICAgICAgICAgXCJmb250V2VpZ2h0XCI6IFwiRm9udCB3ZWlnaHRcIixcbiAgICAgICAgICAgIFwiZm9udFN0eWxlXCI6IFwiRm9udCBzdHlsZVwiLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBcIkNvbG9yXCIsXG4gICAgICAgICAgICBcIm1hcmdpblwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTWFyZ2luXCIsXG4gICAgICAgICAgICAgICAgXCJ0b3BcIjogXCJUb3BcIixcbiAgICAgICAgICAgICAgICBcImJvdHRvbVwiOiBcIkJvdHRvbVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiU3VidGl0bGUgKGRpYWdyYW0gZGVzY3JpcHRpb24pXCIsXG4gICAgICAgICAgICAgICAgXCJzaG93XCI6IFwiU2hvd1wiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJGb250IHNpemVcIixcbiAgICAgICAgICAgICAgICBcImZvbnRXZWlnaHRcIjogXCJGb250IHdlaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFN0eWxlXCI6IFwiRm9udCBzdHlsZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb2xvclwiLFxuICAgICAgICAgICAgICAgIFwibWFyZ2luVG9wXCI6IFwiTWFyZ2luIHRvcFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibGVhZ3VlVGFibGVcIjoge1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkxlYWd1ZSBUYWJsZVwiLFxuICAgICAgICAgICAgXCJwbG90XCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiUGxvdFwiLFxuICAgICAgICAgICAgICAgIFwibWF4V2lkdGhcIjogXCJNYXggd2lkdGhcIixcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkQ29sb3JcIjogXCJSZWNvbW1lbmRlZCAoZm9yIHNvbWUgV1RQIGluIHJhbmdlKSBwb2xpY3kgY29sb3JcIixcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkRGVmYXVsdENvbG9yXCI6IFwiUmVjb21tZW5kZWQgKGZvciBkZWZhdWx0IFdUUCkgcG9saWN5IGNvbG9yXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZERvbWluYXRlZENvbG9yXCI6IFwiRXh0ZW5kZWQgZG9taW5hdGVkIHBvbGljeSBjb2xvclwiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkQ29sb3JcIjogXCJEb21pbmF0ZWQgcG9saWN5IGNvbG9yXCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0Q29sb3JcIjogXCJPdGhlciBwb2xpY2llcyBjb2xvclwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwib3RoZXJcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiT3RoZXJcIixcbiAgICAgICAgICAgIFwiZGlzYWJsZUFuaW1hdGlvbnNcIjogXCJEaXNhYmxlIGFuaW1hdGlvbnNcIixcbiAgICAgICAgICAgIFwiZm9yY2VGdWxsRWRnZVJlZHJhd1wiOiBcIkZvcmNlIGZ1bGwgcmVkcmF3IG9mIGVkZ2VzXCIsXG4gICAgICAgICAgICBcImhpZGVMYWJlbHNcIjogXCJIaWRlIGxhYmVsc1wiLFxuICAgICAgICAgICAgXCJoaWRlUGF5b2Zmc1wiOiBcIkhpZGUgcGF5b2Zmc1wiLFxuICAgICAgICAgICAgXCJoaWRlUHJvYmFiaWxpdGllc1wiOiBcIkhpZGUgcHJvYmFiaWxpdGllc1wiLFxuICAgICAgICAgICAgXCJyYXdcIjogXCJSYXdcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImFib3V0RGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiQWJvdXRcIlxuICAgIH0sXG4gICAgXCJoZWxwXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIkhlbHBcIixcbiAgICAgICAgXCJtb3VzZVwiOiB7XG4gICAgICAgICAgICBcImhlYWRlclwiOlwiTW91c2UgYWN0aW9uczpcIixcbiAgICAgICAgICAgIFwibGlzdFwiOntcbiAgICAgICAgICAgICAgICBcIjFcIjogXCJsZWZ0IG1vdXNlIGJ1dHRvbjogbm9kZS9lZGdlIHNlbGVjdGlvblwiLFxuICAgICAgICAgICAgICAgIFwiMlwiOiBcInJpZ2h0IG1vdXNlIGJ1dHRvbjogY29udGV4dCBtZW51IChhZGRpbmcvbWFuaXB1bGF0aW5nIG5vZGVzKVwiLFxuICAgICAgICAgICAgICAgIFwiM1wiOiBcImxlZnQgbW91c2UgZGJjbGljazogY29udGV4dCBtZW51XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJrZXlib2FyZFwiOiB7XG4gICAgICAgICAgICBcImhlYWRlclwiOlwiS2V5Ym9hcmQ6XCIsXG4gICAgICAgICAgICBcImxpc3RcIjp7XG4gICAgICAgICAgICAgICAgXCIxXCI6IFwiRGVsOiBkZWxldGUgc2VsZWN0ZWQgbm9kZXNcIixcbiAgICAgICAgICAgICAgICBcIjJcIjogXCJDdHJsLUMvWDogY29weS9jdXQgc2VsZWN0ZWQgbm9kZXNcIixcbiAgICAgICAgICAgICAgICBcIjNcIjogXCJDdHJsLVY6IHBhc3RlIGNvcGllZCBub2RlcyBhcyBhIHN1YnRyZWUgb2YgYSBzZWxlY3RlZCBub2RlXCIsXG4gICAgICAgICAgICAgICAgXCI0XCI6IFwiQ3RybC1ZL1o6IHVuZG8vcmVkb1wiLFxuICAgICAgICAgICAgICAgIFwiNVwiOiBcIkN0cmwtQWx0LUQvQy9UOiBhZGQgbmV3IERlY2lzaW9uL0NoYW5jZS9UZXJtaW5hbCBzdWJub2RlIG9mIGEgPHN0cm9uZz5zZWxlY3RlZCBub2RlPC9zdHJvbmc+XCIsXG4gICAgICAgICAgICAgICAgXCI2XCI6IFwiQ3RybC1BbHQtRC9DOiBpbmplY3QgbmV3IERlY2lzaW9uL0NoYW5jZSBub2RlIGludG8gYSA8c3Ryb25nPnNlbGVjdGVkIGVkZ2U8L3N0cm9uZz5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRvY3NcIjogXCJEb2N1bWVudGF0aW9uIG9mIFNpbHZlckRlY2lzaW9ucyBpcyBhdmFpbGFibGUgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL1NpbHZlckRlY2lzaW9ucy9TaWx2ZXJEZWNpc2lvbnMvd2lraS9Eb2N1bWVudGF0aW9uXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aGVyZTwvYT5cIlxuICAgIH0sXG4gICAgXCJkZWZpbml0aW9uc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlZhcmlhYmxlIGRlZmluaXRpb25zXCIsXG4gICAgICAgIFwic2NvcGVcIjoge1xuICAgICAgICAgICAgXCJnbG9iYWxcIjogXCJnbG9iYWwgc2NvcGVcIixcbiAgICAgICAgICAgIFwibm9kZVwiOiBcInNlbGVjdGVkIG5vZGUgYW5kIHN1YnRyZWUgc2NvcGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImJ1dHRvbnNcIjp7XG4gICAgICAgICAgICBcInJlY2FsY3VsYXRlXCI6IFwiUmVjYWxjdWxhdGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIkV2YWx1YXRlZCB2YXJpYWJsZXNcIlxuICAgIH0sXG4gICAgXCJzaWRlYmFyRGVmaW5pdGlvbnNcIjp7XG4gICAgICAgIFwic2NvcGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFibGUgc2NvcGU6XCIsXG4gICAgICAgICAgICBcImdsb2JhbFwiOiBcImdsb2JhbFwiLFxuICAgICAgICAgICAgXCJub2RlXCI6IFwic2VsZWN0ZWQgbm9kZSBhbmQgc3VidHJlZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaGVhZGVyXCI6IFwiVmFyaWFibGVzXCIsXG4gICAgICAgIFwiY29kZVwiOiBcIkNvZGVcIixcbiAgICAgICAgXCJidXR0b25zXCI6e1xuICAgICAgICAgICAgXCJvcGVuRGlhbG9nXCIgOiBcIk9wZW4gZGlhbG9nXCIsXG4gICAgICAgICAgICBcInJlY2FsY3VsYXRlXCI6IFwiUmVjYWxjdWxhdGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIkV2YWx1YXRlZCB2YXJpYWJsZXNcIlxuICAgIH0sXG4gICAgXCJtdWx0aXBsZUNyaXRlcmlhXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIk11bHRpcGxlIGNyaXRlcmlhXCIsXG4gICAgICAgIFwiZGVmYXVsdE1heGltaXplZENyaXRlcmlvbk5hbWVcIjogXCJFZmZlY3RcIixcbiAgICAgICAgXCJkZWZhdWx0TWluaW1pemVkQ3JpdGVyaW9uTmFtZVwiOiBcIkNvc3RcIixcbiAgICAgICAgXCJuYW1lT2ZDcml0ZXJpb24xXCI6IFwiTmFtZSBmb3IgY3JpdGVyaW9uIDFcIixcbiAgICAgICAgXCJuYW1lT2ZDcml0ZXJpb24yXCI6IFwiTmFtZSBmb3IgY3JpdGVyaW9uIDJcIixcbiAgICAgICAgXCJkZWZhdWx0Q3JpdGVyaW9uMVdlaWdodFwiOiBcIkRlZmF1bHQgMXN0IGNyaXRlcmlvbiB3ZWlnaHRcIixcbiAgICAgICAgXCJ3ZWlnaHRMb3dlckJvdW5kXCI6IFwiV2VpZ2h0IGxvd2VyIGJvdW5kXCIsXG4gICAgICAgIFwid2VpZ2h0VXBwZXJCb3VuZFwiOiBcIldlaWdodCB1cHBlciBib3VuZFwiLFxuICAgICAgICBcImJ1dHRvbnNcIjp7XG4gICAgICAgICAgICBcInNob3dMZWFndWVUYWJsZVwiIDogXCJTaG93IGxlYWd1ZSB0YWJsZVwiLFxuICAgICAgICAgICAgXCJmbGlwXCI6IFwiRmxpcFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwibGF5b3V0T3B0aW9uc1wiOntcbiAgICAgICAgXCJoZWFkZXJcIjogXCJMYXlvdXRcIixcbiAgICAgICAgXCJtYXJnaW5Ib3Jpem9udGFsXCI6IFwiSG9yaXpvbnRhbCBNYXJnaW5cIixcbiAgICAgICAgXCJtYXJnaW5WZXJ0aWNhbFwiOiBcIlZlcnRpY2FsIE1hcmdpblwiLFxuICAgICAgICBcIm5vZGVTaXplXCI6IFwiTm9kZSBzaXplXCIsXG4gICAgICAgIFwiZWRnZVNsYW50V2lkdGhNYXhcIjogXCJFZGdlIHNsYW50IChtYXgpXCIsXG4gICAgICAgIFwiZ3JpZFdpZHRoXCI6IFwiV2lkdGhcIixcbiAgICAgICAgXCJncmlkSGVpZ2h0XCI6IFwiSGVpZ2h0XCJcbiAgICB9LFxuICAgIFwiZGlhZ3JhbURldGFpbHNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiRGV0YWlsc1wiLFxuICAgICAgICBcInRpdGxlXCIgOiBcIlRpdGxlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIiA6IFwiRGVzY3JpcHRpb25cIlxuICAgIH0sXG4gICAgXCJvYmplY3RQcm9wZXJ0aWVzXCI6e1xuICAgICAgICBcImhlYWRlclwiOntcbiAgICAgICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgICAgICBcImRlY2lzaW9uXCI6XCJEZWNpc2lvbiBOb2RlXCIsXG4gICAgICAgICAgICAgICAgXCJjaGFuY2VcIjpcIkNoYW5jZSBOb2RlXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXJtaW5hbFwiOlwiVGVybWluYWwgTm9kZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlZGdlXCI6IFwiRWRnZVwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiRmxvYXRpbmcgdGV4dFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY2hpbGRyZW5Qcm9wZXJ0aWVzXCI6e1xuICAgICAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgICAgIFwiaGVhZGVyXCI6IFwiQ29ubmVjdGlvbnNcIixcbiAgICAgICAgICAgICAgICBcImNoaWxkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJoZWFkZXJcIjogXCJFZGdlICN7e251bWJlcn19XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiY29uZmlybVwiOntcbiAgICAgICAgXCJuZXdEaWFncmFtXCI6IFwiRG8geW91IHJlYWxseSB3YW50IHRvIGNsZWFyIGN1cnJlbnQgZGlhZ3JhbT8gQWxsIHVuc2F2ZWQgZGF0YSB3aWxsIGJlIGxvc3QuXCIsXG4gICAgICAgIFwib3BlbkRpYWdyYW1cIjogXCJBcmUgeW91IHN1cmU/IEFsbCB1bnNhdmVkIGRpYWdyYW0gZGF0YSB3aWxsIGJlIGxvc3QuXCIsXG4gICAgICAgIFwiYmVmb3JldW5sb2FkXCI6IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGNsb3NlIFNpbHZlckRlY2lzaW9ucz8gQWxsIHVuc2F2ZWQgZGlhZ3JhbSBkYXRhIHdpbGwgYmUgbG9zdC5cIlxuICAgIH0sXG4gICAgXCJlcnJvclwiOntcbiAgICAgICAgXCJqc29uUGFyc2VcIjogXCJFcnJvciBwYXJzaW5nIGZpbGUhXCIsXG4gICAgICAgIFwiZmlsZUFwaU5vdFN1cHBvcnRlZFwiOlwiVGhlIGZpbGUgQVBJIGlzbid0IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXIgeWV0LlwiLFxuICAgICAgICBcImlucHV0RmlsZXNQcm9wZXJ0eVwiOlwiWW91ciBicm93c2VyIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IHRoZSBgZmlsZXNgIHByb3BlcnR5IG9mIGZpbGUgaW5wdXRzLlwiLFxuICAgICAgICBcIm5vdFNpbHZlckRlY2lzaW9uc0ZpbGVcIjpcIk5vdCBhIFNpbHZlckRlY2lzaW9ucyBmaWxlIVwiLFxuICAgICAgICBcImluY29ycmVjdFZlcnNpb25Gb3JtYXRcIjogXCJJbmNvcnJlY3QgZm9ybWF0IG9mIHZlcnNpb24gc3RyaW5nIVwiLFxuICAgICAgICBcImZpbGVWZXJzaW9uTmV3ZXJUaGFuQXBwbGljYXRpb25WZXJzaW9uXCI6IFwiVmVyc2lvbiBpbiBmaWxlIGlzIG5ld2VyIHRoYW4gdmVyc2lvbiBvZiB0aGUgYXBwbGljYXRpb24uIFNvbWUgZmVhdHVyZXMgbWF5IGJlIG1pc3NpbmcuXCIsXG4gICAgICAgIFwib2JqZWN0aXZlQ29tcHV0YXRpb25GYWlsdXJlXCI6IFwiRXJyb3Igd2hpbGUgY29tcHV0aW5nIG9iamVjdGl2ZSFcIixcbiAgICAgICAgXCJkaWFncmFtRHJhd2luZ0ZhaWx1cmVcIjogXCJFcnJvciB3aGlsZSBkcmF3aW5nIGRpYWdyYW0hXCIsXG4gICAgICAgIFwibWFsZm9ybWVkRGF0YVwiOlwiRXJyb3IgcmVhZGluZyB0cmVlIGRhdGEhXCIsXG4gICAgICAgIFwicG5nRXhwb3J0Tm90U3VwcG9ydGVkXCI6IFwiRXhwb3J0IHRvIFBORyBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3Nlci5cIixcbiAgICAgICAgXCJwbmdFeHBvcnROb3RTdXBwb3J0ZWRJRVwiOiBcIkV4cG9ydCB0byBQTkcgbm90IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3Jlci5cIixcbiAgICAgICAgXCJzdmdFeHBvcnROb3RTdXBwb3J0ZWRcIjogXCJFeHBvcnQgdG8gU1ZHIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBicm93c2VyLlwiLFxuICAgICAgICBcInBkZkV4cG9ydE5vdFN1cHBvcnRlZFwiOiBcIkV4cG9ydCB0byBQREYgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGJyb3dzZXIuXCIsXG4gICAgICAgIFwiaW5jb3JyZWN0UGF5b2ZmTnVtYmVyRm9ybWF0T3B0aW9uc1wiOiBcIkluY29ycmVjdCBwYXlvZmYgbnVtYmVyIGZvcm1hdCBvcHRpb25zXCIsXG4gICAgICAgIFwiaW5jb3JyZWN0UHJvYmFiaWxpdHlOdW1iZXJGb3JtYXRPcHRpb25zXCI6IFwiSW5jb3JyZWN0IHByb2JhYmlsaXR5IG51bWJlciBmb3JtYXQgb3B0aW9uc1wiLFxuICAgICAgICBcImluY29ycmVjdE51bWJlckZvcm1hdE9wdGlvbnNcIjogXCJJbmNvcnJlY3QgbnVtYmVyIGZvcm1hdCBvcHRpb25zLCB1c2luZyBkZWZhdWx0LlwiLFxuICAgICAgICBcImpzUERGaXNOb3RJbmNsdWRlZFwiOiBcImpzUERGIGlzIG5vdCBpbmNsdWRlZCFcIixcbiAgICAgICAgXCJzZXJ2ZXJTaWRlRXhwb3J0UmVxdWVzdEZhaWx1cmVcIjogXCJFeHBvcnQgU2VydmVyIHJlcXVlc3QgZmFpbGVkIVwiXG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICAgIFwidG9vbGJhclwiOiB7XG4gICAgICAgIFwibmV3RGlhZ3JhbVwiOiBcIk5vdXZlYXUgZGlhZ3JhbW1lXCIsXG4gICAgICAgIFwib3BlbkRpYWdyYW1cIjogXCJPdXZyaXIgbGUgZGlhZ3JhbW1lIGV4aXN0YW50XCIsXG4gICAgICAgIFwic2F2ZURpYWdyYW1cIjogXCJFbnJlZ2lzdHJlciBsZSBkaWFncmFtbWUgYWN0dWVsXCIsXG4gICAgICAgIFwiZXhwb3J0XCI6e1xuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkV4cG9ydGVyIHZlcnNcIixcbiAgICAgICAgICAgIFwicG5nXCI6IFwiUG5nXCIsXG4gICAgICAgICAgICBcInN2Z1wiOiBcIlN2Z1wiLFxuICAgICAgICAgICAgXCJwZGZcIjogXCJQZGZcIlxuICAgICAgICB9LFxuICAgICAgICBcImxheW91dFwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJEaXNwb3NpdGlvblwiLFxuICAgICAgICAgICAgXCJtYW51YWxcIjogXCJNYW51ZWxcIixcbiAgICAgICAgICAgIFwidHJlZVwiOiBcIkFyYnJlXCIsXG4gICAgICAgICAgICBcImNsdXN0ZXJcIjogXCJHcmFwcGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInZpZXdNb2RlXCI6IHtcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJWdWVcIixcbiAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJjcml0ZXJpb24xXCI6XCJDcml0w6hyZSAxXCIsXG4gICAgICAgICAgICAgICAgXCJjcml0ZXJpb24yXCI6XCJDcml0w6hyZSAyXCIsXG4gICAgICAgICAgICAgICAgXCJ0d29Dcml0ZXJpYVwiOlwiRGV1eCBjcml0w6hyZXNcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm9iamVjdGl2ZVJ1bGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiUmVnbGVcIixcbiAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJleHBlY3RlZC12YWx1ZS1tYXhpbWl6YXRpb25cIjpcIm1heFwiLFxuICAgICAgICAgICAgICAgIFwiZXhwZWN0ZWQtdmFsdWUtbWluaW1pemF0aW9uXCI6XCJtaW5cIixcbiAgICAgICAgICAgICAgICBcIm1heGktbWluXCI6XCJtYXhpLW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWF4aS1tYXhcIjpcIm1heGktbWF4XCIsXG4gICAgICAgICAgICAgICAgXCJtaW5pLW1pblwiOlwibWluaS1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1pbmktbWF4XCI6XCJtaW5pLW1heFwiLFxuICAgICAgICAgICAgICAgIFwibWluLW1heFwiOlwibWluLW1heFwiLFxuICAgICAgICAgICAgICAgIFwibWF4LW1pblwiOlwibWF4LW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWluLW1pblwiOiBcIm1pbi1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1heC1tYXhcIjogXCJtYXgtbWF4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmRvXCI6IFwiQW5udWxlclwiLFxuICAgICAgICBcInJlZG9cIjogXCJSZWZhaXJlXCIsXG4gICAgICAgIFwic2V0dGluZ3NcIjogXCJQYXJhbWV0cmVzXCIsXG4gICAgICAgIFwiYWJvdXRcIjogXCJBIHByb3Bvc1wiLFxuICAgICAgICBcInNlbnNpdGl2aXR5QW5hbHlzaXNcIjogXCJBbmFseXNlIGRlIHNlbnNpYmlsaXTDqVwiLFxuICAgICAgICBcInJlY29tcHV0ZVwiOiBcIlJlY2FsY3VsZXJcIlxuICAgIH0sXG4gICAgXCJub2RlXCI6e1xuICAgICAgICBcIm5hbWVcIjogXCLDiXRpcXVldHRlXCJcbiAgICB9LFxuICAgIFwiZWRnZVwiOntcbiAgICAgICAgXCJuYW1lXCI6IFwiw4l0aXF1ZXR0ZVwiLFxuICAgICAgICBcInBheW9mZlwiOiBcIkF2YW50YWdlXCIsXG4gICAgICAgIFwicHJvYmFiaWxpdHlcIjogXCJQcm9iYWJpbGl0w6lcIlxuICAgIH0sXG4gICAgXCJ0ZXh0XCI6e1xuICAgICAgICBcInZhbHVlXCI6IFwiVGV4dGVcIlxuICAgIH0sXG4gICAgXCJsZWFndWVUYWJsZURpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkNsYXNzZW1lbnRcIixcbiAgICAgICAgXCJidXR0b25zXCI6IHtcbiAgICAgICAgICAgIFwiZG93bmxvYWRDc3ZcIjogXCJUw6lsw6ljaGFyZ2VyIENTVlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwibGVhZ3VlVGFibGVcIjoge1xuICAgICAgICBcImhlYWRlcnNcIjp7XG4gICAgICAgICAgICBcInBvbGljeU5vXCI6IFwiUsOoZ2xlICNcIixcbiAgICAgICAgICAgIFwicG9saWN5XCI6IFwiUsOoZ2xlXCIsXG4gICAgICAgICAgICBcImNvbW1lbnRcIjogXCJDb21tZW50YWlyZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29tbWVudFwiOntcbiAgICAgICAgICAgIFwiZG9taW5hdGVkQnlcIjogXCJEb21pbsOpIChwYXIgI3t7cG9saWN5fX0pXCIsXG4gICAgICAgICAgICBcImV4dGVuZGVkRG9taW5hdGVkQnlcIjogXCLDiXRlbmR1LWRvbWluw6kgKHBhciAje3twb2xpY3kxfX0gZXQgI3t7cG9saWN5Mn19KVwiLFxuICAgICAgICAgICAgXCJpbmNyYXRpb1wiOiBcIlJhdGlvIGluY3LDqW1lbnRhbD17e2luY3JhdGlvfX1cIlxuICAgICAgICB9LFxuICAgICAgICBcInBsb3RcIjp7XG4gICAgICAgICAgICBcImdyb3Vwc1wiOntcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkXCI6IFwiU3VybGlnbsOpXCIsXG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZC1kZWZhdWx0XCI6IFwiUmVjb21tYW5kw6llIChwb3VyIFdUUCBwYXIgZMOpZmF1dClcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkLWRvbWluYXRlZFwiIDogXCLDiXRlbmR1LWRvbWluw6lcIixcbiAgICAgICAgICAgICAgICBcImRvbWluYXRlZFwiOiBcIkRvbWluw6lcIixcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJBdXRyZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0b29sdGlwXCI6e1xuICAgICAgICAgICAgICAgIFwiZ3JhZGllbnRBcnJvdzFcIjogXCJMYSBkaXJlY3Rpb24gZGUge3tuYW1lfX0gb3B0aW1pc2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93MlwiOiBcIkxhIGRpcmVjdGlvbiBkZSB7e25hbWV9fSBvcHRpbWlzYXRpb25cIixcbiAgICAgICAgICAgICAgICBcImRvbWluYXRlZFJlZ2lvblwiOiBcIlLDqWdpb24gZG9taW7DqWVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibGVnZW5kXCI6e1xuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkUmVnaW9uXCI6IFwiTGEgcsOpZ2lvbiBncmlzZSBzdXJsaWduZSBsYSByw6lnaW9uIGRvbWluw6llXCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93c1wiOiBcIkxlcyBmbMOoY2hlcyBpbmRpcXVlbnQgdW5lIGRpcmVjdGlvbiBkJ2Ftw6lsaW9yYXRpb25cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJBbmFseXNlIGRlIHNlbnNpYmlsaXTDqVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJydW5Kb2JcIjogXCJFeMOpY3V0ZXJcIixcbiAgICAgICAgICAgIFwic3RvcEpvYlwiOiBcIkFycsOqdGVyXCIsXG4gICAgICAgICAgICBcInRlcm1pbmF0ZUpvYlwiOiBcIlRlcm1pbmVyXCIsXG4gICAgICAgICAgICBcInJlc3VtZUpvYlwiOiBcIlJlcHJlbmRyZVwiLFxuICAgICAgICAgICAgXCJkb3dubG9hZENzdlwiOiBcIlTDqWzDqWNoYXJnZXIgQ1NWXCIsXG4gICAgICAgICAgICBcImJhY2tcIjogXCJSZXRvdXJuZXJcIixcbiAgICAgICAgICAgIFwiY2xlYXJcIjogXCJFZmZhY2VyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJqb2JQYXJhbWV0ZXJzQnVpbGRlclwiOiB7XG4gICAgICAgIFwiYnV0dG9uc1wiOiB7XG4gICAgICAgICAgICBcInJlbW92ZVBhcmFtZXRlclZhbHVlXCI6IFwiRWZmYWNlclwiLFxuICAgICAgICAgICAgXCJhZGRQYXJhbWV0ZXJWYWx1ZVwiOiBcIkFqb3V0ZXJcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImpvYlJlc3VsdFRhYmxlXCI6e1xuICAgICAgICBcInRvb2x0aXBcIjoge1xuICAgICAgICAgICAgXCJtdWx0aXBsZVBvbGljaWVzSW5DZWxsXCI6IFwie3tudW1iZXJ9fSByw6hnbGVzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwaXZvdFwiOiB7XG4gICAgICAgICAgICBcImFnZ3JlZ2F0b3JzXCI6e1xuICAgICAgICAgICAgICAgIFwibWF4aW11bVwiOiBcIk1heGltdW1cIixcbiAgICAgICAgICAgICAgICBcIm1pbmltdW1cIjogXCJNaW5pbXVtXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInJlbmRlcmVyc1wiOntcbiAgICAgICAgICAgICAgICBcImhlYXRtYXBcIjogXCJDYXJ0ZSBkZSBjaGFsZXVyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwb2xpY3lQcmV2aWV3XCI6IFwiQXBlcsOndSBkZSBsYSByw6hnbGVcIlxuICAgIH0sXG4gICAgXCJqb2JcIjp7XG4gICAgICAgIFwic2Vuc2l0aXZpdHktYW5hbHlzaXNcIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJBbmFseXNlIGRlIHNlbnNpYmlsaXTDqSBtdWx0aXZhcmnDqWVcIixcbiAgICAgICAgICAgIFwicGFyYW1cIjp7XG4gICAgICAgICAgICAgICAgXCJydWxlTmFtZVwiOiBcIk5vbSBkZSBsYSByw6hnbGVcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRGVzY3JpcHRpb24gZMOpdGFpbGzDqWUgZGUgbGEgcsOoZ2xlXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlZhcmlhYmxlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIsOJdGlxdWV0dGVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1pblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWluXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtYXhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1heFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJMb25ndWV1clwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RlcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiw4l0YXBlXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgICAgICBcImNvbXB1dGF0aW9uc1wiOiBcIkVycmV1ciBkZSBjYWxjdWwgZCdhbmFseXNlIGRlIHNlbnNpYmlsaXTDqSBwb3VyIGxlcyBwYXJhbcOodHJlcyBzdWl2YW50czpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwid2FybmluZ3NcIjoge1xuICAgICAgICAgICAgICAgIFwibGFyZ2VTY2VuYXJpb3NOdW1iZXJcIjogXCJOb21icmUgZGUgc2PDqW5hcmlvcyBkw6lmaW5pcyBlc3QgcGx1cyBncmFuZCBxdWUge3tudW1iZXJGb3JtYXR0ZWR9fS4gQW5hbHlzZSBkZSBzZW5zaWJpbGl0w6kgcG91dmFpdCBuZSBwYXMgY2FsY3VsZXIgb3Ugw6p0cmUgdHLDqHMgbGVudGUuXCIsXG4gICAgICAgICAgICAgICAgXCJsYXJnZVBhcmFtZXRlcnNOdW1iZXJcIjogXCJOb21icmUgZGUgcGFyYW3DqHRyZXMgZXN0IHBsdXMgZ3JhbmQgcXVlIHt7bnVtYmVyfX0uIEFmZmljaGFnZSBkZSBsJ2FuYWx5c2UgZGUgc2Vuc2liaWxpdMOpIHBvdXZhaXQgw6ljaG91ZXIgb3Ugw6p0cmUgdHLDqHMgbGVudGUuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3JuYWRvLWRpYWdyYW1cIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJHcmFwaGlxdWUgZW4gdG9ybmFkZVwiLFxuICAgICAgICAgICAgXCJwYXJhbVwiOntcbiAgICAgICAgICAgICAgICBcInJ1bGVOYW1lXCI6IFwiTm9tIGRlIGxhIHLDqGdsZVwiLFxuICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWRQb2xpY3lEZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEZXNjcmlwdGlvbiBkw6l0YWlsbMOpZSBkZSBsYSByw6hnbGVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFibGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiw4l0aXF1ZXR0ZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibWluXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNaW5cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1heFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWF4XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJsZW5ndGhcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkxvbmd1ZXVyXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCLDiXRhcGVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFsZXVyIHBhciBkw6lmYXV0XCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgICAgICBcImNvbXB1dGF0aW9uc1wiOiBcIkVycmV1ciBkZSBjYWxjdWwgZCdhbmFseXNlIGRlIHNlbnNpYmlsaXTDqSBwb3VyIGxlcyBwYXJhbcOodHJlcyBzdWl2YW50czpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwid2FybmluZ3NcIjoge1xuICAgICAgICAgICAgICAgIFwibGFyZ2VTY2VuYXJpb3NOdW1iZXJcIjogXCJOb21icmUgZGUgc2PDqW5hcmlvcyBkw6lmaW5pcyBlc3QgcGx1cyBncmFuZCBxdWUge3tudW1iZXJGb3JtYXR0ZWR9fS4gQW5hbHlzZSBkZSBzZW5zaWJpbGl0w6kgcG91dmFpdCBuZSBwYXMgY2FsY3VsZXIgb3Ugw6p0cmUgdHLDqHMgbGVudGUuXCIsXG4gICAgICAgICAgICAgICAgXCJsYXJnZVBhcmFtZXRlcnNOdW1iZXJcIjogXCJOb21icmUgZGUgcGFyYW3DqHRyZXMgZXN0IHBsdXMgZ3JhbmQgcXVlIHt7bnVtYmVyfX0uIEFmZmljaGFnZSBkZSBsJ2FuYWx5c2UgZGUgc2Vuc2liaWxpdMOpIHBvdXZhaXQgw6ljaG91ZXIgb3Ugw6p0cmUgdHLDqHMgbGVudGUuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBsb3RcIjp7XG4gICAgICAgICAgICAgICAgXCJsZWdlbmRcIjp7XG4gICAgICAgICAgICAgICAgICAgIFwibG93XCI6IFwiRGltaW51ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJoaWdoXCI6IFwiQXVnbWVudGVyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwieEF4aXNUaXRsZVwiOiBcIkF2YW50YWdlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9iYWJpbGlzdGljLXNlbnNpdGl2aXR5LWFuYWx5c2lzXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiQW5hbHlzZSBkZSBzZW5zaWJpbGl0w6kgcHJvYmFiaWxpc3RlXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJOb20gZGUgbGEgcsOoZ2xlXCIsXG4gICAgICAgICAgICAgICAgXCJudW1iZXJPZlJ1bnNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTm9tYnJlIGQnZXNzYWlzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWRQb2xpY3lEZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEZXNjcmlwdGlvbiBkw6l0YWlsbMOpZSBkZSBsYSByw6hnbGVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFibGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiw4l0aXF1ZXR0ZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRm9ybXVsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoZWxwXCI6IFwiU8OpbGVjdGlvbm5lciBsZSBtb2TDqGxlIGRlIGxhIGZvcm11bGUgZGFucyBsZSBtZW51IG91IMOpY3JpcmUgdW4gY29kZSBwZXJzb25uYWxpc8OpLlwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJFcnJldXIgZGUgY2FsY3VsIGQnYW5hbHlzZSBkZSBzZW5zaWJpbGl0w6kgcG91ciBsZXMgcGFyYW3DqHRyZXMgc3VpdmFudHM6XCIsXG4gICAgICAgICAgICAgICAgXCJwYXJhbS1jb21wdXRhdGlvblwiOiBcIkVycmV1ciBkZSBjYWxjdWwgZGVzIHZhbGV1cnMgZGUgcGFyYW3DqHRyZXM6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTm9tYnJlIGRlIHNjw6luYXJpb3MgZMOpZmluaXMgZXN0IHBsdXMgZ3JhbmQgcXVlIHt7bnVtYmVyRm9ybWF0dGVkfX0uIEFuYWx5c2UgZGUgc2Vuc2liaWxpdMOpIHBvdXZhaXQgbmUgcGFzIGNhbGN1bGVyIG91IMOqdHJlIHRyw6hzIGxlbnRlLlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3BpZGVyLXBsb3RcIjoge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiR3JhcGhpcXVlIGVuIHJhZGFyXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6IHtcbiAgICAgICAgICAgICAgICBcInJ1bGVOYW1lXCI6IFwiTm9tIGRlIGxhIHLDqGdsZVwiLFxuICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWRQb2xpY3lEZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJEZXNjcmlwdGlvbiBkw6l0YWlsbMOpZSBkZSBsYSByw6hnbGVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJwZXJjZW50YWdlQ2hhbmdlUmFuZ2VcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiKy8tIGNoYW5nZW1lbnQgZGUgcG91cmNlbnRhZ2Ugw6AgY29uc2lkw6lyZXJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJsZW5ndGhcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTm9tYnJlIGRlIHZhbGV1cnMgw6AgdGVzdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaGVscFwiOiBcIk5vbWJyZSBkZSB2YWxldXJzIMOgIHRlc3RlciAoZGFucyB1bmUgcGFydGllIGRlIGdhbW1lKVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYXJpYWJsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOb21cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFsZXVyIHBhciBkw6lmYXV0XCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVycm9yc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJFcnJldXIgZGUgY2FsY3VsIGQnYW5hbHlzZSBkZSBzZW5zaWJpbGl0w6kgcG91ciBsZXMgcGFyYW3DqHRyZXMgc3VpdmFudHM6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTm9tYnJlIGRlIHNjw6luYXJpb3MgZMOpZmluaXMgZXN0IHBsdXMgZ3JhbmQgcXVlIHt7bnVtYmVyRm9ybWF0dGVkfX0uIEFuYWx5c2UgZGUgc2Vuc2liaWxpdMOpIHBvdXZhaXQgbmUgcGFzIGNhbGN1bGVyIG91IMOqdHJlIHRyw6hzIGxlbnRlLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwbG90XCI6IHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcInhBeGlzVGl0bGVcIjogXCJDaGFuZ2VtZW50IGRlIHBvdXJjZW50YWdlXCIsXG4gICAgICAgICAgICAgICAgXCJ5QXhpc1RpdGxlXCI6IFwiQXZhbnRhZ2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImxlYWd1ZS10YWJsZVwiOntcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkNsYXNzZW1lbnRcIlxuICAgICAgICB9LFxuICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgIFwiZ2VuZXJpY1wiOiBcIkVycmV1ciBkZSBjYWxjdWwgZCdhbmFseXNlIGRlIHNlbnNpYmlsaXTDqToge3ttZXNzYWdlfX1cIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFwiUGFyYW3DqHRyZXMgZHUge3tqb2JOYW1lfX0gc29udCBpbmNvcnJlY3RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInNldHRpbmdzRGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiUGFyYW1ldHJlc1wiLFxuICAgICAgICBcImdlbmVyYWxcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiR8OpbsOpcmFsXCIsXG4gICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiVGFpbGxlIGRlIGxhIHBvbGljZVwiLFxuICAgICAgICAgICAgXCJmb250RmFtaWx5XCI6IFwiRmFtaWxsZSBkZSBwb2xpY2VcIixcbiAgICAgICAgICAgIFwiZm9udFdlaWdodFwiOiBcIlBvaWQgZGUgbGEgcG9saWNlXCIsXG4gICAgICAgICAgICBcImZvbnRTdHlsZVwiOiBcIlN0eWxlIGRlIHBvbGljZVwiLFxuICAgICAgICAgICAgXCJudW1iZXJGb3JtYXRMb2NhbGVcIjogXCJmb3JtYXQgbG9jYWwgZGUgbnVtw6lyb3RhdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF5b2ZmMVwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJGb3JtYXQgZGUgbGEgbnVtw6lyb3RhdGlvbiBkZXMgYXZhbnRhZ2VzIDFcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lcIjogXCJEZXZpc2VcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lEaXNwbGF5XCI6IFwiQWZmaWNoYWdlIGRlIGxhIGRldmlzZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIlN0eWxlXCIsXG4gICAgICAgICAgICBcIm1pbmltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk5vbWJyZSBtaW5pbXVtIGRlIGZyYWN0aW9uc1wiLFxuICAgICAgICAgICAgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJOb21icmUgbWF4aW11bSBkZSBmcmFjdGlvbnNcIixcbiAgICAgICAgICAgIFwidXNlR3JvdXBpbmdcIjogXCJVdGlsaXNlciBkZXMgc8OpcGFyYXRldXJzIGRlIHJlZ3JvdXBlbWVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF5b2ZmMlwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJGb3JtYXQgZGUgbGEgbnVtw6lyb3RhdGlvbiBkZXMgYXZhbnRhZ2VzIDJcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lcIjogXCJEZXZpc2VcIixcbiAgICAgICAgICAgIFwiY3VycmVuY3lEaXNwbGF5XCI6IFwiQWZmaWNoYWdlIGRlIGxhIGRldmlzZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIlN0eWxlXCIsXG4gICAgICAgICAgICBcIm1pbmltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk5vbWJyZSBtaW5pbXVtIGRlIGZyYWN0aW9uc1wiLFxuICAgICAgICAgICAgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJOb21icmUgbWF4aW11bSBkZSBmcmFjdGlvbnNcIixcbiAgICAgICAgICAgIFwidXNlR3JvdXBpbmdcIjogXCJVdGlsaXNlciBkZXMgc8OpcGFyYXRldXJzIGRlIHJlZ3JvdXBlbWVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvYmFiaWxpdHlcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiRm9ybWF0IGRlIGxhIG51bcOpcm90YXRpbyBkZXMgcHJvYmFiaWxpdMOpc1wiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIlN0eWxlXCIsXG4gICAgICAgICAgICBcIm1pbmltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk5vbWJyZSBtaW5pbXVtIGRlIGZyYWN0aW9uc1wiLFxuICAgICAgICAgICAgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJOb21icmUgbWF4aW11bSBkZSBmcmFjdGlvbnNcIixcbiAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJUYWlsbGUgZGUgcG9saWNlXCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiQ291bGV1clwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJOb3VkXCIsXG4gICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiTGFyZ2V1ciBkZSB0cmFpdFwiLFxuICAgICAgICAgICAgXCJvcHRpbWFsXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJPcHRpbWFsXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJDb3VsZXVyXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VXaWR0aFwiOiBcIkxhcmdldXIgZGUgdHJhaXRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibGFiZWxcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLDiXRpcXVldHRlXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlRhaWxsZSBkZSBsYSBwb2xpY2UgZGUgbCfDqXRpcXVldHRlXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkNvdWxldXIgZGUgbCfDqXRpcXVldHRlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkF2YW50YWdlXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlRhaWxsZSBkZSBsYSBwb2xpY2VcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ291bGV1clwiLFxuICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIk7DqWdhdGlmIGNvdWxldXJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVjaXNpb25cIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJOb2V1ZCBkw6ljaXNpb25uZWxcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJMYSBjb3VsZXVyIGRlIHJlbXBsaXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJDb3VsZXVyIGRlIHRyYWl0XCIsXG4gICAgICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIkNvdWxldXIgZGUgcmVtcGxpc3NhZ2Ugc8OpbGVjdGlvbm7DqWVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNoYW5jZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5vdWQgYWzDqWF0b2lyZVwiLFxuICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIkxhIGNvdWxldXIgZGUgcmVtcGxpc3NhZ2VcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIkNvdWxldXIgZGUgY291cnNlXCIsXG4gICAgICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIkNvdWxldXIgZGUgcmVtcGxpc3NhZ2Ugc8OpbGVjdGlvbm7DqVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidGVybWluYWxcIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5vZXVkIHRlcm1pbmFsXCIsXG4gICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiQ291bGV1ciBkZSByZW1wbGlzc2FnZVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ291bGV1ciBkZSBjb3Vyc2VcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiQ291bGV1ciBkZSByZW1wbGlzc2FnZSBzw6lsZWN0aW9ubsOpXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkF2YW50YWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJUYWlsbGUgZGUgbGEgcG9saWNlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb3VsZXVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIk7DqWdhdGlmIGNvdWxldXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJlZGdlXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkJvcmRcIixcbiAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ291bGV1clwiLFxuICAgICAgICAgICAgXCJzdHJva2VXaWR0aFwiOiBcIkxhcmdldXIgZGUgdHJhaXRcIixcbiAgICAgICAgICAgIFwib3B0aW1hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiT3B0aW1hbFwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ291bGV1clwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJMYXJnZXVyIGRlIHRyYWl0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJDaG9pc2lcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIkNvdWxldXJcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiTGFyZ2V1ciBkZSB0cmFpdFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsYWJlbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIsOJdGlxdWV0dGVcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiVGFpbGxlIGRlIGxhIHBvbGljZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb3VsZXVyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQXZhbnRhZ2VcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiVGFpbGxlIGRlIGxhIHBvbGljZVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb3VsZXVyXCIsXG4gICAgICAgICAgICAgICAgXCJuZWdhdGl2ZUNvbG9yXCI6IFwiTsOpZ2F0aWYgY291bGV1clwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZGlhZ3JhbVRpdGxlXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlRpdHJlIGR1IGRpYWdyYW1tZVwiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlRhaWxsZSBkZSBsYSBwb2xpY2VcIixcbiAgICAgICAgICAgIFwiZm9udFdlaWdodFwiOiBcIlBvaWRzIGRlIGxhIHBvbGljZVwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTdHlsZSBkZSBsYSBwb2xpY2VcIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb3VsZXVyXCIsXG4gICAgICAgICAgICBcIm1hcmdpblwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTWFyZ2VcIixcbiAgICAgICAgICAgICAgICBcInRvcFwiOiBcIkhhdXQgZHUgZGlhZ3JhbW1lXCIsXG4gICAgICAgICAgICAgICAgXCJib3R0b21cIjogXCJCYXMgZHUgZGlhZ3JhbW1lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJTb3VzLXRpdHJlIChkZXNjcmlwdGlvbiBkdSBkaWFncmFtbWUpXCIsXG4gICAgICAgICAgICAgICAgXCJzaG93XCI6IFwiQWZmaWNoZXJcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiVGFpbGxlIGRlIGxhIHBvbGljZVwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFdlaWdodFwiOiBcIlBvaWRzIGRlIGxhIHBvbGljZVwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFN0eWxlXCI6IFwiU3R5bGUgZGUgcG9saWNlXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkNvdWxldXJcIixcbiAgICAgICAgICAgICAgICBcIm1hcmdpblRvcFwiOiBcIkhhdXQgZHUgbWFyZ2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImxlYWd1ZVRhYmxlXCI6IHtcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJDbGFzc2VtZW50XCIsXG4gICAgICAgICAgICBcInBsb3RcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJMZSBncmFwaGVcIixcbiAgICAgICAgICAgICAgICBcIm1heFdpZHRoXCI6IFwiTGFyZ2V1ciBtYXhpbWFsZVwiLFxuICAgICAgICAgICAgICAgIFwiaGlnaGxpZ2h0ZWRDb2xvclwiOiBcIkNvdWxldXIgZGUgbGEgcsOoZ2xlIHNvdWxpZ27DqWVcIixcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkRGVmYXVsdENvbG9yXCI6IFwiQ291bGV1ciByZWNvbW1hbmTDqWUgcG91ciBsYSByw6hnbGUgKHBvdXIgV1RQIHBhciBkw6lmYXV0KVwiLFxuICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWREb21pbmF0ZWRDb2xvclwiOiBcIkNvdWxldXIgZGUgbGEgcsOoZ2xlIMOpdGVuZHUtZG9taW7DqWVcIixcbiAgICAgICAgICAgICAgICBcImRvbWluYXRlZENvbG9yXCI6IFwiQ291bGV1ciBkZSBsYSByw6hnbGUgZG9taW7DqWVcIixcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRDb2xvclwiOiBcIkNvdWxldXIgZGVzIGF1dHJlcyByw6hnbGVzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJvdGhlclwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJBdXRyZVwiLFxuICAgICAgICAgICAgXCJkaXNhYmxlQW5pbWF0aW9uc1wiOiBcIkTDqXNhY3RpdmVyIGxlcyBhbmltYXRpb25zXCIsXG4gICAgICAgICAgICBcImZvcmNlRnVsbEVkZ2VSZWRyYXdcIjogXCJGb3JjZXIgbGUgcmVkZXNzaW5hZ2UgY29tcGxldCBkZXMgYm9yZHNcIixcbiAgICAgICAgICAgIFwiaGlkZUxhYmVsc1wiOiBcIk1hc3F1ZXIgbGVzIMOpdGlxdWV0dGVzXCIsXG4gICAgICAgICAgICBcImhpZGVQYXlvZmZzXCI6IFwiTWFzcXVlciBsZXMgcGFpZW1lbnRzXCIsXG4gICAgICAgICAgICBcImhpZGVQcm9iYWJpbGl0aWVzXCI6IFwiTWFzcXVlciBsZXMgcHJvYmFiaWxpdMOpc1wiLFxuICAgICAgICAgICAgXCJyYXdcIjogXCJCcnV0XCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJhYm91dERpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkEgcHJvcG9zXCJcbiAgICB9LFxuICAgIFwiaGVscFwiOntcbiAgICAgICAgXCJoZWFkZXJcIjogXCJBaWRlXCIsXG4gICAgICAgIFwibW91c2VcIjoge1xuICAgICAgICAgICAgXCJoZWFkZXJcIjpcIkFjdGlvbnMgZGUgbGEgc291cmlzOlwiLFxuICAgICAgICAgICAgXCJsaXN0XCI6e1xuICAgICAgICAgICAgICAgIFwiMVwiOiBcIkJvdXRvbiBnYXVjaGUgZGUgbGEgc291cmlzOiBzw6lsZWN0aW9uIGR1IG5vdWQvYm9yZFwiLFxuICAgICAgICAgICAgICAgIFwiMlwiOiBcIkJvdXRvbiBkcm9pdCBkZSBsYSBzb3VyaXM6IG1lbnUgY29udGV4dHVlbCAoYWpvdXQvbWFuaXB1bGF0aW9uIGRlcyBub3VkcylcIixcbiAgICAgICAgICAgICAgICBcIjNcIjogXCJEb3VibGUgY2xpYyBnYXVjaGUgZGUgbGEgc291cmlzOiBtZW51IGNvbnRleHR1ZWxcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtleWJvYXJkXCI6IHtcbiAgICAgICAgICAgIFwiaGVhZGVyXCI6XCJSYWNjb3VyY2lzIGNsYXZpZXI6XCIsXG4gICAgICAgICAgICBcImxpc3RcIjp7XG4gICAgICAgICAgICAgICAgXCIxXCI6IFwiRGVsOiBlZmZhY2VyIGxlcyBub3VkcyBzw6lsZWN0aW9ubsOpc1wiLFxuICAgICAgICAgICAgICAgIFwiMlwiOiBcIkN0cmwtQy9YOiBjb3BpZXIvY291cGVyIGxlcyBub3VkcyBzw6lsZWN0aW9ubsOpc1wiLFxuICAgICAgICAgICAgICAgIFwiM1wiOiBcIkN0cmwtVjogY29sbGVyIGxlcyBub3VkcyBjb3Bpw6lzIGNvbW1lIHVuIHNvdXMtYXJicmUgZCd1biBub3VkIHPDqWxlY3Rpb25uw6lcIixcbiAgICAgICAgICAgICAgICBcIjRcIjogXCJDdHJsLVkvWjogYW5udWxlci9yZWZhaXJlXCIsXG4gICAgICAgICAgICAgICAgXCI1XCI6IFwiQ3RybC1BbHQtRC9DL1Q6IGFqb3V0ZXIgdW4gbm91dmVhdSBzb3VzLW5vdWQgZGUgZMOpY2lzaW9uL2Fsw6lhdG9pcmUvdGVybWluYWwgZCd1biA8c3Ryb25nPm5vdWQgc8OpbGVjdGlvbm7DqTwvc3Ryb25nPlwiLFxuICAgICAgICAgICAgICAgIFwiNlwiOiBcIkN0cmwtQWx0LUQvQzogaW5qZWN0ZXIgdW4gbm91dmVhdSBub2V1ZCBkZSBkw6ljaXNpb24vYWzDqWF0b2lyZSBkYW5zIHVuIDxzdHJvbmc+Ym9yZCBzw6lsZWN0aW9ubsOpPC9zdHJvbmc+XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb2NzXCI6IFwiTGEgZG9jdW1lbnRhdGlvbiBkZSBTaWx2ZXJEZWNpc2lvbnMgZXN0IGRpc3BvbmlibGUgIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9TaWx2ZXJEZWNpc2lvbnMvU2lsdmVyRGVjaXNpb25zL3dpa2kvRG9jdW1lbnRhdGlvblxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmljaTwvYT5cIlxuICAgIH0sXG4gICAgXCJkZWZpbml0aW9uc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkTDqWZpbml0aW9ucyBkZXMgdmFyaWFibGVzXCIsXG4gICAgICAgIFwic2NvcGVcIjoge1xuICAgICAgICAgICAgXCJnbG9iYWxcIjogXCJwb3J0w6llIG1vbmRpYWxlXCIsXG4gICAgICAgICAgICBcIm5vZGVcIjogXCJsYSBwb3J0w6llIGRlcyBuxZN1ZCBldCBzb3VzLWFyYm9yZXNjZW5jZSBzw6lsZWN0aW9ubsOpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJidXR0b25zXCI6e1xuICAgICAgICAgICAgXCJyZWNhbGN1bGF0ZVwiOiBcIlJlY2FsY3VsZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIlZhcmlhYmxlcyDDqXZhbHXDqWVzXCJcbiAgICB9LFxuICAgIFwic2lkZWJhckRlZmluaXRpb25zXCI6e1xuICAgICAgICBcInNjb3BlXCI6e1xuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlBvcnTDqWUgZGUgbGEgdmFyaWFibGU6XCIsXG4gICAgICAgICAgICBcImdsb2JhbFwiOiBcIm1vbmRpYWxcIixcbiAgICAgICAgICAgIFwibm9kZVwiOiBcIm7Fk3VkIGV0IHNvdXMtYXJib3Jlc2NlbmNlIHPDqWxlY3Rpb25uw6lcIlxuICAgICAgICB9LFxuICAgICAgICBcImhlYWRlclwiOiBcIlZhcmlhYmxlc1wiLFxuICAgICAgICBcImNvZGVcIjogXCJDb2RlXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOntcbiAgICAgICAgICAgIFwib3BlbkRpYWxvZ1wiIDogXCJPdXZyaXIgbGEgYm/DrnRlIGRlIGRpYWxvZ3VlXCIsXG4gICAgICAgICAgICBcInJlY2FsY3VsYXRlXCI6IFwiUmVjYWxjdWxlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXZhbHVhdGVkVmFyaWFibGVzXCI6IFwiVmFyaWFibGVzIMOpdmFsdcOpZXNcIlxuICAgIH0sXG4gICAgXCJtdWx0aXBsZUNyaXRlcmlhXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIkNyaXTDqHJlcyBtdWx0aXBsZXNcIixcbiAgICAgICAgXCJkZWZhdWx0TWF4aW1pemVkQ3JpdGVyaW9uTmFtZVwiOiBcIkVmZmV0XCIsXG4gICAgICAgIFwiZGVmYXVsdE1pbmltaXplZENyaXRlcmlvbk5hbWVcIjogXCJDb8O7dFwiLFxuICAgICAgICBcIm5hbWVPZkNyaXRlcmlvbjFcIjogXCJMZSBub21lIGRlIGNyaXTDqHJlIDFcIixcbiAgICAgICAgXCJuYW1lT2ZDcml0ZXJpb24yXCI6IFwiTGUgbm9tZSBkZSBjcml0w6hyZSAyXCIsXG4gICAgICAgIFwiZGVmYXVsdENyaXRlcmlvbjFXZWlnaHRcIjogXCJQYXIgZMOpZmF1dCBwb2lkIGR1IDFlciBjcml0w6hyZVwiLFxuICAgICAgICBcIndlaWdodExvd2VyQm91bmRcIjogXCJQb2lkIGRlIGxhIGxpbWl0ZSBpbmbDqXJpZXVyZVwiLFxuICAgICAgICBcIndlaWdodFVwcGVyQm91bmRcIjogXCJQb2lkIGRlIGxhIGxpbWl0ZSBzdXDDqXJpZXVyZVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjp7XG4gICAgICAgICAgICBcInNob3dMZWFndWVUYWJsZVwiIDogXCJNb250cmVyIGNsYXNzZW1lbnRcIixcbiAgICAgICAgICAgIFwiZmxpcFwiOiBcIkJhc2N1bGVyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJsYXlvdXRPcHRpb25zXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIkRpc3Bvc2l0aW9uXCIsXG4gICAgICAgIFwibWFyZ2luSG9yaXpvbnRhbFwiOiBcIk1hcmdlIGhvcml6b250YWxlXCIsXG4gICAgICAgIFwibWFyZ2luVmVydGljYWxcIjogXCJNYXJnZSB2ZXJ0aWNhbGVcIixcbiAgICAgICAgXCJub2RlU2l6ZVwiOiBcIlRhaWxsZSBkdSBub2V1ZFwiLFxuICAgICAgICBcImVkZ2VTbGFudFdpZHRoTWF4XCI6IFwiSW5jbGluYWlzb24gZHUgYm9yZCAobWF4LilcIixcbiAgICAgICAgXCJncmlkV2lkdGhcIjogXCJMYXJnZXVyXCIsXG4gICAgICAgIFwiZ3JpZEhlaWdodFwiOiBcIlRhaWxsZVwiXG4gICAgfSxcbiAgICBcImRpYWdyYW1EZXRhaWxzXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIkTDqXRhaWxzXCIsXG4gICAgICAgIFwidGl0bGVcIiA6IFwiVGl0cmVcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiIDogXCJEZXNjcmlwdGlvblwiXG4gICAgfSxcbiAgICBcIm9iamVjdFByb3BlcnRpZXNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6e1xuICAgICAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgICAgIFwiZGVjaXNpb25cIjpcIk5vZXVkIGRlIGTDqWNpc2lvblwiLFxuICAgICAgICAgICAgICAgIFwiY2hhbmNlXCI6XCJOb3VkIGFsw6lhdG9pcmVcIixcbiAgICAgICAgICAgICAgICBcInRlcm1pbmFsXCI6XCJOb2V1ZCB0ZXJtaW5hbFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlZGdlXCI6IFwiQm9yZFwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiVGV4dGUgZmxvdHRhbnRcIlxuICAgICAgICB9LFxuICAgICAgICBcImNoaWxkcmVuUHJvcGVydGllc1wiOntcbiAgICAgICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgICAgICBcImhlYWRlclwiOiBcIkxlcyBjb25uZXhpb25zXCIsXG4gICAgICAgICAgICAgICAgXCJjaGlsZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiaGVhZGVyXCI6IFwiQm9yZCAje3tudW1iZXJ9fVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImNvbmZpcm1cIjp7XG4gICAgICAgIFwibmV3RGlhZ3JhbVwiOiBcIlZvdWxlei12b3VzIHZyYWltZW50IGVmZmFjZXIgbGUgZGlhZ3JhbW1lIGFjdHVlbD8gVG91dGVzIGxlcyBkb25uw6llcyBub24gZW5yZWdpc3Ryw6llcyBzZXJvbnQgcGVyZHVlcy5cIixcbiAgICAgICAgXCJvcGVuRGlhZ3JhbVwiOiBcIkV0ZXMtdm91cyBzdXI/IFRvdXRlcyBsZXMgZG9ubsOpZXMgZGUgZGlhZ3JhbW1lIG5vbiBlbnJlZ2lzdHLDqWVzIHNlcm9udCBwZXJkdWVzLlwiLFxuICAgICAgICBcImJlZm9yZXVubG9hZFwiOiBcIlZvdWxlei12b3VzIHZyYWltZW50IGZlcm1lciBTaWx2ZXJEZWNpc2lvbnM/IFRvdXRlcyBsZXMgZG9ubsOpZXMgZGUgZGlhZ3JhbW1lIG5vbiBlbnJlZ2lzdHLDqWVzIHNlcm9udCBwZXJkdWVzLlwiXG4gICAgfSxcbiAgICBcImVycm9yXCI6e1xuICAgICAgICBcImpzb25QYXJzZVwiOiBcIkVycmV1ciBsb3JzIGRlIGwnYW5hbHlzZSBkdSBmaWNoaWVyIVwiLFxuICAgICAgICBcImZpbGVBcGlOb3RTdXBwb3J0ZWRcIjpcIkwnQVBJIGR1IGZpY2hpZXIgbidlc3QgcGFzIGVuY29yZSBwcmlzZSBlbiBjaGFyZ2Ugc3VyIGNlIG5hdmlnYXRldXIuXCIsXG4gICAgICAgIFwiaW5wdXRGaWxlc1Byb3BlcnR5XCI6XCJWb3RyZSBuYXZpZ2F0ZXVyIG5lIHNlbWJsZSBwYXMgcHJlbmRyZSBlbiBjaGFyZ2UgbGEgcHJvcHJpw6l0w6kgYGZpY2hpZXJzYC5cIixcbiAgICAgICAgXCJub3RTaWx2ZXJEZWNpc2lvbnNGaWxlXCI6XCJQYXMgZGUgZmljaGllcnMgU2lsdmVyRGVjaXNpb25zIVwiLFxuICAgICAgICBcImluY29ycmVjdFZlcnNpb25Gb3JtYXRcIjogXCJGb3JtYXQgaW5jb3JyZWN0IGRlIGxhIGNoYcOubmUgZGUgdmVyc2lvbiFcIixcbiAgICAgICAgXCJmaWxlVmVyc2lvbk5ld2VyVGhhbkFwcGxpY2F0aW9uVmVyc2lvblwiOiBcIkxhIHZlcnNpb24gZGFucyBsZSBmaWNoaWVyIGVzdCBwbHVzIHLDqWNlbnRlIHF1ZSBsYSB2ZXJzaW9uIGRlIGwnYXBwbGljYXRpb24uIENlcnRhaW5lcyBmb25jdGlvbm5hbGl0w6lzIHBldXZlbnQgw6p0cmUgbWFucXVhbnRlcy5cIixcbiAgICAgICAgXCJvYmplY3RpdmVDb21wdXRhdGlvbkZhaWx1cmVcIjogXCJFcnJldXIgZW4gY2FsY3VsYW50IGwnb2JqZWN0aWYhXCIsXG4gICAgICAgIFwiZGlhZ3JhbURyYXdpbmdGYWlsdXJlXCI6IFwiRXJyZXVyIGxvcnMgZHUgZGVzc2luIGRpYWdyYW1tZSFcIixcbiAgICAgICAgXCJtYWxmb3JtZWREYXRhXCI6XCJFcnJldXIgbG9ycyBkZSBsYSBsZWN0dXJlIGRlcyBkb25uw6llcyBhcmJvcmVzY2VudGVzIVwiLFxuICAgICAgICBcInBuZ0V4cG9ydE5vdFN1cHBvcnRlZFwiOiBcIkwnZXhwb3J0YXRpb24gdmVycyBQTkcgbidlc3QgcGFzIHByaXNlIGVuIGNoYXJnZSBkYW5zIHZvdHJlIG5hdmlnYXRldXIuXCIsXG4gICAgICAgIFwicG5nRXhwb3J0Tm90U3VwcG9ydGVkSUVcIjogXCJFeHBvcnRlciB2ZXJzIFBORyBuJ2VzdCBwYXMgcHJpcyBlbiBjaGFyZ2UgZGFucyBJbnRlcm5ldCBFeHBsb3Jlci5cIixcbiAgICAgICAgXCJzdmdFeHBvcnROb3RTdXBwb3J0ZWRcIjogXCJMJ2V4cG9ydGF0aW9uIHZlcnMgU1ZHIG4nZXN0IHBhcyBwcmlzZSBlbiBjaGFyZ2UgcGFyIHZvdHJlIG5hdmlnYXRldXIuXCIsXG4gICAgICAgIFwicGRmRXhwb3J0Tm90U3VwcG9ydGVkXCI6IFwiTCdleHBvcnRhdGlvbiBhdSBmb3JtYXQgUERGIG4nZXN0IHBhcyBwcmlzZSBlbiBjaGFyZ2UgcGFyIHZvdHJlIG5hdmlnYXRldXIuXCIsXG4gICAgICAgIFwiaW5jb3JyZWN0UGF5b2ZmTnVtYmVyRm9ybWF0T3B0aW9uc1wiOiBcIkwnb3B0aW9uIGRlIGZvcm1hdCBkZSBudW3DqXJvdGF0aW9uIGRlcyBhdmFudGFnZXMgY2hpb3NpZSBlc3QgaW5jb3JyZWN0ZS5cIixcbiAgICAgICAgXCJpbmNvcnJlY3RQcm9iYWJpbGl0eU51bWJlckZvcm1hdE9wdGlvbnNcIjogXCJMJ29wdGlvbiBkZSBmb3JtYXQgZGUgbnVtw6lyb3RhdGlvbiBkZXMgcHJvYmFiaWxpdMOpcyBjaGlvc2llIGVzdCBpbmNvcnJlY3RlLlwiLFxuICAgICAgICBcImluY29ycmVjdE51bWJlckZvcm1hdE9wdGlvbnNcIjogXCJMJ29wdGlvbiBkZSBmb3JtYXQgZGUgbnVtw6lyb3RhdGlvbiBjaG9pc2llIGVzdCBpbmNvcnJlY3RlLlwiLFxuICAgICAgICBcImpzUERGaXNOb3RJbmNsdWRlZFwiOiBcIkpzUERGIG4nZXN0IHBhcyBpbmNsdXMhXCIsXG4gICAgICAgIFwic2VydmVyU2lkZUV4cG9ydFJlcXVlc3RGYWlsdXJlXCI6IFwiTGEgZGVtYW5kZSBkZSB0w6lsw6ljaGFyZ2VtZW50IGF1IHNlcnZldXIgYSDDqWNob3XDqSFcIlxuICAgIH1cbn1cbiIsImltcG9ydCBpMThuZXh0IGZyb20gJ2kxOG5leHQnO1xuaW1wb3J0ICogYXMgZW4gZnJvbSAnLi9lbi5qc29uJ1xuaW1wb3J0ICogYXMgcGwgZnJvbSAnLi9wbC5qc29uJ1xuaW1wb3J0ICogYXMgaXQgZnJvbSAnLi9pdC5qc29uJ1xuaW1wb3J0ICogYXMgZGUgZnJvbSAnLi9kZS5qc29uJ1xuaW1wb3J0ICogYXMgZnIgZnJvbSAnLi9mci5qc29uJ1xuXG5leHBvcnQgY2xhc3MgaTE4bntcblxuICAgIHN0YXRpYyAkaW5zdGFuY2U7XG4gICAgc3RhdGljIGxhbmd1YWdlO1xuXG4gICAgc3RhdGljIGluaXQobG5nKXtcbiAgICAgICAgaTE4bi5sYW5ndWFnZSA9IGxuZztcbiAgICAgICAgaTE4bi4kaW5zdGFuY2UgPSBpMThuZXh0LmNyZWF0ZUluc3RhbmNlKHtcbiAgICAgICAgICAgIGxuZzogbG5nLFxuICAgICAgICAgICAgZmFsbGJhY2tMbmc6ICdlbicsXG4gICAgICAgICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgICAgICAgICBlbjoge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogZW5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBwbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IGl0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZToge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogZGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZyOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBmclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgKGVyciwgdCkgPT4ge1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdChrZXksIG9wdCl7XG4gICAgICAgIHJldHVybiBpMThuLiRpbnN0YW5jZS50KGtleSwgb3B0KVxuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcInRvb2xiYXJcIjoge1xuICAgICAgICBcIm5ld0RpYWdyYW1cIjogXCJOdW92byBkaWFncmFtbWFcIixcbiAgICAgICAgXCJvcGVuRGlhZ3JhbVwiOiBcIkFwcmkgZGlhZ3JhbW1hIGVzaXN0bnRlXCIsXG4gICAgICAgIFwic2F2ZURpYWdyYW1cIjogXCJTYWx2YSBpbCBkaWFncmFtbWEgY29yZW50ZVwiLFxuICAgICAgICBcImV4cG9ydFwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJFc3BvcnRhIGluXCIsXG4gICAgICAgICAgICBcInBuZ1wiOiBcIlBuZ1wiLFxuICAgICAgICAgICAgXCJzdmdcIjogXCJTdmdcIixcbiAgICAgICAgICAgIFwicGRmXCI6IFwiUGRmXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsYXlvdXRcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiRGlzcG9zaXppb25lXCIsXG4gICAgICAgICAgICBcIm1hbnVhbFwiOiBcIk1hbnVhbGVcIixcbiAgICAgICAgICAgIFwidHJlZVwiOiBcIkFsYmVyb1wiLFxuICAgICAgICAgICAgXCJjbHVzdGVyXCI6IFwiR3JhcHBvbG9cIlxuICAgICAgICB9LFxuICAgICAgICBcInZpZXdNb2RlXCI6IHtcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJWaXN0YVwiLFxuICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICBcImNyaXRlcmlvbjFcIjpcIkNyaXRlcmlvIDFcIixcbiAgICAgICAgICAgICAgICBcImNyaXRlcmlvbjJcIjpcIkNyaXRlcmlvIDJcIixcbiAgICAgICAgICAgICAgICBcInR3b0NyaXRlcmlhXCI6XCJEdWUgY3JpdGVyaVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwib2JqZWN0aXZlUnVsZVwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJSZWdvbGFcIixcbiAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJleHBlY3RlZC12YWx1ZS1tYXhpbWl6YXRpb25cIjpcIm1heFwiLFxuICAgICAgICAgICAgICAgIFwiZXhwZWN0ZWQtdmFsdWUtbWluaW1pemF0aW9uXCI6XCJtaW5cIixcbiAgICAgICAgICAgICAgICBcIm1heGktbWluXCI6XCJtYXgtbWluXCIsXG4gICAgICAgICAgICAgICAgXCJtYXhpLW1heFwiOlwibWF4LW1heFwiLFxuICAgICAgICAgICAgICAgIFwibWluaS1taW5cIjpcIm1pbi1taW5cIixcbiAgICAgICAgICAgICAgICBcIm1pbmktbWF4XCI6XCJtaW4tbWF4XCIsXG4gICAgICAgICAgICAgICAgXCJtaW4tbWF4XCI6XCJtaW4tbWF4XCIsXG4gICAgICAgICAgICAgICAgXCJtYXgtbWluXCI6XCJtYXgtbWluXCIsXG4gICAgICAgICAgICAgICAgXCJtaW4tbWluXCI6IFwibWluLW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWF4LW1heFwiOiBcIm1heC1tYXhcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInVuZG9cIjogXCJSaXByaXN0aW5hXCIsXG4gICAgICAgIFwicmVkb1wiOiBcIlJpcGV0aVwiLFxuICAgICAgICBcInNldHRpbmdzXCI6IFwiU2V0dGFnZ2lcIixcbiAgICAgICAgXCJhYm91dFwiOiBcIkRpXCIsXG4gICAgICAgIFwic2Vuc2l0aXZpdHlBbmFseXNpc1wiOiBcIkFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgXCIsXG4gICAgICAgIFwicmVjb21wdXRlXCI6IFwiUmljYWxjb2xhXCJcbiAgICB9LFxuICAgIFwibm9kZVwiOntcbiAgICAgICAgXCJuYW1lXCI6IFwiRXRpY2hldHRhXCJcbiAgICB9LFxuICAgIFwiZWRnZVwiOntcbiAgICAgICAgXCJuYW1lXCI6IFwiRXRpY2VodHRhXCIsXG4gICAgICAgIFwicGF5b2ZmXCI6IFwiU2FsZG9cIixcbiAgICAgICAgXCJwcm9iYWJpbGl0eVwiOiBcIlByb2JhYmlsaXTDoFwiXG4gICAgfSxcbiAgICBcInRleHRcIjp7XG4gICAgICAgIFwidmFsdWVcIjogXCJUZXN0b1wiXG4gICAgfSxcbiAgICBcImxlYWd1ZVRhYmxlRGlhbG9nXCI6e1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2xhc3NpZmljYVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJkb3dubG9hZENzdlwiOiBcIlNjYXJpY2EgQ1NWXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJsZWFndWVUYWJsZVwiOiB7XG4gICAgICAgIFwiaGVhZGVyc1wiOntcbiAgICAgICAgICAgIFwicG9saWN5Tm9cIjogXCJSZWdvbGEgI1wiLFxuICAgICAgICAgICAgXCJwb2xpY3lcIjogXCJSZWdvbGFcIixcbiAgICAgICAgICAgIFwiY29tbWVudFwiOiBcIkNvbW1lbnRvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb21tZW50XCI6e1xuICAgICAgICAgICAgXCJkb21pbmF0ZWRCeVwiOiBcImRvbWluYXRhIChkYSAje3twb2xpY3l9fSlcIixcbiAgICAgICAgICAgIFwiZXh0ZW5kZWREb21pbmF0ZWRCeVwiOiBcImVzdGVzYS1kb21pbmF0YSAoZGEgI3t7cG9saWN5MX19IGUgI3t7cG9saWN5Mn19KVwiLFxuICAgICAgICAgICAgXCJpbmNyYXRpb1wiOiBcInJhcHBvcnRvIGluY3JlbWVudGFsZT17e2luY3JhdGlvfX1cIlxuICAgICAgICB9LFxuICAgICAgICBcInBsb3RcIjp7XG4gICAgICAgICAgICBcImdyb3Vwc1wiOntcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkXCI6IFwiRXZpZGVuemlhdG9cIixcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkLWRlZmF1bHRcIjogXCJSYWNjb21hbmRhdG8gKHBlciBkZWZhdWx0IFdUUClcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkLWRvbWluYXRlZFwiIDogXCJFc3Rlc2EtZG9taW5hdGFcIixcbiAgICAgICAgICAgICAgICBcImRvbWluYXRlZFwiOiBcIkRvbWluYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiQWx0cm9cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidG9vbHRpcFwiOntcbiAgICAgICAgICAgICAgICBcImdyYWRpZW50QXJyb3cxXCI6IFwiRGlyZXppb25lIGRpIHt7bmFtZX19IG90dGltaXp6YXppb25lXCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93MlwiOiBcIkRpcmV6aW9uZSBkaSB7e25hbWV9fSBvdHRpbWl6emF6aW9uZVwiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkUmVnaW9uXCI6IFwiUmVnaW9uZSBkb21pbmF0YVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsZWdlbmRcIjp7XG4gICAgICAgICAgICAgICAgXCJkb21pbmF0ZWRSZWdpb25cIjogXCJMJ2FyZWEgZ3JpZ2lhIGV2aWRlbnppYSBsYSByZWdpb25lIGRvbWluYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93c1wiOiBcIkxlIGZyZWNjZSBpbmRpY2FubyBsYSBkaXJlemlvbmUgZGkgbWlnbGlvcmFtZW50b1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwic2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOiB7XG4gICAgICAgICAgICBcInJ1bkpvYlwiOiBcIkVzZWd1aVwiLFxuICAgICAgICAgICAgXCJzdG9wSm9iXCI6IFwiU3RvcFwiLFxuICAgICAgICAgICAgXCJ0ZXJtaW5hdGVKb2JcIjogXCJFc2NpXCIsXG4gICAgICAgICAgICBcInJlc3VtZUpvYlwiOiBcIlJpcHJlbmRpXCIsXG4gICAgICAgICAgICBcImRvd25sb2FkQ3N2XCI6IFwiU2NhcmljYXJlIENTVlwiLFxuICAgICAgICAgICAgXCJiYWNrXCI6IFwiSW5kaWV0cm9cIixcbiAgICAgICAgICAgIFwiY2xlYXJcIjogXCJDYW5jZWxsYVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiam9iUGFyYW1ldGVyc0J1aWxkZXJcIjoge1xuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJyZW1vdmVQYXJhbWV0ZXJWYWx1ZVwiOiBcIkNhbmNlbGxhXCIsXG4gICAgICAgICAgICBcImFkZFBhcmFtZXRlclZhbHVlXCI6IFwiQWdnaXVuZ2lcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImpvYlJlc3VsdFRhYmxlXCI6e1xuICAgICAgICBcInRvb2x0aXBcIjoge1xuICAgICAgICAgICAgXCJtdWx0aXBsZVBvbGljaWVzSW5DZWxsXCI6IFwie3tudW1iZXJ9fSBwb2xpdGljaGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInBpdm90XCI6IHtcbiAgICAgICAgICAgIFwiYWdncmVnYXRvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJtYXhpbXVtXCI6IFwiTWFzc2ltb1wiLFxuICAgICAgICAgICAgICAgIFwibWluaW11bVwiOiBcIk1pbmltb1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW5kZXJlcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJoZWF0bWFwXCI6IFwiTWFwcGEgZGkgY2Fsb3JlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwb2xpY3lQcmV2aWV3XCI6IFwiQW50ZXByaW1hIGRlbGxhIHBvbGl0aWNhXCJcbiAgICB9LFxuICAgIFwiam9iXCI6e1xuICAgICAgICBcInNlbnNpdGl2aXR5LWFuYWx5c2lzXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiQW5hbGlzaSBkaSBzZW5zaWJpbGl0w6AgbXVsdGl2YXJpYXRhXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJOb21lIGFsbGEgcmVnb2xhXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkRlc2NyaXppb25lIGVzdGVzYSBkZWxsYSBwb2xpdGljYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYXJpYWJpbGlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOb21lXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtaW5cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1pblwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibWF4XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNYXhcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTHVuZ2hlenphXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJQYXNzb1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJFcnJvcmUgbmVpIGNhbGNvbGkgZGkgYW5hbGlzaSBkaSBzZW5zaWJpbGl0w6AgcGVyIGkgc2VndWVudGkgcGFyYW1ldHJpOlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ3YXJuaW5nc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJsYXJnZVNjZW5hcmlvc051bWJlclwiOiBcIk51bWVybyBkaSBzY2VuYXJpIGRlZmluaXRpIHBpw7kgZ3JhbmRpIGRpIHt7bnVtYmVyRm9ybWF0dGVkfX0uIEFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgIHBvdHJlYmJlIG5vbiBlc3NlcmUgY2FsY29sYXRhIG8gZXNzZXJlIG1vbHRvIGxlbnRhLlwiLFxuICAgICAgICAgICAgICAgIFwibGFyZ2VQYXJhbWV0ZXJzTnVtYmVyXCI6IFwiTnVtZXJvIGRpIHBhcmFtZXRyaSBtYWdnaW9yaSBkaSB7e251bWJlcn19LiBMYSB2aXN1YWxpenphemlvbmUgZGVsbCdhbmFsaXNpIGRpIHNlbnNpYmlsaXTDoCBwb3RyZWJiZSBub24gcml1c2NpcmUgbyBlc3NlcmUgbW9sdG8gbGVudGEuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3JuYWRvLWRpYWdyYW1cIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJEaWFncmFtbWEgYSB0b3JuYWRvXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJOb21lIGFsbGEgcmVnb2xhXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkRlc2NyaXppb25lIGVzdGVzYSBkZWxsYSBwb2xpdGljYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYXJpYWJpbGlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOb21lXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtaW5cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1pblwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibWF4XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJNYXhcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTHVuZ2hlenphXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJQYXNzb1wiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYWxvcmUgcHJlZGVmaW5pdG9cIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXJyb3JzXCI6e1xuICAgICAgICAgICAgICAgIFwiY29tcHV0YXRpb25zXCI6IFwiRXJyb3JlIG5laSBjYWxjb2xpIGRpIGFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgIHBlciBpIHNlZ3VlbnRpIHBhcmFtZXRyaTpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwid2FybmluZ3NcIjoge1xuICAgICAgICAgICAgICAgIFwibGFyZ2VTY2VuYXJpb3NOdW1iZXJcIjogXCJOdW1lcm8gZGkgc2NlbmFyaSBkZWZpbml0aSBwacO5IGdyYW5kaSBkaSB7e251bWJlckZvcm1hdHRlZH19LiBBbmFsaXNpIGRpIHNlbnNpYmlsaXTDoCBwb3RyZWJiZSBub24gZXNzZXJlIGNhbGNvbGF0YSBvIGVzc2VyZSBtb2x0byBsZW50YS5cIixcbiAgICAgICAgICAgICAgICBcImxhcmdlUGFyYW1ldGVyc051bWJlclwiOiBcIk51bWVybyBkaSBwYXJhbWV0cmkgbWFnZ2lvcmkgZGkge3tudW1iZXJ9fS4gTGEgdmlzdWFsaXp6YXppb25lIGRlbGwnYW5hbGlzaSBkaSBzZW5zaWJpbGl0w6AgcG90cmViYmUgbm9uIHJpdXNjaXJlIG8gZXNzZXJlIG1vbHRvIGxlbnRhLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwbG90XCI6e1xuICAgICAgICAgICAgICAgIFwibGVnZW5kXCI6e1xuICAgICAgICAgICAgICAgICAgICBcImxvd1wiOiBcIkRlY3Jlc2NlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaGlnaFwiOiBcIkNyZXNjZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInhBeGlzVGl0bGVcIjogXCJTYWxkb1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvYmFiaWxpc3RpYy1zZW5zaXRpdml0eS1hbmFseXNpc1wiOntcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgIHByb2JhYmlsaXN0aWNhXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJOb21lIGFsbGEgcmVnb2xhXCIsXG4gICAgICAgICAgICAgICAgXCJudW1iZXJPZlJ1bnNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTnVtZXJvIGRpIG9wZXJhemlvbmlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkRlc2NyaXppb25lIGVzdGVzYSBkZWxsYSBwb2xpdGljYVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYXJpYWJpbGlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOb21lXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJmb3JtdWxhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJGb3JtdWxhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhlbHBcIjogXCJTZWxlemlvbmEgbW9kZWxsbyBkaSBmb3JtdWxhIGRhbCBtZW51IG8gc2NyaXZpIHVuIGNvZGljZSBwZXJzb25hbGl6emF0by5cIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXJyb3JzXCI6e1xuICAgICAgICAgICAgICAgIFwiY29tcHV0YXRpb25zXCI6IFwiRXJyb3JlIG5laSBjYWxjb2xpIGRpIGFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgIHBlciBpIHNlZ3VlbnRpIHBhcmFtZXRyaTpcIixcbiAgICAgICAgICAgICAgICBcInBhcmFtLWNvbXB1dGF0aW9uXCI6IFwiRXJyb3JlIGRpIGNhbGNvbG8gZGVpIHZhbG9yaSBkZWkgcGFyYW1ldHJpOlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ3YXJuaW5nc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJsYXJnZVNjZW5hcmlvc051bWJlclwiOiBcIk51bWVybyBkaSBzY2VuYXJpIGRlZmluaXRpIHBpw7kgZ3JhbmRpIGRpIHt7bnVtYmVyRm9ybWF0dGVkfX0uIEFuYWxpc2kgZGkgc2Vuc2liaWxpdMOgIHBvdHJlYmJlIG5vbiByaXVzY2lyZSBvIGVzc2VyZSBtb2x0byBsZW50YS5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwic3BpZGVyLXBsb3RcIjoge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiRGlhZ3JhbW1hIGRpIEtpdmlhdFwiLFxuICAgICAgICAgICAgXCJwYXJhbVwiOiB7XG4gICAgICAgICAgICAgICAgXCJydWxlTmFtZVwiOiBcIk5vbWUgYWxsYSByZWdvbGFcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRGVzY3JpemlvbmUgZXN0ZXNhIGRlbGxhIHBvbGl0aWNhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwicGVyY2VudGFnZUNoYW5nZVJhbmdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIisvLSB2YXJpYXppb25lIHBlcmNlbnR1YWxlIGRhIGNvbnNpZGVyYXJlXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk51bWVybyBkaSB2YWxwcmkgZGEgdGVzdGFyZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImhlbHBcIjogXCJOdW1lcm8gZGkgdmFscHJpIGRhIHRlc3RhcmUgKGluIHVuYSBwYXJ0ZSBkZWxsYSBnYW1tYSlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiVmFyaWFiaWxpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTm9tZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJWYWxvcmUgcHJlZGVmaW5pdG9cIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXJyb3JzXCI6IHtcbiAgICAgICAgICAgICAgICBcImNvbXB1dGF0aW9uc1wiOiBcIkVycm9yZSBuZWkgY2FsY29saSBkaSBhbmFsaXNpIGRpIHNlbnNpYmlsaXTDoCBwZXIgaSBzZWd1ZW50aSBwYXJhbWV0cmk6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTnVtZXJvIGRpIHNjZW5hcmkgZGVmaW5pdGkgcGnDuSBncmFuZGkgZGkge3tudW1iZXJGb3JtYXR0ZWR9fS4gQW5hbGlzaSBkaSBzZW5zaWJpbGl0w6AgcG90cmViYmUgbm9uIHJpdXNjaXJlIG8gZXNzZXJlIG1vbHRvIGxlbnRhLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwbG90XCI6IHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcInhBeGlzVGl0bGVcIjogXCJWYXJpYXppb25lIHBlcmNlbnR1YWxlXCIsXG4gICAgICAgICAgICAgICAgXCJ5QXhpc1RpdGxlXCI6IFwiU2FsZG9cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImxlYWd1ZS10YWJsZVwiOntcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkNsYXNzaWZpY2FcIlxuICAgICAgICB9LFxuICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgIFwiZ2VuZXJpY1wiOiBcIkVycm9yZSBuZWkgY2FsY29saSBkaSBhbmFsaXNpIGRpIHNlbnNpYmlsaXTDoDoge3ttZXNzYWdlfX1cIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFwie3tqb2JOYW1lfX0gcGFyYW1ldGVyaSBlcnJhdGlcIlxuICAgICAgICB9XG4gICAgfSxcblxuICAgIFwic2V0dGluZ3NEaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJTZXR0YWdnaVwiLFxuICAgICAgICBcImdlbmVyYWxcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiR2VuZXJhbGVcIixcbiAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJEaW1lbnNpb25lIGZvbnRcIixcbiAgICAgICAgICAgIFwiZm9udEZhbWlseVwiOiBcIkZhbWlnbGlhIGZvbnRcIixcbiAgICAgICAgICAgIFwiZm9udFdlaWdodFwiOiBcIlBlc28gZGVsIGZvbnRcIixcbiAgICAgICAgICAgIFwiZm9udFN0eWxlXCI6IFwiU3RpbGUgZm9udFwiLFxuICAgICAgICAgICAgXCJudW1iZXJGb3JtYXRMb2NhbGVcIjogXCJGb3JtYXRvIG51bWVybyBsb2NhbGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInBheW9mZjFcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiRm9ybWF0byBzYWxkbyAxXCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5XCI6IFwiVmFsdXRhXCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5RGlzcGxheVwiOiBcIlZpc3VhbGl6emF6aW9uZSB2YWx1dGFcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJTdGlsZVwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJOdW1lcm8gbWluaW1vIGNpZnJlIGZyYXppb25lXCIsXG4gICAgICAgICAgICBcIm1heGltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk51bWVybyBtYXNzaW1vIGNpZnJlIGZyYXppb25lXCIsXG4gICAgICAgICAgICBcInVzZUdyb3VwaW5nXCI6IFwiVXNhIHNlcGFyYXRvcmkgZGkgZ3J1cHBvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXlvZmYyXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZvcm1hdG8gc2FsZG8gMlwiLFxuICAgICAgICAgICAgXCJjdXJyZW5jeVwiOiBcIlZhbHV0YVwiLFxuICAgICAgICAgICAgXCJjdXJyZW5jeURpc3BsYXlcIjogXCJWaXN1YWxpenphemlvbmUgdmFsdXRhXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwiU3RpbGVcIixcbiAgICAgICAgICAgIFwibWluaW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTnVtZXJvIG1pbmltbyBjaWZyZSBmcmF6aW9uZVwiLFxuICAgICAgICAgICAgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJOdW1lcm8gbWFzc2ltbyBjaWZyZSBmcmF6aW9uZVwiLFxuICAgICAgICAgICAgXCJ1c2VHcm91cGluZ1wiOiBcIlVzYSBzZXBhcmF0b3JpIGRpIGdydXBwb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvYmFiaWxpdHlcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiRm9ybWF0byBwcm9iYWJpbGl0w6BcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJTdGlsZVwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJOdW1lcm8gbWluaW1vIGNpZnJlIGZyYXppb25lXCIsXG4gICAgICAgICAgICBcIm1heGltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk51bWVybyBtYXNzaW1vIGNpZnJlIGZyYXppb25lXCIsXG4gICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiRGltZW5zaW9uZSBmb250XCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5vZG9cIixcbiAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJTcGVzc29yZSBsaW5lYVwiLFxuICAgICAgICAgICAgXCJvcHRpbWFsXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJPdHRpbWFsZVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiQ29sb3JlXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VXaWR0aFwiOiBcIlNwZXNzb3JlIGxpbmVhXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxhYmVsXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiRXRpY2hldHRhXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkRpbWVuc2lvbmUgZm9udCBldGljaGV0dGFcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JlIGV0aWNoZXR0YVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJTYWxkb1wiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJEaW1lbnNpb25lIGZvbnRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JlXCIsXG4gICAgICAgICAgICAgICAgXCJuZWdhdGl2ZUNvbG9yXCI6IFwiQ29sb3JlIG5lZ2F0aXZvXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRlY2lzaW9uXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTm9kbyBkaWNpc2lvbmVcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJDb2xvcmUgcmllbXBpbWVudG9cIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIkNvbG9yZSBsaW5lYVwiLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJDb2xvcmUgcmllbXBpbWVudG8gc2VsZXppb25hdG9cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImNoYW5jZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk5vZG8gb3Bwb3J0dW5pdMOgXCIsXG4gICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiQ29sb3JlIHJpZW1waW1lbnRvXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJDb2xvcmUgbGluZWFcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiQ29sb3JlIHJpZW1waW1lbnRvIHNlbGV6aW9uYXRvXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ0ZXJtaW5hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTm9kbyB0ZXJtaW5hbGVcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJDb2xvcmUgcmllbXBpbWVudG9cIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIkNvbG9yZSBsaW5lYVwiLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJDb2xvcmUgcmllbXBpbWVudG8gc2VsZXppb25hdG9cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiU2FsZG9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkRpbWVuc2lvbmUgZm9udFwiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIkNvbG9yZSBuZWdhdGl2b1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImVkZ2VcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiUmFtb1wiLFxuICAgICAgICAgICAgXCJzdHJva2VcIjogXCJDb2xvcmVcIixcbiAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJMYXJnaGV6emEgbGluZWFcIixcbiAgICAgICAgICAgIFwib3B0aW1hbFwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiT3R0aW1hbGVcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIkNvbG9yZVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJMYXJnaGV6emEgbGluZWFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlNlbGV6aW9uYXRvXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJDb2xvcmVcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiTGFyZ2hlenphIGxpbmVhXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxhYmVsXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiRXRpY2hldHRhXCIsXG4gICAgICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkRpbWVuc2lvbmUgZm9udFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJDb2xvcmVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicGF5b2ZmXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJTYWxkb1wiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJEaW1lbnNpb25lIGZvbnRcIixcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JlXCIsXG4gICAgICAgICAgICAgICAgXCJuZWdhdGl2ZUNvbG9yXCI6IFwiQ29sb3JlIG5lZ2F0aXZvXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkaWFncmFtVGl0bGVcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiVGl0b2xvIGRpYWdyYW1tYVwiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIkRpbWVuc2lvbmUgZm9udFwiLFxuICAgICAgICAgICAgXCJmb250V2VpZ2h0XCI6IFwiUGVzbyBkZWwgZm9udFwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTdGlsZSBmb250XCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiQ29sb3JlXCIsXG4gICAgICAgICAgICBcIm1hcmdpblwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiTWFyZ2luZVwiLFxuICAgICAgICAgICAgICAgIFwidG9wXCI6IFwiU3VwZXJpb3JlXCIsXG4gICAgICAgICAgICAgICAgXCJib3R0b21cIjogXCJJbmZlcmlvcmVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlNvdHRvLXRpdG9sbyAoZGVzY3JpemlvbmUgZGlhZ3JhbW1hKVwiLFxuICAgICAgICAgICAgICAgIFwic2hvd1wiOiBcIk1vc3RyYVwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJEaW1lbnNpb25lIGZvbnRcIixcbiAgICAgICAgICAgICAgICBcImZvbnRXZWlnaHRcIjogXCJQZXNvIGRlbCBmb250XCIsXG4gICAgICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTdGlsZSBmb250XCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIkNvbG9yZVwiLFxuICAgICAgICAgICAgICAgIFwibWFyZ2luVG9wXCI6IFwiTWFyZ2luZSBzdXBlcmlvcmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImxlYWd1ZVRhYmxlXCI6IHtcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJDbGFzc2lmaWNhXCIsXG4gICAgICAgICAgICBcInBsb3RcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJHcmFmaWNvXCIsXG4gICAgICAgICAgICAgICAgXCJtYXhXaWR0aFwiOiBcIkxhcmdoZXp6YSBtYXNzaW1hXCIsXG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZENvbG9yXCI6IFwiQ29sb3JlIGV2aWRlbnppYXRvIGRlbGxhIHJlZ29sYVwiLFxuICAgICAgICAgICAgICAgIFwiaGlnaGxpZ2h0ZWREZWZhdWx0Q29sb3JcIjogXCJDb2xvcmUgcG9saXp6YSByYWNjb21hbmRhdGEgKHBlciBkZWZhdWx0IFdUUClcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkRG9taW5hdGVkQ29sb3JcIjogXCJDb2xvcmkgZGVsbGEgcmVnb2xhIGRvbWluYXRhIGVzdGVzYVwiLFxuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkQ29sb3JcIjogXCJDb2xvcmUgZGVsbGEgZGVub21pbmF0YSByZWdvbGFcIixcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRDb2xvclwiOiBcIkFsdHJpIGNyaXRlcmkgY29sb3JlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJvdGhlclwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJBbHRyb1wiLFxuICAgICAgICAgICAgXCJkaXNhYmxlQW5pbWF0aW9uc1wiOiBcIkRpc2FiaWxpdGEgYW5pbWF6aW9uZVwiLFxuICAgICAgICAgICAgXCJmb3JjZUZ1bGxFZGdlUmVkcmF3XCI6IFwiRm9yemEgcmlkaXNlZ25vIGRlaSByYW1pXCIsXG4gICAgICAgICAgICBcImhpZGVMYWJlbHNcIjogXCJOYXNjb25kaSBsZSBldGljaGV0dGVcIixcbiAgICAgICAgICAgIFwiaGlkZVBheW9mZnNcIjogXCJOYXNjb25kaSBzYWxkb1wiLFxuICAgICAgICAgICAgXCJoaWRlUHJvYmFiaWxpdGllc1wiOiBcIk5hc2NvbmRpIGxlIHByb2JhYmlsaXTDoFwiLFxuICAgICAgICAgICAgXCJyYXdcIjogXCJOb24gZWxhYm9yYXRvXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJhYm91dERpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkluZm9ybWF6aW9uaVwiXG4gICAgfSxcbiAgICBcImhlbHBcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiQWl1dG9cIixcbiAgICAgICAgXCJtb3VzZVwiOiB7XG4gICAgICAgICAgICBcImhlYWRlclwiOlwiQXppb25pIG1vdXNlOlwiLFxuICAgICAgICAgICAgXCJsaXN0XCI6e1xuICAgICAgICAgICAgICAgIFwiMVwiOiBcIkJvdHRvbmUgc2luaXN0cm86IHNlbGV6aW9uZSBub2RvL3JhbW9cIixcbiAgICAgICAgICAgICAgICBcIjJcIjogXCJCb3R0b25lIGRlc3RybzogbWVudSBkaSBjb250ZXN0byAoYWdnaXVudGEvbWFuaXBvbGF6aW9uZSBub2RpKVwiLFxuICAgICAgICAgICAgICAgIFwiM1wiOiBcIkRvcHBpbyBjbGljayBib3R0b25lIHNpbmlzdHJvOiBtZW51IGRpIGNvbnRlc3RvXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJrZXlib2FyZFwiOiB7XG4gICAgICAgICAgICBcImhlYWRlclwiOlwiU2NvcmNpYXRvaWUgdGFzdGllcmE6XCIsXG4gICAgICAgICAgICBcImxpc3RcIjp7XG4gICAgICAgICAgICAgICAgXCIxXCI6IFwiRGVsOiBjYW5jZWxsYSBub2RpIHNlbGV6aW9uYXRpXCIsXG4gICAgICAgICAgICAgICAgXCIyXCI6IFwiQ3RybC1DL1g6IGNvcGlhL3RhZ2xpYSBub2RpIHNlbGV6aW9uYXRpXCIsXG4gICAgICAgICAgICAgICAgXCIzXCI6IFwiQ3RybC1WOiBpbmNvbGxhIG5vZGkgY29waWF0aSBjb21lIHNvdHRvLWFsYmVybyBkaSB1biBub2RvIHNlbGV6aW9uYXRvXCIsXG4gICAgICAgICAgICAgICAgXCI0XCI6IFwiQ3RybC1ZL1o6IHJpcHJpc3RpbmEvcmlwZXRpXCIsXG4gICAgICAgICAgICAgICAgXCI1XCI6IFwiQ3RybC1BbHQtRC9DL1Q6IGFnZ2l1bmdpIG51b3ZvIHNvdHRvbm9kbyBEZWNpc2lvbmUvT3Bwb3J0dW5pdMOgL1Rlcm1pbmFsZSBkaSB1biA8c3Ryb25nPm5vZG8gc2VsZXppb25hdG88L3N0cm9uZz5cIixcbiAgICAgICAgICAgICAgICBcIjZcIjogXCJDdHJsLUFsdC1EL0M6IGluaWV0dGEgdW4gbnVvdm8gbm9kbyBEZWNpc2lvbmUvT3Bwb3J0dW5pdMOgIGluIHVuIDxzdHJvbmc+cmFtbyBzZWxlemlvbmF0bzwvc3Ryb25nPlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZG9jc1wiOiBcIkxhIGRvY3VtZW50YXppb25lIGRpIFNpbHZlckRlY2lzaW9ucyBlIGRpc3BvbmliaWxlIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9TaWx2ZXJEZWNpc2lvbnMvU2lsdmVyRGVjaXNpb25zL3dpa2kvRG9jdW1lbnRhdGlvblxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPnF1aTwvYT5cIlxuICAgIH0sXG4gICAgXCJkZWZpbml0aW9uc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkRlZmluaXppb25pIGRlbGxlIHZhcmlhYmlsaVwiLFxuICAgICAgICBcInNjb3BlXCI6IHtcbiAgICAgICAgICAgIFwiZ2xvYmFsXCI6IFwicmFnZ2lvIGdsb2JhbGVcIixcbiAgICAgICAgICAgIFwibm9kZVwiOiBcInJhZ2dpbyBkaSBub2RvIGUgc290dG8tYWxiZXJvIHNlbGV6aW9uYXRpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJidXR0b25zXCI6e1xuICAgICAgICAgICAgXCJyZWNhbGN1bGF0ZVwiOiBcIlJpY2FsY29sYXJlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJldmFsdWF0ZWRWYXJpYWJsZXNcIjogXCJWYXJpYWJpbGkgdmFsdXRhdGVcIlxuICAgIH0sXG4gICAgXCJzaWRlYmFyRGVmaW5pdGlvbnNcIjp7XG4gICAgICAgIFwic2NvcGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiUmFnZ2lvIHZhcmlhYmlsZTpcIixcbiAgICAgICAgICAgIFwiZ2xvYmFsXCI6IFwiZ2xvYmFsZVwiLFxuICAgICAgICAgICAgXCJub2RlXCI6IFwibm9kbyBlIHNvdHRvLWFsYmVybyBzZWxlemlvbmF0aVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaGVhZGVyXCI6IFwiVmFyaWFiaWxpXCIsXG4gICAgICAgIFwiY29kZVwiOiBcIkNvZGljZVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjp7XG4gICAgICAgICAgICBcIm9wZW5EaWFsb2dcIiA6IFwiQXByaSBpbCBkaWFsb2dvXCIsXG4gICAgICAgICAgICBcInJlY2FsY3VsYXRlXCI6IFwiUmljYWxjb2xhcmVcIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIlZhcmlhYmlsaSB2YWx1dGF0ZVwiXG4gICAgfSxcbiAgICBcIm11bHRpcGxlQ3JpdGVyaWFcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiQ3JpdGVyaSBtdWx0aXBsaVwiLFxuICAgICAgICBcImRlZmF1bHRNYXhpbWl6ZWRDcml0ZXJpb25OYW1lXCI6IFwiRWZmZXR0b1wiLFxuICAgICAgICBcImRlZmF1bHRNaW5pbWl6ZWRDcml0ZXJpb25OYW1lXCI6IFwiQ29zdG9cIixcbiAgICAgICAgXCJuYW1lT2ZDcml0ZXJpb24xXCI6IFwiTm9tZSBkZWwgY3JpdGVyaW8gMVwiLFxuICAgICAgICBcIm5hbWVPZkNyaXRlcmlvbjJcIjogXCJOb21lIGRlbCBjcml0ZXJpbyAyXCIsXG4gICAgICAgIFwiZGVmYXVsdENyaXRlcmlvbjFXZWlnaHRcIjogXCJQcmVkZWZpbml0byAxwrAgcGVzbyBjcml0ZXJpb1wiLFxuICAgICAgICBcIndlaWdodExvd2VyQm91bmRcIjogXCJQZXNvIGluZmVyaW9yZSBsaW1pdGF0b1wiLFxuICAgICAgICBcIndlaWdodFVwcGVyQm91bmRcIjogXCJQZXNvIHN1cGVyaW9yZSBkZWwgbGltaXRlXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOntcbiAgICAgICAgICAgIFwic2hvd0xlYWd1ZVRhYmxlXCIgOiBcIk1vc3RyYSBsYSBjbGFzc2lmaWNhXCIsXG4gICAgICAgICAgICBcImZsaXBcIjogXCJSaWJhbHRhXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJsYXlvdXRPcHRpb25zXCI6e1xuICAgICAgICBcImhlYWRlclwiOiBcIkRpc3Bvc2l6aW9uZVwiLFxuICAgICAgICBcIm1hcmdpbkhvcml6b250YWxcIjogXCJNYXJnaW5lIG9yaXp6b250YWxlXCIsXG4gICAgICAgIFwibWFyZ2luVmVydGljYWxcIjogXCJNYXJnaW5lIHZlcnRpY2FsZVwiLFxuICAgICAgICBcIm5vZGVTaXplXCI6IFwiRGltZW5zaW9uZSBub2RvXCIsXG4gICAgICAgIFwiZWRnZVNsYW50V2lkdGhNYXhcIjogXCJJbmNsaW5hemlvbmUgbm9kb1wiLFxuICAgICAgICBcImdyaWRXaWR0aFwiOiBcIkxhcmdoZXp6YVwiLFxuICAgICAgICBcImdyaWRIZWlnaHRcIjogXCJBbHRlenphXCJcbiAgICB9LFxuICAgIFwiZGlhZ3JhbURldGFpbHNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiRGV0dGFnbGlcIixcbiAgICAgICAgXCJ0aXRsZVwiIDogXCJUaXRvbG9cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiIDogXCJEZXNjcml6aW9uZVwiXG4gICAgfSxcbiAgICBcIm9iamVjdFByb3BlcnRpZXNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6e1xuICAgICAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgICAgIFwiZGVjaXNpb25cIjpcIk5vZG8gZGVjaXNpb25lXCIsXG4gICAgICAgICAgICAgICAgXCJjaGFuY2VcIjpcIk5vZG8gb3Bwb3J0dW5pdMOgXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXJtaW5hbFwiOlwiTm9kbyB0ZXJtaW5hbGVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZWRnZVwiOiBcIlJhbW9cIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIlRlc3RvIG1vYmlsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY2hpbGRyZW5Qcm9wZXJ0aWVzXCI6e1xuICAgICAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgICAgIFwiaGVhZGVyXCI6IFwiQ29ubmVzc2lvbmlcIixcbiAgICAgICAgICAgICAgICBcImNoaWxkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJoZWFkZXJcIjogXCJSYW1vICN7e251bWJlcn19XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiY29uZmlybVwiOntcbiAgICAgICAgXCJuZXdEaWFncmFtXCI6IFwiVnVvaSBkYXZ2ZXJvIGNhbmNlbGxhcmUgaWxkaWFncmFtbWEgY29ycmVudGUgPyBUdXR0aSBpIGRhdGkgbm9uIHNhbHZhdGkgc2FyYW5ubyBwZXJzaS5cIixcbiAgICAgICAgXCJvcGVuRGlhZ3JhbVwiOiBcIlNlaSBzaWN1cm8/IFR1dHRpIGkgZGF0aSBub24gc2FsdmF0aSBzYXJhbm5vIHBlcnNpLlwiLFxuICAgICAgICBcImJlZm9yZXVubG9hZFwiOiBcIlNlaSBzaWN1cm8gZGkgdm9sZXIgdXNjaXJlIGRhIFNpbHZlckRlY2lzaW9ucyA/VHV0dGkgaSBkYXRpIG5vbiBzYWx2YXRpIHNhcmFubm8gcGVyc2kuXCJcbiAgICB9LFxuICAgIFwiZXJyb3JcIjp7XG4gICAgICAgIFwianNvblBhcnNlXCI6IFwiRXJyb3JlIGFuYWxpenphbmRvIGlsIGZpbGUgIVwiLFxuICAgICAgICBcImZpbGVBcGlOb3RTdXBwb3J0ZWRcIjpcImwnQVBJIGRpIHF1ZXN0byBmaWxlIG5vbiDDqCBhbmNvcmEgc3VwcG9ydGF0YSBpbiBxdWVzdG8gYnJvd3Nlci4gIFwiLFxuICAgICAgICBcImlucHV0RmlsZXNQcm9wZXJ0eVwiOlwiSWwgdHVvIGJyb3dzZXIgbm9uIHNlbWJyYSBzdXBwb3J0YXJlIGxhIHByb3ByaWV0YSBkZWwgZmlsZSBkaSBpbnB1dC5cIixcbiAgICAgICAgXCJub3RTaWx2ZXJEZWNpc2lvbnNGaWxlXCI6XCJOb24gw6ggdW4gZmlsZSBTaWx2ZXJEZWNpc2lvbnMgIVwiLFxuICAgICAgICBcImluY29ycmVjdFZlcnNpb25Gb3JtYXRcIjogXCJGb3JtYXRvIG5vbiBjb3JyZXR0byBkZWxsYSBzZXJpZSBkaSB2ZXJzaW9uZSFcIixcbiAgICAgICAgXCJmaWxlVmVyc2lvbk5ld2VyVGhhbkFwcGxpY2F0aW9uVmVyc2lvblwiOiBcIkxhIHZlcnNpb25lIGluIGZpbGUgw6ggcGnDuSByZWNlbnRlIHJpc3BldHRvIGFsbGEgdmVyc2lvbmUgZGVsbCdhcHBsaWNhemlvbmUuIEFsY3VuZSBmdW56aW9uYWxpdMOgIHBvc3Nvbm8gZXNzZXJlIGluZGlzcG9uaWJpbGkuXCIsXG4gICAgICAgIFwib2JqZWN0aXZlQ29tcHV0YXRpb25GYWlsdXJlXCI6IFwiRXJyb3JlIGR1cmFudGUgaWwgY2FsY29sbyBvYmlldHRpdm8hXCIsXG4gICAgICAgIFwiZGlhZ3JhbURyYXdpbmdGYWlsdXJlXCI6IFwiRXJyb3JlIGR1cmFudGUgaWwgZGlzZWdubyBkZWxsYSBkaWFncmFtbWEhXCIsXG4gICAgICAgIFwibWFsZm9ybWVkRGF0YVwiOlwiRXJyb3JlIGR1cmFudGUgbGEgbGV0dHVyYSBkZWkgZGF0aSBkZWxsJ2FsYmVybyAhXCIsXG4gICAgICAgIFwicG5nRXhwb3J0Tm90U3VwcG9ydGVkXCI6IFwiTCdlc3BvcnQgaW4gZm9ybWF0byBQTkcgbm9uIMOoIHN1cHBvcnRhdGEgbmVsIHR1byBicm93c2VyLlwiLFxuICAgICAgICBcInBuZ0V4cG9ydE5vdFN1cHBvcnRlZElFXCI6IFwiTCdlc3BvcnQgaW4gZm9ybWF0byBQTkcgbm9uIMOoIHN1cHBvcnRhdGEgaW4gSW50ZXJuZXQgRXhwbG9yZXIuXCIsXG4gICAgICAgIFwic3ZnRXhwb3J0Tm90U3VwcG9ydGVkXCI6IFwiTCdlc3BvcnQgaW4gZm9ybWF0byBTVkcgbm9uIMOoIHN1cHBvcnRhdGEgbmVsIHR1byBicm93c2VyLlwiLFxuICAgICAgICBcInBkZkV4cG9ydE5vdFN1cHBvcnRlZFwiOiBcIkwnZXNwb3J0IGluIGZvcm1hdG8gUERGIG5vbiDDqCBzdXBwb3J0YXRhIG5lbCB0dW8gYnJvd3Nlci5cIixcbiAgICAgICAgXCJpbmNvcnJlY3RQYXlvZmZOdW1iZXJGb3JtYXRPcHRpb25zXCI6IFwiT3B6aW9uaSBwZXIgaWwgZm9ybWF0byBkZWkgc2FsZGkgbm9uIGNvcnJldHRlLlwiLFxuICAgICAgICBcImluY29ycmVjdFByb2JhYmlsaXR5TnVtYmVyRm9ybWF0T3B0aW9uc1wiOiBcIk9wemlvbmkgcGVyIGlsIGZvcm1hdG8gZGVsbGUgcHJvYmFiaWxpdMOgIG5vbiBjb3JyZXR0ZS5cIixcbiAgICAgICAgXCJpbmNvcnJlY3ROdW1iZXJGb3JtYXRPcHRpb25zXCI6IFwiT3B6aW9uaSBwZXIgaWwgZm9ybWF0byBkZWkgbnVtZXJpIG5vbiBjb3JyZXR0ZSwgdXRpbGl6em8gZGVsIGRlZmF1bHQuXCIsXG4gICAgICAgIFwianNQREZpc05vdEluY2x1ZGVkXCI6IFwianNQREYgbm9uIGluY2x1c28gIVwiLFxuICAgICAgICBcInNlcnZlclNpZGVFeHBvcnRSZXF1ZXN0RmFpbHVyZVwiOiBcIlJpY2hpZXN0YSBkaSBleHBvcnQgZmFsbGl0YSBsYXRvIHNlcnZlciAhXCJcbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gICAgXCJ0b29sYmFyXCI6IHtcbiAgICAgICAgXCJuZXdEaWFncmFtXCI6IFwiTm93eSBkaWFncmFtXCIsXG4gICAgICAgIFwib3BlbkRpYWdyYW1cIjogXCJPdHfDs3J6IGRpYWdyYW1cIixcbiAgICAgICAgXCJzYXZlRGlhZ3JhbVwiOiBcIlphcGlzeiBkaWFncmFtXCIsXG4gICAgICAgIFwiZXhwb3J0XCI6e1xuICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkVrc3BvcnRcIixcbiAgICAgICAgICAgIFwicG5nXCI6IFwiUG5nXCIsXG4gICAgICAgICAgICBcInN2Z1wiOiBcIlN2Z1wiLFxuICAgICAgICAgICAgXCJwZGZcIjogXCJQZGZcIlxuICAgICAgICB9LFxuICAgICAgICBcImxheW91dFwiOntcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJVa8WCYWRcIixcbiAgICAgICAgICAgIFwibWFudWFsXCI6IFwiUsSZY3pueVwiLFxuICAgICAgICAgICAgXCJ0cmVlXCI6IFwiRHJ6ZXdvXCIsXG4gICAgICAgICAgICBcImNsdXN0ZXJcIjogXCJaZ3J1cG93YW55XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ2aWV3TW9kZVwiOiB7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiV2lkb2tcIixcbiAgICAgICAgICAgIFwib3B0aW9uc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJjcml0ZXJpb24xXCI6XCJLcnl0ZXJpdW0gMVwiLFxuICAgICAgICAgICAgICAgIFwiY3JpdGVyaW9uMlwiOlwiS3J5dGVyaXVtIDJcIixcbiAgICAgICAgICAgICAgICBcInR3b0NyaXRlcmlhXCI6XCJEd2Ega3J5dGVyaWFcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm9iamVjdGl2ZVJ1bGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiUmVndcWCYVwiLFxuICAgICAgICAgICAgXCJvcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICBcImV4cGVjdGVkLXZhbHVlLW1heGltaXphdGlvblwiOlwibWFrc2ltdW1cIixcbiAgICAgICAgICAgICAgICBcImV4cGVjdGVkLXZhbHVlLW1pbmltaXphdGlvblwiOlwibWluaW11bVwiLFxuICAgICAgICAgICAgICAgIFwibWF4aS1taW5cIjpcIm1heGktbWluXCIsXG4gICAgICAgICAgICAgICAgXCJtYXhpLW1heFwiOlwibWF4aS1tYXhcIixcbiAgICAgICAgICAgICAgICBcIm1pbmktbWluXCI6XCJtaW5pLW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWluaS1tYXhcIjpcIm1pbmktbWF4XCIsXG4gICAgICAgICAgICAgICAgXCJtaW4tbWF4XCI6XCJtaW4tbWF4XCIsXG4gICAgICAgICAgICAgICAgXCJtYXgtbWluXCI6XCJtYXgtbWluXCIsXG4gICAgICAgICAgICAgICAgXCJtaW4tbWluXCI6IFwibWluLW1pblwiLFxuICAgICAgICAgICAgICAgIFwibWF4LW1heFwiOiBcIm1heC1tYXhcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInVuZG9cIjogXCJDb2ZuaWpcIixcbiAgICAgICAgXCJyZWRvXCI6IFwiUG9uw7N3XCIsXG4gICAgICAgIFwic2V0dGluZ3NcIjogXCJVc3Rhd2llbmlhXCIsXG4gICAgICAgIFwiYWJvdXRcIjogXCJJbmZvcm1hY2plXCIsXG4gICAgICAgIFwic2Vuc2l0aXZpdHlBbmFseXNpc1wiOiBcIkFuYWxpemEgd3JhxbxsaXdvxZtjaVwiLFxuICAgICAgICBcInJlY29tcHV0ZVwiOiBcIlByemVsaWN6XCJcbiAgICB9LFxuICAgIFwibm9kZVwiOntcbiAgICAgICAgXCJuYW1lXCI6IFwiRXR5a2lldGFcIlxuICAgIH0sXG4gICAgXCJlZGdlXCI6e1xuICAgICAgICBcIm5hbWVcIjogXCJFdHlraWV0YVwiLFxuICAgICAgICBcInBheW9mZlwiOiBcIld5cMWCYXRhXCIsXG4gICAgICAgIFwicHJvYmFiaWxpdHlcIjogXCJQcmF3ZG9wb2RvYmllxYRzdHdvXCJcbiAgICB9LFxuICAgIFwidGV4dFwiOntcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRla3N0XCJcbiAgICB9LFxuICAgIFwibGVhZ3VlVGFibGVEaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJUYWJlbGEgbGlnb3dhXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOiB7XG4gICAgICAgICAgICBcImRvd25sb2FkQ3N2XCI6IFwiUG9iaWVyeiBDU1ZcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImxlYWd1ZVRhYmxlXCI6IHtcbiAgICAgICAgXCJoZWFkZXJzXCI6e1xuICAgICAgICAgICAgXCJwb2xpY3lOb1wiOiBcIk5yIHBvbGl0eWtpXCIsXG4gICAgICAgICAgICBcInBvbGljeVwiOiBcIlBvbGl0eWthXCIsXG4gICAgICAgICAgICBcImNvbW1lbnRcIjogXCJLb21lbnRhcnpcIlxuICAgICAgICB9LFxuICAgICAgICBcImNvbW1lbnRcIjp7XG4gICAgICAgICAgICBcImRvbWluYXRlZEJ5XCI6IFwiemRvbWlub3dhbmEgKHByemV6ICN7e3BvbGljeX19KVwiLFxuICAgICAgICAgICAgXCJleHRlbmRlZERvbWluYXRlZEJ5XCI6IFwiemRvbWlub3dhbmEgcm96c3plcnplbmllIChwcnpleiAje3twb2xpY3kxfX0gaSAje3twb2xpY3kyfX0pXCIsXG4gICAgICAgICAgICBcImluY3JhdGlvXCI6IFwiaW5rcmVtZW50YWxueSBpbG9yYXo9e3tpbmNyYXRpb319XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwbG90XCI6e1xuICAgICAgICAgICAgXCJncm91cHNcIjp7XG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZFwiOiBcIlJla29tZW5kb3dhbnkgKGRsYSBwZXduZWogd2FydG/Fm2NpIFdUUCB3IHpha3Jlc2llKVwiLFxuICAgICAgICAgICAgICAgIFwiaGlnaGxpZ2h0ZWQtZGVmYXVsdFwiOiBcIlJla29tZW5kb3dhbnkgKGRsYSBkb215xZtsbmVqIHdhcnRvxZtjaSBXVFApXCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZC1kb21pbmF0ZWRcIiA6IFwiWmRvbWlub3dhbmEgcm96c3plcnplbmllXCIsXG4gICAgICAgICAgICAgICAgXCJkb21pbmF0ZWRcIjogXCJaZG9taW5vd2FuYVwiLFxuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIklubmVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidG9vbHRpcFwiOntcbiAgICAgICAgICAgICAgICBcImdyYWRpZW50QXJyb3cxXCI6IFwiS2llcnVuZWsgb3B0eW1hbGl6YWNqaSB7e25hbWV9fVwiLFxuICAgICAgICAgICAgICAgIFwiZ3JhZGllbnRBcnJvdzJcIjogXCJLaWVydW5layBvcHR5bWFsaXphY2ppIHt7bmFtZX19XCIsXG4gICAgICAgICAgICAgICAgXCJkb21pbmF0ZWRSZWdpb25cIjogXCJPYnN6YXIgemRvbWlub3dhbnlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibGVnZW5kXCI6e1xuICAgICAgICAgICAgICAgIFwiZG9taW5hdGVkUmVnaW9uXCI6IFwiU3phcnkgcmVnaW9uIG96bmFjemEgb2JzemFyIHpkb21pbm93YW55XCIsXG4gICAgICAgICAgICAgICAgXCJncmFkaWVudEFycm93c1wiOiBcIlN0cnphxYJraSB3c2thenVqxIUga2llcnVuZWsgcG9wcmF3eVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwic2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkFuYWxpemEgd3JhxbxsaXdvxZtjaVwiLFxuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJydW5Kb2JcIjogXCJVcnVjaG9tXCIsXG4gICAgICAgICAgICBcInN0b3BKb2JcIjogXCJaYXRyenltYWpcIixcbiAgICAgICAgICAgIFwidGVybWluYXRlSm9iXCI6IFwiWmFrb8WEY3pcIixcbiAgICAgICAgICAgIFwicmVzdW1lSm9iXCI6IFwiV3puw7N3XCIsXG4gICAgICAgICAgICBcImRvd25sb2FkQ3N2XCI6IFwiUG9iaWVyeiBDU1ZcIixcbiAgICAgICAgICAgIFwiYmFja1wiOiBcIldzdGVjelwiLFxuICAgICAgICAgICAgXCJjbGVhclwiOiBcIld5Y3p5xZvEh1wiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiam9iUGFyYW1ldGVyc0J1aWxkZXJcIjoge1xuICAgICAgICBcImJ1dHRvbnNcIjoge1xuICAgICAgICAgICAgXCJyZW1vdmVQYXJhbWV0ZXJWYWx1ZVwiOiBcIlVzdcWEXCIsXG4gICAgICAgICAgICBcImFkZFBhcmFtZXRlclZhbHVlXCI6IFwiRG9kYWpcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImpvYlJlc3VsdFRhYmxlXCI6e1xuICAgICAgICBcInRvb2x0aXBcIjoge1xuICAgICAgICAgICAgXCJtdWx0aXBsZVBvbGljaWVzSW5DZWxsXCI6IFwie3tudW1iZXJ9fSBwb2xpdHlrXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwaXZvdFwiOiB7XG4gICAgICAgICAgICBcImFnZ3JlZ2F0b3JzXCI6e1xuICAgICAgICAgICAgICAgIFwibWF4aW11bVwiOiBcIk1ha3NpbXVtXCIsXG4gICAgICAgICAgICAgICAgXCJtaW5pbXVtXCI6IFwiTWluaW11bVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW5kZXJlcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJoZWF0bWFwXCI6IFwiTWFwYSBjaWVwbG5hXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwb2xpY3lQcmV2aWV3XCI6IFwicG9kZ2zEhWQgcG9saXR5a2lcIlxuICAgIH0sXG4gICAgXCJqb2JcIjp7XG4gICAgICAgIFwic2Vuc2l0aXZpdHktYW5hbHlzaXNcIjp7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJBbmFsaXphIHdyYcW8bGl3b8WbY2kgTi1jenlubmlrb3dhXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJOYXp3YSByZWd1xYJ5XCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlJvenN6ZXJ6b255IG9waXMgcG9saXR5a2lcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiWm1pZW5uZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk5hendhXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtaW5cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1pbmltdW1cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1heFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWFrc2ltdW1cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiRMWCdWdvxZvEh1wiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RlcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiS3Jva1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICAgICAgXCJjb21wdXRhdGlvbnNcIjogXCJCxYLEhWQgdyBvYmxpY3plbmlhY2ggYW5hbGl6eSB3cmHFvGxpd2/Fm2NpIGRsYSBuYXN0xJlwdWrEhWN5Y2ggcGFyYW1ldHLDs3c6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTGljemJhIHpkZWZpbmlvd2FueWNoIHNjZW5hcml1c3p5IHdpxJlrc3phIG5pxbwge3tudW1iZXJGb3JtYXR0ZWR9fS4gV3lsaWN6ZW5pZSBhbmFsaXp5IHdyYcW8bGl3b8WbY2kgbW/FvGUgc2nEmSBuaWUgcG93aWXFm8SHIGx1YiBiecSHIGJhcmR6byBwb3dvbG5lLlwiLFxuICAgICAgICAgICAgICAgIFwibGFyZ2VQYXJhbWV0ZXJzTnVtYmVyXCI6IFwiTGljemJhIHBhcmFtZXRyw7N3IHdpxJlrc3phIG5pxbwge3tudW1iZXJ9fS4gV3nFm3dpZXRsZW5pZSBhbmFsaXp5IHdyYcW8bGl3b8WbY2kgbW/FvGUgc2nEmSBuaWUgcG93aWXFm8SHIGx1YiBiecSHIGJhcmR6byBwb3dvbG5lLlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidG9ybmFkby1kaWFncmFtXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiRGlhZ3JhbSB0b3JuYWRvXCIsXG4gICAgICAgICAgICBcInBhcmFtXCI6e1xuICAgICAgICAgICAgICAgIFwicnVsZU5hbWVcIjogXCJOYXp3YSByZWd1xYJ5XCIsXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlJvenN6ZXJ6b255IG9waXMgcG9saXR5a2lcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ2YXJpYWJsZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiWm1pZW5uZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk5hendhXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJtaW5cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIk1pbmltdW1cIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIm1heFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTWF4aW11bVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJExYJ1Z2/Fm8SHXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJLcm9rXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIldhcnRvxZvEhyBkb215xZtsbmFcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXJyb3JzXCI6e1xuICAgICAgICAgICAgICAgIFwiY29tcHV0YXRpb25zXCI6IFwiQsWCxIVkIHcgb2JsaWN6ZW5pYWNoIGFuYWxpenkgd3JhxbxsaXdvxZtjaSBkbGEgbmFzdMSZcHVqxIVjeWNoIHBhcmFtZXRyw7N3OlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ3YXJuaW5nc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJsYXJnZVNjZW5hcmlvc051bWJlclwiOiBcIkxpY3piYSB6ZGVmaW5pb3dhbnljaCBzY2VuYXJpdXN6eSB3acSZa3N6YSBuacW8IHt7bnVtYmVyRm9ybWF0dGVkfX0uIFd5bGljemVuaWUgYW5hbGl6eSB3cmHFvGxpd2/Fm2NpIG1vxbxlIHNpxJkgbmllIHBvd2llxZvEhyBsdWIgYnnEhyBiYXJkem8gcG93b2xuZS5cIixcbiAgICAgICAgICAgICAgICBcImxhcmdlUGFyYW1ldGVyc051bWJlclwiOiBcIkxpY3piYSBwYXJhbWV0csOzdyB3acSZa3N6YSBuacW8IHt7bnVtYmVyfX0uIFd5xZt3aWV0bGVuaWUgYW5hbGl6eSB3cmHFvGxpd2/Fm2NpIG1vxbxlIHNpxJkgbmllIHBvd2llxZvEhyBsdWIgYnnEhyBiYXJkem8gcG93b2xuZS5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicGxvdFwiOntcbiAgICAgICAgICAgICAgICBcImxlZ2VuZFwiOntcbiAgICAgICAgICAgICAgICAgICAgXCJsb3dcIjogXCJabW5pZWpzemVuaWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJoaWdoXCI6IFwiWndpxJlrc3plbmllXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwieEF4aXNUaXRsZVwiOiBcIld5cMWCYXRhXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9iYWJpbGlzdGljLXNlbnNpdGl2aXR5LWFuYWx5c2lzXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiUHJvYmFiaWxpc3R5Y3puYSBhbmFsaXphIHdyYcW8bGl3b8WbY2lcIixcbiAgICAgICAgICAgIFwicGFyYW1cIjp7XG4gICAgICAgICAgICAgICAgXCJydWxlTmFtZVwiOiBcIk5hendhIHJlZ3XFgnlcIixcbiAgICAgICAgICAgICAgICBcIm51bWJlck9mUnVuc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJMaWN6YmEgcG93dMOzcnplxYRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlJvenN6ZXJ6b255IG9waXMgcmVndcWCeVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInZhcmlhYmxlc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJabWllbm5lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiTmF6d2FcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImZvcm11bGFcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIkZvcm11xYJhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhlbHBcIjogXCJXeWJpZXJ6IHd6w7NyIGZvcm11xYJ5IHogbWVudSBsdWIgd3Bpc3ogd8WCYXNueSBrb2RcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXJyb3JzXCI6e1xuICAgICAgICAgICAgICAgIFwiY29tcHV0YXRpb25zXCI6IFwiQsWCxIVkIHcgb2JsaWN6ZW5pdSBhbmFsaXp5IHdyYcW8bGl3b8WbY2kgZGxhIG5hc3TEmXB1asSFY3ljaCBwYXJhbWV0csOzdzpcIixcbiAgICAgICAgICAgICAgICBcInBhcmFtLWNvbXB1dGF0aW9uXCI6IFwiQsWCxIVkIHcgd3lsaWN6YW5pdSB3YXJ0b8WbY2kgcGFyYW1ldHLDs3c6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTGljemJhIHpkZWZpbmlvd2FueWNoIHNjZW5hcml1c3p5IHdpxJlrc3phIG5pxbwge3tudW1iZXJGb3JtYXR0ZWR9fS4gV3lsaWN6ZW5pZSBhbmFsaXp5IHdyYcW8bGl3b8WbY2kgbW/FvGUgc2nEmSBuaWUgcG93aWXFm8SHIGx1YiBiecSHIGJhcmR6byBwb3dvbG5lLlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibGVhZ3VlLXRhYmxlXCI6e1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVGFiZWxhIGxpZ293YVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BpZGVyLXBsb3RcIjoge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiV3lrcmVzIHBhasSZY3p5bm93eVwiLFxuICAgICAgICAgICAgXCJwYXJhbVwiOiB7XG4gICAgICAgICAgICAgICAgXCJydWxlTmFtZVwiOiBcIk5hendhIHJlZ3XFgnlcIixcbiAgICAgICAgICAgICAgICBcImV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IFwiUm96c3plcnpvbnkgb3BpcyBwb2xpdHlraVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInBlcmNlbnRhZ2VDaGFuZ2VSYW5nZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCIrLy0gem1pYW5hIHByb2NlbnRvd2EgZG8gYW5hbGl6eVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImxlbmd0aFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJMaWN6YmEgd2FydG/Fm2NpIGRvIHByemV0ZXN0b3dhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaGVscFwiOiBcIkxpY3piYSB3YXJ0b8WbY2kgZG8gcHJ6ZXRlc3Rvd2EgKHBvIGplZG5laiBzdHJvbmllIHpha3Jlc3UpXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwidmFyaWFibGVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBcIlptaWVubmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJOYXp3YVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogXCJXYXJ0b8WbxIcgZG9tecWbbG5hXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImVycm9yc1wiOntcbiAgICAgICAgICAgICAgICBcImNvbXB1dGF0aW9uc1wiOiBcIkLFgsSFZCB3IG9ibGljemVuaXUgYW5hbGl6eSB3cmHFvGxpd2/Fm2NpIGRsYSBuYXN0xJlwdWrEhWN5Y2ggcGFyYW1ldHLDs3c6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndhcm5pbmdzXCI6IHtcbiAgICAgICAgICAgICAgICBcImxhcmdlU2NlbmFyaW9zTnVtYmVyXCI6IFwiTGljemJhIHpkZWZpbmlvd2FueWNoIHNjZW5hcml1c3p5IHdpxJlrc3phIG5pxbwge3tudW1iZXJGb3JtYXR0ZWR9fS4gV3lsaWN6ZW5pZSBhbmFsaXp5IHdyYcW8bGl3b8WbY2kgbW/FvGUgc2nEmSBuaWUgcG93aWXFm8SHIGx1YiBiecSHIGJhcmR6byBwb3dvbG5lLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwbG90XCI6IHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZFwiOiB7fSxcbiAgICAgICAgICAgICAgICBcInhBeGlzVGl0bGVcIjogXCJabWlhbmEgcHJvY2VudG93YVwiLFxuICAgICAgICAgICAgICAgIFwieUF4aXNUaXRsZVwiOiBcIld5cMWCYXRhXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJlcnJvcnNcIjp7XG4gICAgICAgICAgICBcImdlbmVyaWNcIjogXCJCxYLEhWQgdyBvYmxpY3plbmlhY2ggYW5hbGl6eSB3cmHFvGxpd2/Fm2NpOiB7e21lc3NhZ2V9fVwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogXCJCxYLEmWRuZSBwYXJhbWV0cnkgdyB7e2pvYk5hbWV9fVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwic2V0dGluZ3NEaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJVc3Rhd2llbmlhXCIsXG4gICAgICAgIFwiZ2VuZXJhbFwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJPZ8OzbG5lXCIsXG4gICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiUm96bWlhciBjemNpb25raVwiLFxuICAgICAgICAgICAgXCJmb250RmFtaWx5XCI6IFwiUm9kemluYSBjemNpb25la1wiLFxuICAgICAgICAgICAgXCJmb250V2VpZ2h0XCI6IFwiV2FnYSBjemNpb25raVwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTdHlsIGN6Y2lvbmtpXCIsXG4gICAgICAgICAgICBcIm51bWJlckZvcm1hdExvY2FsZVwiOiBcIktvZCBsb2thbGl6YWNqaSBqxJl6eWtvd2VqIGxpY3piXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXlvZmYxXCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZvcm1hdCB3eXDFgmF0eSAxXCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5XCI6IFwiV2FsdXRhXCIsXG4gICAgICAgICAgICBcImN1cnJlbmN5RGlzcGxheVwiOiBcIld5xZt3aWV0bGFuaWUgd2FsdXR5XCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwiU3R5bFwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJNaW5pbWFsbmEgbGljemJhIG1pZWpzYyBwbyBwcnplY2lua3VcIixcbiAgICAgICAgICAgIFwibWF4aW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWFrc3ltYWxuYSBsaWN6YmEgbWllanNjIHBvIHByemVjaW5rdVwiLFxuICAgICAgICAgICAgXCJ1c2VHcm91cGluZ1wiOiBcIlNlcGFyYXRvcnkgZ3J1cG93YW5pYVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF5b2ZmMlwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJGb3JtYXQgd3lwxYJhdHkgMlwiLFxuICAgICAgICAgICAgXCJjdXJyZW5jeVwiOiBcIldhbHV0YVwiLFxuICAgICAgICAgICAgXCJjdXJyZW5jeURpc3BsYXlcIjogXCJXecWbd2lldGxhbmllIHdhbHV0eVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIlN0eWxcIixcbiAgICAgICAgICAgIFwibWluaW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWluaW1hbG5hIGxpY3piYSBtaWVqc2MgcG8gcHJ6ZWNpbmt1XCIsXG4gICAgICAgICAgICBcIm1heGltdW1GcmFjdGlvbkRpZ2l0c1wiOiBcIk1ha3N5bWFsbmEgbGljemJhIG1pZWpzYyBwbyBwcnplY2lua3VcIixcbiAgICAgICAgICAgIFwidXNlR3JvdXBpbmdcIjogXCJTZXBhcmF0b3J5IGdydXBvd2FuaWFcIlxuICAgICAgICB9LFxuICAgICAgICBcInByb2JhYmlsaXR5XCI6e1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkZvcm1hdCBwcmF3ZG9wb2RvYmllxYRzdHdhXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwiU3R5bFwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjogXCJNaW5pbWFsbmEgbGljemJhIG1pZWpzYyBwbyBwcnplY2lua3VcIixcbiAgICAgICAgICAgIFwibWF4aW11bUZyYWN0aW9uRGlnaXRzXCI6IFwiTWFrc3ltYWxuYSBsaWN6YmEgbWllanNjIHBvIHByemVjaW5rdVwiLFxuICAgICAgICAgICAgXCJmb250U2l6ZVwiOiBcIlJvem1pYXIgY3pjaW9ua2lcIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCJLb2xvclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJXxJl6ZcWCXCIsXG4gICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3plcm9rb8WbxIcga3Jhd8SZZHppXCIsXG4gICAgICAgICAgICBcIm9wdGltYWxcIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk9wdHltYWxueVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiS29sb3JcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3plcm9rb8WbxIcga3Jhd8SZZHppXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImxhYmVsXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiRXR5a2lldGFcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiUm96bWlhciBjemNpb25raSBldHlraWV0eVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJLb2xvciBldHlraWV0eVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJXeXDFgmF0YVwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJSb3ptaWFyIGN6Y2lvbmtpXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIktvbG9yXCIsXG4gICAgICAgICAgICAgICAgXCJuZWdhdGl2ZUNvbG9yXCI6IFwiS29sb3Igd2FydG/Fm2NpIHVqZW1uZWpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZGVjaXNpb25cIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJXxJl6ZcWCIERlY3l6eWpueVwiLFxuICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIktvbG9yIHd5cGXFgm5pZW5pYVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiS29sb3Iga3Jhd8SZZHppXCIsXG4gICAgICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZmlsbFwiOiBcIktvbG9yIHd5cGXFgm5pZW5pYSBwbyB6YXpuYWN6ZW5pdVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiY2hhbmNlXCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiV8SZemXFgiBMb3Nvd3lcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJLb2xvciB3eXBlxYJuaWVuaWFcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBcIktvbG9yIGtyYXfEmWR6aVwiLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImZpbGxcIjogXCJLb2xvciB3eXBlxYJuaWVuaWEgcG8gemF6bmFjemVuaXVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInRlcm1pbmFsXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJXxJl6ZcWCIEtvxYRjb3d5XCIsXG4gICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiS29sb3Igd3lwZcWCbmllbmlhXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJLb2xvciBrcmF3xJlkemlcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxsXCI6IFwiS29sb3Igd3lwZcWCbmllbmlhIHBvIHphem5hY3plbml1XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIld5cMWCYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJSb3ptaWFyIGN6Y2lvbmtpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJLb2xvclwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5lZ2F0aXZlQ29sb3JcIjogXCJLb2xvciB3YXJ0b8WbY2kgdWplbW5lalwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImVkZ2VcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiS3Jhd8SZZMW6XCIsXG4gICAgICAgICAgICBcInN0cm9rZVwiOiBcIktvbG9yXCIsXG4gICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3plcm9rb8WbxIcga3Jhd8SZZHppXCIsXG4gICAgICAgICAgICBcIm9wdGltYWxcIjp7XG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIk9wdHltYWxuYVwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwiS29sb3JcIixcbiAgICAgICAgICAgICAgICBcInN0cm9rZVdpZHRoXCI6IFwiU3plcm9rb8WbxIcga3Jhd8SZZHppXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJaYXpuYWN6b25hXCIsXG4gICAgICAgICAgICAgICAgXCJzdHJva2VcIjogXCJLb2xvclwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogXCJTemVyb2tvxZvEhyBrcmF3xJlkemlcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibGFiZWxcIjoge1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJFdHlraWV0YVwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJSb3ptaWFyIGN6Y2lvbmtpXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIktvbG9yXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBheW9mZlwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiV3lwxYJhdGFcIixcbiAgICAgICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiUm96bWlhciBjemNpb25raVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJLb2xvclwiLFxuICAgICAgICAgICAgICAgIFwibmVnYXRpdmVDb2xvclwiOiBcIktvbG9yIHdhcnRvxZtjaSB1amVtbmVqXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkaWFncmFtVGl0bGVcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiVHl0dcWCIGRpYWdyYW11XCIsXG4gICAgICAgICAgICBcImZvbnRTaXplXCI6IFwiUm96bWlhciBjemNpb25raVwiLFxuICAgICAgICAgICAgXCJmb250V2VpZ2h0XCI6IFwiV2FnYSBjemNpb25raVwiLFxuICAgICAgICAgICAgXCJmb250U3R5bGVcIjogXCJTdHlsIGN6Y2lvbmtpXCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiS29sb3JcIixcbiAgICAgICAgICAgIFwibWFyZ2luXCI6e1xuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJNYXJnaW5lc1wiLFxuICAgICAgICAgICAgICAgIFwidG9wXCI6IFwiR8Ozcm55XCIsXG4gICAgICAgICAgICAgICAgXCJib3R0b21cIjogXCJEb2xueVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOntcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiUG9kdHl0dcWCIChvcGlzIGRpYWdyYW11KVwiLFxuICAgICAgICAgICAgICAgIFwic2hvd1wiOiBcIld5xZt3aWV0bFwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFNpemVcIjogXCJSb3ptaWFyIGN6Y2lvbmtpXCIsXG4gICAgICAgICAgICAgICAgXCJmb250V2VpZ2h0XCI6IFwiV2FnYSBjemNpb25raVwiLFxuICAgICAgICAgICAgICAgIFwiZm9udFN0eWxlXCI6IFwiU3R5bCBjemNpb25raVwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCJLb2xvclwiLFxuICAgICAgICAgICAgICAgIFwibWFyZ2luVG9wXCI6IFwiTWFyZ2luZXMgZ8Ozcm55XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJsZWFndWVUYWJsZVwiOiB7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiVGFiZWxhIGxpZ293YVwiLFxuICAgICAgICAgICAgXCJwbG90XCI6IHtcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiV3lrcmVzXCIsXG4gICAgICAgICAgICAgICAgXCJtYXhXaWR0aFwiOiBcIk1ha3N5bWFsbmEgc3plcm9rb8WbxIdcIixcbiAgICAgICAgICAgICAgICBcImhpZ2hsaWdodGVkQ29sb3JcIjogXCJLb2xvciBwb2xpdHlraSByZWtvbWVuZG93YW5laiAoZGxhIHBld25lZ28gV1RQIHcgemFrcmVzaWUpXCIsXG4gICAgICAgICAgICAgICAgXCJoaWdobGlnaHRlZERlZmF1bHRDb2xvclwiOiBcIktvbG9yIHBvbGl0eWtpIHJla29tZW5kb3dhbmVqIChkbGEgZG9tecWbbG5lZ28gV1RQKVwiLFxuICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWREb21pbmF0ZWRDb2xvclwiOiBcIktvbG9nIHBvbGl0eWtpIHpkb21pbm93YW5laiByb3pzemVyemVuaWVcIixcbiAgICAgICAgICAgICAgICBcImRvbWluYXRlZENvbG9yXCI6IFwiS29sb3IgcG9saXR5a2kgemRvbWlub3dhbmVqXCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0Q29sb3JcIjogXCJLb2xvciBpbm55Y2ggcG9saXR5a1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwib3RoZXJcIjp7XG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiSW5uZVwiLFxuICAgICAgICAgICAgXCJkaXNhYmxlQW5pbWF0aW9uc1wiOiBcIld5xYLEhWN6IGFuaW1hY2plXCIsXG4gICAgICAgICAgICBcImZvcmNlRnVsbEVkZ2VSZWRyYXdcIjogXCJXeW11xZsgcGXFgm5lIHByemVyeXNvd3l3YW5pZSBrcmF3xJlkemlcIixcbiAgICAgICAgICAgIFwiaGlkZUxhYmVsc1wiOiBcIlVrcnlqIGV0eWtpZXR5XCIsXG4gICAgICAgICAgICBcImhpZGVQYXlvZmZzXCI6IFwiVWtyeWogd3lwxYJhdHlcIixcbiAgICAgICAgICAgIFwiaGlkZVByb2JhYmlsaXRpZXNcIjogXCJVa3J5aiBwcmF3ZG9wb2RvYmllxYRzdHdhXCIsXG4gICAgICAgICAgICBcInJhd1wiOiBcIlN1cm93eVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiYWJvdXREaWFsb2dcIjp7XG4gICAgICAgIFwidGl0bGVcIjogXCJJbmZvcm1hY2plXCJcbiAgICB9LFxuICAgIFwiaGVscFwiOntcbiAgICAgICAgXCJoZWFkZXJcIjogXCJQb21vY1wiLFxuICAgICAgICBcIm1vdXNlXCI6IHtcbiAgICAgICAgICAgIFwiaGVhZGVyXCI6XCJBa2NqZSBteXN6eTpcIixcbiAgICAgICAgICAgIFwibGlzdFwiOntcbiAgICAgICAgICAgICAgICBcIjFcIjogXCJsZXd5IGtsYXdpc3ogbXlzenk6IHd5YsOzciB3xJl6xYJhL2tyYXfEmWR6aVwiLFxuICAgICAgICAgICAgICAgIFwiMlwiOiBcInByYXd5IGtsYXdpc3ogbXlzenk6IG1lbnUga29udGVrc3Rvd2UgKGRvZGF3YW5pZS9tYW5pcHVsb3dhbmllIHfEmXrFgmFtaSlcIixcbiAgICAgICAgICAgICAgICBcIjNcIjogXCJwb2R3w7NqbmUga2xpa25pxJljaWUgbGV3eW0gcHJ6eWNpc2tpZW0gbXlzenk6IG1lbnUga29udGVrc3Rvd2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImtleWJvYXJkXCI6IHtcbiAgICAgICAgICAgIFwiaGVhZGVyXCI6XCJTa3LDs3R5IGtsYXdpc3pvd2U6XCIsXG4gICAgICAgICAgICBcImxpc3RcIjp7XG4gICAgICAgICAgICAgICAgXCIxXCI6IFwiRGVsOiB1c3V3YW5pZSB3eWJyYW55Y2ggd8SZesWCw7N3XCIsXG4gICAgICAgICAgICAgICAgXCIyXCI6IFwiQ3RybC1DL1g6IGtvcGlvd2FuaWUvd3ljaW5hbmllIHd5YnJhbnljaCB3xJl6xYLDs3dcIixcbiAgICAgICAgICAgICAgICBcIjNcIjogXCJDdHJsLVY6IHdrbGVqIHNrb3Bpb3dhbmUgd8SZesWCeSBqYWtvIHBvZGRyemV3byB3eWJyYW5lZ28gd8SZesWCYVwiLFxuICAgICAgICAgICAgICAgIFwiNFwiOiBcIkN0cmwtWS9aOiBjb2ZuaWovcG9uw7N3XCIsXG4gICAgICAgICAgICAgICAgXCI1XCI6IFwiQ3RybC1BbHQtRC9DL1Q6IGRvZGFqIG5vd3kgd8SZemXFgiBEZWN5enlqbnkvTG9zb3d5L0tvxYRjb3d5IGpha28gZHppZWNrbyA8c3Ryb25nPnd5YnJhbmVnbyB3xJl6xYJhPC9zdHJvbmc+XCIsXG4gICAgICAgICAgICAgICAgXCI2XCI6IFwiQ3RybC1BbHQtRC9DOiBXc3RyenlrbmlqIG5vd3kgd8SZemXFgiBEZWN5enlqbnkvTG9zb3d5IGRvIDxzdHJvbmc+d3licmFuZWoga3Jhd8SZZHppPC9zdHJvbmc+XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkb2NzXCI6IFwiRG9rdW1lbnRhY2phIFNpbHZlckRlY2lzaW9ucyBqZXN0IGRvc3TEmXBuYSA8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vU2lsdmVyRGVjaXNpb25zL1NpbHZlckRlY2lzaW9ucy93aWtpL0RvY3VtZW50YXRpb25cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj50dXRhajwvYT5cIlxuICAgIH0sXG4gICAgXCJkZWZpbml0aW9uc0RpYWxvZ1wiOntcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkRlZmluaWNqZSB6bWllbm55Y2hcIixcbiAgICAgICAgXCJzY29wZVwiOiB7XG4gICAgICAgICAgICBcImdsb2JhbFwiOiBcInphc2nEmWcgZ2xvYmFsbnlcIixcbiAgICAgICAgICAgIFwibm9kZVwiOiBcInphc2nEmWcgd3licmFuZWdvIHfEmXrFgmEgaSBwb2Rkcnpld2FcIlxuICAgICAgICB9LFxuICAgICAgICBcImJ1dHRvbnNcIjp7XG4gICAgICAgICAgICBcInJlY2FsY3VsYXRlXCI6IFwiUHJ6ZWxpY3pcIlxuICAgICAgICB9LFxuICAgICAgICBcImV2YWx1YXRlZFZhcmlhYmxlc1wiOiBcIldhcnRvxZtjaSB6bWllbm55Y2hcIlxuICAgIH0sXG4gICAgXCJzaWRlYmFyRGVmaW5pdGlvbnNcIjp7XG4gICAgICAgIFwic2NvcGVcIjp7XG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiWmFzacSZZyB6bWllbm5lajpcIixcbiAgICAgICAgICAgIFwiZ2xvYmFsXCI6IFwiZ2xvYmFsbnlcIixcbiAgICAgICAgICAgIFwibm9kZVwiOiBcInd5YnJhbnkgd8SZemXFgiBpIHBvZGRyemV3b1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaGVhZGVyXCI6IFwiWm1pZW5uZVwiLFxuICAgICAgICBcImNvZGVcIjogXCJLb2RcIixcbiAgICAgICAgXCJidXR0b25zXCI6e1xuICAgICAgICAgICAgXCJvcGVuRGlhbG9nXCIgOiBcIk90d8Ozcnogb2tubyBkaWFsb2dvd2VcIixcbiAgICAgICAgICAgIFwicmVjYWxjdWxhdGVcIjogXCJQcnplbGljelwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXZhbHVhdGVkVmFyaWFibGVzXCI6IFwiV2FydG/Fm2NpIHptaWVubnljaFwiXG4gICAgfSxcbiAgICBcIm11bHRpcGxlQ3JpdGVyaWFcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiV2llbGUga3J5dGVyacOzd1wiLFxuICAgICAgICBcImRlZmF1bHRNYXhpbWl6ZWRDcml0ZXJpb25OYW1lXCI6IFwiRWZla3RcIixcbiAgICAgICAgXCJkZWZhdWx0TWluaW1pemVkQ3JpdGVyaW9uTmFtZVwiOiBcIktvc3p0XCIsXG4gICAgICAgIFwibmFtZU9mQ3JpdGVyaW9uMVwiOiBcIk5hendhIGtyeXRlcml1bSAxXCIsXG4gICAgICAgIFwibmFtZU9mQ3JpdGVyaW9uMlwiOiBcIk5hendhIGtyeXRlcml1bSAyXCIsXG4gICAgICAgIFwiZGVmYXVsdENyaXRlcmlvbjFXZWlnaHRcIjogXCJEb215xZtsbmEgd2FnYSBrcnllcml1bSAxXCIsXG4gICAgICAgIFwid2VpZ2h0TG93ZXJCb3VuZFwiOiBcIkRvbG5hIGdyYW5pY2Egd2FnaVwiLFxuICAgICAgICBcIndlaWdodFVwcGVyQm91bmRcIjogXCJHw7NybmEgZ3JhbmljYSB3YWdpXCIsXG4gICAgICAgIFwiYnV0dG9uc1wiOntcbiAgICAgICAgICAgIFwic2hvd0xlYWd1ZVRhYmxlXCIgOiBcIlBva2HFvCB0YWJlbMSZIGxpZ293xIVcIixcbiAgICAgICAgICAgIFwiZmxpcFwiOiBcIlphbWllxYRcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImxheW91dE9wdGlvbnNcIjp7XG4gICAgICAgIFwiaGVhZGVyXCI6IFwiVWvFgmFkXCIsXG4gICAgICAgIFwibWFyZ2luSG9yaXpvbnRhbFwiOiBcIk1hcmdpbmVzIHcgcG96aW9taWVcIixcbiAgICAgICAgXCJtYXJnaW5WZXJ0aWNhbFwiOiBcIk1hcmdpbmVzIHcgcGlvbmllXCIsXG4gICAgICAgIFwibm9kZVNpemVcIjogXCJSb3ptaWFyIHfEmXrFgmFcIixcbiAgICAgICAgXCJlZGdlU2xhbnRXaWR0aE1heFwiOiBcIlNrb3Mga3Jhd8SZZHppIChtYWtzeW1hbG55KVwiLFxuICAgICAgICBcImdyaWRXaWR0aFwiOiBcIlN6ZXJva2/Fm8SHXCIsXG4gICAgICAgIFwiZ3JpZEhlaWdodFwiOiBcIld5c29rb8WbxIdcIlxuICAgIH0sXG4gICAgXCJkaWFncmFtRGV0YWlsc1wiOntcbiAgICAgICAgXCJoZWFkZXJcIjogXCJTemN6ZWfDs8WCeVwiLFxuICAgICAgICBcInRpdGxlXCIgOiBcIlR5dHXFglwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCIgOiBcIk9waXNcIlxuICAgIH0sXG4gICAgXCJvYmplY3RQcm9wZXJ0aWVzXCI6e1xuICAgICAgICBcImhlYWRlclwiOntcbiAgICAgICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgICAgICBcImRlY2lzaW9uXCI6XCJXxJl6ZcWCIERlY3l6eWpueVwiLFxuICAgICAgICAgICAgICAgIFwiY2hhbmNlXCI6XCJXxJl6ZcWCIExvc293eVwiLFxuICAgICAgICAgICAgICAgIFwidGVybWluYWxcIjpcIlfEmXplxYIgS2/FhGNvd3lcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZWRnZVwiOiBcIktyYXfEmWTFulwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiUMWCeXdhasSFY3kgdGVrc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImNoaWxkcmVuUHJvcGVydGllc1wiOntcbiAgICAgICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgICAgICBcImhlYWRlclwiOiBcIlBvxYLEhWN6ZW5pYVwiLFxuICAgICAgICAgICAgICAgIFwiY2hpbGRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImhlYWRlclwiOiBcIktyYXfEmWTFuiAje3tudW1iZXJ9fVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImNvbmZpcm1cIjp7XG4gICAgICAgIFwibmV3RGlhZ3JhbVwiOiBcIkN6eSBqZXN0ZcWbIHBld2llbiwgxbxlIGNoY2VzeiBwb3J6dWNpxIcgb2JlY255IGRpYWdyYW0/IFdzenlzdGtpZSBuaWV6YXBpc2FuZSB6bWlhbnkgem9zdGFuxIUgdXRyYWNvbmUuXCIsXG4gICAgICAgIFwib3BlbkRpYWdyYW1cIjogXCJDenkgamVzdGXFmyBwZXdpZW4/IFdzenlzdGtpZSBuaWV6YXBpc2FuZSB6bWlhbnkgem9zdGFuxIUgdXRyYWNvbmUuXCIsXG4gICAgICAgIFwiYmVmb3JldW5sb2FkXCI6IFwiQ3p5IGplc3RlxZsgcGV3aWVuLCDFvGUgY2hjZXN6IHphbWtuxIXEhyBTaWx2ZXJEZWNpc2lvbnM/IFdzenlzdGtpZSBuaWV6YXBpc2FuZSB6bWlhbnkgem9zdGFuxIUgdXRyYWNvbmUuXCJcbiAgICB9LFxuICAgIFwiZXJyb3JcIjp7XG4gICAgICAgIFwianNvblBhcnNlXCI6IFwiQsWCxIVkIHByemV0d2FyemFuaWEgZGFueWNoIHogcGxpa3UhXCIsXG4gICAgICAgIFwiZmlsZUFwaU5vdFN1cHBvcnRlZFwiOlwiRnVuY2tqYSAnZmlsZSBBUEknIG5pZSBqZXN0IHdzcGllcmFuYSB3IHRlaiBwcnplZ2zEhWRhcmNlIGludGVybmV0b3dlai5cIixcbiAgICAgICAgXCJpbnB1dEZpbGVzUHJvcGVydHlcIjpcIlR3b2plIHByemVnbMSFZGFya2EgbmllIHdzcGllcmEgb3BjamkgYHBsaWtpYCBwcnp5IG90d2llcmFuaXUgcGxpa3UuXCIsXG4gICAgICAgIFwibm90U2lsdmVyRGVjaXNpb25zRmlsZVwiOlwiUGxpayBuaWV6Z29kbnkgeiBmb3JtYXRlbSBTaWx2ZXJEZWNpc2lvbnMhXCIsXG4gICAgICAgIFwiaW5jb3JyZWN0VmVyc2lvbkZvcm1hdFwiOiBcIk5pZXBvcHJhd255IGZvcm1hdCBjacSFZ3UgeiBudW1lcmVtIHdlcnNqaSFcIixcbiAgICAgICAgXCJmaWxlVmVyc2lvbk5ld2VyVGhhbkFwcGxpY2F0aW9uVmVyc2lvblwiOiBcIldlcnNqYSBwbGlrdSBqZXN0IG5vd2FzemEgbmnFvCB3ZXJzamEgYXBsaWthY2ppLiBOaWVrdMOzcmUgZnVua2Nqb25hbG5vxZtjaSBtb2fEhSBiecSHIG5pZWRvc3TEmXBuZS5cIixcbiAgICAgICAgXCJvYmplY3RpdmVDb21wdXRhdGlvbkZhaWx1cmVcIjogXCJCxYLEhWQgcG9kY3phcyB3eWxpY3phbmlhIGNlbHUhXCIsXG4gICAgICAgIFwiZGlhZ3JhbURyYXdpbmdGYWlsdXJlXCI6IFwiQsWCxIVkIHBvZGN6YXMgcnlzb3dhbmlhIGRpYWdyYW11IVwiLFxuICAgICAgICBcIm1hbGZvcm1lZERhdGFcIjpcIkLFgsSFZCBvZGN6eXR1IGRhbnljaCBkcnpld2EhXCIsXG4gICAgICAgIFwicG5nRXhwb3J0Tm90U3VwcG9ydGVkXCI6IFwiRWtzcG9ydCBkbyBvYnJhenUgUE5HIG5pZSBqZXN0IHdzcGllcmFueSB3IFR3b2plaiBwcnplZ2zEhWRhcmNlLlwiLFxuICAgICAgICBcInBuZ0V4cG9ydE5vdFN1cHBvcnRlZElFXCI6IFwiRWtzcG9ydCBkbyBvYnJhenUgUE5HIG5pZSBqZXN0IHdzcGllcmFueSB3IHByemVnbMSFZGFyY2UgSW50ZXJuZXQgRXhwbG9yZXIuXCIsXG4gICAgICAgIFwic3ZnRXhwb3J0Tm90U3VwcG9ydGVkXCI6IFwiRWtzcG9ydCBkbyBvYnJhenUgU1ZHIG5pZSBqZXN0IHdzcGllcmFueSB3IFR3b2plaiBwcnplZ2zEhWRhcmNlLlwiLFxuICAgICAgICBcInBkZkV4cG9ydE5vdFN1cHBvcnRlZFwiOiBcIkVrc3BvcnQgZG8gUERGIG5pZSBqZXN0IHdzcGllcmFueSB3IFR3b2plaiBwcnplZ2zEhWRhcmNlLlwiLFxuICAgICAgICBcImluY29ycmVjdFBheW9mZk51bWJlckZvcm1hdE9wdGlvbnNcIjogXCJOaWV3xYJhxZtjaXdlIHVzdGF3aWVuaWEgZGxhIGZvcm1hdHUgd3lwxYJhdHkuXCIsXG4gICAgICAgIFwiaW5jb3JyZWN0UHJvYmFiaWxpdHlOdW1iZXJGb3JtYXRPcHRpb25zXCI6IFwiTmlld8WCYcWbY2l3ZSB1c3Rhd2llbmlhIGRsYSBmb3JtYXR1IHByYXdkb3BvZG9iaWXFhHN0dy5cIixcbiAgICAgICAgXCJpbmNvcnJlY3ROdW1iZXJGb3JtYXRPcHRpb25zXCI6IFwiTmlld8WCYcWbY2l3ZSB1c3Rhd2lvbm8gZm9ybWF0b3dhbmllIGxpY3piLiBQcnp5asSZdG8gdXN0YXdpZW5pYSBkb215xZtsbmUuXCIsXG4gICAgICAgIFwianNQREZpc05vdEluY2x1ZGVkXCI6IFwiTmllIHfFgsSFY3pvbm8ganNQREYhXCIsXG4gICAgICAgIFwic2VydmVyU2lkZUV4cG9ydFJlcXVlc3RGYWlsdXJlXCI6IFwiTmlldWRhbmUgemFweXRhbmllIGRvIHNlcndlcmEgZXhwb3J0dSFcIlxuICAgIH1cbn1cbiIsInJlcXVpcmUoJ2VzNi1zZXQvaW1wbGVtZW50Jyk7XG5pbXBvcnQge0QzRXh0ZW5zaW9uc30gZnJvbSAnc2QtdHJlZS1kZXNpZ25lcidcbmltcG9ydCB7QXBwfSBmcm9tICcuL2FwcCdcbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcbkQzRXh0ZW5zaW9ucy5leHRlbmQoKTtcblxuQXBwLnZlcnNpb24gPSB2ZXJzaW9uO1xubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG5cblxuXG4iLCJpbXBvcnQge1RlbXBsYXRlc30gZnJvbSBcIi4uL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHtQQVJBTUVURVJfVFlQRX0gZnJvbSBcInNkLWNvbXB1dGF0aW9ucy9zcmMvam9icy9lbmdpbmUvam9iLXBhcmFtZXRlci1kZWZpbml0aW9uXCI7XG5pbXBvcnQge2xvZ30gZnJvbSAnc2QtdXRpbHMnXG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiLi4vZDNcIjtcbmltcG9ydCB7VXRpbHN9IGZyb20gXCJzZC11dGlsc1wiO1xuaW1wb3J0IHtpMThufSBmcm9tIFwiLi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tIFwiLi4vYXBwLXV0aWxzXCI7XG5pbXBvcnQge1Rvb2x0aXB9IGZyb20gXCJzZC10cmVlLWRlc2lnbmVyXCI7XG5pbXBvcnQge0F1dG9jb21wbGV0ZX0gZnJvbSBcIi4uL2F1dG9jb21wbGV0ZVwiXG5cbmV4cG9ydCBjbGFzcyBKb2JQYXJhbWV0ZXJzQnVpbGRlcntcblxuXG4gICAgam9iUGFyYW1ldGVycztcbiAgICBoaWRkZW5QYXJhbXM7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBpMThuUHJlZml4PScnLCBvbkNoYW5nZT0oKT0+e30pe1xuICAgICAgICB0aGlzLmNvbnRhaW5lcj1jb250YWluZXI7XG4gICAgICAgIHRoaXMuaTE4blByZWZpeCA9IGkxOG5QcmVmaXg7XG4gICAgICAgIHRoaXMucGFyYW1UeXBlVG9JbnB1dFR5cGUgPXt9O1xuICAgICAgICB0aGlzLnBhcmFtVHlwZVRvSW5wdXRBdHRycyA9IHt9O1xuXG4gICAgICAgIHRoaXMucGFyYW1UeXBlVG9JbnB1dFR5cGVbUEFSQU1FVEVSX1RZUEUuQk9PTEVBTl0gPSAnY2hlY2tib3gnO1xuICAgICAgICB0aGlzLnBhcmFtVHlwZVRvSW5wdXRUeXBlW1BBUkFNRVRFUl9UWVBFLkRBVEVdID0gJ2RhdGUnO1xuICAgICAgICB0aGlzLnBhcmFtVHlwZVRvSW5wdXRUeXBlW1BBUkFNRVRFUl9UWVBFLklOVEVHRVJdID0gJ251bWJlcic7XG4gICAgICAgIHRoaXMucGFyYW1UeXBlVG9JbnB1dEF0dHJzW1BBUkFNRVRFUl9UWVBFLklOVEVHRVJdID0gW3tcbiAgICAgICAgICAgIG5hbWU6IFwic3RlcFwiLFxuICAgICAgICAgICAgdmFsdWU6IFwiMVwiXG4gICAgICAgIH1dO1xuICAgICAgICB0aGlzLnBhcmFtVHlwZVRvSW5wdXRUeXBlW1BBUkFNRVRFUl9UWVBFLk5VTUJFUl0gPSAnbnVtYmVyJztcbiAgICAgICAgdGhpcy5wYXJhbVR5cGVUb0lucHV0QXR0cnNbUEFSQU1FVEVSX1RZUEUuTlVNQkVSXSA9IFt7XG4gICAgICAgICAgICBuYW1lOiBcInN0ZXBcIixcbiAgICAgICAgICAgIHZhbHVlOiBcImFueVwiXG4gICAgICAgIH1dO1xuICAgICAgICB0aGlzLnBhcmFtVHlwZVRvSW5wdXRUeXBlW1BBUkFNRVRFUl9UWVBFLlNUUklOR10gPSAndGV4dCc7XG5cbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlO1xuICAgIH1cblxuXG4gICAgc2V0Sm9iUGFyYW1ldGVycyhqb2JOYW1lLCBqb2JQYXJhbWV0ZXJzLCBjdXN0b21QYXJhbXNDb25maWc9e30pe1xuICAgICAgICB0aGlzLmpvYk5hbWU9am9iTmFtZTtcbiAgICAgICAgdGhpcy5qb2JQYXJhbWV0ZXJzID0gam9iUGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5jdXN0b21QYXJhbXNDb25maWcgPSBjdXN0b21QYXJhbXNDb25maWc7XG4gICAgICAgIHRoaXMuY2xlYW4oKTtcbiAgICAgICAgdGhpcy5idWlsZCh0aGlzLmNvbnRhaW5lciwgdGhpcy5qb2JQYXJhbWV0ZXJzLmRlZmluaXRpb25zLCB0aGlzLmpvYlBhcmFtZXRlcnMudmFsdWVzLCAnJywgdGhpcy5vbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgY2xlYW4oKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmh0bWwoJycpO1xuICAgICAgICB0aGlzLnByaXN0aW5lID0ge307XG4gICAgICAgIHRoaXMuY3VzdG9tVmFsaWRhdG9ycyA9IHt9O1xuICAgICAgICB0aGlzLnN0cmljdFZhbGlkYXRpb24oZmFsc2UpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKHN0cmljdFZhbGlkYXRpb24gPSB0cnVlKXtcbiAgICAgICAgdGhpcy5zdHJpY3RWYWxpZGF0aW9uKHN0cmljdFZhbGlkYXRpb24pO1xuICAgICAgICB0aGlzLnByaXN0aW5lID0ge307XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNlbGVjdEFsbCgnLnNkLXByaXN0aW5lJykuY2xhc3NlZCgnc2QtcHJpc3RpbmUnLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrQ3VzdG9tVmFsaWRhdG9ycygpICYmIHRoaXMuam9iUGFyYW1ldGVycy52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIGNoZWNrQ3VzdG9tVmFsaWRhdG9ycygpe1xuICAgICAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgICAgICBVdGlscy5mb3JPd24odGhpcy5jdXN0b21WYWxpZGF0b3JzLCAodmFsLCBrZXkpPT57XG4gICAgICAgICAgICB2YWxpZCA9IHZhbGlkICYmIHZhbCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cblxuICAgIHN0cmljdFZhbGlkYXRpb24oZW5hYmxlZD10cnVlKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NlZCgnc2Qtc3RyaWN0LXZhbGlkYXRpb24nLCBlbmFibGVkKTtcbiAgICB9XG5cblxuICAgIGJ1aWxkKGNvbnRhaW5lciwgam9iUGFyYW1ldGVyRGVmaW5pdGlvbnMsIHBhcmVudFZhbHVlT2JqZWN0LCAgcGFyZW50UGF0aD0nJywgb25DaGFuZ2U9KCk9Pnt9LCBvbklucHV0PSgpPT57fSl7XG4gICAgICAgIGNvbnRhaW5lci5odG1sKCcnKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgcGFyYW1zID0gY29udGFpbmVyLnNlbGVjdEFsbChcIi5zZC1qb2ItcGFyYW1ldGVyXCIpLmRhdGEoam9iUGFyYW1ldGVyRGVmaW5pdGlvbnMpO1xuICAgICAgICB2YXIgcGFyYW1zRW50ZXIgPSBwYXJhbXMuZW50ZXIoKS5hcHBlbmRTZWxlY3RvcignZGl2LnNkLWpvYi1wYXJhbWV0ZXInKTtcblxuICAgICAgICBwYXJhbXNFbnRlci5odG1sKGQ9PlRlbXBsYXRlcy5nZXQoJ2pvYlBhcmFtZXRlcicsIGQpKTtcblxuICAgICAgICB2YXIgcGFyYW1zTWVyZ2UgPSBwYXJhbXNFbnRlci5tZXJnZShwYXJhbXMpO1xuICAgICAgICBwYXJhbXNNZXJnZS5lYWNoKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICB2YXIgcGFyYW1TZWxlY3Rpb24gPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IHBhcmVudFBhdGg7XG5cbiAgICAgICAgICAgIGlmKHBhdGgpe1xuICAgICAgICAgICAgICAgIHBhdGgrPScuJztcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0aCArPSBkLm5hbWU7XG4gICAgICAgICAgICBwYXJhbVNlbGVjdGlvbi5jbGFzc2VkKCdzZC1oaWRkZW4nLCBVdGlscy5nZXQoc2VsZi5jdXN0b21QYXJhbXNDb25maWcsIHBhdGgrJy5oaWRkZW4nKSk7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcmVudFZhbHVlT2JqZWN0W2QubmFtZV07XG4gICAgICAgICAgICB2YXIgcmVwZWF0aW5nID0gZC5tYXhPY2N1cnM+MTtcbiAgICAgICAgICAgIGlmKHZhbHVlPT11bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIGlmKHJlcGVhdGluZyl7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgdmk9MDsgdmk8ZC5taW5PY2N1cnM7IHZpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChzZWxmLmdldEVtcHR5VmFsdWUoZC50eXBlKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPVV0aWxzLmdldChzZWxmLmN1c3RvbVBhcmFtc0NvbmZpZywgcGF0aCsnLnZhbHVlJywgc2VsZi5nZXRFbXB0eVZhbHVlKGQudHlwZSkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyZW50VmFsdWVPYmplY3RbZC5uYW1lXT12YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIXJlcGVhdGluZykge1xuICAgICAgICAgICAgICAgIHNlbGYuYnVpbGRQYXJhbWV0ZXJTaW5nbGVWYWx1ZShwYXJhbVNlbGVjdGlvbiwgZCwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpPT4gcGFyZW50VmFsdWVPYmplY3RbZC5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiAodik9PiBwYXJlbnRWYWx1ZU9iamVjdFtkLm5hbWVdPXZcbiAgICAgICAgICAgICAgICB9LCBwYXRoLG9uQ2hhbmdlLCBvbklucHV0KVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcGFyYW1TZWxlY3Rpb24uYXBwZW5kU2VsZWN0b3IoXCJkaXYuc2Qtam9iLXBhcmFtZXRlci1uYW1lXCIpLmh0bWwoc2VsZi5nZXRQYXJhbU5hbWVJMThuKHBhdGgpKTtcblxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNDb250YWluZXIgPSBwYXJhbVNlbGVjdGlvbi5hcHBlbmRTZWxlY3RvcihcImRpdi5zZC1qb2ItcGFyYW1ldGVyLXZhbHVlc1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uQnV0dG9ucyA9IHBhcmFtU2VsZWN0aW9uLmFwcGVuZFNlbGVjdG9yKFwiZGl2LnNkLWFjdGlvbi1idXR0b25zXCIpO1xuICAgICAgICAgICAgICAgIHZhciBhZGRCdXR0b24gPSBhY3Rpb25CdXR0b25zLmFwcGVuZFNlbGVjdG9yKCdidXR0b24uc2QtYWRkLWpvYi1wYXJhbWV0ZXItdmFsdWUtYnV0dG9uLmljb24tYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgYWRkQnV0dG9uLmFwcGVuZFNlbGVjdG9yKFwiaS5tYXRlcmlhbC1pY29uc1wiKS5odG1sKCdhZGQnKTtcblxuXG4gICAgICAgICAgICAgICAgcGFyYW1TZWxlY3Rpb24uY2xhc3NlZCgnaW52YWxpZCcsICFkLnZhbGlkYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHt9O1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vblZhbHVlUmVtb3ZlZCA9IGZ1bmN0aW9uKHYsaSl7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5idWlsZFBhcmFtZXRlclZhbHVlcyh2YWx1ZXNDb250YWluZXIsIGQsIHZhbHVlLCBwYXRoLGNhbGxiYWNrcylcbiAgICAgICAgICAgICAgICAgICAgYWRkQnV0dG9uLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHZhbHVlLmxlbmd0aD49ZC5tYXhPY2N1cnMpXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uQ2hhbmdlID0gKCkgPT57XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtU2VsZWN0aW9uLmNsYXNzZWQoJ2ludmFsaWQnLCAhZC52YWxpZGF0ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uSW5wdXQgPSAoKSA9PntcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1TZWxlY3Rpb24uY2xhc3NlZCgnaW52YWxpZCcsICFkLnZhbGlkYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIG9uSW5wdXQoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgYWRkQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0aXRsZScsIGkxOG4udCgnam9iUGFyYW1ldGVyc0J1aWxkZXIuYnV0dG9ucy5hZGRQYXJhbWV0ZXJWYWx1ZScpKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnc2QtaGlkZGVuJywgdmFsdWUubGVuZ3RoPj1kLm1heE9jY3VycylcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKHNlbGYuZ2V0RW1wdHlWYWx1ZShkLnR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLnNldChzZWxmLnByaXN0aW5lLCBwYXRoK1wiW1wiKyh2YWx1ZS5sZW5ndGgtMSkrXCJdXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5idWlsZFBhcmFtZXRlclZhbHVlcyh2YWx1ZXNDb250YWluZXIsIGQsIHZhbHVlLCBwYXRoLCBjYWxsYmFja3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQnV0dG9uLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHZhbHVlLmxlbmd0aD49ZC5tYXhPY2N1cnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuXG4gICAgICAgICAgICAgICAgc2VsZi5idWlsZFBhcmFtZXRlclZhbHVlcyh2YWx1ZXNDb250YWluZXIsIGQsIHZhbHVlLCBwYXRoLGNhbGxiYWNrcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBidWlsZFBhcmFtZXRlclZhbHVlcyhjb250YWluZXIsIHBhcmFtRGVmaW5pdGlvbiwgdmFsdWVzLCBwYXRoLCBjYWxsYmFja3Mpe1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lci5odG1sKFwiXCIpO1xuXG4gICAgICAgIHZhciBwYXJhbVZhbHVlcyA9IGNvbnRhaW5lci5zZWxlY3RBbGwoXCIuc2Qtam9iLXBhcmFtZXRlci12YWx1ZVwiKS5kYXRhKHZhbHVlcyk7XG5cbiAgICAgICAgcGFyYW1WYWx1ZXMuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgICB2YXIgcGFyYW1WYWx1ZXNFbnRlciA9IHBhcmFtVmFsdWVzLmVudGVyKCkuYXBwZW5kU2VsZWN0b3IoJ2Rpdi5zZC1qb2ItcGFyYW1ldGVyLXZhbHVlJyk7XG5cbiAgICAgICAgdmFyIHBhcmFtVmFsdWVzTWVyZ2UgPSBwYXJhbVZhbHVlc0VudGVyLm1lcmdlKHBhcmFtVmFsdWVzKTtcblxuICAgICAgICB2YXIgaW5kZXhUb1NlbGVjdGlvbiA9IHt9O1xuXG4gICAgICAgIHZhciBjdXN0b21WYWxpZGF0b3IgPSBVdGlscy5nZXQoc2VsZi5jdXN0b21QYXJhbXNDb25maWcsIHBhdGgrJy5jdXN0b21WYWxpZGF0b3InKTtcblxuICAgICAgICBmdW5jdGlvbiBjaGVja0N1c3RvbVZhbGlkYXRvcigpe1xuICAgICAgICAgICAgbGV0IGFsbFZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGN1c3RvbVZhbGlkYXRvcil7XG4gICAgICAgICAgICAgICAgY3VzdG9tVmFsaWRhdG9yKHZhbHVlcykuZm9yRWFjaCgoaXNWYWxpZCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGluZGV4VG9TZWxlY3Rpb25baV07XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWxpZCA9IHBhcmFtRGVmaW5pdGlvbi52YWxpZGF0ZVNpbmdsZVZhbHVlKHZhbHVlc1tpXSkgJiYgaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoJ2ludmFsaWQnLCAhdmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICBhbGxWYWxpZCA9IGFsbFZhbGlkICYmIHZhbGlkO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhbGxWYWxpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuY3VzdG9tVmFsaWRhdG9yc1twYXRoXSA9IGNoZWNrQ3VzdG9tVmFsaWRhdG9yO1xuXG4gICAgICAgIHBhcmFtVmFsdWVzRW50ZXIuZWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgICAgICAgIHZhciBkZXJpdmVkVmFsdWVVcGRhdGVycyA9IFtdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVEZXJpdmVkVmFsdWVzKCl7XG4gICAgICAgICAgICAgICAgZGVyaXZlZFZhbHVlVXBkYXRlcnMuZm9yRWFjaCh1cGRhdGVyPT51cGRhdGVyKHZhbHVlc1tpXSkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBpbmRleFRvU2VsZWN0aW9uW2ldID0gc2VsZWN0aW9uO1xuXG5cbiAgICAgICAgICAgIGlmIChQQVJBTUVURVJfVFlQRS5DT01QT1NJVEUgPT0gcGFyYW1EZWZpbml0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmVzdGVkUGFyYW1ldGVycyA9IHNlbGVjdGlvbi5zZWxlY3RPckFwcGVuZChcImRpdi5zZC1uZXN0ZWQtcGFyYW1ldGVyc1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgb25DaGFuZ2UgPSAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uY2xhc3NlZCgnaW52YWxpZCcsICFwYXJhbURlZmluaXRpb24udmFsaWRhdGVTaW5nbGVWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja0N1c3RvbVZhbGlkYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEZXJpdmVkVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhbGxiYWNrcy5vbkNoYW5nZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIG9uSW5wdXQgPSAoKT0+e1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEZXJpdmVkVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5jbGFzc2VkKCdpbnZhbGlkJywgIXBhcmFtRGVmaW5pdGlvbi52YWxpZGF0ZVNpbmdsZVZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ3VzdG9tVmFsaWRhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhbGxiYWNrcy5vbklucHV0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbklucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2VsZi5idWlsZChuZXN0ZWRQYXJhbWV0ZXJzLCBwYXJhbURlZmluaXRpb24ubmVzdGVkUGFyYW1ldGVycywgdmFsdWUsIHBhdGgsIG9uQ2hhbmdlLCBvbklucHV0KTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uY2xhc3NlZCgnaW52YWxpZCcsICFwYXJhbURlZmluaXRpb24udmFsaWRhdGVTaW5nbGVWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5jbGFzc2VkKCdzZC1wcmlzdGluZScsIFV0aWxzLmdldChzZWxmLnByaXN0aW5lLCBwYXRoK1wiW1wiK2krXCJdXCIsIGZhbHNlKSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBzZWxmLmJ1aWxkUGFyYW1ldGVyU2luZ2xlVmFsdWUoc2VsZWN0aW9uLCBwYXJhbURlZmluaXRpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKT0+IHZhbHVlc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiAodik9PiB2YWx1ZXNbaV09dlxuICAgICAgICAgICAgICAgIH0sIHBhdGgsICgpPT57XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURlcml2ZWRWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDdXN0b21WYWxpZGF0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY2FsbGJhY2tzLm9uQ2hhbmdlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwoKT0+e1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEZXJpdmVkVmFsdWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ3VzdG9tVmFsaWRhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhbGxiYWNrcy5vbklucHV0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbklucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdmFyIGRlcml2ZWRWYWx1ZXNDb25maWdzID0gVXRpbHMuZ2V0KHNlbGYuY3VzdG9tUGFyYW1zQ29uZmlnLCBwYXRoKycuX2Rlcml2ZWRWYWx1ZXMnKTtcbiAgICAgICAgICAgIGlmKGRlcml2ZWRWYWx1ZXNDb25maWdzKXtcbiAgICAgICAgICAgICAgICBkZXJpdmVkVmFsdWVzQ29uZmlncy5mb3JFYWNoKGRlcml2ZWRWYWx1ZUNvbmZpZyA9PntcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVwZGF0ZXIgPSBzZWxmLmJ1aWxkRGVyaXZlZFZhbHVlKHNlbGVjdGlvbiwgZGVyaXZlZFZhbHVlQ29uZmlnLCBwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlcml2ZWRWYWx1ZVVwZGF0ZXJzLnB1c2godXBkYXRlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdmFyIGFjdGlvbkJ1dHRvbnMgPSBzZWxlY3Rpb24uYXBwZW5kU2VsZWN0b3IoXCJkaXYuc2QtYWN0aW9uLWJ1dHRvbnNcIik7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlQnV0dG9uID0gYWN0aW9uQnV0dG9ucy5hcHBlbmRTZWxlY3RvcignYnV0dG9uLnNkLXJlbW92ZS1qb2ItcGFyYW1ldGVyLXZhbHVlLWJ1dHRvbi5pY29uLWJ1dHRvbicpO1xuICAgICAgICAgICAgcmVtb3ZlQnV0dG9uLmFwcGVuZFNlbGVjdG9yKFwiaS5tYXRlcmlhbC1pY29uc1wiKS5odG1sKCdyZW1vdmUnKVxuICAgICAgICAgICAgcmVtb3ZlQnV0dG9uXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RpdGxlJywgaTE4bi50KCdqb2JQYXJhbWV0ZXJzQnVpbGRlci5idXR0b25zLnJlbW92ZVBhcmFtZXRlclZhbHVlJykpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHZhbHVlcy5sZW5ndGg8PXBhcmFtRGVmaW5pdGlvbi5taW5PY2N1cnMpXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIChkKT0+Y2FsbGJhY2tzLm9uVmFsdWVSZW1vdmVkKGQsaSkpXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2hlY2tDdXN0b21WYWxpZGF0b3IoKTtcblxuICAgICAgICBwYXJhbVZhbHVlc01lcmdlLmVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG5cbiAgICAgICAgfSk7XG5cblxuICAgIH1cblxuICAgIGJ1aWxkRGVyaXZlZFZhbHVlKGNvbnRhaW5lciwgZGVyaXZlZFZhbHVlQ29uZmlnLCBwYXRoKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbnB1dElkID0gVXRpbHMuZ3VpZCgpO1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gY29udGFpbmVyLmFwcGVuZFNlbGVjdG9yKCdkaXYuaW5wdXQtZ3JvdXAuc2QtZGVyaXZlZC12YWx1ZScpO1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0UGFyYW1OYW1lSTE4bihwYXRoKycuJytkZXJpdmVkVmFsdWVDb25maWcubmFtZSk7XG4gICAgICAgIHZhciBpbnB1dCA9IHNlbGVjdGlvbi5hcHBlbmQoJ2lucHV0JykuYXR0cigndHlwZScsICd0ZXh0JykuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG5cbiAgICAgICAgc2VsZWN0aW9uLmFwcGVuZFNlbGVjdG9yKCdzcGFuLmJhcicpO1xuICAgICAgICB2YXIgbGFiZWwgPSBzZWxlY3Rpb24uYXBwZW5kKCdsYWJlbCcpXG4gICAgICAgICAgICAuYXR0cignZm9yJywgaW5wdXRJZClcbiAgICAgICAgICAgIC5odG1sKG5hbWUpO1xuXG4gICAgICAgIHJldHVybiAocGFyYW1WYWx1ZSkgPT4ge1xuICAgICAgICAgICAgaW5wdXQubm9kZSgpLnZhbHVlID0gZGVyaXZlZFZhbHVlQ29uZmlnLnZhbHVlKHBhcmFtVmFsdWUpO1xuICAgICAgICAgICAgQXBwVXRpbHMudXBkYXRlSW5wdXRDbGFzcyhpbnB1dCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGJ1aWxkUGFyYW1ldGVyU2luZ2xlVmFsdWUoY29udGFpbmVyLCBwYXJhbURlZmluaXRpb24sIHZhbHVlQWNjZXNzb3IsIHBhdGgsIG9uQ2hhbmdlLCBvbklucHV0KXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgdGVtcCA9IHt9O1xuXG4gICAgICAgIHZhciBpbnB1dElkID0gVXRpbHMuZ3VpZCgpO1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gY29udGFpbmVyLmFwcGVuZFNlbGVjdG9yKCdkaXYuaW5wdXQtZ3JvdXAnKTtcbiAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoJ3NkLXBhcmFtZXRlci0nK3BhcmFtRGVmaW5pdGlvbi5uYW1lLCB0cnVlKTtcbiAgICAgICAgdmFyIGhlbHAgPSB0aGlzLmdldFBhcmFtSGVscEkxOG4ocGF0aCk7XG4gICAgICAgIGlmKGhlbHApIHtcbiAgICAgICAgICAgIGxldCBoZWxwQ29udGFpbmVyID0gY29udGFpbmVyLmFwcGVuZFNlbGVjdG9yKCdkaXYuc2QtaGVscC1pY29uJyk7XG4gICAgICAgICAgICBoZWxwQ29udGFpbmVyLmh0bWwoJzxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5pbmZvX291dGxpbmU8L2k+Jyk7XG4gICAgICAgICAgICBUb29sdGlwLmF0dGFjaChoZWxwQ29udGFpbmVyLCAoZCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVscDtcbiAgICAgICAgICAgIH0sIDUsIDE1KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0gVXRpbHMuZ2V0KHNlbGYuY3VzdG9tUGFyYW1zQ29uZmlnLCBwYXRoKycub3B0aW9ucycsIG51bGwpO1xuXG4gICAgICAgIHZhciBpbnB1dFR5cGUgPSB0aGlzLnBhcmFtVHlwZVRvSW5wdXRUeXBlW3BhcmFtRGVmaW5pdGlvbi50eXBlXTtcbiAgICAgICAgdmFyIGFkZGl0aW9uYWxJbnB1dEF0dHJzID0gdGhpcy5wYXJhbVR5cGVUb0lucHV0QXR0cnNbcGFyYW1EZWZpbml0aW9uLnR5cGVdO1xuICAgICAgICB2YXIgaW5wdXQ7XG4gICAgICAgIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGgpe1xuICAgICAgICAgICAgaW5wdXRUeXBlID0gJ3NlbGVjdCc7XG4gICAgICAgICAgICBpbnB1dCA9IHNlbGVjdGlvbi5hcHBlbmQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnNTZWwgPSBpbnB1dC5zZWxlY3RBbGwoXCJvcHRpb25cIikuZGF0YShbbnVsbF0uY29uY2F0KG9wdGlvbnMpKTtcbiAgICAgICAgICAgIG9wdGlvbnNTZWwuZW50ZXIoKS5hcHBlbmQoXCJvcHRpb25cIikuYXR0cihcInZhbHVlXCIsIGQ9PmQpLnRleHQoZD0+ZCk7XG5cbiAgICAgICAgICAgIGlmKFV0aWxzLmdldChzZWxmLmN1c3RvbVBhcmFtc0NvbmZpZywgcGF0aCsnLm9wdGlvbnNBdXRvY29tcGxldGUnLCBudWxsKSl7XG4gICAgICAgICAgICAgICAgbGV0IGF1dG9jb21wbGV0ZSA9IG5ldyBBdXRvY29tcGxldGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlucHV0ID0gYXV0b2NvbXBsZXRlLmdldElucHV0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaW5wdXQgPSBzZWxlY3Rpb24uYXBwZW5kKCdpbnB1dCcpLmF0dHIoJ3R5cGUnLCBpbnB1dFR5cGUpO1xuXG4gICAgICAgICAgICBpZihhZGRpdGlvbmFsSW5wdXRBdHRycyl7XG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbElucHV0QXR0cnMuZm9yRWFjaChhdHRyPT5pbnB1dC5hdHRyKGF0dHIubmFtZSwgYXR0ci52YWx1ZSkpXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0LmF0dHIoJ2lkJywgaW5wdXRJZCk7XG5cbiAgICAgICAgaW5wdXQuY2xhc3NlZCgnc2QtaW5wdXQnLCB0cnVlKTtcbiAgICAgICAgaW5wdXQub24oJ2lucHV0IGNoYW5nZScsIGZ1bmN0aW9uKGQsIGkpe1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2VsZi5wYXJzZUlucHV0KHRoaXMudmFsdWUsIHBhcmFtRGVmaW5pdGlvbi50eXBlKTtcbiAgICAgICAgICAgIGlmKGlucHV0VHlwZT09J2NoZWNrYm94Jyl7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNoZWNrZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFwYXJhbURlZmluaXRpb24udmFsaWRhdGVTaW5nbGVWYWx1ZSh2YWx1ZSkpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKCdpbnZhbGlkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgnaW52YWxpZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWVBY2Nlc3Nvci5zZXQodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGQzLmV2ZW50LnR5cGUgPT0gJ2NoYW5nZScpIHtcbiAgICAgICAgICAgICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkMy5ldmVudC50eXBlID09ICdpbnB1dCcpIHtcbiAgICAgICAgICAgICAgICBpZiAob25JbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBvbklucHV0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pLmVhY2goZnVuY3Rpb24oZCwgaSl7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yLmdldCgpO1xuICAgICAgICAgICAgaWYoaW5wdXRUeXBlPT0nY2hlY2tib3gnKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSB2YWx1ZVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcFtpXT17fTtcbiAgICAgICAgICAgIHRlbXBbaV0ucHJpc3RpbmVWYWwgPSB2YWx1ZTtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKCdpbnZhbGlkJywgIXBhcmFtRGVmaW5pdGlvbi52YWxpZGF0ZVNpbmdsZVZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGVjdGlvbi5hcHBlbmRTZWxlY3Rvcignc3Bhbi5iYXInKTtcbiAgICAgICAgdmFyIGxhYmVsID0gc2VsZWN0aW9uLmFwcGVuZCgnbGFiZWwnKVxuICAgICAgICAgICAgLmF0dHIoJ2ZvcicsIGlucHV0SWQpXG4gICAgICAgICAgICAuaHRtbChkPT57XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gdGhpcy5nZXRQYXJhbU5hbWVJMThuKHBhdGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpbnB1dC5ub2RlKCkudmFsdWUgPSB2YWx1ZUFjY2Vzc29yLmdldCgpO1xuICAgIH1cblxuICAgIHZhbHVlKHBhdGgsIHZhbHVlKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuam9iUGFyYW1ldGVycy52YWx1ZShwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcGFyc2VJbnB1dCh2YWx1ZSwgcGFyYW1ldGVyVHlwZSl7XG4gICAgICAgIGlmKHBhcmFtZXRlclR5cGU9PT1QQVJBTUVURVJfVFlQRS5EQVRFKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICBpZihwYXJhbWV0ZXJUeXBlPT09UEFSQU1FVEVSX1RZUEUuTlVNQkVSIHx8IHBhcmFtZXRlclR5cGU9PT1QQVJBTUVURVJfVFlQRS5JTlRFR0VSKXtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0RW1wdHlWYWx1ZShwYXJhbWV0ZXJUeXBlKXtcbiAgICAgICAgaWYocGFyYW1ldGVyVHlwZT09PVBBUkFNRVRFUl9UWVBFLkNPTVBPU0lURSl7XG4gICAgICAgICAgICByZXR1cm4ge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldFBhcmFtTmFtZUkxOG4ocGF0aCl7XG4gICAgICAgIHJldHVybiBpMThuLnQodGhpcy5pMThuUHJlZml4KycuJyt0aGlzLmpvYk5hbWUrJy5wYXJhbS4nK3BhdGgrJy5sYWJlbCcpXG4gICAgfVxuXG4gICAgZ2V0UGFyYW1IZWxwSTE4bihwYXRoKXtcbiAgICAgICAgbGV0IGtleSA9IHRoaXMuaTE4blByZWZpeCsnLicrdGhpcy5qb2JOYW1lKycucGFyYW0uJytwYXRoKycuaGVscCc7XG4gICAgICAgIGxldCBoZWxwID0gaTE4bi50KGtleSk7XG4gICAgICAgIHJldHVybiBoZWxwID09PSBrZXkgPyBudWxsIDogaGVscDtcbiAgICB9XG59XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4uL2kxOG4vaTE4blwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcIi4uL2QzXCI7XG5pbXBvcnQge1Bpdm90VGFibGV9IGZyb20gXCIuLi9waXZvdC10YWJsZVwiO1xudmFyIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5leHBvcnQgY2xhc3MgSm9iUmVzdWx0VGFibGVDb25maWcge1xuICAgIG9uUm93U2VsZWN0ZWQgPSAocm93cywgaW5kZXhlcywgZXZlbnQpID0+IHt9O1xuICAgIGNsYXNzTmFtZSA9ICcnO1xuXG4gICAgcGl2b3RUYWJsZTtcblxuICAgIGNvbnN0cnVjdG9yKGN1c3RvbSkge1xuICAgICAgICBpZiAoY3VzdG9tKSB7XG4gICAgICAgICAgICBVdGlscy5kZWVwRXh0ZW5kKHRoaXMsIGN1c3RvbSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBKb2JSZXN1bHRUYWJsZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGNvbmZpZykge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5jb25maWcgPSBuZXcgSm9iUmVzdWx0VGFibGVDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5waXZvdFRhYmxlID0gbmV3IFBpdm90VGFibGUodGhpcy5jb250YWluZXIuc2VsZWN0T3JBcHBlbmQoXCJkaXYuc2Qtam9iLXJlc3VsdC10YWJsZVwiKS5jbGFzc2VkKHRoaXMuY29uZmlnLmNsYXNzTmFtZSwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGNsaWNrQ2FsbGJhY2soZSwgdmFsdWUsIGZpbHRlcnMsIHBpdm90RGF0YSkge1xuICAgICAgICB2YXIgc2VsZj10aGlzO1xuICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleGVzID0gW107XG4gICAgICAgIHZhciBzZWxlY3RlZFJvd3MgPSBbXVxuICAgICAgICBwaXZvdERhdGEuZm9yRWFjaE1hdGNoaW5nUmVjb3JkKGZpbHRlcnMsIHJlY29yZD0+IHtcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXhlcy5wdXNoKHJlY29yZFsnJHJvd0luZGV4J10pO1xuICAgICAgICAgICAgc2VsZWN0ZWRSb3dzLnB1c2goZGF0YS5kYXRhW3JlY29yZFsnJHJvd0luZGV4J11dKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYuY29uZmlnLm9uUm93U2VsZWN0ZWQoc2VsZWN0ZWRSb3dzLCBzZWxlY3RlZEluZGV4ZXMsIGUpXG5cbiAgICB9XG5cbiAgICBzZXRDbGFzc05hbWUoY2xhc3NOYW1lKXtcbiAgICAgICAgaWYodGhpcy5jb25maWcuY2xhc3NOYW1lKXtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKFwiZGl2LnNkLWpvYi1yZXN1bHQtdGFibGVcIikuY2xhc3NlZCh0aGlzLmNvbmZpZy5jbGFzc05hbWUsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zZWxlY3RPckFwcGVuZChcImRpdi5zZC1qb2ItcmVzdWx0LXRhYmxlXCIpLmNsYXNzZWQodGhpcy5jb25maWcuY2xhc3NOYW1lLCB0cnVlKVxuICAgIH1cblxuICAgIHNldERhdGEoZGF0YSwgam9iUGFyYW1ldGVycywgam9iLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZGVyaXZlcnMgPSBqUXVlcnkucGl2b3RVdGlsaXRpZXMuZGVyaXZlcnM7XG4gICAgICAgIHZhciBwaXZvdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICByb3dzOiBkYXRhLnJvd3MsXG4gICAgICAgICAgICB2YWxzOiBkYXRhLnZhbHMsXG4gICAgICAgICAgICBjb2xzOiBkYXRhLmNvbHMsXG4gICAgICAgICAgICBoaWRkZW5BdHRyaWJ1dGVzOiBbJyRyb3dJbmRleCddLFxuICAgICAgICAgICAgYWdncmVnYXRvck5hbWU6IHRoaXMucGl2b3RUYWJsZS5nZXRBZ2dyZWdhdG9yTmFtZShcIm1heGltdW1cIiksXG4gICAgICAgICAgICByZW5kZXJlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YWJsZToge1xuICAgICAgICAgICAgICAgICAgICBjbGlja0NhbGxiYWNrOiBmdW5jdGlvbiAoZSwgdmFsdWUsIGZpbHRlcnMsIHBpdm90RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGlja0NhbGxiYWNrKGUsIHZhbHVlLCBmaWx0ZXJzLCBwaXZvdERhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWF0bWFwOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yU2NhbGVHZW5lcmF0b3I6IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBleHRlbnQgPSBkMy5leHRlbnQodmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbZXh0ZW50WzBdLCAoZXh0ZW50WzBdK2V4dGVudFsxXSkvMixleHRlbnRbMV1dKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtcIiM0YjUzZmZcIiwgXCIjRkZGXCIsIFwiI0ZGMDAwMFwiXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW5kZXJlck5hbWU6IHRoaXMucGl2b3RUYWJsZS5nZXRSZW5kZXJlck5hbWUoXCJoZWF0bWFwXCIpXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgIHJlbmRlcmVyTmFtZTogJ2N1c3RvbScsXG4gICAgICAgICAgICAgcmVuZGVyZXJzOiB7XG4gICAgICAgICAgICAgJ2N1c3RvbSc6IGZ1bmN0aW9uKHBpdm90RGF0YSwgb3B0aW9ucyl7XG4gICAgICAgICAgICAgY29uc29sZS5sb2cocGl2b3REYXRhKVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9Ki9cblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmKGNvbmZpZyl7XG4gICAgICAgICAgICBpZihjb25maWcuYWdncmVnYXRvck5hbWUpe1xuICAgICAgICAgICAgICAgIHBpdm90T3B0aW9ucy5hZ2dyZWdhdG9yTmFtZSA9IGNvbmZpZy5hZ2dyZWdhdG9yTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGNvbmZpZy5hZ2dyZWdhdG9ycyl7XG4gICAgICAgICAgICAgICAgcGl2b3RPcHRpb25zLmFnZ3JlZ2F0b3JzID0gY29uZmlnLmFnZ3JlZ2F0b3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5waXZvdFRhYmxlLnVwZGF0ZShkYXRhLmRhdGEubWFwKChyLCBpKT0+ci5jb25jYXQoaSA/ICBpLTEgOiAnJHJvd0luZGV4JykpLCBwaXZvdE9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHRoaXMuZHJhd0hlYWRlcnMoZGF0YS5oZWFkZXJzKTtcbiAgICAgICAgLy8gdGhpcy5kcmF3Um93cyhkYXRhLnJvd3MpXG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5waXZvdFRhYmxlLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2hvdyhzaG93PXRydWUpe1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc2VkKCdzZC1oaWRkZW4nLCAhc2hvdyk7XG4gICAgfVxuXG4gICAgaGlkZSgpe1xuICAgICAgICB0aGlzLnNob3coZmFsc2UpO1xuICAgIH1cblxuICAgIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgICAgICAvLyB0aGlzLnJlc3VsdFRhYmxlLnNlbGVjdEFsbCgnLnNkLXNlbGVjdGVkJykuY2xhc3NlZCgnc2Qtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge0pvYlJlc3VsdFRhYmxlfSBmcm9tIFwiLi9qb2ItcmVzdWx0LXRhYmxlXCI7XG5pbXBvcnQge1BvbGljeX0gZnJvbSBcInNkLWNvbXB1dGF0aW9ucy9zcmMvcG9saWNpZXMvcG9saWN5XCI7XG5pbXBvcnQge2xvZ30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge2kxOG59IGZyb20gXCIuLi9pMThuL2kxOG5cIjtcbnZhciBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxuXG5leHBvcnQgY2xhc3MgUHJvYmFiaWxpc3RpY1NlbnNpdGl2aXR5QW5hbHlzaXNKb2JSZXN1bHRUYWJsZSBleHRlbmRzIEpvYlJlc3VsdFRhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgY29uZmlnLCBwYXlvZmZOdW1iZXJGb3JtYXR0ZXIsIHByb2JhYmlsaXR5TnVtYmVyRm9ybWF0dGVyKXtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyLCBjb25maWcpO1xuICAgICAgICB0aGlzLnBheW9mZk51bWJlckZvcm1hdHRlciA9IHBheW9mZk51bWJlckZvcm1hdHRlcjtcbiAgICAgICAgdGhpcy5wcm9iYWJpbGl0eU51bWJlckZvcm1hdHRlciA9IHByb2JhYmlsaXR5TnVtYmVyRm9ybWF0dGVyO1xuICAgIH1cblxuICAgIHNldERhdGEoam9iUmVzdWx0LCBqb2JQYXJhbWV0ZXJzLCBqb2IpIHtcbiAgICAgICAgdGhpcy5qb2JSZXN1bHQgPSBqb2JSZXN1bHQ7XG4gICAgICAgIHZhciBkYXRhID0ge3Jvd3M6IFsncG9saWN5JywgJ2V4cGVjdGVkIHZhbHVlJywgJ21lZGlhbicsICdzdGFuZGFyZCBkZXZpYXRpb24nLCAnYmVzdCBwcm9iYWJpbGl0eSddLCBjb2xzOiBbXSwgdmFsczogWydleHBlY3RlZCB2YWx1ZSddLCBkYXRhOiBbXX07XG5cblxuICAgICAgICBkYXRhLmRhdGEucHVzaChbJ3BvbGljeScsICdleHBlY3RlZCB2YWx1ZScsICdtZWRpYW4nLCAnc3RhbmRhcmQgZGV2aWF0aW9uJywgJ2Jlc3QgcHJvYmFiaWxpdHknXSk7XG4gICAgICAgIGpvYlJlc3VsdC5wb2xpY2llcy5mb3JFYWNoKChwb2xpY3ksIGkpPT4ge1xuICAgICAgICAgICAgdmFyIHJvdyA9IFtcbiAgICAgICAgICAgICAgICBQb2xpY3kudG9Qb2xpY3lTdHJpbmcocG9saWN5LCBqb2JQYXJhbWV0ZXJzLnZhbHVlcy5leHRlbmRlZFBvbGljeURlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICB0aGlzLnBheW9mZk51bWJlckZvcm1hdHRlcihqb2JSZXN1bHQuZXhwZWN0ZWRWYWx1ZXNbaV0pLFxuICAgICAgICAgICAgICAgIHRoaXMucGF5b2ZmTnVtYmVyRm9ybWF0dGVyKGpvYlJlc3VsdC5tZWRpYW5zW2ldKSxcbiAgICAgICAgICAgICAgICB0aGlzLnBheW9mZk51bWJlckZvcm1hdHRlcihqb2JSZXN1bHQuc3RhbmRhcmREZXZpYXRpb25zW2ldKSxcbiAgICAgICAgICAgICAgICB0aGlzLnByb2JhYmlsaXR5TnVtYmVyRm9ybWF0dGVyKGpvYlJlc3VsdC5wb2xpY3lJc0Jlc3RQcm9iYWJpbGl0aWVzW2ldKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGRhdGEuZGF0YS5wdXNoKHJvdyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvZy50cmFjZShkYXRhKTtcbiAgICAgICAgc3VwZXIuc2V0RGF0YShkYXRhLCBqb2JQYXJhbWV0ZXJzLCBqb2Ise1xuICAgICAgICAgICAgYWdncmVnYXRvck5hbWU6IFwiZW1wdHlcIixcbiAgICAgICAgICAgIGFnZ3JlZ2F0b3JzOntcbiAgICAgICAgICAgICAgICBlbXB0eTogKGF0dHJpYnV0ZUFycmF5KT0+KGRhdGEsIHJvd0tleSwgY29sS2V5KT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24ocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZnVuY3Rpb24oeCkgeyByZXR1cm4gaTE4bi50KCdqb2JSZXN1bHRUYWJsZS5wb2xpY3lQcmV2aWV3Jyk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1JbnB1dHM6IDFcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY2xpY2tDYWxsYmFjayhlLCB2YWx1ZSwgZmlsdGVycywgcGl2b3REYXRhKSB7XG4gICAgICAgIHZhciBzZWxmPXRoaXM7XG4gICAgICAgIHZhciBzZWxlY3RlZEluZGV4ZXMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGVjdGVkUm93cyA9IFtdO1xuICAgICAgICBwaXZvdERhdGEuZm9yRWFjaE1hdGNoaW5nUmVjb3JkKGZpbHRlcnMsIHJlY29yZD0+IHtcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXhlcy5wdXNoKHJlY29yZFsnJHJvd0luZGV4J10pO1xuICAgICAgICAgICAgc2VsZWN0ZWRSb3dzLnB1c2goe3BvbGljeUluZGV4OiByZWNvcmRbJyRyb3dJbmRleCddfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmNvbmZpZy5vblJvd1NlbGVjdGVkKHNlbGVjdGVkUm93cywgc2VsZWN0ZWRJbmRleGVzLCBlKVxuXG4gICAgfVxufVxuIiwiaW1wb3J0IHtKb2JSZXN1bHRUYWJsZX0gZnJvbSBcIi4vam9iLXJlc3VsdC10YWJsZVwiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCJcblxuXG5leHBvcnQgY2xhc3MgU2Vuc2l0aXZpdHlBbmFseXNpc0pvYlJlc3VsdFRhYmxlIGV4dGVuZHMgSm9iUmVzdWx0VGFibGUge1xuXG4gICAgc2V0RGF0YShqb2JSZXN1bHQsIGpvYlBhcmFtZXRlcnMsIGpvYikge1xuICAgICAgICB0aGlzLmpvYlJlc3VsdCA9IGpvYlJlc3VsdDtcblxuICAgICAgICBqb2JQYXJhbWV0ZXJzID1qb2IuY3JlYXRlSm9iUGFyYW1ldGVycyhVdGlscy5jbG9uZURlZXAoam9iUGFyYW1ldGVycy52YWx1ZXMpKTtcbiAgICAgICAgam9iUGFyYW1ldGVycy52YWx1ZXMucm91bmRWYXJpYWJsZXMgPSB0cnVlO1xuICAgICAgICB2YXIgY3N2REF0YSA9IGpvYi5qb2JSZXN1bHRUb0NzdlJvd3Moam9iUmVzdWx0LCBqb2JQYXJhbWV0ZXJzKTtcblxuICAgICAgICBpZiAoY3N2REF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNzdkRBdGFbMF1bMF0gPSAncG9saWN5XFxubnVtYmVyJ1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbHMgPSBbXTtcbiAgICAgICAgbGV0IHRvdGFsSW5Db2xOdW0gPSAxO1xuXG4gICAgICAgIGpvYlBhcmFtZXRlcnMudmFsdWVzLnZhcmlhYmxlcy5mb3JFYWNoKHY9PntcbiAgICAgICAgICAgIGxldCBfdG90YWxJbkNvbE51bSA9IHYubGVuZ3RoICogdG90YWxJbkNvbE51bTtcbiAgICAgICAgICAgIGlmKChfdG90YWxJbkNvbE51bT4xMDAwKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG90YWxJbkNvbE51bT1fdG90YWxJbkNvbE51bTtcbiAgICAgICAgICAgIGNvbHMucHVzaCh2Lm5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGF0YSA9IHtyb3dzOiBbJ3BvbGljeSddLCBjb2xzOiBjb2xzLCB2YWxzOiBbJ3BheW9mZiddLCBkYXRhOiBjc3ZEQXRhfTtcbiAgICAgICAgc3VwZXIuc2V0RGF0YShkYXRhKVxuICAgIH1cblxuICAgIGNsaWNrQ2FsbGJhY2soZSwgdmFsdWUsIGZpbHRlcnMsIHBpdm90RGF0YSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBzZWxlY3RlZEluZGV4ZXMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGVjdGVkUm93cyA9IFtdO1xuICAgICAgICBwaXZvdERhdGEuZm9yRWFjaE1hdGNoaW5nUmVjb3JkKGZpbHRlcnMsIHJlY29yZD0+IHtcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXhlcy5wdXNoKHJlY29yZFsnJHJvd0luZGV4J10pO1xuICAgICAgICAgICAgc2VsZWN0ZWRSb3dzLnB1c2goc2VsZi5qb2JSZXN1bHQucm93c1tyZWNvcmRbJyRyb3dJbmRleCddXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmNvbmZpZy5vblJvd1NlbGVjdGVkKHNlbGVjdGVkUm93cywgc2VsZWN0ZWRJbmRleGVzLCBlKVxuXG4gICAgfVxufVxuIiwiaW1wb3J0IHtMaW5lQ2hhcnRDb25maWcsIExpbmVDaGFydH0gZnJvbSBcIm9kYy1kMy9zcmMvbGluZS1jaGFydFwiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiLi4vZDNcIjtcbmltcG9ydCB7VG9vbHRpcH0gZnJvbSBcInNkLXRyZWUtZGVzaWduZXJcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4uL2kxOG4vaTE4blwiO1xuaW1wb3J0IHtQb2xpY3l9IGZyb20gXCJzZC1jb21wdXRhdGlvbnMvc3JjL3BvbGljaWVzL3BvbGljeVwiO1xuXG5leHBvcnQgY2xhc3MgU3BpZGVyUGxvdENvbmZpZyBleHRlbmRzIExpbmVDaGFydENvbmZpZyB7XG4gICAgbWF4V2lkdGggPSB1bmRlZmluZWQ7XG5cbiAgICBzaG93TGVnZW5kID0gdHJ1ZTtcbiAgICBwb2xpY3lJbmRleCA9IDA7XG4gICAgZ3VpZGVzID0gdHJ1ZTtcbiAgICBtYXJnaW49e1xuICAgICAgICBsZWZ0OiAxMDBcbiAgICB9O1xuICAgIHg9ey8vIFggYXhpcyBjb25maWdcbiAgICAgICAgdGl0bGU6IGkxOG4udCgnam9iLnNwaWRlci1wbG90LnBsb3QueEF4aXNUaXRsZScpLCAvLyBheGlzIGxhYmVsXG4gICAgICAgIGtleTogMCxcbiAgICAgICAgZG9tYWluTWFyZ2luOiAwXG4gICAgfTtcbiAgICB5PXsvLyBZIGF4aXMgY29uZmlnXG4gICAgICAgIHRpdGxlOiBpMThuLnQoJ2pvYi5zcGlkZXItcGxvdC5wbG90LnlBeGlzVGl0bGUnKSwgLy8gYXhpcyBsYWJlbCxcbiAgICAgICAga2V5OiAxLFxuICAgICAgICBkb21haW5NYXJnaW46IDAuMVxuICAgIH07XG4gICAgc2VyaWVzID0gdHJ1ZTtcbiAgICBkb3RSYWRpdXMgPSAzO1xuXG4gICAgY29uc3RydWN0b3IoY3VzdG9tKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbSkge1xuICAgICAgICAgICAgVXRpbHMuZGVlcEV4dGVuZCh0aGlzLCBjdXN0b20pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3BpZGVyUGxvdCBleHRlbmRzIExpbmVDaGFydCB7XG5cbiAgICBjb25zdHJ1Y3RvcihwbGFjZWhvbGRlclNlbGVjdG9yLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgc3VwZXIocGxhY2Vob2xkZXJTZWxlY3RvciwgZGF0YSwgbmV3IFNwaWRlclBsb3RDb25maWcoY29uZmlnKSk7XG4gICAgfVxuXG4gICAgc2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gc3VwZXIuc2V0Q29uZmlnKG5ldyBTcGlkZXJQbG90Q29uZmlnKGNvbmZpZykpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLnN2Zy5jbGFzc2VkKCdzZC1zcGlkZXItcGxvdCcsIHRydWUpO1xuICAgIH1cblxuICAgIHNldERhdGEoZGF0YSl7XG4gICAgICAgIHRoaXMuY29uZmlnLnRpdGxlID0gUG9saWN5LnRvUG9saWN5U3RyaW5nKGRhdGEucG9saWNpZXNbdGhpcy5jb25maWcucG9saWN5SW5kZXhdKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNldERhdGEoZGF0YS5yb3dzLm1hcChyPT57XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleTogci52YXJpYWJsZU5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBkYXRhLnBlcmNlbnRhZ2VSYW5nZVZhbHVlcy5tYXAoKHJhbmdlVmFsLCBpbmRleCk9PltcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wZXJjZW50YWdlUmFuZ2VWYWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICByLnBheW9mZnNbdGhpcy5jb25maWcucG9saWN5SW5kZXhdW2luZGV4XVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgIH1cblxuICAgIGluaXRQbG90KCkge1xuICAgICAgICBkMy5zZWxlY3QodGhpcy5iYXNlQ29udGFpbmVyKS5zdHlsZSgnbWF4LXdpZHRoJywgdGhpcy5jb25maWcubWF4V2lkdGgpO1xuICAgICAgICBzdXBlci5pbml0UGxvdCgpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHtEaXZlcmdpbmdTdGFja2VkQmFyQ2hhcnRDb25maWcsIERpdmVyZ2luZ1N0YWNrZWRCYXJDaGFydH0gZnJvbSBcIm9kYy1kMy9zcmMvZGl2ZXJnaW5nLXN0YWNrZWQtYmFyLWNoYXJ0XCI7XG5pbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcbmltcG9ydCAqIGFzIGQzIGZyb20gXCIuLi9kM1wiO1xuaW1wb3J0IHtUb29sdGlwfSBmcm9tIFwic2QtdHJlZS1kZXNpZ25lclwiO1xuaW1wb3J0IHtpMThufSBmcm9tIFwiLi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge1BvbGljeX0gZnJvbSBcInNkLWNvbXB1dGF0aW9ucy9zcmMvcG9saWNpZXMvcG9saWN5XCI7XG5cbmV4cG9ydCBjbGFzcyBUb3JuYWRvRGlhZ3JhbVBsb3RDb25maWcgZXh0ZW5kcyBEaXZlcmdpbmdTdGFja2VkQmFyQ2hhcnRDb25maWcge1xuICAgIG1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIG1hcmdpbj17XG4gICAgICAgIGxlZnQ6IDE1MCxcbiAgICAgICAgdG9wOiA3MFxuICAgIH07XG5cbiAgICBzaG93TGVnZW5kID0gdHJ1ZTtcbiAgICBmb3JjZUxlZ2VuZCA9IHRydWU7XG5cbiAgICBjYXRlZ29yeU5hbWVzID0gW2kxOG4udChcImpvYi50b3JuYWRvLWRpYWdyYW0ucGxvdC5sZWdlbmQubG93XCIpLCBpMThuLnQoXCJqb2IudG9ybmFkby1kaWFncmFtLnBsb3QubGVnZW5kLmhpZ2hcIildO1xuICAgIGNvbG9yUmFuZ2UgPSBbXCIjNGY4MWJkXCIsIFwiIzliYmI1OVwiXTtcbiAgICBwb2xpY3lJbmRleCA9IDA7XG5cbiAgICBndWlkZXMgPSB0cnVlO1xuICAgIG1pZGRsZVZhbHVlID0gMTAwMDtcbiAgICBzaG93QmFyVmFsdWVzID0gZmFsc2U7XG5cbiAgICB4PXsvLyBYIGF4aXMgY29uZmlnXG4gICAgICAgIHRpdGxlOiBpMThuLnQoJ2pvYi50b3JuYWRvLWRpYWdyYW0ucGxvdC54QXhpc1RpdGxlJyksIC8vIGF4aXMgbGFiZWxcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoY3VzdG9tKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbSkge1xuICAgICAgICAgICAgVXRpbHMuZGVlcEV4dGVuZCh0aGlzLCBjdXN0b20pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9ybmFkb0RpYWdyYW1QbG90IGV4dGVuZHMgRGl2ZXJnaW5nU3RhY2tlZEJhckNoYXJ0IHtcblxuICAgIGNvbnN0cnVjdG9yKHBsYWNlaG9sZGVyU2VsZWN0b3IsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICBzdXBlcihwbGFjZWhvbGRlclNlbGVjdG9yLCBkYXRhLCBuZXcgVG9ybmFkb0RpYWdyYW1QbG90Q29uZmlnKGNvbmZpZykpO1xuICAgIH1cblxuICAgIHNldENvbmZpZyhjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNldENvbmZpZyhuZXcgVG9ybmFkb0RpYWdyYW1QbG90Q29uZmlnKGNvbmZpZykpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLnN2Zy5jbGFzc2VkKCdzZC10b3JuYWRvLWRpYWdyYW0tcGxvdCcsIHRydWUpO1xuICAgIH1cblxuICAgIHNldERhdGEoZGF0YSl7XG4gICAgICAgIHRoaXMuY29uZmlnLm1pZGRsZVZhbHVlID0gZGF0YS5kZWZhdWx0UGF5b2ZmO1xuICAgICAgICB0aGlzLmNvbmZpZy50aXRsZSA9IFBvbGljeS50b1BvbGljeVN0cmluZyhkYXRhLnBvbGljaWVzW3RoaXMuY29uZmlnLnBvbGljeUluZGV4XSk7XG4gICAgICAgIHJldHVybiBzdXBlci5zZXREYXRhKGRhdGEucm93cy5tYXAoKHIpPT57XG4gICAgICAgICAgICBsZXQgdmFyRXh0ZW50ID0gZGF0YS52YXJpYWJsZUV4dGVudHNbZGF0YS52YXJpYWJsZU5hbWVzLmluZGV4T2Yoci52YXJpYWJsZU5hbWUpXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiByLnZhcmlhYmxlTmFtZSsnIFsnK3ZhckV4dGVudFswXSsnOyAnK3ZhckV4dGVudFsxXSsnXScsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDAsIGRhdGEuZGVmYXVsdFBheW9mZiAtIHIuZXh0ZW50c1t0aGlzLmNvbmZpZy5wb2xpY3lJbmRleF1bMF0pLFxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCgwLCByLmV4dGVudHNbdGhpcy5jb25maWcucG9saWN5SW5kZXhdWzFdIC0gZGF0YS5kZWZhdWx0UGF5b2ZmKVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogci5leHRlbnRWYXJpYWJsZVZhbHVlc1t0aGlzLmNvbmZpZy5wb2xpY3lJbmRleF1bMF0gPD0gci5leHRlbnRWYXJpYWJsZVZhbHVlc1t0aGlzLmNvbmZpZy5wb2xpY3lJbmRleF1bMV0gPyBbMCwgMV0gOiBbMSwgMF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgfVxuXG4gICAgaW5pdFBsb3QoKSB7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzLmJhc2VDb250YWluZXIpLnN0eWxlKCdtYXgtd2lkdGgnLCB0aGlzLmNvbmZpZy5tYXhXaWR0aCk7XG4gICAgICAgIHN1cGVyLmluaXRQbG90KCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge0RpYWxvZ30gZnJvbSBcIi4uL2RpYWxvZ3MvZGlhbG9nXCI7XG5pbXBvcnQge1V0aWxzLCBsb2d9IGZyb20gXCJzZC11dGlsc1wiO1xuaW1wb3J0IHtUZW1wbGF0ZXN9IGZyb20gXCIuLi90ZW1wbGF0ZXNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4uL2kxOG4vaTE4blwiO1xuaW1wb3J0IHtBcHBVdGlsc30gZnJvbSBcIi4uL2FwcC11dGlsc1wiO1xuaW1wb3J0IHtMb2FkaW5nSW5kaWNhdG9yfSBmcm9tIFwiLi4vbG9hZGluZy1pbmRpY2F0b3JcIjtcbmltcG9ydCB7RXhwb3J0ZXJ9IGZyb20gXCIuLi9leHBvcnRlclwiO1xuaW1wb3J0IHtMZWFndWVUYWJsZX0gZnJvbSBcIi4vbGVhZ3VlLXRhYmxlXCI7XG5pbXBvcnQge0xlYWd1ZVRhYmxlUGxvdH0gZnJvbSBcIi4vbGVhZ3VlLXRhYmxlLXBsb3RcIjtcbmltcG9ydCB7UG9saWN5fSBmcm9tIFwic2QtY29tcHV0YXRpb25zL3NyYy9wb2xpY2llcy9wb2xpY3lcIjtcblxuZXhwb3J0IGNsYXNzIExlYWd1ZVRhYmxlRGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgICBjb21wdXRhdGlvbnNNYW5hZ2VyO1xuICAgIGpvYkluc3RhbmNlTWFuYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHAuY29udGFpbmVyLnNlbGVjdCgnLnNkLWxlYWd1ZS10YWJsZS1kaWFsb2cnKSwgYXBwKTtcbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyID0gdGhpcy5hcHAuY29tcHV0YXRpb25zTWFuYWdlcjtcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLnNlbGVjdChcIi5zZC1qb2ItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lclwiKTtcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhciA9IHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIuc2VsZWN0KFwiLnNkLXByb2dyZXNzLWJhclwiKTtcbiAgICAgICAgdGhpcy5qb2JSZXN1bHRzQ29udGFpbmVyID0gdGhpcy5jb250YWluZXIuc2VsZWN0KFwiLnNkLWxlYWd1ZS10YWJsZS1qb2ItcmVzdWx0c1wiKTtcbiAgICAgICAgdGhpcy5pbml0QnV0dG9ucygpO1xuXG4gICAgICAgIHRoaXMuam9iID0gdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLmdldEpvYkJ5TmFtZShcImxlYWd1ZS10YWJsZVwiKTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5ydW5Kb2IoKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlZCgpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAoIXRoaXMuam9iSW5zdGFuY2VNYW5hZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgY2xlYXJXYXJuaW5ncygpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KFwiLnNkLWxlYWd1ZS10YWJsZS13YXJuaW5nc1wiKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGFkZFdhcm5pbmcod2FybkNvbmYpIHtcbiAgICAgICAgbGV0IG1zZyA9IGkxOG4udChcImpvYi5cIiArIHRoaXMuam9iLm5hbWUgKyBcIi53YXJuaW5ncy5cIiArIHdhcm5Db25mLm5hbWUsIHdhcm5Db25mLmRhdGEpO1xuXG4gICAgICAgIHZhciBtc2dIVE1MID0gVGVtcGxhdGVzLmdldChcIndhcm5pbmdNZXNzYWdlXCIsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KFwiLnNkLWxlYWd1ZS10YWJsZS13YXJuaW5nc1wiKS5hcHBlbmRTZWxlY3RvcihcImRpdi5zZC1sZWFndWUtdGFibGUtd2FybmluZ1wiKS5odG1sKG1zZ0hUTUwpO1xuICAgIH1cblxuICAgIGluaXRSZXN1bHRUYWJsZShyZXN1bHQpIHtcbiAgICAgICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIG9uUm93U2VsZWN0ZWQ6IChyb3csIGkpPT4gdGhpcy5vblJlc3VsdFJvd1NlbGVjdGVkKHJvdywgaSksXG4gICAgICAgICAgICBvblJvd0hvdmVyOiAocm93LCBpKT0+IHRoaXMucmVzdWx0UGxvdC5lbXBoYXNpemUocm93LnJvdywgdHJ1ZSksXG4gICAgICAgICAgICBvblJvd0hvdmVyT3V0OiAocm93LCBpKT0+IHRoaXMucmVzdWx0UGxvdC5lbXBoYXNpemUocm93LnJvdywgZmFsc2UpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFRhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLmhpZGUoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5yZXN1bHRUYWJsZSA9IG5ldyBMZWFndWVUYWJsZSh0aGlzLmpvYlJlc3VsdHNDb250YWluZXIuc2VsZWN0KFwiLnNkLWpvYi1yZXN1bHQtdGFibGUtY29udGFpbmVyXCIpLCBjb25maWcpO1xuICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLnNldERhdGEocmVzdWx0LCB0aGlzLmFwcC5kYXRhTW9kZWwpO1xuICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLnNob3coKTtcbiAgICB9XG5cblxuXG4gICAgaW5pdFJlc3VsdFBsb3QocmVzdWx0KSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIG1heFdpZHRoOiBzZWxmLmFwcC5jb25maWcubGVhZ3VlVGFibGUucGxvdC5tYXhXaWR0aCxcbiAgICAgICAgICAgIHdlaWdodExvd2VyQm91bmQ6IHJlc3VsdC53ZWlnaHRMb3dlckJvdW5kLFxuICAgICAgICAgICAgZGVmYXVsdFdlaWdodDogcmVzdWx0LmRlZmF1bHRXZWlnaHQsXG4gICAgICAgICAgICB3ZWlnaHRVcHBlckJvdW5kOiByZXN1bHQud2VpZ2h0VXBwZXJCb3VuZCxcbiAgICAgICAgICAgIHBheW9mZkNvZWZmczogcmVzdWx0LnBheW9mZkNvZWZmcyxcbiAgICAgICAgICAgIHBheW9mZk5hbWVzOiByZXN1bHQucGF5b2ZmTmFtZXMsXG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IChkLCBrZXkpID0+IGQucGF5b2Zmc1swXSxcbiAgICAgICAgICAgICAgICB0aXRsZTogcmVzdWx0LnBheW9mZk5hbWVzWzBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAoZCwga2V5KSA9PiBkLnBheW9mZnNbMV0sXG4gICAgICAgICAgICAgICAgdGl0bGU6IHJlc3VsdC5wYXlvZmZOYW1lc1sxXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRG90SG92ZXI6IChkLCBpKSA9PiB0aGlzLnJlc3VsdFRhYmxlLmVtcGhhc2l6ZShkLCB0cnVlKSxcbiAgICAgICAgICAgIG9uRG90SG92ZXJPdXQ6IChkLCBpKSA9PiB0aGlzLnJlc3VsdFRhYmxlLmVtcGhhc2l6ZShkLCBmYWxzZSksXG5cblxuICAgICAgICAgICAgY29sb3I6IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgICAgIGxldCBncm91cHNDb25mID0gc2VsZi5hcHAuY29uZmlnLmxlYWd1ZVRhYmxlLnBsb3QuZ3JvdXBzO1xuICAgICAgICAgICAgICAgIGxldCBncm91cENvbmYgPSBncm91cHNDb25mW2dyb3VwLmtleV07XG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwQ29uZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXBDb25mLmNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJ2JsYWNrJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdyb3VwT3JkZXJpbmc6IHtcbiAgICAgICAgICAgICAgICAnZG9taW5hdGVkJzogMCxcbiAgICAgICAgICAgICAgICAnZXh0ZW5kZWQtZG9taW5hdGVkJzogMSxcbiAgICAgICAgICAgICAgICAnaGlnaGxpZ2h0ZWQnOiAyLFxuICAgICAgICAgICAgICAgICdoaWdobGlnaHRlZC1kZWZhdWx0JzogMyxcbiAgICAgICAgICAgICAgICAnZGVmYXVsdCc6IDRcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdyb3Vwczoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoci5vcHRpbWFsRm9yRGVmYXVsdFdlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWdobGlnaHRlZC1kZWZhdWx0J1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHIub3B0aW1hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWdobGlnaHRlZCdcbiAgICAgICAgICAgICAgICAgICAgfSAgZWxzZSBpZiAoci5kb21pbmF0ZWRCeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb21pbmF0ZWQnXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5leHRlbmRlZERvbWluYXRlZEJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2V4dGVuZGVkLWRvbWluYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImRlZmF1bHRcIjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogKGdyb3VwS2V5KSA9PiBpMThuLnQoXCJsZWFndWVUYWJsZS5wbG90Lmdyb3Vwcy5cIitncm91cEtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlc3VsdFBsb3QgPSBuZXcgTGVhZ3VlVGFibGVQbG90KHRoaXMuam9iUmVzdWx0c0NvbnRhaW5lci5zZWxlY3QoXCIuc2Qtam9iLXJlc3VsdC1wbG90LWNvbnRhaW5lclwiKS5ub2RlKCksIHJlc3VsdC5yb3dzLCBjb25maWcpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYucmVzdWx0UGxvdC5pbml0KClcbiAgICAgICAgfSwgMTAwKVxuICAgIH1cblxuICAgIG9uUmVzaXplZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0UGxvdCkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRQbG90LmluaXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoZGlzYWJsZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKGRpc2FibGUpIHtcbiAgICAgICAgICAgIExvYWRpbmdJbmRpY2F0b3Iuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KCcuc2QtbGVhZ3VlLXRhYmxlLWFjdGlvbi1idXR0b25zJykuc2VsZWN0QWxsKCdidXR0b24nKS5hdHRyKCdkaXNhYmxlZCcsIGRpc2FibGUgPyAnZGlzYWJsZWQnIDogdW5kZWZpbmVkKVxuICAgIH1cblxuXG4gICAgaW5pdEpvYlBhcmFtcygpe1xuICAgICAgICB0aGlzLmpvYlBhcmFtZXRlcnMgPSB0aGlzLmpvYi5jcmVhdGVKb2JQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgIHJ1bGVOYW1lOiB0aGlzLmNvbXB1dGF0aW9uc01hbmFnZXIuZ2V0Q3VycmVudFJ1bGUoKS5uYW1lLFxuICAgICAgICAgICAgd2VpZ2h0TG93ZXJCb3VuZDogdGhpcy5hcHAuZGF0YU1vZGVsLndlaWdodExvd2VyQm91bmQsXG4gICAgICAgICAgICBkZWZhdWx0V2VpZ2h0OiB0aGlzLmFwcC5kYXRhTW9kZWwuZGVmYXVsdENyaXRlcmlvbjFXZWlnaHQsXG4gICAgICAgICAgICB3ZWlnaHRVcHBlckJvdW5kOiB0aGlzLmFwcC5kYXRhTW9kZWwud2VpZ2h0VXBwZXJCb3VuZCxcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZVBhcmFtcygpe1xuICAgICAgICB0aGlzLmluaXRKb2JQYXJhbXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuam9iUGFyYW1ldGVycy52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIHJ1bkpvYigpIHtcblxuXG4gICAgICAgIHRoaXMuaW5pdEpvYlBhcmFtcygpO1xuXG4gICAgICAgIGlmKCF0aGlzLnZhbGlkYXRlUGFyYW1zKCkpe1xuICAgICAgICAgICAgYWxlcnQoaTE4bi50KFwiam9iLmVycm9ycy5wYXJhbXNcIiwge1wiam9iTmFtZVwiOiBpMThuLnQoXCJqb2IubGVhZ3VlLXRhYmxlLm5hbWVcIil9KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoKTtcbiAgICAgICAgdGhpcy5jb21wdXRhdGlvbnNNYW5hZ2VyLnJ1bkpvYldpdGhJbnN0YW5jZU1hbmFnZXIodGhpcy5qb2IubmFtZSwgdGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcywge1xuICAgICAgICAgICAgb25Kb2JTdGFydGVkOiB0aGlzLm9uSm9iU3RhcnRlZCxcbiAgICAgICAgICAgIG9uSm9iQ29tcGxldGVkOiB0aGlzLm9uSm9iQ29tcGxldGVkLFxuICAgICAgICAgICAgb25Kb2JGYWlsZWQ6IHRoaXMub25Kb2JGYWlsZWQsXG4gICAgICAgICAgICBvbkpvYlN0b3BwZWQ6IHRoaXMub25Kb2JTdG9wcGVkLFxuICAgICAgICAgICAgb25Kb2JUZXJtaW5hdGVkOiB0aGlzLm9uSm9iVGVybWluYXRlZCxcbiAgICAgICAgICAgIG9uUHJvZ3Jlc3M6IHRoaXMub25Qcm9ncmVzcyxcbiAgICAgICAgICAgIGNhbGxiYWNrc1RoaXNBcmc6IHRoaXNcbiAgICAgICAgfSkudGhlbihqb2JJbnN0YW5jZU1hbmFnZXI9PiB7XG4gICAgICAgICAgICB0aGlzLmpvYkluc3RhbmNlTWFuYWdlciA9IGpvYkluc3RhbmNlTWFuYWdlcjtcbiAgICAgICAgfSkuY2F0Y2goZT0+IHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSkudGhlbigoKT0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZUFjdGlvbkJ1dHRvbnNBbmRTaG93TG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaW5pdEJ1dHRvbnMoKSB7XG5cbiAgICAgICAgdGhpcy5kb3dubG9hZENzdkJ1dHRvbnMgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2QtZG93bmxvYWQtY3N2LWJ1dHRvbiBcIikub24oJ2NsaWNrJywgKCk9PiB7XG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkQ1NWKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY2xlYXJCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoXCIuc2QtY2xlYXItYnV0dG9uIFwiKS5vbignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNsZWFyUmVzdWx0cygpO1xuICAgICAgICB0aGlzLmNsZWFyV2FybmluZ3MoKTtcbiAgICAgICAgdGhpcy5zZXRQcm9ncmVzcygwKTtcbiAgICAgICAgdGhpcy5tYXJrQXNFcnJvcihmYWxzZSk7XG5cbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLnByb2dyZXNzQmFyQ29udGFpbmVyKTtcbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLmRvd25sb2FkQ3N2QnV0dG9ucyk7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5qb2JSZXN1bHRzQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbGVhclJlc3VsdHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3VsdFRhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFRhYmxlLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBvbkpvYlN0YXJ0ZWQoKSB7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5kb3dubG9hZENzdkJ1dHRvbnMpO1xuXG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lcik7XG5cbiAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgdGhpcy5vblByb2dyZXNzKHRoaXMuam9iSW5zdGFuY2VNYW5hZ2VyID8gdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIucHJvZ3Jlc3MgOiBudWxsKTtcblxuICAgIH1cblxuXG4gICAgb25Kb2JDb21wbGV0ZWQocmVzdWx0KSB7XG4gICAgICAgIEFwcFV0aWxzLnNob3codGhpcy5qb2JSZXN1bHRzQ29udGFpbmVyKTtcbiAgICAgICAgQXBwVXRpbHMuc2hvdyh0aGlzLmRvd25sb2FkQ3N2QnV0dG9ucyk7XG5cbiAgICAgICAgQXBwVXRpbHMuaGlkZSh0aGlzLnByb2dyZXNzQmFyQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlQWN0aW9uQnV0dG9uc0FuZFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5UmVzdWx0KHJlc3VsdClcbiAgICB9XG5cbiAgICBkaXNwbGF5UmVzdWx0KHJlc3VsdCkge1xuICAgICAgICBsb2cuZGVidWcocmVzdWx0KTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIHRoaXMuaW5pdFJlc3VsdFRhYmxlKHJlc3VsdCk7XG5cbiAgICAgICAgdGhpcy5pbml0UmVzdWx0UGxvdChyZXN1bHQpO1xuXG4gICAgfVxuXG4gICAgdGVybWluYXRlSm9iKCkge1xuICAgICAgICB0aGlzLmRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoKTtcbiAgICAgICAgdGhpcy5qb2JJbnN0YW5jZU1hbmFnZXIudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgb25Kb2JGYWlsZWQoZXJyb3JzKSB7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5kb3dubG9hZENzdkJ1dHRvbnMpO1xuICAgICAgICB0aGlzLmRpc2FibGVBY3Rpb25CdXR0b25zQW5kU2hvd0xvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgICAgICB0aGlzLm1hcmtBc0Vycm9yKCk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJcIjtcbiAgICAgICAgICAgIGVycm9ycy5mb3JFYWNoKChlLCBpKT0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5cXG5cIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbXNnS2V5QmFzZSA9IFwiam9iLlwiICsgc2VsZi5qb2IubmFtZSArIFwiLmVycm9ycy5cIjtcbiAgICAgICAgICAgICAgICBsZXQgbXNnS2V5ID0gbXNnS2V5QmFzZSArIGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gaTE4bi50KG1zZ0tleSwgZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBlLmpvYk5hbWUgPSBpMThuLnQoXCJqb2IubGVhZ3VlLXRhYmxlLm5hbWVcIik7XG4gICAgICAgICAgICAgICAgaWYgKG1zZyA9PT0gbXNnS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IGkxOG4udChcImpvYi5lcnJvcnMuZ2VuZXJpY1wiLCBlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gbXNnO1xuICAgICAgICAgICAgICAgIGlmIChlLmRhdGEgJiYgZS5kYXRhLnZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICBVdGlscy5mb3JPd24oZS5kYXRhLnZhcmlhYmxlcywgKHZhbHVlLCBrZXkpPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlICs9IFwiXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0ga2V5ICsgXCIgPSBcIiArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhbGVydChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgc2VsZi50ZXJtaW5hdGVKb2IoKTtcbiAgICAgICAgfSwgMTApO1xuXG4gICAgfVxuXG4gICAgbWFya0FzRXJyb3IoZXJyb3IgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzZWQoJ3NkLWpvYi1lcnJvcicsIGVycm9yKTtcbiAgICB9XG5cbiAgICBvbkpvYlN0b3BwZWQoKSB7XG4gICAgICAgIEFwcFV0aWxzLmhpZGUodGhpcy5zdG9wSm9iQnV0dG9uKTtcbiAgICAgICAgQXBwVXRpbHMuc2hvdyh0aGlzLnJlc3VtZUpvYkJ1dHRvbik7XG4gICAgICAgIHRoaXMuZGlzYWJsZUFjdGlvbkJ1dHRvbnNBbmRTaG93TG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICB9XG5cbiAgICBvbkpvYlRlcm1pbmF0ZWQoKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBvblByb2dyZXNzKHByb2dyZXNzKSB7XG4gICAgICAgIHRoaXMuc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MpXG4gICAgfVxuXG4gICAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MpIHtcbiAgICAgICAgdmFyIHBlcmNlbnRzID0gMDtcbiAgICAgICAgdmFyIHZhbHVlID0gXCIwJVwiO1xuICAgICAgICBpZiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcHJvZ3Jlc3MuY3VycmVudCArIFwiIC8gXCIgKyBwcm9ncmVzcy50b3RhbDtcbiAgICAgICAgICAgIHBlcmNlbnRzID0gcHJvZ3Jlc3MuY3VycmVudCAqIDEwMCAvIHByb2dyZXNzLnRvdGFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZShcIndpZHRoXCIsIHBlcmNlbnRzICsgXCIlXCIpO1xuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLmh0bWwodmFsdWUpXG4gICAgfVxuXG5cbiAgICBvblJlc3VsdFJvd1NlbGVjdGVkKHJvdywgaW5kZXgpIHtcbiAgICAgICAgbGV0IHRpdGxlID0gUG9saWN5LnRvUG9saWN5U3RyaW5nKHJvdy5wb2xpY3ksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5hcHAuc2hvd1BvbGljeVByZXZpZXcodGl0bGUsIHJvdy5wb2xpY3ksICgpPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRUYWJsZS5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkb3dubG9hZENTVigpIHtcbiAgICAgICAgRXhwb3J0ZXIuc2F2ZUFzQ1NWKHRoaXMuZ2V0Um93cygpLCAnbGVhZ3VldGFibGUnKVxuICAgIH1cblxuICAgIGdldFJvd3MoKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBVdGlscy5jbG9uZURlZXAodGhpcy5qb2JQYXJhbWV0ZXJzLnZhbHVlcyk7XG4gICAgICAgIHBhcmFtcy5leHRlbmRlZFBvbGljeURlc2NyaXB0aW9uID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLmpvYi5qb2JSZXN1bHRUb0NzdlJvd3ModGhpcy5yZXN1bHQsIHRoaXMuam9iLmNyZWF0ZUpvYlBhcmFtZXRlcnMocGFyYW1zKSk7XG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCB7U2NhdHRlclBsb3QsIFNjYXR0ZXJQbG90Q29uZmlnfSBmcm9tIFwib2RjLWQzL3NyYy9zY2F0dGVycGxvdFwiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiLi4vZDNcIjtcbmltcG9ydCB7VG9vbHRpcH0gZnJvbSBcInNkLXRyZWUtZGVzaWduZXJcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4uL2kxOG4vaTE4blwiO1xuXG5leHBvcnQgY2xhc3MgTGVhZ3VlVGFibGVQbG90Q29uZmlnIGV4dGVuZHMgU2NhdHRlclBsb3RDb25maWcge1xuICAgIG1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIHdlaWdodExvd2VyQm91bmQgPSAwO1xuICAgIHdlaWdodFVwcGVyQm91bmQgPSBJbmZpbml0eTtcbiAgICBncmFkaWVudEFycm93TGVuZ3RoID0gMzA7XG4gICAgZ3JhZGllbnRBcnJvd09mZnNldCA9IDEwO1xuICAgIHBheW9mZkNvZWZmcyA9IFsxLCAxXTtcbiAgICBwYXlvZmZOYW1lcyA9IFtdO1xuXG4gICAgc2hvd0xlZ2VuZCA9IHRydWU7XG4gICAgZm9yY2VMZWdlbmQgPSB0cnVlO1xuXG4gICAgbGVnZW5kID0ge1xuICAgICAgICB3aWR0aDogMTI1LFxuICAgIH07XG5cbiAgICAvLyBkM0NvbG9yQ2F0ZWdvcnkgPSBmYWxzZTtcblxuICAgIGd1aWRlcyA9IHRydWU7XG4gICAgZG90UmFkaXVzID0gNTtcbiAgICBlbXBoYXNpemVkRG90UmFkaXVzID0gODtcblxuICAgIGRvdElkID0gKGQsIGkpID0+ICdzZC1sZWFndWUtdGFibGUtZG90LScrZC5pZDtcblxuICAgIGNvbnN0cnVjdG9yKGN1c3RvbSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmIChjdXN0b20pIHtcbiAgICAgICAgICAgIFV0aWxzLmRlZXBFeHRlbmQodGhpcywgY3VzdG9tKTtcbiAgICAgICAgfVxuXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGVhZ3VlVGFibGVQbG90IGV4dGVuZHMgU2NhdHRlclBsb3Qge1xuXG4gICAgY29uc3RydWN0b3IocGxhY2Vob2xkZXJTZWxlY3RvciwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKHBsYWNlaG9sZGVyU2VsZWN0b3IsIGRhdGEsIG5ldyBMZWFndWVUYWJsZVBsb3RDb25maWcoY29uZmlnKSk7XG4gICAgfVxuXG4gICAgc2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gc3VwZXIuc2V0Q29uZmlnKG5ldyBMZWFndWVUYWJsZVBsb3RDb25maWcoY29uZmlnKSk7XG4gICAgfVxuXG4gICAgaW5pdCgpe1xuICAgICAgICBzdXBlci5pbml0KCk7XG4gICAgICAgIHRoaXMuc3ZnLmNsYXNzZWQoJ3NkLWxlYWd1ZS10YWJsZS1wbG90JywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuaW5pdEFycm93TWFya2VyKFwidHJpYW5nbGVcIik7XG4gICAgfVxuXG4gICAgaW5pdEFycm93TWFya2VyKGlkKSB7XG5cbiAgICAgICAgdmFyIGRlZnMgPSB0aGlzLnN2Zy5zZWxlY3RPckFwcGVuZChcImRlZnNcIik7XG4gICAgICAgIGRlZnMuYXBwZW5kKFwibWFya2VyXCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsaWQpXG4gICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIixcIjAgLTUgMTAgMTBcIilcbiAgICAgICAgICAgIC5hdHRyKFwicmVmWFwiLDUpXG4gICAgICAgICAgICAuYXR0cihcInJlZllcIiwwKVxuICAgICAgICAgICAgLmF0dHIoXCJtYXJrZXJXaWR0aFwiLDQpXG4gICAgICAgICAgICAuYXR0cihcIm1hcmtlckhlaWdodFwiLDQpXG4gICAgICAgICAgICAuYXR0cihcIm9yaWVudFwiLFwiYXV0b1wiKVxuICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJhcnJvd0hlYWRcIik7XG4gICAgfVxuXG4gICAgaW5pdFBsb3QoKSB7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzLmJhc2VDb250YWluZXIpLnN0eWxlKCdtYXgtd2lkdGgnLCB0aGlzLmNvbmZpZy5tYXhXaWR0aCk7XG4gICAgICAgIHRoaXMuY2hlY2tPcmRlcmluZygpO1xuICAgICAgICBzdXBlci5pbml0UGxvdCgpO1xuICAgIH1cblxuICAgIGNoZWNrT3JkZXJpbmcoKXtcbiAgICAgICAgaWYodGhpcy5jb25maWcuZ3JvdXBPcmRlcmluZyl7XG4gICAgICAgICAgICBsZXQgZ2V0T3JkZXJpbmcgID0gZCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGcgPSB0aGlzLmNvbmZpZy5ncm91cHMudmFsdWUoZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmdyb3VwT3JkZXJpbmdbZ10gPT09IHVuZGVmaW5lZCA/IDk5OSA6IHRoaXMuY29uZmlnLmdyb3VwT3JkZXJpbmdbZ107XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpPT5nZXRPcmRlcmluZyhhKSAtIGdldE9yZGVyaW5nKGIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZShuZXdEYXRhKSB7XG4gICAgICAgIHRoaXMuY2hlY2tPcmRlcmluZygpO1xuICAgICAgICBzdXBlci51cGRhdGUobmV3RGF0YSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVJY2VyTGluZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVEb21pbmF0ZWRSZWdpb24oKTtcbiAgICAgICAgdGhpcy51cGRhdGVHcmFkaWVudEFycm93cygpO1xuICAgICAgICB0aGlzLnVwZGF0ZURvdExhYmVscygpO1xuXG5cbiAgICB9O1xuXG4gICAgdXBkYXRlSWNlckxpbmVzKCkge1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBsaW5lc0NvbnRhaW5lckNsYXNzID0gdGhpcy5saW5lc0NvbnRhaW5lckNsYXNzID0gdGhpcy5wcmVmaXhDbGFzcyhcImxpbmVzLWNvbnRhaW5lclwiKTtcbiAgICAgICAgdmFyIGxpbmVzQ29udGFpbmVyU2VsZWN0b3IgPSBcImcuXCIgKyBsaW5lc0NvbnRhaW5lckNsYXNzO1xuICAgICAgICB2YXIgbGluZXNDb250YWluZXIgPSB0aGlzLmxpbmVzQ29udGFpbmVyPSBzZWxmLnN2Z0cuc2VsZWN0T3JJbnNlcnQobGluZXNDb250YWluZXJTZWxlY3RvciwgXCIuXCIgKyBzZWxmLmRvdHNDb250YWluZXJDbGFzcyk7XG5cbiAgICAgICAgdmFyIGNsaXBQYXRoSWQgPSBzZWxmLnByZWZpeENsYXNzKFwiY2xpcC1cIiArIFV0aWxzLmd1aWQoKSk7XG4gICAgICAgIHZhciBsaW5lc0NvbnRhaW5lckNsaXAgPSBsaW5lc0NvbnRhaW5lci5zZWxlY3RPckFwcGVuZChcImNsaXBQYXRoXCIpLmF0dHIoXCJpZFwiLCBjbGlwUGF0aElkKTtcblxuICAgICAgICBsaW5lc0NvbnRhaW5lckNsaXAuc2VsZWN0T3JBcHBlbmQoJ3JlY3QnKVxuXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBzZWxmLnBsb3Qud2lkdGgpXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0Jywgc2VsZi5wbG90LmhlaWdodClcbiAgICAgICAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgICAgICAgIC5hdHRyKCd5JywgMCk7XG5cbiAgICAgICAgbGluZXNDb250YWluZXIuYXR0cihcImNsaXAtcGF0aFwiLCAoZCwgaSkgPT4gXCJ1cmwoI1wiICsgY2xpcFBhdGhJZCArIFwiKVwiKTtcblxuICAgICAgICB2YXIgbGluZSA9IGQzLmxpbmUoKVxuICAgICAgICAgICAgLngodGhpcy5wbG90LngubWFwKVxuICAgICAgICAgICAgLnkodGhpcy5wbG90LnkubWFwKTtcblxuXG5cblxuICAgICAgICBsZXQgbGluZVBvaW50cyA9IHRoaXMucGxvdC5kYXRhLmZpbHRlcihkPT5kLmluY3JhdGlvICE9PSBudWxsKS5zb3J0KHRoaXMucGxvdC54Lm1hcCk7XG4gICAgICAgIGxldCBoaWdobGlnaHRlZFBvaW50cyA9IHRoaXMucGxvdC5kYXRhLmZpbHRlcihkPT5bXCJoaWdobGlnaHRlZFwiLCBcImhpZ2hsaWdodGVkLWRlZmF1bHRcIl0uaW5kZXhPZih0aGlzLnBsb3QuZ3JvdXBWYWx1ZShkKSkgIT09IC0xKS5zb3J0KChhLCBiKSA9PiB0aGlzLnBsb3QueC5tYXAoYSkgLSB0aGlzLnBsb3QueC5tYXAoYikpO1xuICAgICAgICBsZXQgaGlnaGxpZ2h0ZWREZWZhdWx0UG9pbnRzID0gaGlnaGxpZ2h0ZWRQb2ludHMuZmlsdGVyKGQ9PltcImhpZ2hsaWdodGVkLWRlZmF1bHRcIl0uaW5kZXhPZih0aGlzLnBsb3QuZ3JvdXBWYWx1ZShkKSkgIT09IC0xKTtcblxuICAgICAgICB0aGlzLmRvbWluYXRlZFJlZ2lvblBvaW50cyA9IGhpZ2hsaWdodGVkUG9pbnRzLm1hcChkPT5bdGhpcy5wbG90LngubWFwKGQpLCB0aGlzLnBsb3QueS5tYXAoZCldKTtcblxuICAgICAgICBpZiAoIWhpZ2hsaWdodGVkUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGluZXNDb250YWluZXIuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmVzQ29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKFwicGF0aC5cIiArIHRoaXMucHJlZml4Q2xhc3MoJ21pZGRsZS1pbmNyYXRpbycpKVxuICAgICAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJvcHRpbWl6ZVF1YWxpdHlcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCAnYmxhY2snKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGxpbmUoaGlnaGxpZ2h0ZWRQb2ludHMpKTtcblxuICAgICAgICBoaWdobGlnaHRlZFBvaW50cy5zb3J0KChhLCBiKSA9PmEuaW5jcmF0aW8gLSBiLmluY3JhdGlvIHx8ICh0aGlzLmNvbmZpZy5wYXlvZmZDb2VmZnNbMF0gKiAodGhpcy5wbG90LngubWFwKGEpIC0gdGhpcy5wbG90LngubWFwKGIpKSkpO1xuXG4gICAgICAgIGxldCBtaW5Qb2ludCA9IGhpZ2hsaWdodGVkUG9pbnRzWzBdO1xuICAgICAgICBsZXQgbWF4UG9pbnQgPSBoaWdobGlnaHRlZFBvaW50c1toaWdobGlnaHRlZFBvaW50cy5sZW5ndGggLSAxXTtcblxuICAgICAgICBsZXQgbG93UG9pbnQ7XG4gICAgICAgIGxldCBoaWdoUG9pbnQ7XG5cbiAgICAgICAgbGV0IHhBeGlzRXh0ZW50ID0gW3RoaXMucGxvdC54LnNjYWxlLmludmVydCgwKSwgdGhpcy5wbG90Lnguc2NhbGUuaW52ZXJ0KHRoaXMucGxvdC53aWR0aCldO1xuICAgICAgICBsZXQgeUF4aXNFeHRlbnQgPSBbdGhpcy5wbG90Lnkuc2NhbGUuaW52ZXJ0KHRoaXMucGxvdC5oZWlnaHQpLCB0aGlzLnBsb3QueS5zY2FsZS5pbnZlcnQoMCldO1xuXG4gICAgICAgIGxldCBzaWduID0gKHRoaXMuY29uZmlnLnBheW9mZkNvZWZmc1swXSAqIHRoaXMuY29uZmlnLnBheW9mZkNvZWZmc1sxXSkgPiAwID8gMSA6IC0xO1xuXG4gICAgICAgIGxldCBpbmZMb3dZID0gdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzWzBdID4gMCA/IHRoaXMucGxvdC5oZWlnaHQ6IDA7XG4gICAgICAgIGlmKHNpZ24gPiAwKXtcbiAgICAgICAgICAgIGluZkxvd1kgPSB0aGlzLmNvbmZpZy5wYXlvZmZDb2VmZnNbMF0gPCAwID8gdGhpcy5wbG90LmhlaWdodDogMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5mTG93UG9pbnQgPSBbdGhpcy5wbG90LngubWFwKG1pblBvaW50KSwgaW5mTG93WV07XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLndlaWdodExvd2VyQm91bmQgPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIGxvd1BvaW50ID0gaW5mTG93UG9pbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzWzBdID4gMCA/IHhBeGlzRXh0ZW50WzBdIDogeEF4aXNFeHRlbnRbMV07XG4gICAgICAgICAgICBsb3dQb2ludCA9IFt0aGlzLnBsb3QueC5zY2FsZSh4KSwgdGhpcy5wbG90Lnkuc2NhbGUoc2lnbiAqIHRoaXMuY29uZmlnLndlaWdodExvd2VyQm91bmQgKiAodGhpcy5wbG90LngudmFsdWUobWluUG9pbnQpIC0geCkgKyB0aGlzLnBsb3QueS52YWx1ZShtaW5Qb2ludCkpXTtcbiAgICAgICAgICAgIGlmKE1hdGguYWJzKGxvd1BvaW50WzFdKSA+IDEwMDAwMDApe1xuICAgICAgICAgICAgICAgIGxvd1BvaW50ID0gaW5mTG93UG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbmZIaWdoUG9pbnQgPSAgW3RoaXMucGxvdC54Lm1hcChtYXhQb2ludCksIHRoaXMuY29uZmlnLnBheW9mZkNvZWZmc1sxXSA+IDAgPyB0aGlzLnBsb3QuaGVpZ2h0OiAwXTtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLndlaWdodFVwcGVyQm91bmQgPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIGhpZ2hQb2ludCA9IGluZkhpZ2hQb2ludFxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMuY29uZmlnLnBheW9mZkNvZWZmc1sxXSA+IDAgPyB4QXhpc0V4dGVudFswXSA6IHhBeGlzRXh0ZW50WzFdO1xuXG4gICAgICAgICAgICBpZihzaWduID4gMCl7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuY29uZmlnLnBheW9mZkNvZWZmc1sxXSA8IDAgPyB4QXhpc0V4dGVudFswXSA6IHhBeGlzRXh0ZW50WzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoaWdoUG9pbnQgPSBbdGhpcy5wbG90Lnguc2NhbGUoeCksIHRoaXMucGxvdC55LnNjYWxlKC1zaWduICogdGhpcy5jb25maWcud2VpZ2h0VXBwZXJCb3VuZCAqICh4IC0gdGhpcy5wbG90LngudmFsdWUobWF4UG9pbnQpKSArIHRoaXMucGxvdC55LnZhbHVlKG1heFBvaW50KSldO1xuICAgICAgICAgICAgLy8gaGlnaFBvaW50ID0gW3RoaXMucGxvdC54LnNjYWxlKHgpLCB0aGlzLnBsb3QueS5zY2FsZShFRS50b0Zsb2F0KEVFLm11bHRpcGx5KC1zaWduLCBFRS5tdWx0aXBseSh0aGlzLmNvbmZpZy53ZWlnaHRVcHBlckJvdW5kLCAoeCAtIHRoaXMucGxvdC54LnZhbHVlKG1heFBvaW50KSkpKSkgKyB0aGlzLnBsb3QueS52YWx1ZShtYXhQb2ludCkpXTtcbiAgICAgICAgICAgIGlmKE1hdGguYWJzKGhpZ2hQb2ludFsxXSkgPiAxMDAwMDAwKXtcbiAgICAgICAgICAgICAgICBoaWdoUG9pbnQgPSBpbmZIaWdoUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGhpZ2hsaWdodGVkRGVmYXVsdFBvaW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgbGV0IGRlZmF1bHRQb2ludCA9IGhpZ2hsaWdodGVkRGVmYXVsdFBvaW50c1swXTtcbiAgICAgICAgICAgIGxldCBkZWZMb3dQb2ludCA9IGluZkxvd1BvaW50O1xuICAgICAgICAgICAgbGV0IGRlZkhpZ2hQb2ludCA9IGluZkhpZ2hQb2ludDtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5kZWZhdWx0V2VpZ2h0ICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzWzBdID4gMCA/IHhBeGlzRXh0ZW50WzBdIDogeEF4aXNFeHRlbnRbMV07XG4gICAgICAgICAgICAgICAgZGVmTG93UG9pbnQgPSBbdGhpcy5wbG90Lnguc2NhbGUoeCksIHRoaXMucGxvdC55LnNjYWxlKHNpZ24gKiB0aGlzLmNvbmZpZy5kZWZhdWx0V2VpZ2h0ICogKHRoaXMucGxvdC54LnZhbHVlKGRlZmF1bHRQb2ludCkgLSB4KSArIHRoaXMucGxvdC55LnZhbHVlKGRlZmF1bHRQb2ludCkpXTtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzWzFdID4gMCA/IHhBeGlzRXh0ZW50WzBdIDogeEF4aXNFeHRlbnRbMV07XG4gICAgICAgICAgICAgICAgaWYoc2lnbiA+IDApe1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzWzFdIDwgMCA/IHhBeGlzRXh0ZW50WzBdIDogeEF4aXNFeHRlbnRbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZkhpZ2hQb2ludCA9IFt0aGlzLnBsb3QueC5zY2FsZSh4KSwgdGhpcy5wbG90Lnkuc2NhbGUoLXNpZ24gKiB0aGlzLmNvbmZpZy5kZWZhdWx0V2VpZ2h0ICogKHggLSB0aGlzLnBsb3QueC52YWx1ZShkZWZhdWx0UG9pbnQpKSArIHRoaXMucGxvdC55LnZhbHVlKGRlZmF1bHRQb2ludCkpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmVzQ29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKFwicGF0aC5cIiArIHRoaXMucHJlZml4Q2xhc3MoJ2RlZmF1bHQtaW5jcmF0aW8nKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcIm9wdGltaXplUXVhbGl0eVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsICdibGFjaycpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLmxpbmUoKShbZGVmTG93UG9pbnQsIGRlZkhpZ2hQb2ludF0pKVxuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICBsaW5lc0NvbnRhaW5lci5zZWxlY3QoXCJwYXRoLlwiICsgdGhpcy5wcmVmaXhDbGFzcygnZGVmYXVsdC1pbmNyYXRpbycpKS5yZW1vdmUoKVxuICAgICAgICB9XG5cblxuICAgICAgICB0aGlzLmRvbWluYXRlZFJlZ2lvblBvaW50cy51bnNoaWZ0KGxvd1BvaW50KTtcbiAgICAgICAgdGhpcy5kb21pbmF0ZWRSZWdpb25Qb2ludHMucHVzaChoaWdoUG9pbnQpO1xuXG5cbiAgICAgICAgbGluZXNDb250YWluZXIuc2VsZWN0T3JBcHBlbmQoXCJwYXRoLlwiICsgdGhpcy5wcmVmaXhDbGFzcygnbG93LWluY3JhdGlvJykpXG4gICAgICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcIm9wdGltaXplUXVhbGl0eVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsICdibGFjaycpXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgZDMubGluZSgpKFtsb3dQb2ludCwgW3RoaXMucGxvdC54Lm1hcChtaW5Qb2ludCksIHRoaXMucGxvdC55Lm1hcChtaW5Qb2ludCldXSkpXG5cbiAgICAgICAgbGluZXNDb250YWluZXIuc2VsZWN0T3JBcHBlbmQoXCJwYXRoLlwiICsgdGhpcy5wcmVmaXhDbGFzcygnaGlnaC1pbmNyYXRpbycpKVxuICAgICAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJvcHRpbWl6ZVF1YWxpdHlcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCAnYmxhY2snKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLmxpbmUoKShbaGlnaFBvaW50LCBbdGhpcy5wbG90LngubWFwKG1heFBvaW50KSwgdGhpcy5wbG90LnkubWFwKG1heFBvaW50KV1dKSlcblxuXG5cblxuICAgIH1cblxuICAgIHVwZGF0ZURvbWluYXRlZFJlZ2lvbigpe1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBkb21pbmF0ZWRSZWdpb25Db250YWluZXJDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3MoXCJkb21pbmF0ZWQtcmVnaW9uLWNvbnRhaW5lclwiKTtcbiAgICAgICAgdmFyIGRvbWluYXRlZFJlZ2lvbkNvbnRhaW5lclNlbGVjdG9yID0gXCJnLlwiICsgZG9taW5hdGVkUmVnaW9uQ29udGFpbmVyQ2xhc3M7XG4gICAgICAgIHZhciBkb21pbmF0ZWRSZWdpb25Db250YWluZXIgPSBzZWxmLnN2Z0cuc2VsZWN0T3JJbnNlcnQoZG9taW5hdGVkUmVnaW9uQ29udGFpbmVyU2VsZWN0b3IsIFwiLlwiK3RoaXMubGluZXNDb250YWluZXJDbGFzcyk7XG5cbiAgICAgICAgdmFyIGNsaXBQYXRoSWQgPSBzZWxmLnByZWZpeENsYXNzKFwiY2xpcC1cIiArIFV0aWxzLmd1aWQoKSk7XG4gICAgICAgIHZhciBkb21pbmF0ZWRSZWdpb25Db250YWluZXJDbGlwID0gZG9taW5hdGVkUmVnaW9uQ29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKFwiY2xpcFBhdGhcIikuYXR0cihcImlkXCIsIGNsaXBQYXRoSWQpO1xuXG4gICAgICAgIGRvbWluYXRlZFJlZ2lvbkNvbnRhaW5lckNsaXAuc2VsZWN0T3JBcHBlbmQoJ3JlY3QnKVxuXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBzZWxmLnBsb3Qud2lkdGgpXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0Jywgc2VsZi5wbG90LmhlaWdodClcbiAgICAgICAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgICAgICAgIC5hdHRyKCd5JywgMCk7XG5cbiAgICAgICAgZG9taW5hdGVkUmVnaW9uQ29udGFpbmVyLmF0dHIoXCJjbGlwLXBhdGhcIiwgKGQsIGkpID0+IFwidXJsKCNcIiArIGNsaXBQYXRoSWQgKyBcIilcIik7XG5cbiAgICAgICAgLy9kcmF3IGRvbWluYXRlZCByZWdpb25cblxuICAgICAgICBsZXQgd29yc3RQb2ludCA9IFtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnBheW9mZkNvZWZmc1swXSA8IDAgPyBzZWxmLnBsb3Qud2lkdGggOiAwLFxuICAgICAgICAgICAgdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzWzFdIDwgMCA/IDAgOiBzZWxmLnBsb3QuaGVpZ2h0XG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5kb21pbmF0ZWRSZWdpb25Qb2ludHMucHVzaCh3b3JzdFBvaW50KTtcblxuICAgICAgICBpZih0aGlzLmRvbWluYXRlZFJlZ2lvblBvaW50cy5zb21lKHA9PndvcnN0UG9pbnRbMV0gPyBwWzFdIDw9MCA6IHBbMV0gPj0gc2VsZi5wbG90LmhlaWdodCkpe1xuICAgICAgICAgICAgdGhpcy5kb21pbmF0ZWRSZWdpb25Qb2ludHMucHVzaChbd29yc3RQb2ludFswXSwgd29yc3RQb2ludFsxXSA/IDAgOiBzZWxmLnBsb3QuaGVpZ2h0XSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRvbWluYXRlZFJlZ2lvblBvaW50cy5zb3J0KChhLCBiKT0+IChhWzBdIC0gYlswXSkpO1xuICAgICAgICB0aGlzLmRvbWluYXRlZFJlZ2lvblBvaW50cyA9IHRoaXMuZG9taW5hdGVkUmVnaW9uUG9pbnRzLnJlZHVjZSgocHJldiwgY3Vycik9PntcbiAgICAgICAgICAgIGlmKCFwcmV2Lmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjdXJyXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByZXZQb2ludCA9IHByZXZbcHJldi5sZW5ndGgtMV07XG4gICAgICAgICAgICBpZihwcmV2UG9pbnRbMF0gIT09IGN1cnJbMF0pe1xuICAgICAgICAgICAgICAgIHByZXYucHVzaChjdXJyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoTWF0aC5hYnMod29yc3RQb2ludFsxXSAtIGN1cnJbMV0pID4gTWF0aC5hYnMod29yc3RQb2ludFsxXSAtIHByZXZbcHJldi5sZW5ndGgtMV1bMV0pKXtcbiAgICAgICAgICAgICAgICBwcmV2W3ByZXYubGVuZ3RoLTFdID0gY3VycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuXG4gICAgICAgIH0sIFtdKTtcblxuICAgICAgICBsZXQgYXJlYSA9IGQzLmFyZWEoKTtcbiAgICAgICAgYXJlYS55MCh3b3JzdFBvaW50WzFdKVxuICAgICAgICBkb21pbmF0ZWRSZWdpb25Db250YWluZXIuc2VsZWN0T3JJbnNlcnQoXCJwYXRoLlwiICsgdGhpcy5wcmVmaXhDbGFzcygnZG9taW5hdGVkLXJlZ2lvbicpKVxuICAgICAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJvcHRpbWl6ZVF1YWxpdHlcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDApXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSh0aGlzLmRvbWluYXRlZFJlZ2lvblBvaW50cykpO1xuXG4gICAgICAgIFRvb2x0aXAuYXR0YWNoKGRvbWluYXRlZFJlZ2lvbkNvbnRhaW5lciwgaTE4bi50KCdsZWFndWVUYWJsZS5wbG90LnRvb2x0aXAuZG9taW5hdGVkUmVnaW9uJykpO1xuICAgIH1cblxuICAgIHVwZGF0ZURvdExhYmVscygpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbGFiZWxzQ29udGFpbmVyQ2xhc3MgPSB0aGlzLnByZWZpeENsYXNzKFwiZG90LWxhYmVscy1jb250YWluZXJcIik7XG4gICAgICAgIHZhciBsYWJlbHNDb250YWluZXJTZWxlY3RvciA9IFwiZy5cIiArIGxhYmVsc0NvbnRhaW5lckNsYXNzO1xuICAgICAgICB2YXIgbGFiZWxzQ29udGFpbmVyID0gc2VsZi5zdmdHLnNlbGVjdE9yQXBwZW5kKGxhYmVsc0NvbnRhaW5lclNlbGVjdG9yLCBcIi5cIiArIHNlbGYuZG90c0NvbnRhaW5lckNsYXNzKTtcblxuICAgICAgICB2YXIgbGFiZWxzID0gbGFiZWxzQ29udGFpbmVyLnNlbGVjdEFsbChcInRleHQuXCIgKyB0aGlzLnByZWZpeENsYXNzKFwiZG90LWxhYmVsXCIpKS5kYXRhKHRoaXMucGxvdC5kYXRhKTtcbiAgICAgICAgbGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgbGFiZWxzLmVudGVyKCkuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIHRoaXMucHJlZml4Q2xhc3MoXCJkb3QtbGFiZWxcIikpXG4gICAgICAgICAgICAubWVyZ2UobGFiZWxzKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLnBsb3QueC5tYXApXG4gICAgICAgICAgICAuYXR0cigneScsIHRoaXMucGxvdC55Lm1hcClcbiAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdlbmQnKVxuICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi01cHhcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZHhcIiwgXCItNXB4XCIpXG4gICAgICAgICAgICAudGV4dChkPT5kLmlkKVxuICAgIH1cblxuICAgIHVwZGF0ZUdyYWRpZW50QXJyb3dzKCkge1xuXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5jb25maWcucGF5b2ZmQ29lZmZzLm1hcCgoY29lZmYsIGkpPT57XG5cbiAgICAgICAgICAgIGxldCBsID0gdGhpcy5jb25maWcuZ3JhZGllbnRBcnJvd0xlbmd0aCAqIGNvZWZmO1xuICAgICAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMuY29uZmlnLmdyYWRpZW50QXJyb3dPZmZzZXQgKiBjb2VmZjtcblxuICAgICAgICAgICAgbGV0IGQgPSB7XG4gICAgICAgICAgICAgICAgeDE6IHRoaXMucGxvdC53aWR0aC8yLFxuICAgICAgICAgICAgICAgIHkxOiB0aGlzLnBsb3QuaGVpZ2h0LzIsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICAgICBkLngxICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICBkLngyID0gZC54MSArIGw7XG4gICAgICAgICAgICAgICAgZC55MiA9IGQueTFcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGQueTEgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgIGQueDIgPSBkLngxO1xuICAgICAgICAgICAgICAgIGQueTIgPSBkLnkxIC0gbFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZFxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBhcnJvd3NDb250YWluZXJDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3MoXCJncmFkaWVudC1hcnJvd3MtY29udGFpbmVyXCIpO1xuICAgICAgICB2YXIgYXJyb3dzQ29udGFpbmVyU2VsZWN0b3IgPSBcImcuXCIgKyBhcnJvd3NDb250YWluZXJDbGFzcztcbiAgICAgICAgdmFyIGFycm93c0NvbnRhaW5lciA9IHNlbGYuc3ZnRy5zZWxlY3RPckluc2VydChhcnJvd3NDb250YWluZXJTZWxlY3RvciwgXCIuXCIgKyBzZWxmLmRvdHNDb250YWluZXJDbGFzcyk7XG5cbiAgICAgICAgbGV0IGFycm93Q2xhc3MgPSB0aGlzLnByZWZpeENsYXNzKFwiZ3JhZGllbnQtYXJyb3dcIik7XG4gICAgICAgIHZhciBhcnJvd3MgPSBhcnJvd3NDb250YWluZXIuc2VsZWN0QWxsKFwiLlwiK2Fycm93Q2xhc3MpLmRhdGEoZGF0YSk7XG4gICAgICAgIGFycm93cy5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIHZhciBhcnJvd3NFbnRlciA9IGFycm93cy5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCBhcnJvd0NsYXNzKTtcblxuICAgICAgICBhcnJvd3NFbnRlci5hcHBlbmQoXCJsaW5lXCIpLmF0dHIoXCJtYXJrZXItZW5kXCIsIFwidXJsKCN0cmlhbmdsZSlcIik7XG4gICAgICAgIHZhciBhcnJvd3NNZXJnZSA9YXJyb3dzRW50ZXIubWVyZ2UoYXJyb3dzKTtcblxuICAgICAgICBhcnJvd3NNZXJnZS5zZWxlY3QoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIGQ9PmQueDEpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIGQ9PmQueTEpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIGQ9PmQueDIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIGQ9PmQueTIpO1xuXG4gICAgICAgIFRvb2x0aXAuYXR0YWNoKGFycm93c01lcmdlLCAoZCwgaSk9PntcbiAgICAgICAgICAgIHJldHVybiBpMThuLnQoJ2xlYWd1ZVRhYmxlLnBsb3QudG9vbHRpcC5ncmFkaWVudEFycm93JyArIChpICsgMSksIHsgbmFtZTogdGhpcy5jb25maWcucGF5b2ZmTmFtZXNbaV19KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW1waGFzaXplKHJvdywgZW1waGFzaXplPXRydWUpe1xuICAgICAgICB0aGlzLmVtcGhhc2l6ZURvdCh0aGlzLnN2Zy5zZWxlY3RBbGwoJyMnK3RoaXMuY29uZmlnLmRvdElkKHJvdykpLCBlbXBoYXNpemUpO1xuICAgIH1cblxuICAgIGVtcGhhc2l6ZURvdChzZWxlY3Rpb24sIGVtcGhhc2l6ZSl7XG4gICAgICAgIHNlbGVjdGlvblxuICAgICAgICAgICAgLmNsYXNzZWQoJ3NkLWVtcGhhc2l6ZWQnLCBlbXBoYXNpemUpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuYXR0cigncicsIGVtcGhhc2l6ZSA/IHRoaXMuY29uZmlnLmVtcGhhc2l6ZWREb3RSYWRpdXMgOiB0aGlzLmNvbmZpZy5kb3RSYWRpdXMpXG4gICAgfVxuICAgIHVwZGF0ZURvdHMoKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzdXBlci51cGRhdGVEb3RzKCk7XG4gICAgICAgIHZhciBkb3RzQ29udGFpbmVyID0gdGhpcy5zdmdHLnNlbGVjdChcImcuXCIgKyB0aGlzLmRvdHNDb250YWluZXJDbGFzcyk7XG4gICAgICAgIGRvdHNDb250YWluZXIuc2VsZWN0QWxsKCcuJyArIHRoaXMuZG90Q2xhc3MpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXIuZW1waGFzaXplXCIsIGZ1bmN0aW9uKGQpeyBzZWxmLmVtcGhhc2l6ZURvdChkMy5zZWxlY3QodGhpcyksIHRydWUpIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dC5lbXBoYXNpemVcIiwgZnVuY3Rpb24oZCl7IHNlbGYuZW1waGFzaXplRG90KGQzLnNlbGVjdCh0aGlzKSwgZmFsc2UpIH0pXG4gICAgfVxuXG4gICAgdXBkYXRlTGVnZW5kKCkge1xuICAgICAgICBzdXBlci51cGRhdGVMZWdlbmQoKTtcbiAgICAgICAgdmFyIHBsb3QgPSB0aGlzLnBsb3Q7XG5cbiAgICAgICAgbGV0IGNvbnRhaW5lciA9IHBsb3QubGVnZW5kLmNvbnRhaW5lci5zZWxlY3RPckFwcGVuZChcImcuc2QtYWRkaXRpb25hbC1pdGVtc1wiKVxuICAgICAgICBsZXQgbGVnZW5kQ2VsbHMgPSBwbG90LmxlZ2VuZC5jb250YWluZXIuc2VsZWN0KFwiLmxlZ2VuZENlbGxzXCIpO1xuICAgICAgICBsZXQgbWFyZ2luID0gMjA7XG5cbiAgICAgICAgbGV0IHRleHRzID0gW1xuICAgICAgICAgICAgaTE4bi50KFwibGVhZ3VlVGFibGUucGxvdC5sZWdlbmQuZG9taW5hdGVkUmVnaW9uXCIpLFxuICAgICAgICAgICAgaTE4bi50KFwibGVhZ3VlVGFibGUucGxvdC5sZWdlbmQuZ3JhZGllbnRBcnJvd3NcIilcbiAgICAgICAgXTtcblxuICAgICAgICBjb250YWluZXIuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIisobGVnZW5kQ2VsbHMubm9kZSgpLmdldEJCb3goKS5oZWlnaHQrbWFyZ2luKStcIilcIik7XG5cbiAgICAgICAgY29udGFpbmVyLnNlbGVjdEFsbChcInRleHRcIikuZGF0YSh0ZXh0cylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC50ZXh0KGQ9PmQpXG4gICAgICAgICAgICAuYXR0cignZHknLCBcIjBcIilcbiAgICAgICAgICAgIC5hdHRyKCd4JywgXCIwXCIpO1xuXG4gICAgICAgIGNvbnRhaW5lci5zZWxlY3RBbGwoXCJ0ZXh0XCIpLmNhbGwod3JhcCwgZD0+ZCwgdGhpcy5jb25maWcubGVnZW5kLndpZHRoKTtcblxuICAgICAgICBmdW5jdGlvbiB3cmFwKHRleHQsIGdldFRleHREYXRhLCB3aWR0aCkge1xuICAgICAgICAgICAgdGV4dC5lYWNoKGZ1bmN0aW9uKGQpIHtcblxuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZDMuc2VsZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB3b3JkcyA9IGdldFRleHREYXRhKGQpLnNwbGl0KC9cXHMrLykucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICB3b3JkLFxuICAgICAgICAgICAgICAgICAgICBsaW5lID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXIgPSAwLFxuICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0ID0gMS4xLCAvLyBlbXNcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRleHQuYXR0cigneScpLFxuICAgICAgICAgICAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKCdkeScpKSxcbiAgICAgICAgICAgICAgICAgICAgdHNwYW4gPSB0ZXh0LnRleHQobnVsbCkuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIDApLmF0dHIoJ3knLCB5KS5hdHRyKCdkeScsIGR5ICsgJ2VtJyk7XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLnByZXZpb3VzU2libGluZyl7XG4gICAgICAgICAgICAgICAgICAgIHRleHQuYXR0cigneScsIHRoaXMucHJldmlvdXNTaWJsaW5nLmdldEJCb3goKS5oZWlnaHQrMTApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHdvcmQgPSB3b3Jkcy5wb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLnB1c2god29yZCk7XG4gICAgICAgICAgICAgICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKCcgJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHNwYW4ubm9kZSgpLmdldENvbXB1dGVkVGV4dExlbmd0aCgpID4gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbignICcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbd29yZF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0c3BhbiA9IHRleHQuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKS5hdHRyKCd5JywgeSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZHknLCArK2xpbmVOdW1iZXIgKiBsaW5lSGVpZ2h0ICsgZHkgKyAnZW0nKS50ZXh0KHdvcmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuIiwiaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiLi4vZDNcIjtcbmltcG9ydCB7UG9saWN5fSBmcm9tIFwic2QtY29tcHV0YXRpb25zL3NyYy9wb2xpY2llcy9wb2xpY3lcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4uL2kxOG4vaTE4blwiO1xuXG5leHBvcnQgY2xhc3MgTGVhZ3VlVGFibGVDb25maWcge1xuICAgIG9uUm93U2VsZWN0ZWQgPSAocm93KSA9PiB7XG4gICAgfTtcbiAgICBleHRlbmRlZFBvbGljeURlc2NyaXB0aW9uID0gdHJ1ZTtcbiAgICBvblJvd0hvdmVyID0gKGQsIGkpID0+IHt9O1xuICAgIG9uUm93SG92ZXJPdXQgPSAoZCwgaSkgPT4ge307XG5cbiAgICBjb25zdHJ1Y3RvcihjdXN0b20pIHtcbiAgICAgICAgaWYgKGN1c3RvbSkge1xuICAgICAgICAgICAgVXRpbHMuZGVlcEV4dGVuZCh0aGlzLCBjdXN0b20pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGVhZ3VlVGFibGUge1xuXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBjb25maWcsIGRhdGFNb2RlbCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5jb25maWcgPSBuZXcgTGVhZ3VlVGFibGVDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5kYXRhTW9kZWwgPSBkYXRhTW9kZWw7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMucmVzdWx0VGFibGUgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3RPckFwcGVuZChcInRhYmxlLnNkLWxlYWd1ZS10YWJsZVwiKTtcbiAgICAgICAgdGhpcy5yZXN1bHRUYWJsZUhlYWQgPSB0aGlzLnJlc3VsdFRhYmxlLnNlbGVjdE9yQXBwZW5kKFwidGhlYWRcIik7XG4gICAgICAgIHRoaXMucmVzdWx0VGFibGVCb2R5ID0gdGhpcy5yZXN1bHRUYWJsZS5zZWxlY3RPckFwcGVuZChcInRib2R5XCIpO1xuICAgICAgICB0aGlzLnJlc3VsdFRhYmxlRm9vdCA9IHRoaXMucmVzdWx0VGFibGUuc2VsZWN0T3JBcHBlbmQoXCJ0Zm9vdFwiKTtcbiAgICB9XG5cbiAgICBzZXREYXRhKGpvYlJlc3VsdCwgZGF0YU1vZGVsKSB7XG4gICAgICAgIHRoaXMuam9iUmVzdWx0ID0gam9iUmVzdWx0O1xuICAgICAgICB0aGlzLmRhdGFNb2RlbCA9IGRhdGFNb2RlbDtcbiAgICAgICAgdGhpcy5kcmF3SGVhZGVycyhbXG4gICAgICAgICAgICBpMThuLnQoJ2xlYWd1ZVRhYmxlLmhlYWRlcnMucG9saWN5Tm8nKSxcbiAgICAgICAgICAgIGkxOG4udCgnbGVhZ3VlVGFibGUuaGVhZGVycy5wb2xpY3knKSxcbiAgICAgICAgICAgIGRhdGFNb2RlbC5wYXlvZmZOYW1lc1swXSxcbiAgICAgICAgICAgIGRhdGFNb2RlbC5wYXlvZmZOYW1lc1sxXSxcbiAgICAgICAgICAgIGkxOG4udCgnbGVhZ3VlVGFibGUuaGVhZGVycy5jb21tZW50JylcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuZHJhd1Jvd3Moam9iUmVzdWx0LnJvd3MpXG4gICAgfVxuXG4gICAgZHJhd0hlYWRlcnMoaGVhZGVyRGF0YSkge1xuICAgICAgICB2YXIgaGVhZGVycyA9IHRoaXMucmVzdWx0VGFibGVIZWFkLnNlbGVjdE9yQXBwZW5kKFwidHJcIikuc2VsZWN0QWxsKFwidGhcIikuZGF0YShoZWFkZXJEYXRhKTtcbiAgICAgICAgdmFyIGhlYWRlcnNFbnRlciA9IGhlYWRlcnMuZW50ZXIoKS5hcHBlbmQoXCJ0aFwiKTtcbiAgICAgICAgdmFyIGhlYWRlcnNNZXJnZSA9IGhlYWRlcnNFbnRlci5tZXJnZShoZWFkZXJzKTtcbiAgICAgICAgaGVhZGVycy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgICAgaGVhZGVyc01lcmdlLnRleHQoZD0+ZCk7XG4gICAgfVxuXG4gICAgZHJhd1Jvd3Mocm93c0RhdGEpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGxldCBkYXRhID0gcm93c0RhdGEucmVkdWNlKChwcmV2LCBkKT0+IHtcbiAgICAgICAgICAgIGxldCByID0gcHJldjtcbiAgICAgICAgICAgIGQucG9saWNpZXMuZm9yRWFjaCgocG9saWN5LCBpKT0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcbiAgICAgICAgICAgICAgICAgICAgci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeTogcG9saWN5LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IGQucG9saWNpZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFBvbGljeS50b1BvbGljeVN0cmluZyhwb2xpY3ksIHRoaXMuY29uZmlnLmV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGQucGF5b2Zmc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogZC5wb2xpY2llcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZC5wYXlvZmZzWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiBkLnBvbGljaWVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmdldFJvd0NvbW1lbnQoZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IGQucG9saWNpZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3c6IGQsXG4gICAgICAgICAgICAgICAgICAgIHBvbGljeTogcG9saWN5LFxuICAgICAgICAgICAgICAgICAgICBjZWxsczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFBvbGljeS50b1BvbGljeVN0cmluZyhwb2xpY3ksIHRoaXMuY29uZmlnLmV4dGVuZGVkUG9saWN5RGVzY3JpcHRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMVxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0sIFtdKTtcblxuICAgICAgICB2YXIgcm93cyA9IHRoaXMucmVzdWx0VGFibGVCb2R5LnNlbGVjdEFsbChcInRyXCIpLmRhdGEoZGF0YSk7XG5cbiAgICAgICAgdmFyIHJvd3NFbnRlciA9IHJvd3MuZW50ZXIoKS5hcHBlbmQoXCJ0clwiKTtcbiAgICAgICAgdmFyIHJvd3NNZXJnZSA9IHJvd3NFbnRlci5tZXJnZShyb3dzKTtcbiAgICAgICAgcm93c01lcmdlXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgnc2Qtc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5vblJvd1NlbGVjdGVkKGQsIGkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNsYXNzZWQoJ3NkLWhpZ2hsaWdodGVkJywgZD0+ZC5yb3cub3B0aW1hbClcbiAgICAgICAgICAgIC5jbGFzc2VkKCdzZC1oaWdobGlnaHRlZC1kZWZhdWx0JywgZD0+ZC5yb3cub3B0aW1hbEZvckRlZmF1bHRXZWlnaHQpXG4gICAgICAgICAgICAuYXR0cignaWQnLCBkID0+ICdzZC1sZWFndWUtdGFibGUtcm93LScrZC5yb3cuaWQpO1xuXG4gICAgICAgIHJvd3NNZXJnZS5vbihcIm1vdXNlb3Zlci5vblJvd0hvdmVyXCIsIHRoaXMuY29uZmlnLm9uUm93SG92ZXIpO1xuICAgICAgICByb3dzTWVyZ2Uub24oXCJtb3VzZW91dC5vblJvd0hvdmVyT3V0XCIsIHRoaXMuY29uZmlnLm9uUm93SG92ZXJPdXQpO1xuXG4gICAgICAgIHJvd3MuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIHZhciBjZWxscyA9IHJvd3NNZXJnZS5zZWxlY3RBbGwoXCJ0ZFwiKS5kYXRhKGQ9PmQuY2VsbHMpO1xuICAgICAgICB2YXIgY2VsbHNFbnRlciA9IGNlbGxzLmVudGVyKCkuYXBwZW5kKFwidGRcIik7XG4gICAgICAgIHZhciBjZWxsc01lcmdlID0gY2VsbHNFbnRlci5tZXJnZShjZWxscyk7XG4gICAgICAgIGNlbGxzTWVyZ2UudGV4dChkPT5kLmRhdGEpO1xuICAgICAgICBjZWxsc01lcmdlLmF0dHIoJ3Jvd3NwYW4nLCBkPT5kLnJvd3NwYW4pO1xuICAgICAgICBjZWxscy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgIH1cblxuICAgIHNob3coc2hvdyA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NlZCgnc2QtaGlkZGVuJywgIXNob3cpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuc2hvdyhmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xlYXJTZWxlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVzdWx0VGFibGUuc2VsZWN0QWxsKCcuc2Qtc2VsZWN0ZWQnKS5jbGFzc2VkKCdzZC1zZWxlY3RlZCcsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBnZXRSb3dDb21tZW50KHJvdykge1xuICAgICAgICBpZihyb3cuaW5jcmF0aW8gIT09IG51bGwpe1xuICAgICAgICAgICAgcmV0dXJuIGkxOG4udCgnbGVhZ3VlVGFibGUuY29tbWVudC5pbmNyYXRpbycsIHtpbmNyYXRpbzogcm93LmluY3JhdGlvfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYocm93LmRvbWluYXRlZEJ5ICE9PSBudWxsKXtcbiAgICAgICAgICAgIHJldHVybiBpMThuLnQoJ2xlYWd1ZVRhYmxlLmNvbW1lbnQuZG9taW5hdGVkQnknLCB7cG9saWN5OiByb3cuZG9taW5hdGVkQnl9KTtcbiAgICAgICAgfVxuICAgICAgICBpZihyb3cuZXh0ZW5kZWREb21pbmF0ZWRCeSAhPT0gbnVsbCl7XG4gICAgICAgICAgICByZXR1cm4gaTE4bi50KCdsZWFndWVUYWJsZS5jb21tZW50LmV4dGVuZGVkRG9taW5hdGVkQnknLCB7cG9saWN5MTogcm93LmV4dGVuZGVkRG9taW5hdGVkQnlbMF0sIHBvbGljeTI6IHJvdy5leHRlbmRlZERvbWluYXRlZEJ5WzFdfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuXG4gICAgZW1waGFzaXplKHJvdywgZW1waGFzaXplPXRydWUpe1xuICAgICAgICB0aGlzLnJlc3VsdFRhYmxlQm9keS5zZWxlY3RBbGwoJyNzZC1sZWFndWUtdGFibGUtcm93LScrcm93LmlkKS5jbGFzc2VkKCdzZC1lbXBoYXNpemVkJywgZW1waGFzaXplKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICcuL2QzJ1xuaW1wb3J0IHtpMThufSBmcm9tICcuL2kxOG4vaTE4bidcblxuaW1wb3J0IHtVdGlsc30gZnJvbSAnc2QtdXRpbHMnXG5pbXBvcnQge1RlbXBsYXRlc30gZnJvbSBcIi4vdGVtcGxhdGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBMb2FkaW5nSW5kaWNhdG9ye1xuICAgIHN0YXRpYyBzaG93KG1lc3NhZ2U9Jycpe1xuICAgICAgICB2YXIgaHRtbCA9IFRlbXBsYXRlcy5nZXQoJ2xvYWRpbmdJbmRpY2F0b3InKTtcblxuICAgICAgICB2YXIgZyA9IGQzLnNlbGVjdCgnYm9keScpLnNlbGVjdE9yQXBwZW5kKCdkaXYuc2QtbG9hZGluZy1pbmRpY2F0b3ItY29udGFpbmVyJykuaHRtbChodG1sKS5zZWxlY3QoJy5zZC1sb2FkaW5nLWluZGljYXRvcicpLmNsYXNzZWQoJ3Zpc2libGUnLCB0cnVlKS5zdHlsZSgnZGlzcGxheScsICdibG9jaycpXG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGUoKXtcbiAgICAgICAgbGV0IHNlbGVjdCA9IGQzLnNlbGVjdCgnLnNkLWxvYWRpbmctaW5kaWNhdG9yJyk7XG4gICAgICAgIHNlbGVjdC5jbGFzc2VkKCd2aXNpYmxlJywgZmFsc2UpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3Quc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpXG4gICAgICAgIH0sIDUwMClcblxuICAgIH1cbn1cbiIsImltcG9ydCB7VXRpbHMsIGxvZ30gZnJvbSAnc2QtdXRpbHMnO1xuaW1wb3J0IHtpMThufSBmcm9tIFwiLi9pMThuL2kxOG5cIjtcbnZhciBqUXVlcnk7XG5pZihVdGlscy5nZXRHbG9iYWxPYmplY3QoKS5qUXVlcnkpe1xuICAgIGpRdWVyeSA9IFV0aWxzLmdldEdsb2JhbE9iamVjdCgpLmpRdWVyeTtcbiAgICBsb2cuaW5mbyhcIlVzaW5nIGdsb2JhbCBqcXVlcnkgb2JqZWN0XCIpXG59ZWxzZXtcbiAgICBqUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbiAgICBVdGlscy5nZXRHbG9iYWxPYmplY3QoKS5qUXVlcnkgPSBqUXVlcnk7IC8vRklYTUVcbn1cblxucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL2RhdGEnKTtcbnJlcXVpcmUoJ2pxdWVyeS11aS91aS9zY3JvbGwtcGFyZW50Jyk7XG5yZXF1aXJlKCdqcXVlcnktdWkvdWkvd2lkZ2V0Jyk7XG5yZXF1aXJlKCdqcXVlcnktdWkvdWkvd2lkZ2V0cy9tb3VzZScpO1xucmVxdWlyZSgnanF1ZXJ5LXVpL3VpL3dpZGdldHMvc29ydGFibGUnKTtcbnJlcXVpcmUoJ3Bpdm90dGFibGUnKTtcblxuXG4vLyBwaXZvdCBzaG93IHplcm8gaGFjayBzdGFydFxudmFyIG51bWJlckZvcm1hdCA9IGpRdWVyeS5waXZvdFV0aWxpdGllcy5udW1iZXJGb3JtYXQ7XG50cnl7XG4gICAgalF1ZXJ5LnBpdm90VXRpbGl0aWVzLm51bWJlckZvcm1hdCA9IGZ1bmN0aW9uKG9wdHMpe1xuICAgICAgICBpZighb3B0cyl7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgb3B0cy5zaG93WmVybyA9IHRydWU7XG4gICAgICAgIHJldHVybiBudW1iZXJGb3JtYXQob3B0cyk7XG4gICAgfTtcbn1jYXRjaCAoZSl7XG4gICAgbG9nLmVycm9yKCdFcnJvciB3aGVuIHBlcmZvcm1pbmcgcGl2b3R0YWJsZSBcInNob3cgemVyb1wiIGhhY2ssIHJldmVydGluZycpO1xuXG4gICAgdHJ5e1xuICAgICAgICBqUXVlcnkucGl2b3RVdGlsaXRpZXMubnVtYmVyRm9ybWF0ID0gbnVtYmVyRm9ybWF0O1xuICAgIH1jYXRjaCAoZSl7XG5cbiAgICB9XG59XG5cbnJlcXVpcmUoJ3Bpdm90dGFibGUvZGlzdC9waXZvdC5pdCcpO1xucmVxdWlyZSgncGl2b3R0YWJsZS9kaXN0L3Bpdm90LmRlJyk7XG5yZXF1aXJlKCdwaXZvdHRhYmxlL2Rpc3QvcGl2b3QuZnInKTtcbnJlcXVpcmUoJ3Bpdm90dGFibGUvZGlzdC9waXZvdC5wbCcpO1xuXG4vLyBwaXZvdCBzaG93IHplcm8gaGFjayBjb250aW51YXRpb25cbnRyeXtcbiAgICB2YXIgb3JpZ0FnZ3JlZ2F0b3JzID0ge307XG4gICAgVXRpbHMuZm9yT3duKGpRdWVyeS5waXZvdFV0aWxpdGllcy5sb2NhbGVzLmVuLmFnZ3JlZ2F0b3JzLCAodmFsdWUsIGtleSwgb2JqZWN0KT0+e1xuICAgICAgICBvcmlnQWdncmVnYXRvcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICBvYmplY3Rba2V5XSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgYXJnczEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgbGV0IHJlczEgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmdzMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSByZXMxKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXRfID0gcmVzLmZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmZvcm1hdCA9IGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdYID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHg9PT0wKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gIFwiMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoIChlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoJ0Vycm9yIHdoZW4gcGVyZm9ybWluZyBwaXZvdHRhYmxlIFwic2hvdyB6ZXJvXCIgaGFjayAoZm9ybWF0IGZ1bmMgY2FsbCksIHJldmVydGluZycsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZvcm1hdF8pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0XyhvcmlnWCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydEFnZ3JlZ2F0b3JzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoJ0Vycm9yIHdoZW4gcGVyZm9ybWluZyBwaXZvdHRhYmxlIFwic2hvdyB6ZXJvXCIgaGFjaywgcmV2ZXJ0aW5nJywgZSk7XG4gICAgICAgICAgICAgICAgcmV2ZXJ0QWdncmVnYXRvcnMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ0FnZ3JlZ2F0b3JzW2tleV0oLi4uYXJnczEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1jYXRjaCAoZSl7XG4gICAgbG9nLmVycm9yKCdFcnJvciB3aGVuIHBlcmZvcm1pbmcgcGl2b3R0YWJsZSBcInNob3cgemVyb1wiIGhhY2ssIHJldmVydGluZycsIGUpO1xuICAgIHJldmVydEFnZ3JlZ2F0b3JzKCk7XG59XG5cbmZ1bmN0aW9uIHJldmVydEFnZ3JlZ2F0b3JzKCl7XG4gICAgdHJ5IHtcbiAgICAgICAgVXRpbHMuZm9yT3duKGpRdWVyeS5waXZvdFV0aWxpdGllcy5sb2NhbGVzLmVuLmFnZ3JlZ2F0b3JzLCAodmFsdWUsIGtleSwgb2JqZWN0KT0+e1xuICAgICAgICAgICAgbGV0IG9yaWdBZ2dyZWdhdG9yID0gb3JpZ0FnZ3JlZ2F0b3JzW2tleV07XG4gICAgICAgICAgICBpZihvcmlnQWdncmVnYXRvcil7XG4gICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBvcmlnQWdncmVnYXRvclxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgIH1jYXRjaChlKXtcbiAgICAgICAgbG9nLmVycm9yKCdFcnJvciB3aGVuIHJldmVydGluZyBhZ2dyZWdhdG9ycycsIGUpXG4gICAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8gaGFjayBlbmRcblxuZXhwb3J0IGNsYXNzIFBpdm90VGFibGV7XG5cbiAgICBjb250YWluZXI7XG5cblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucywgZGF0YSl7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID1jb250YWluZXI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0YT1kYXRhO1xuICAgICAgICBpZihkYXRhKXtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlKGRhdGEsIG9wdGlvbnMpe1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBqUXVlcnkodGhpcy5jb250YWluZXIubm9kZSgpKS5waXZvdFVJKGRhdGEsIG9wdGlvbnMsIHRydWUsIGkxOG4ubGFuZ3VhZ2UpXG4gICAgfVxuXG4gICAgY2xlYXIoKXtcbiAgICAgICAgalF1ZXJ5KHRoaXMuY29udGFpbmVyLm5vZGUoKSkucGl2b3RVSShbXSwgbnVsbCwgdHJ1ZSlcbiAgICB9XG5cblxuXG4gICAgZ2V0QWdncmVnYXRvck5hbWUobmFtZSl7XG4gICAgICAgIHJldHVybiBpMThuLnQoXCJqb2JSZXN1bHRUYWJsZS5waXZvdC5hZ2dyZWdhdG9ycy5cIituYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIGdldFJlbmRlcmVyTmFtZShuYW1lKXtcbiAgICAgICAgcmV0dXJuIGkxOG4udChcImpvYlJlc3VsdFRhYmxlLnBpdm90LnJlbmRlcmVycy5cIituYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gXCIuL2QzXCI7XG5pbXBvcnQge2kxOG59IGZyb20gXCIuL2kxOG4vaTE4blwiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tIFwiLi9hcHAtdXRpbHNcIjtcbmltcG9ydCB7ZG9tYWluIGFzIG1vZGVsfSBmcm9tIFwic2QtbW9kZWxcIjtcbmltcG9ydCB7UGF5b2ZmSW5wdXRWYWxpZGF0b3J9IGZyb20gXCIuL3ZhbGlkYXRpb24vcGF5b2ZmLWlucHV0LXZhbGlkYXRvclwiO1xuaW1wb3J0IHtQcm9iYWJpbGl0eUlucHV0VmFsaWRhdG9yfSBmcm9tIFwiLi92YWxpZGF0aW9uL3Byb2JhYmlsaXR5LWlucHV0LXZhbGlkYXRvclwiO1xuaW1wb3J0IHtUZW1wbGF0ZXN9IGZyb20gXCIuL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHtUb29sdGlwfSBmcm9tIFwic2QtdHJlZS1kZXNpZ25lclwiO1xuaW1wb3J0IHtJbnB1dEZpZWxkfSBmcm9tIFwiLi9mb3JtL2lucHV0LWZpZWxkXCI7XG5pbXBvcnQge1BhdGhWYWx1ZUFjY2Vzc29yfSBmcm9tIFwiLi9mb3JtL3BhdGgtdmFsdWUtYWNjZXNzb3JcIjtcbmltcG9ydCB7TnVtYmVySW5wdXRWYWxpZGF0b3J9IGZyb20gXCIuL3ZhbGlkYXRpb24vbnVtYmVyLWlucHV0LXZhbGlkYXRvclwiO1xuaW1wb3J0IHtSZXF1aXJlZElucHV0VmFsaWRhdG9yfSBmcm9tIFwiLi92YWxpZGF0aW9uL3JlcXVpcmVkLWlucHV0LXZhbGlkYXRvclwiO1xuaW1wb3J0IHtNY2RtV2VpZ2h0VmFsdWVWYWxpZGF0b3J9IGZyb20gXCJzZC1jb21wdXRhdGlvbnMvc3JjL3ZhbGlkYXRpb24vbWNkbS13ZWlnaHQtdmFsdWUtdmFsaWRhdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBTaWRlYmFyIHtcblxuICAgIGFwcDtcbiAgICBjb250YWluZXI7XG4gICAgZGlzcGF0Y2ggPSBkMy5kaXNwYXRjaChcInJlY29tcHV0ZWRcIiwgXCJvYmplY3QtdXBkYXRlZFwiLCBcIm11bHRpLWNyaXRlcmlhLXVwZGF0ZWRcIik7XG5cblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgYXBwKSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblxuICAgICAgICB0aGlzLmluaXRMYXlvdXRPcHRpb25zKCk7XG4gICAgICAgIHRoaXMuaW5pdERpYWdyYW1EZXRhaWxzKCk7XG4gICAgICAgIHRoaXMuaW5pdERlZmluaXRpb25zKCk7XG4gICAgICAgIHRoaXMuaW5pdE11bHRpcGxlQ3JpdGVyaWEoKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ1NpbHZlckRlY2lzaW9uc1JlY29tcHV0ZWRFdmVudCcsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5kZXRhaWwgPT09IGFwcCkge1xuICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2guY2FsbChcInJlY29tcHV0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYuZGlzcGF0Y2gub24oXCJvYmplY3QtdXBkYXRlZFwiLCBVdGlscy5kZWJvdW5jZSgob2JqZWN0LCBmaWVsZE5hbWUpPT4gc2VsZi5hcHAub25PYmplY3RVcGRhdGVkKG9iamVjdCwgZmllbGROYW1lKSwgMzUwKSk7XG4gICAgICAgIHNlbGYuZGlzcGF0Y2gub24oXCJtdWx0aS1jcml0ZXJpYS11cGRhdGVkXCIsIFV0aWxzLmRlYm91bmNlKChmaWVsZE5hbWUpPT4gc2VsZi5hcHAub25NdWx0aUNyaXRlcmlhVXBkYXRlZChmaWVsZE5hbWUpLCAzNTApKTtcblxuICAgIH1cblxuICAgIGluaXRMYXlvdXRPcHRpb25zKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMubGF5b3V0T3B0aW9uc0NvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI2xheW91dC1vcHRpb25zJyk7XG4gICAgICAgIHRoaXMuYXV0b0xheW91dE9wdGlvbnNHcm91cCA9IHRoaXMubGF5b3V0T3B0aW9uc0NvbnRhaW5lci5zZWxlY3QoJyNhdXRvLWxheW91dC1vcHRpb25zJyk7XG4gICAgICAgIHRoaXMuZ3JpZFdpZHRoID0gdGhpcy5sYXlvdXRPcHRpb25zQ29udGFpbmVyLnNlbGVjdCgnaW5wdXQjZ3JpZC13aWR0aCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmFwcC50cmVlRGVzaWduZXIubGF5b3V0LnNldEdyaWRXaWR0aChwYXJzZUludCh0aGlzLnZhbHVlKSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ncmlkSGVpZ2h0ID0gdGhpcy5sYXlvdXRPcHRpb25zQ29udGFpbmVyLnNlbGVjdCgnaW5wdXQjZ3JpZC1oZWlnaHQnKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5hcHAudHJlZURlc2lnbmVyLmxheW91dC5zZXRHcmlkSGVpZ2h0KHBhcnNlSW50KHRoaXMudmFsdWUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ub2RlU2l6ZSA9IHRoaXMubGF5b3V0T3B0aW9uc0NvbnRhaW5lci5zZWxlY3QoJ2lucHV0I25vZGUtc2l6ZScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmFwcC50cmVlRGVzaWduZXIubGF5b3V0LnNldE5vZGVTaXplKHBhcnNlSW50KHRoaXMudmFsdWUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lZGdlU2xhbnRXaWR0aE1heCA9IHRoaXMubGF5b3V0T3B0aW9uc0NvbnRhaW5lci5zZWxlY3QoJ2lucHV0I2VkZ2Utc2xhbnQtd2lkdGgtbWF4Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuYXBwLnRyZWVEZXNpZ25lci5sYXlvdXQuc2V0RWRnZVNsYW50V2lkdGhNYXgocGFyc2VJbnQodGhpcy52YWx1ZSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1hcmdpbkhvcml6b250YWwgPSB0aGlzLmxheW91dE9wdGlvbnNDb250YWluZXIuc2VsZWN0KCdpbnB1dCNtYXJnaW4taG9yaXpvbnRhbCcpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbSA9IHt9O1xuICAgICAgICAgICAgbS5sZWZ0ID0gbS5yaWdodCA9IHBhcnNlSW50KHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgc2VsZi5hcHAudHJlZURlc2lnbmVyLnNldE1hcmdpbihtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFyZ2luVmVydGljYWwgPSB0aGlzLmxheW91dE9wdGlvbnNDb250YWluZXIuc2VsZWN0KCdpbnB1dCNtYXJnaW4tdmVydGljYWwnKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG0gPSB7fTtcbiAgICAgICAgICAgIG0udG9wID0gbS5ib3R0b20gPSBwYXJzZUludCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIHNlbGYuYXBwLnRyZWVEZXNpZ25lci5zZXRNYXJnaW4obSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYuYXBwLnRyZWVEZXNpZ25lci5sYXlvdXQub25BdXRvTGF5b3V0Q2hhbmdlZC5wdXNoKChsYXlvdXQpPT5zZWxmLnVwZGF0ZUxheW91dE9wdGlvbnMoKSk7XG5cbiAgICAgICAgdGhpcy5sYXlvdXRPcHRpb25zQ29udGFpbmVyLnNlbGVjdCgnLnRvZ2dsZS1idXR0b24nKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxheW91dE9wdGlvbnNDb250YWluZXIuY2xhc3NlZCgnc2QtZXh0ZW5kZWQnLCAhdGhpcy5sYXlvdXRPcHRpb25zQ29udGFpbmVyLmNsYXNzZWQoJ3NkLWV4dGVuZGVkJykpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVwZGF0ZUxheW91dE9wdGlvbnMoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVMYXlvdXRPcHRpb25zKCkge1xuICAgICAgICB0aGlzLm5vZGVTaXplLm5vZGUoKS52YWx1ZSA9IHRoaXMuYXBwLnRyZWVEZXNpZ25lci5jb25maWcubGF5b3V0Lm5vZGVTaXplO1xuICAgICAgICB0aGlzLmVkZ2VTbGFudFdpZHRoTWF4Lm5vZGUoKS52YWx1ZSA9IHRoaXMuYXBwLnRyZWVEZXNpZ25lci5jb25maWcubGF5b3V0LmVkZ2VTbGFudFdpZHRoTWF4O1xuICAgICAgICB0aGlzLm1hcmdpbkhvcml6b250YWwubm9kZSgpLnZhbHVlID0gdGhpcy5hcHAudHJlZURlc2lnbmVyLmNvbmZpZy5tYXJnaW4ubGVmdDtcbiAgICAgICAgdGhpcy5tYXJnaW5WZXJ0aWNhbC5ub2RlKCkudmFsdWUgPSB0aGlzLmFwcC50cmVlRGVzaWduZXIuY29uZmlnLm1hcmdpbi50b3A7XG4gICAgICAgIHRoaXMuZ3JpZFdpZHRoLm5vZGUoKS52YWx1ZSA9IHRoaXMuYXBwLnRyZWVEZXNpZ25lci5jb25maWcubGF5b3V0LmdyaWRXaWR0aDtcbiAgICAgICAgdGhpcy5ncmlkSGVpZ2h0Lm5vZGUoKS52YWx1ZSA9IHRoaXMuYXBwLnRyZWVEZXNpZ25lci5jb25maWcubGF5b3V0LmdyaWRIZWlnaHQ7XG4gICAgICAgIHRoaXMuYXV0b0xheW91dE9wdGlvbnNHcm91cC5jbGFzc2VkKCd2aXNpYmxlJywgIXRoaXMuYXBwLnRyZWVEZXNpZ25lci5sYXlvdXQuaXNNYW51YWxMYXlvdXQoKSk7XG4gICAgfVxuXG4gICAgaW5pdERpYWdyYW1EZXRhaWxzKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGlhZ3JhbURldGFpbHNDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNkaWFncmFtLWRldGFpbHMtYm94Jyk7XG4gICAgICAgIHRoaXMuZGlhZ3JhbURldGFpbHNDb250YWluZXIuY2xhc3NlZCgnc2QtaGlkZGVuJywgIXRoaXMuYXBwLmNvbmZpZy5zaG93RGV0YWlscyk7XG5cbiAgICAgICAgdGhpcy5kaWFncmFtRGV0YWlsc0NvbnRhaW5lci5zZWxlY3QoJy50b2dnbGUtYnV0dG9uJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaWFncmFtRGV0YWlsc0NvbnRhaW5lci5jbGFzc2VkKCdzZC1leHRlbmRlZCcsICF0aGlzLmRpYWdyYW1EZXRhaWxzQ29udGFpbmVyLmNsYXNzZWQoJ3NkLWV4dGVuZGVkJykpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEaWFncmFtRGV0YWlscygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRpYWdyYW1UaXRsZSA9IHRoaXMuZGlhZ3JhbURldGFpbHNDb250YWluZXIuc2VsZWN0KCdpbnB1dCNkaWFncmFtLXRpdGxlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuYXBwLnNldERpYWdyYW1UaXRsZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIEFwcFV0aWxzLnVwZGF0ZUlucHV0Q2xhc3MoZDMuc2VsZWN0KHRoaXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kaWFncmFtRGVzY3JpcHRpb24gPSB0aGlzLmRpYWdyYW1EZXRhaWxzQ29udGFpbmVyLnNlbGVjdCgndGV4dGFyZWEjZGlhZ3JhbS1kZXNjcmlwdGlvbicpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmFwcC5zZXREaWFncmFtRGVzY3JpcHRpb24odGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBBcHBVdGlscy5lbGFzdGljVGV4dGFyZWEodGhpcy5kaWFncmFtRGVzY3JpcHRpb24pO1xuXG4gICAgICAgIHRoaXMudXBkYXRlRGlhZ3JhbURldGFpbHMoKTtcbiAgICB9XG5cbiAgICBpbml0RGVmaW5pdGlvbnMoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3NkLXNpZGViYXItZGVmaW5pdGlvbnMnKTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvbnRhaW5lci5jbGFzc2VkKCdzZC1oaWRkZW4nLCAhdGhpcy5hcHAuY29uZmlnLnNob3dEZWZpbml0aW9ucyk7XG4gICAgICAgIHRoaXMub25EZWZpbml0aW9uc0NvZGVDaGFuZ2VkID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvbnRhaW5lci5zZWxlY3QoJy50b2dnbGUtYnV0dG9uJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvbnRhaW5lci5jbGFzc2VkKCdzZC1leHRlbmRlZCcsICF0aGlzLmRlZmluaXRpb25zQ29udGFpbmVyLmNsYXNzZWQoJ3NkLWV4dGVuZGVkJykpO1xuICAgICAgICAgICAgQXBwVXRpbHMudXBkYXRlSW5wdXRDbGFzcyh0aGlzLmRlZmluaXRpb25zQ29kZSk7XG4gICAgICAgICAgICBBcHBVdGlscy5hdXRvUmVzaXplVGV4dGFyZWEodGhpcy5kZWZpbml0aW9uc0NvZGUubm9kZSgpKVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRlZmluaXRpb25zU2NvcGVMYWJlbCA9IHRoaXMuZGVmaW5pdGlvbnNDb250YWluZXIuc2VsZWN0KCcuc2QtdmFyaWFibGVzLXNjb3BlLXZhbHVlJyk7XG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvZGUgPSB0aGlzLmRlZmluaXRpb25zQ29udGFpbmVyLnNlbGVjdCgndGV4dGFyZWEjc2Qtc2lkZWJhci1kZWZpbml0aW9ucy1jb2RlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLm9uRGVmaW5pdGlvbnNDb2RlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHNlbGYub25EZWZpbml0aW9uc0NvZGVDaGFuZ2VkKHRoaXMudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBUb29sdGlwLmF0dGFjaCh0aGlzLmRlZmluaXRpb25zQ29kZSwgKGQpPT57XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5kZWZpbml0aW9uc0NvZGUuYXR0cignZGF0YS1lcnJvci1tc2cnKTtcblxuICAgICAgICB9LCAxNSwgNTApO1xuXG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0V2YWx1YXRlZFZhbHVlc0NvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLnNlbGVjdChcIiNzZC1zaWRlYmFyLWRlZmluaXRpb25zLWV2YWx1YXRlZC12YWx1ZXNcIik7XG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0NvbnRhaW5lci5zZWxlY3QoJyNzZC1zaWRlYmFyLWRlZmluaXRpb25zLW9wZW4tZGlhbG9nLWJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwLm9wZW5EZWZpbml0aW9uc0RpYWxvZygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRlZmluaXRpb25zQ29udGFpbmVyLnNlbGVjdCgnI3NkLXNpZGViYXItZGVmaW5pdGlvbnMtcmVjYWxjdWxhdGUtYnV0dG9uJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHAucmVjb21wdXRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIEFwcFV0aWxzLmVsYXN0aWNUZXh0YXJlYSh0aGlzLmRlZmluaXRpb25zQ29kZSk7XG4gICAgfVxuXG4gICAgaW5pdE11bHRpcGxlQ3JpdGVyaWEoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5tdWx0aXBsZUNyaXRlcmlhQ29udGFpbmVyID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCcjc2QtbXVsdGlwbGUtY3JpdGVyaWEnKTtcbiAgICAgICAgdGhpcy5tdWx0aXBsZUNyaXRlcmlhQ29udGFpbmVyLmNsYXNzZWQoJ3NkLWhpZGRlbicsICF0aGlzLmFwcC5pc011bHRpcGxlQ3JpdGVyaWEoKSk7XG5cbiAgICAgICAgdGhpcy5tdWx0aXBsZUNyaXRlcmlhQ29udGFpbmVyLnNlbGVjdCgnLnRvZ2dsZS1idXR0b24nKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm11bHRpcGxlQ3JpdGVyaWFDb250YWluZXIuY2xhc3NlZCgnc2QtZXh0ZW5kZWQnLCAhdGhpcy5tdWx0aXBsZUNyaXRlcmlhQ29udGFpbmVyLmNsYXNzZWQoJ3NkLWV4dGVuZGVkJykpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIHRoaXMuc2hvd0xlYWd1ZVRhYmxlQnV0dG9uID0gdGhpcy5tdWx0aXBsZUNyaXRlcmlhQ29udGFpbmVyLnNlbGVjdCgnI3NkLXNob3ctbGVhZ3VlLXRhYmxlLWJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwLnNob3dMZWFndWVUYWJsZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZsaXBDcml0ZXJpYUJ1dHRvbiA9IHRoaXMubXVsdGlwbGVDcml0ZXJpYUNvbnRhaW5lci5zZWxlY3QoJyNzZC1mbGlwLWNyaXRlcmlhLWJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwLmZsaXBDcml0ZXJpYSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAgbGV0IHdlaWdodFBhcnNlciA9ICh3KSA9PiB7XG4gICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodykgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiB3O1xuICAgICAgICB9O1xuXG5cblxuICAgICAgICB0aGlzLm11bHRpcGxlQ3JpdGVyaWFGaWVsZHMgPSBbXTtcbiAgICAgICAgdGhpcy5tdWx0aXBsZUNyaXRlcmlhRmllbGRzLnB1c2gobmV3IElucHV0RmllbGQoJ3NkLW11bHRpcGxlLWNyaXRlcmlhLW5hbWVPZkNyaXRlcmlvbjEnLCAnbmFtZU9mQ3JpdGVyaW9uMScsICd0ZXh0JywgaTE4bi50KCdtdWx0aXBsZUNyaXRlcmlhLm5hbWVPZkNyaXRlcmlvbjEnKSwgbmV3IFBhdGhWYWx1ZUFjY2Vzc29yKHNlbGYuYXBwLmRhdGFNb2RlbCwgJ3BheW9mZk5hbWVzWzBdJyksIG5ldyBSZXF1aXJlZElucHV0VmFsaWRhdG9yKCkpKTtcbiAgICAgICAgdGhpcy5tdWx0aXBsZUNyaXRlcmlhRmllbGRzLnB1c2gobmV3IElucHV0RmllbGQoJ3NkLW11bHRpcGxlLWNyaXRlcmlhLW5hbWVPZkNyaXRlcmlvbjInLCAnbmFtZU9mQ3JpdGVyaW9uMicsICd0ZXh0JywgaTE4bi50KCdtdWx0aXBsZUNyaXRlcmlhLm5hbWVPZkNyaXRlcmlvbjInKSwgbmV3IFBhdGhWYWx1ZUFjY2Vzc29yKHNlbGYuYXBwLmRhdGFNb2RlbCwgJ3BheW9mZk5hbWVzWzFdJyksIG5ldyBSZXF1aXJlZElucHV0VmFsaWRhdG9yKCkpKTtcbiAgICAgICAgbGV0IGxvd2VyQm91bmRWYWx1ZUFjY2Vzc29yID0gbmV3IFBhdGhWYWx1ZUFjY2Vzc29yKHNlbGYuYXBwLmRhdGFNb2RlbCwgJ3dlaWdodExvd2VyQm91bmQnKTtcbiAgICAgICAgbGV0IHVwcGVyQm91bmRWYWx1ZUFjY2Vzc29yID0gbmV3IFBhdGhWYWx1ZUFjY2Vzc29yKHNlbGYuYXBwLmRhdGFNb2RlbCwgJ3dlaWdodFVwcGVyQm91bmQnKTtcbiAgICAgICAgbGV0IHdlaWdodFZhbHVlVmFsaWRhdG9yID0gbmV3IE1jZG1XZWlnaHRWYWx1ZVZhbGlkYXRvcigpO1xuICAgICAgICB2YXIgZWUgPSB0aGlzLmFwcC5leHByZXNzaW9uRW5naW5lLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIHRoaXMubXVsdGlwbGVDcml0ZXJpYUZpZWxkcy5wdXNoKG5ldyBJbnB1dEZpZWxkKCdzZC1tdWx0aXBsZS1jcml0ZXJpYS13ZWlnaHRMb3dlckJvdW5kJywgJ3dlaWdodExvd2VyQm91bmQnLCAndGV4dCcsIGkxOG4udCgnbXVsdGlwbGVDcml0ZXJpYS53ZWlnaHRMb3dlckJvdW5kJyksIGxvd2VyQm91bmRWYWx1ZUFjY2Vzc29yLFxuICAgICAgICAgICAgbmV3IE1jZG1XZWlnaHRWYWx1ZVZhbGlkYXRvcih2ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdXBwZXIgPSB1cHBlckJvdW5kVmFsdWVBY2Nlc3Nvci5nZXQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2VpZ2h0VmFsdWVWYWxpZGF0b3IudmFsaWRhdGUodXBwZXIpID8gZWUuY29tcGFyZSh2LCB1cHBlcikgPD0gMCA6IHRydWVcbiAgICAgICAgICAgIH0pLCBudWxsLCB3ZWlnaHRQYXJzZXIpKTtcblxuICAgICAgICB0aGlzLm11bHRpcGxlQ3JpdGVyaWFGaWVsZHMucHVzaChuZXcgSW5wdXRGaWVsZCgnc2QtbXVsdGlwbGUtY3JpdGVyaWEtZGVmYXVsdENyaXRlcmlvbjFXZWlnaHQnLCAnZGVmYXVsdENyaXRlcmlvbjFXZWlnaHQnLCAndGV4dCcsIGkxOG4udCgnbXVsdGlwbGVDcml0ZXJpYS5kZWZhdWx0Q3JpdGVyaW9uMVdlaWdodCcpLFxuICAgICAgICAgICAgbmV3IFBhdGhWYWx1ZUFjY2Vzc29yKHNlbGYuYXBwLmRhdGFNb2RlbCwgJ2RlZmF1bHRDcml0ZXJpb24xV2VpZ2h0JyksXG4gICAgICAgICAgICBuZXcgTWNkbVdlaWdodFZhbHVlVmFsaWRhdG9yKHYgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB1cHBlciA9IHVwcGVyQm91bmRWYWx1ZUFjY2Vzc29yLmdldCgpO1xuICAgICAgICAgICAgICAgIGxldCBsb3dlciA9IGxvd2VyQm91bmRWYWx1ZUFjY2Vzc29yLmdldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAod2VpZ2h0VmFsdWVWYWxpZGF0b3IudmFsaWRhdGUobG93ZXIpID8gZWUuY29tcGFyZSh2LCBsb3dlcikgPj0gMCA6IHRydWUpICYmICh3ZWlnaHRWYWx1ZVZhbGlkYXRvci52YWxpZGF0ZSh1cHBlcikgPyBlZS5jb21wYXJlKHYsIHVwcGVyKSA8PSAwIDogdHJ1ZSlcbiAgICAgICAgICAgIH0pLCBudWxsLCB3ZWlnaHRQYXJzZXIpKTtcblxuICAgICAgICB0aGlzLm11bHRpcGxlQ3JpdGVyaWFGaWVsZHMucHVzaChuZXcgSW5wdXRGaWVsZCgnc2QtbXVsdGlwbGUtY3JpdGVyaWEtd2VpZ2h0VXBwZXJCb3VuZCcsICd3ZWlnaHRVcHBlckJvdW5kJywgJ3RleHQnLCBpMThuLnQoJ211bHRpcGxlQ3JpdGVyaWEud2VpZ2h0VXBwZXJCb3VuZCcpLCB1cHBlckJvdW5kVmFsdWVBY2Nlc3NvcixcbiAgICAgICAgICAgIG5ldyBNY2RtV2VpZ2h0VmFsdWVWYWxpZGF0b3IodiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGxvd2VyID0gbG93ZXJCb3VuZFZhbHVlQWNjZXNzb3IuZ2V0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlaWdodFZhbHVlVmFsaWRhdG9yLnZhbGlkYXRlKGxvd2VyKSA/IGVlLmNvbXBhcmUodiwgbG93ZXIpID49IDAgOiB0cnVlXG4gICAgICAgICAgICB9KSwgbnVsbCwgd2VpZ2h0UGFyc2VyKSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVNdWx0aXBsZUNyaXRlcmlhKCk7XG4gICAgfVxuXG5cbiAgICB1cGRhdGVNdWx0aXBsZUNyaXRlcmlhKHVwZGF0ZUlucHV0cyA9IHRydWUpeyAvL1RPRE8gcmVmYWN0b3JcbiAgICAgICAgdmFyIGVlID0gdGhpcy5hcHAuZXhwcmVzc2lvbkVuZ2luZTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciB0ZW1wID0ge307XG4gICAgICAgIHRoaXMubXVsdGlwbGVDcml0ZXJpYUNvbnRhaW5lci5jbGFzc2VkKCdzZC1oaWRkZW4nLCAhdGhpcy5hcHAuaXNNdWx0aXBsZUNyaXRlcmlhKCkpO1xuXG4gICAgICAgIGxldCBsZWFndWVUYWJsZUF2YWlsYWJsZSA9IHRoaXMuYXBwLmlzTGVhZ3VlVGFibGVBdmFpbGFibGUoKTtcbiAgICAgICAgdGhpcy5zaG93TGVhZ3VlVGFibGVCdXR0b24uYXR0cihcImRpc2FibGVkXCIsIGxlYWd1ZVRhYmxlQXZhaWxhYmxlID8gdW5kZWZpbmVkIDogXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgdGhpcy5mbGlwQ3JpdGVyaWFCdXR0b24uYXR0cihcImRpc2FibGVkXCIsIGxlYWd1ZVRhYmxlQXZhaWxhYmxlID8gdW5kZWZpbmVkIDogXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgdGhpcy5tdWx0aXBsZUNyaXRlcmlhQ29udGFpbmVyLmNsYXNzZWQoJ3NkLWludmFsaWQtbGVhZ3VlLXRhYmxlLXBhcmFtcycsICFsZWFndWVUYWJsZUF2YWlsYWJsZSk7XG5cbiAgICAgICAgaWYoIXVwZGF0ZUlucHV0cyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5wdXRHcm91cHMgPSB0aGlzLm11bHRpcGxlQ3JpdGVyaWFDb250YWluZXIuc2VsZWN0KFwiLnNkLW11bHRpcGxlLWNyaXRlcmlhLXByb3BlcnRpZXNcIikuc2VsZWN0QWxsKCdkaXYuaW5wdXQtZ3JvdXAnKS5kYXRhKHRoaXMubXVsdGlwbGVDcml0ZXJpYUZpZWxkcyk7XG4gICAgICAgIGlucHV0R3JvdXBzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgdmFyIGlucHV0R3JvdXBzRW50ZXIgPSBpbnB1dEdyb3Vwcy5lbnRlcigpLmFwcGVuZFNlbGVjdG9yKCdkaXYuaW5wdXQtZ3JvdXAnKS5odG1sKGQ9PmQudHlwZT09J3NlbGVjdCc/IFRlbXBsYXRlcy5nZXQoJ3NlbGVjdElucHV0R3JvdXAnLCBkKTpUZW1wbGF0ZXMuZ2V0KCdpbnB1dEdyb3VwJywgZCkpO1xuICAgICAgICBpbnB1dEdyb3Vwc0VudGVyLm1lcmdlKGlucHV0R3JvdXBzKS5zZWxlY3QoJy5zZC1pbnB1dCcpLm9uKCdjaGFuZ2UgaW5wdXQnLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgdmFyIHByZXZWYWx1ZSA9IGQuZ2V0VmFsdWUoKTtcblxuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSAhZC52YWxpZGF0b3IgfHwgZC52YWxpZGF0b3IudmFsaWRhdGUodGhpcy52YWx1ZSk7XG5cbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb24gPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBzZWxlY3Rpb24uY2xhc3NlZCgnaW52YWxpZCcsICFpc1ZhbGlkKTtcbiAgICAgICAgICAgIGlmKGQuc3R5bGVDbGFzcyl7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoZC5zdHlsZUNsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGQzLmV2ZW50LnR5cGUgPT0gJ2NoYW5nZScgJiYgdGVtcFtpXS5wcmlzdGluZVZhbCAhPSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHAuZGF0YU1vZGVsLnNhdmVTdGF0ZUZyb21TbmFwc2hvdCh0ZW1wW2ldLnByaXN0aW5lU3RhdGVTbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgaWYgKGQub25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5vbkNoYW5nZShvYmplY3QsIHRoaXMudmFsdWUsIHRlbXBbaV0ucHJpc3RpbmVWYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoKHByZXZWYWx1ZStcIlwiKT09dGhpcy52YWx1ZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKHNlbGVjdGlvbik7XG4gICAgICAgICAgICBkLnNldFZhbHVlKGQucGFyc2UodGhpcy52YWx1ZSkpO1xuICAgICAgICAgICAgc2VsZi5kaXNwYXRjaC5jYWxsKFwibXVsdGktY3JpdGVyaWEtdXBkYXRlZFwiLCBzZWxmLCBkLm5hbWUpO1xuXG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2ZvY3VzJywgZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgICAgICB0ZW1wW2ldLnByaXN0aW5lVmFsID0gdGhpcy52YWx1ZTtcblxuICAgICAgICAgICAgICAgIHRlbXBbaV0ucHJpc3RpbmVTdGF0ZVNuYXBzaG90ID0gc2VsZi5hcHAuZGF0YU1vZGVsLmNyZWF0ZVN0YXRlU25hcHNob3QoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGQuZ2V0VmFsdWUoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0ZW1wW2ldID0ge307XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ2ludmFsaWQnLCBkLnZhbGlkYXRvciAmJiAhZC52YWxpZGF0b3IudmFsaWRhdGUodGhpcy52YWx1ZSkpO1xuXG4gICAgICAgICAgICAgICAgQXBwVXRpbHMudXBkYXRlSW5wdXRDbGFzcyhkMy5zZWxlY3QodGhpcykpO1xuICAgICAgICAgICAgICAgIGlmIChkLnR5cGUgPT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICAgICAgICBBcHBVdGlscy5lbGFzdGljVGV4dGFyZWEoZDMuc2VsZWN0KHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgQXBwVXRpbHMuYXV0b1Jlc2l6ZVRleHRhcmVhKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVEZWZpbml0aW9ucyhkZWZpbml0aW9uc1NvdXJjZU9iamVjdCwgcmVhZE9ubHksIGNoYW5nZUNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNDb250YWluZXIuY2xhc3NlZCgnc2QtcmVhZC1vbmx5JywgcmVhZE9ubHkpO1xuICAgICAgICB0aGlzLm9uRGVmaW5pdGlvbnNDb2RlQ2hhbmdlZCA9IGNoYW5nZUNhbGxiYWNrO1xuXG5cbiAgICAgICAgbGV0IHNjb3BlVHlwZSA9ICdnbG9iYWwnO1xuICAgICAgICBpZiAoZGVmaW5pdGlvbnNTb3VyY2VPYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5Ob2RlKSB7XG4gICAgICAgICAgICBzY29wZVR5cGUgPSAnbm9kZSdcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNTY29wZUxhYmVsLnRleHQoaTE4bi50KFwic2lkZWJhckRlZmluaXRpb25zLnNjb3BlLlwiK3Njb3BlVHlwZSkpO1xuXG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNDb2RlLm5vZGUoKS52YWx1ZSA9IGRlZmluaXRpb25zU291cmNlT2JqZWN0LmNvZGU7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNDb2RlLmNsYXNzZWQoJ2ludmFsaWQnLCAhIWRlZmluaXRpb25zU291cmNlT2JqZWN0LiRjb2RlRXJyb3IpO1xuICAgICAgICB0aGlzLmRlZmluaXRpb25zQ29kZS5hdHRyKCdkYXRhLWVycm9yLW1zZycsIGRlZmluaXRpb25zU291cmNlT2JqZWN0LiRjb2RlRXJyb3IpO1xuICAgICAgICB2YXIgaHRtbCA9IFRlbXBsYXRlcy5nZXQoJ2V2YWx1YXRlZFZhcmlhYmxlcycsIHtzY29wZVZhcmlhYmxlczogVXRpbHMuZ2V0VmFyaWFibGVzQXNMaXN0KGRlZmluaXRpb25zU291cmNlT2JqZWN0LmV4cHJlc3Npb25TY29wZSl9KTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uc0V2YWx1YXRlZFZhbHVlc0NvbnRhaW5lci5odG1sKGh0bWwpO1xuICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKHRoaXMuZGVmaW5pdGlvbnNDb2RlKTtcbiAgICAgICAgQXBwVXRpbHMuYXV0b1Jlc2l6ZVRleHRhcmVhKHRoaXMuZGVmaW5pdGlvbnNDb2RlLm5vZGUoKSlcbiAgICB9XG5cbiAgICB1cGRhdGVEaWFncmFtRGV0YWlscygpIHtcbiAgICAgICAgdGhpcy5kaWFncmFtVGl0bGUubm9kZSgpLnZhbHVlID0gdGhpcy5hcHAuY29uZmlnLnRpdGxlO1xuICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKHRoaXMuZGlhZ3JhbVRpdGxlKTtcbiAgICAgICAgdGhpcy5kaWFncmFtRGVzY3JpcHRpb24ubm9kZSgpLnZhbHVlID0gdGhpcy5hcHAuY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKHRoaXMuZGlhZ3JhbURlc2NyaXB0aW9uKTtcbiAgICAgICAgQXBwVXRpbHMuYXV0b1Jlc2l6ZVRleHRhcmVhKHRoaXMuZGlhZ3JhbURlc2NyaXB0aW9uLm5vZGUoKSlcbiAgICB9XG5cbiAgICBkaXNwbGF5T2JqZWN0UHJvcGVydGllcyhvYmplY3QpIHtcbiAgICAgICAgdGhpcy51cGRhdGVPYmplY3RQcm9wZXJ0aWVzVmlldyhvYmplY3QpO1xuICAgIH1cblxuICAgIGhpZGVPYmplY3RQcm9wZXJ0aWVzKCkge1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI29iamVjdC1wcm9wZXJ0aWVzJykuY2xhc3NlZCgndmlzaWJsZScsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0QWxsKCdkaXYuY2hpbGQtb2JqZWN0JykucmVtb3ZlKCk7XG5cbiAgICB9XG5cbiAgICB1cGRhdGVPYmplY3RQcm9wZXJ0aWVzVmlldyhvYmplY3QpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaC5vbihcIi5yZWNvbXB1dGVkXCIsIG51bGwpOyAvL3JlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciByZWNvbXB1dGVkIGV2ZW50XG4gICAgICAgIGlmICghb2JqZWN0KSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVPYmplY3RQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JqZWN0UHJvcHMgPSB0aGlzLm9iamVjdFByb3BzID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCcjb2JqZWN0LXByb3BlcnRpZXMnKS5jbGFzc2VkKCd2aXNpYmxlJywgdHJ1ZSk7XG4gICAgICAgIHZhciBoZWFkZXJUZXh0ID0gU2lkZWJhci5nZXRIZWFkZXJUZXh0Rm9yT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIG9iamVjdFByb3BzLnNlbGVjdCgnLmhlYWRlcicpLmh0bWwoaGVhZGVyVGV4dCk7XG5cbiAgICAgICAgdmFyIGZpZWxkTGlzdCA9IHRoaXMuZ2V0RmllbGRMaXN0Rm9yT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHRoaXMudXBkYXRlT2JqZWN0RmllbGRzKG9iamVjdCwgZmllbGRMaXN0LCBvYmplY3RQcm9wcy5zZWxlY3QoJy5jb250ZW50IC5tYWluLXByb3BlcnRpZXMnKSk7XG5cblxuICAgICAgICB0aGlzLnVwZGF0ZU9iamVjdENoaWxkcmVuUHJvcGVydGllcyhvYmplY3QpO1xuXG4gICAgfVxuXG4gICAgdXBkYXRlT2JqZWN0Q2hpbGRyZW5Qcm9wZXJ0aWVzKG9iamVjdCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGlsZE9iamVjdHMgPSB0aGlzLmdldENoaWxkT2JqZWN0TGlzdChvYmplY3QpO1xuICAgICAgICB2YXIgb2JqZWN0VHlwZSA9IFNpZGViYXIuZ2V0T2JqZWN0VHlwZShvYmplY3QpO1xuXG4gICAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB0aGlzLm9iamVjdFByb3BzLnNlbGVjdCgnLmNvbnRlbnQgLmNoaWxkcmVuLXByb3BlcnRpZXMnKTtcblxuICAgICAgICBjaGlsZFByb3BzU2VsZWN0b3IuY2xhc3NlZCgndmlzaWJsZScsIGNoaWxkT2JqZWN0cy5sZW5ndGgpO1xuXG4gICAgICAgIGNoaWxkUHJvcHNTZWxlY3Rvci5zZWxlY3QoJy5jaGlsZHJlbi1wcm9wZXJ0aWVzLWhlYWRlcicpLnRleHQoaTE4bi50KCdvYmplY3RQcm9wZXJ0aWVzLmNoaWxkcmVuUHJvcGVydGllcy4nICsgb2JqZWN0VHlwZSArICcuaGVhZGVyJykpO1xuICAgICAgICB2YXIgY2hpbGRyZW5Db250ZW50ID0gY2hpbGRQcm9wc1NlbGVjdG9yLnNlbGVjdCgnLmNoaWxkcmVuLXByb3BlcnRpZXMtY29udGVudCcpO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBjaGlsZHJlbkNvbnRlbnQuc2VsZWN0QWxsKCdkaXYuY2hpbGQtb2JqZWN0JykuZGF0YShjaGlsZE9iamVjdHMsIChkLCBpKT0+IGQuaWQgfHwgaSk7XG4gICAgICAgIHZhciBjaGlsZHJlbkVudGVyID0gY2hpbGRyZW4uZW50ZXIoKS5hcHBlbmRTZWxlY3RvcignZGl2LmNoaWxkLW9iamVjdCcpO1xuICAgICAgICB2YXIgY2hpbGRyZW5NZXJnZSA9IGNoaWxkcmVuRW50ZXIubWVyZ2UoY2hpbGRyZW4pO1xuXG4gICAgICAgIGNoaWxkcmVuTWVyZ2UuZWFjaCh1cGRhdGVDaGlsZE9iamVjdFByb3BlcnRpZXMpO1xuXG4gICAgICAgIGNoaWxkcmVuLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDaGlsZE9iamVjdFByb3BlcnRpZXMoY2hpbGQsIGkpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBjb250YWluZXIuc2VsZWN0T3JBcHBlbmQoJ2Rpdi5jaGlsZC1oZWFkZXInKS50ZXh0KGkxOG4udCgnb2JqZWN0UHJvcGVydGllcy5jaGlsZHJlblByb3BlcnRpZXMuJyArIG9iamVjdFR5cGUgKyAnLmNoaWxkLmhlYWRlcicsIHtudW1iZXI6IGkgKyAxfSkpO1xuXG4gICAgICAgICAgICB2YXIgZmllbGRMaXN0ID0gc2VsZi5nZXRGaWVsZExpc3RGb3JPYmplY3QoY2hpbGQpO1xuICAgICAgICAgICAgc2VsZi51cGRhdGVPYmplY3RGaWVsZHMoY2hpbGQsIGZpZWxkTGlzdCwgY29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKCdkaXYuZmllbGQtbGlzdCcpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE9iamVjdFR5cGUob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5Ob2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gJ25vZGUnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5FZGdlKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VkZ2UnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5UZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RleHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SGVhZGVyVGV4dEZvck9iamVjdChvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIG1vZGVsLk5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuLnQoJ29iamVjdFByb3BlcnRpZXMuaGVhZGVyLm5vZGUuJyArIG9iamVjdC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgbW9kZWwuRWRnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGkxOG4udCgnb2JqZWN0UHJvcGVydGllcy5oZWFkZXIuZWRnZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5UZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gaTE4bi50KCdvYmplY3RQcm9wZXJ0aWVzLmhlYWRlci50ZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGdldENoaWxkT2JqZWN0TGlzdChvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIG1vZGVsLk5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QuY2hpbGRFZGdlcy5zb3J0KChhLCBiKT0+YS5jaGlsZE5vZGUubG9jYXRpb24ueSAtIGIuY2hpbGROb2RlLmxvY2F0aW9uLnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5FZGdlKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGdldEZpZWxkTGlzdEZvck9iamVjdChvYmplY3QpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5Ob2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5ldyBPYmplY3RJbnB1dEZpZWxkKG9iamVjdCwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBtb2RlbC5FZGdlKSB7XG4gICAgICAgICAgICBsZXQgbXVsdGlwbGVDcml0ZXJpYSA9IHRoaXMuYXBwLmlzTXVsdGlwbGVDcml0ZXJpYSgpO1xuICAgICAgICAgICAgdmFyIGxpc3QgPSBbXG4gICAgICAgICAgICAgICAgbmV3IE9iamVjdElucHV0RmllbGQob2JqZWN0LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJ1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBPYmplY3RJbnB1dEZpZWxkKG9iamVjdCwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncGF5b2ZmJyxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogJ3BheW9mZlsnICsgKHNlbGYuYXBwLmN1cnJlbnRWaWV3TW9kZS5wYXlvZmZJbmRleCB8fCAwKSArICddJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG11bHRpcGxlQ3JpdGVyaWEgPyBzZWxmLmFwcC5kYXRhTW9kZWwucGF5b2ZmTmFtZXNbMF0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBuZXcgUGF5b2ZmSW5wdXRWYWxpZGF0b3Ioc2VsZi5hcHAuZXhwcmVzc2lvbkVuZ2luZSlcbiAgICAgICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGlmKG11bHRpcGxlQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2gobmV3IE9iamVjdElucHV0RmllbGQob2JqZWN0LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwYXlvZmYyJyxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogJ3BheW9mZlsxXScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBzZWxmLmFwcC5kYXRhTW9kZWwucGF5b2ZmTmFtZXNbMV0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBuZXcgUGF5b2ZmSW5wdXRWYWxpZGF0b3Ioc2VsZi5hcHAuZXhwcmVzc2lvbkVuZ2luZSlcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvYmplY3QucGFyZW50Tm9kZSBpbnN0YW5jZW9mIG1vZGVsLkNoYW5jZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2gobmV3IE9iamVjdElucHV0RmllbGQob2JqZWN0LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9iYWJpbGl0eScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBuZXcgUHJvYmFiaWxpdHlJbnB1dFZhbGlkYXRvcihzZWxmLmFwcC5leHByZXNzaW9uRW5naW5lKVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG5cbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgbW9kZWwuVGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgT2JqZWN0SW5wdXRGaWVsZChvYmplY3QsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAndmFsdWUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcbiAgICAgICAgICAgIH0pXVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHVwZGF0ZU9iamVjdEZpZWxkcyhvYmplY3QsIGZpZWxkTGlzdCwgY29udGFpbmVyKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICB2YXIgZmllbGRzID0gY29udGFpbmVyLnNlbGVjdEFsbCgnZGl2Lm9iamVjdC1maWVsZCcpLmRhdGEoZmllbGRMaXN0KTtcbiAgICAgICAgdmFyIHRlbXAgPSB7fTtcbiAgICAgICAgdmFyIGZpZWxkc0VudGVyID0gZmllbGRzLmVudGVyKCkuYXBwZW5kU2VsZWN0b3IoJ2Rpdi5vYmplY3QtZmllbGQnKTtcbiAgICAgICAgdmFyIGZpZWxkc01lcmdlID0gZmllbGRzRW50ZXIubWVyZ2UoZmllbGRzKTtcblxuICAgICAgICBmaWVsZHNNZXJnZS5lYWNoKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRTZWxlY3Rpb24gPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBmaWVsZFNlbGVjdGlvbi5odG1sKFwiXCIpO1xuXG4gICAgICAgICAgICB2YXIgaW5wdXQ7XG4gICAgICAgICAgICBpZiAoZC50eXBlID09ICd0ZXh0YXJlYScpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGZpZWxkU2VsZWN0aW9uLmFwcGVuZCgndGV4dGFyZWEnKS5hdHRyKCdyb3dzJywgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gZmllbGRTZWxlY3Rpb24uYXBwZW5kKCdpbnB1dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5wdXQuY2xhc3NlZCgnc2QtaW5wdXQnLCB0cnVlKTtcbiAgICAgICAgICAgIGlucHV0LmF0dHIoJ2Rpc2FibGVkJywgb2JqZWN0LnNvdXJjZUlkID8gXCJkaXNhYmxlZFwiIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgZmllbGRTZWxlY3Rpb24uYXBwZW5kU2VsZWN0b3IoJ3NwYW4uYmFyJyk7XG4gICAgICAgICAgICBmaWVsZFNlbGVjdGlvbi5hcHBlbmQoJ2xhYmVsJyk7XG4gICAgICAgICAgICBmaWVsZFNlbGVjdGlvbi5jbGFzc2VkKCdpbnB1dC1ncm91cCcsIHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZHNNZXJnZS5zZWxlY3QoJ2xhYmVsJylcbiAgICAgICAgICAgIC5hdHRyKCdmb3InLCBkPT5kLmlkKVxuICAgICAgICAgICAgLmh0bWwoZD0+ZC5sYWJlbCk7XG4gICAgICAgIGZpZWxkc01lcmdlLnNlbGVjdCgnLnNkLWlucHV0JylcbiAgICAgICAgICAgIC5hdHRyKCd0eXBlJywgZD0+ZC50eXBlID09ICd0ZXh0YXJlYScgPyB1bmRlZmluZWQgOiBkLnR5cGUpXG4gICAgICAgICAgICAuYXR0cignbmFtZScsIGQ9PmQubmFtZSlcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQ9PmQuaWQpXG4gICAgICAgICAgICAub24oJ2NoYW5nZSBrZXl1cCcsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZWYWx1ZSA9IGQuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9ICFkLnZhbGlkYXRvciB8fCBkLnZhbGlkYXRvci52YWxpZGF0ZSh0aGlzLnZhbHVlLCBvYmplY3QsIGQucGF0aCk7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnNldFN5bnRheFZhbGlkaXR5KGQucGF0aCwgaXNWYWxpZCk7XG5cbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZCgnaW52YWxpZCcsICFvYmplY3QuaXNGaWVsZFZhbGlkKGQucGF0aCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGQzLmV2ZW50LnR5cGUgPT0gJ2NoYW5nZScgJiYgdGVtcFtpXS5wcmlzdGluZVZhbCAhPSB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXBwLmRhdGFNb2RlbC5zYXZlU3RhdGVGcm9tU25hcHNob3QodGVtcFtpXS5wcmlzdGluZVN0YXRlU25hcHNob3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5vbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5vbkNoYW5nZShvYmplY3QsIHRoaXMudmFsdWUsIHRlbXBbaV0ucHJpc3RpbmVWYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoKHByZXZWYWx1ZStcIlwiKT09dGhpcy52YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBBcHBVdGlscy51cGRhdGVJbnB1dENsYXNzKGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgaWYgKGQuY3VzdG9tT25JbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBkLmN1c3RvbU9uSW5wdXQob2JqZWN0LCB0aGlzLnZhbHVlLCB0ZW1wW2ldLnByaXN0aW5lVmFsKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGQuc2V0VmFsdWUodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2guY2FsbChcIm9iamVjdC11cGRhdGVkXCIsIHNlbGYsIG9iamVjdCwgZC5wYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdmb2N1cycsIGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICAgICAgdGVtcFtpXS5wcmlzdGluZVZhbCA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgdGVtcFtpXS5wcmlzdGluZVN0YXRlU25hcHNob3QgPSBzZWxmLmFwcC5kYXRhTW9kZWwuY3JlYXRlU3RhdGVTbmFwc2hvdCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGQuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICB0ZW1wW2ldID0ge307XG4gICAgICAgICAgICAgICAgaWYgKGQudmFsaWRhdG9yICYmICFkLnZhbGlkYXRvci52YWxpZGF0ZSh0aGlzLnZhbHVlLCBvYmplY3QsIGQucGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ2ludmFsaWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNldFN5bnRheFZhbGlkaXR5KGQucGF0aCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Quc2V0U3ludGF4VmFsaWRpdHkoZC5wYXRoLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBjaGVja0ZpZWxkU3RhdHVzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoX3RoaXMpLmNsYXNzZWQoJ2ludmFsaWQnLCAhb2JqZWN0LmlzRmllbGRWYWxpZChkLnBhdGgpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNoZWNrRmllbGRTdGF0dXMoKTtcblxuICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2gub24oXCJyZWNvbXB1dGVkLlwiK29iamVjdC5pZCtcIi5cIitkLnBhdGgsIGNoZWNrRmllbGRTdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgQXBwVXRpbHMudXBkYXRlSW5wdXRDbGFzcyhkMy5zZWxlY3QodGhpcykpO1xuICAgICAgICAgICAgICAgIGlmIChkLnR5cGUgPT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICAgICAgICBBcHBVdGlscy5lbGFzdGljVGV4dGFyZWEoZDMuc2VsZWN0KHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgQXBwVXRpbHMuYXV0b1Jlc2l6ZVRleHRhcmVhKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZHMuZXhpdCgpLnJlbW92ZSgpO1xuICAgIH1cbn1cblxuY2xhc3MgT2JqZWN0SW5wdXRGaWVsZCBleHRlbmRzIElucHV0RmllbGR7XG4gICAgLy9jb25maWcgb2JqZWN0IHdpdGggZmllbGRzOiBuYW1lLCBwYXRoLCB0eXBlLCB2YWxpZGF0b3IsIG9wdGlvbnNcbiAgICBjb25zdHJ1Y3RvcihvYmplY3QsIGNvbmZpZykge1xuICAgICAgICBzdXBlcignb2JqZWN0LScgKyBvYmplY3QuaWQgKyAnLWZpZWxkLScgKyBjb25maWcubmFtZSwgY29uZmlnLm5hbWUsIGNvbmZpZy50eXBlLCBjb25maWcubGFiZWwgPyBjb25maWcubGFiZWwgOiBpMThuLnQoU2lkZWJhci5nZXRPYmplY3RUeXBlKG9iamVjdCkgKyAnLicgKyBjb25maWcubmFtZSksXG4gICAgICAgICAgICBuZXcgUGF0aFZhbHVlQWNjZXNzb3Iob2JqZWN0LCBjb25maWcucGF0aCB8fCBjb25maWcubmFtZSksIGNvbmZpZy52YWxpZGF0b3IsIGNvbmZpZy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYXRoID0gY29uZmlnLnBhdGggfHwgY29uZmlnLm5hbWU7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBjb25maWcub25DaGFuZ2U7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQge1RlbXBsYXRlcyBhcyBUZFRlbXBsYXRlc30gZnJvbSBcInNkLXRyZWUtZGVzaWduZXJcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSAnLi9pMThuL2kxOG4nXG5pbXBvcnQge1V0aWxzLCBsb2d9IGZyb20gXCJzZC11dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVzIGV4dGVuZHMgVGRUZW1wbGF0ZXN7XG5cbiAgICAvL1RPRE8gYXV0b21hdGVcbiAgICBzdGF0aWMgYWJvdXRfZGUgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9hYm91dC9kZS5odG1sJyk7XG4gICAgc3RhdGljIGFib3V0X2VuID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvYWJvdXQvZW4uaHRtbCcpO1xuICAgIHN0YXRpYyBhYm91dF9mciA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2Fib3V0L2ZyLmh0bWwnKTtcbiAgICBzdGF0aWMgYWJvdXRfaXQgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9hYm91dC9pdC5odG1sJyk7XG4gICAgc3RhdGljIGFib3V0X3BsID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvYWJvdXQvcGwuaHRtbCcpO1xuXG4gICAgc3RhdGljIHRvb2xiYXIgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy90b29sYmFyLmh0bWwnKTtcbiAgICBzdGF0aWMgbGF5b3V0T3B0aW9ucyA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL3NpZGViYXIvbGF5b3V0X29wdGlvbnMuaHRtbCcpO1xuICAgIHN0YXRpYyBvYmplY3RQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvc2lkZWJhci9vYmplY3RfcHJvcGVydGllcy5odG1sJyk7XG4gICAgc3RhdGljIGRpYWdyYW1EZXRhaWxzQm94ID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvc2lkZWJhci9kaWFncmFtX2RldGFpbHNfYm94Lmh0bWwnKTtcbiAgICBzdGF0aWMgZXZhbHVhdGVkVmFyaWFibGVzID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvZXZhbHVhdGVkX3ZhcmlhYmxlcy5odG1sJyk7XG4gICAgc3RhdGljIGRlZmluaXRpb25zID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvc2lkZWJhci9kZWZpbml0aW9ucy5odG1sJyk7XG4gICAgc3RhdGljIG11bHRpcGxlQ3JpdGVyaWEgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9zaWRlYmFyL211bHRpcGxlX2NyaXRlcmlhLmh0bWwnKTtcbiAgICBzdGF0aWMgc2lkZWJhciA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL3NpZGViYXIvc2lkZWJhci5odG1sJyk7XG4gICAgc3RhdGljIHNldHRpbmdzRGlhbG9nID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvc2V0dGluZ3NfZGlhbG9nLmh0bWwnKTtcbiAgICBzdGF0aWMgc2V0dGluZ3NEaWFsb2dGb3JtR3JvdXAgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9zZXR0aW5nc19kaWFsb2dfZm9ybV9ncm91cC5odG1sJyk7XG4gICAgc3RhdGljIGlucHV0R3JvdXAgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9pbnB1dF9ncm91cC5odG1sJyk7XG4gICAgc3RhdGljIHNlbGVjdElucHV0R3JvdXAgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9zZWxlY3RfaW5wdXRfZ3JvdXAuaHRtbCcpO1xuICAgIHN0YXRpYyBoZWxwID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvaGVscC5odG1sJyk7XG4gICAgc3RhdGljIGFib3V0RGlhbG9nID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvYWJvdXRfZGlhbG9nLmh0bWwnKTtcbiAgICBzdGF0aWMgZGVmaW5pdGlvbnNEaWFsb2cgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9kZWZpbml0aW9uc19kaWFsb2cuaHRtbCcpO1xuICAgIHN0YXRpYyBzZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvc2Vuc2l0aXZpdHlfYW5hbHlzaXNfZGlhbG9nLmh0bWwnKTtcbiAgICBzdGF0aWMgam9iUGFyYW1ldGVyc0J1aWxkZXIgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9qb2JzL2pvYl9wYXJhbWV0ZXJzX2J1aWxkZXIuaHRtbCcpO1xuICAgIHN0YXRpYyBqb2JQYXJhbWV0ZXIgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9qb2JzL2pvYl9wYXJhbWV0ZXIuaHRtbCcpO1xuICAgIHN0YXRpYyBsZWFndWVUYWJsZURpYWxvZyA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2xlYWd1ZV90YWJsZV9kaWFsb2cuaHRtbCcpO1xuICAgIHN0YXRpYyBsb2FkaW5nSW5kaWNhdG9yID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbG9hZGluZ19pbmRpY2F0b3IuaHRtbCcpO1xuICAgIHN0YXRpYyBmdWxsc2NyZWVuUG9wdXAgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9mdWxsc2NyZWVuX3BvcHVwLmh0bWwnKTtcbiAgICBzdGF0aWMgd2FybmluZ01lc3NhZ2UgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy93YXJuaW5nX21lc3NhZ2UuaHRtbCcpO1xuICAgIHN0YXRpYyBtYWluID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbWFpbi5odG1sJyk7XG5cbiAgICBzdGF0aWMgZ2V0KHRlbXBsYXRlTmFtZSwgdmFyaWFibGVzKXtcbiAgICAgICAgdmFyIGNvbXBpbGVkID0gVXRpbHMudGVtcGxhdGUoVGVtcGxhdGVzW3RlbXBsYXRlTmFtZV0seyAnaW1wb3J0cyc6IHsgJ2kxOG4nOiBpMThuLCAnVGVtcGxhdGVzJzogVGVtcGxhdGVzLCAnaW5jbHVkZSc6IGZ1bmN0aW9uKG4sIHYpIHtyZXR1cm4gVGVtcGxhdGVzLmdldChuLCB2KX0gfSB9KTtcbiAgICAgICAgaWYodmFyaWFibGVzKXtcbiAgICAgICAgICAgIHZhcmlhYmxlcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdmFyaWFibGVzID0ge3ZhcmlhYmxlczp7fX1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGlsZWQodmFyaWFibGVzKVxuXG4gICAgfVxuXG59XG5cblxuXG5cbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD5cXG4gICAgPHN0cm9uZz5TaWx2ZXJEZWNpc2lvbnMgPCU9IHZlcnNpb24gJT4gKGdlYmF1dCA8JT0gYnVpbGRUaW1lc3RhbXAlPik8L3N0cm9uZz48YnIvPk9wZW4gU291cmNlIEVudHNjaGVpZHVuZ3NiYXVtIFNvZnR3YXJlLlxcbjwvcD5cXG48cD5cXG48c3Ryb25nPlppdGllcnVuZzo8L3N0cm9uZz48YnIvPlxcbkIuIEthbWnFhHNraSwgTS4gSmFrdWJjenlrLCBQLiBTenVmZWw6IEEgZnJhbWV3b3JrIGZvciBzZW5zaXRpdml0eSBhbmFseXNpcyBvZiBkZWNpc2lvbiB0cmVlcywgQ2VudHJhbCBFdXJvcGVhbiBKb3VybmFsIG9mIE9wZXJhdGlvbnMgUmVzZWFyY2ggKDIwMTcpLjwvYnI+XFxuPGEgaHJlZj1cXFwiaHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9hcnRpY2xlLzEwLjEwMDcvczEwMTAwLTAxNy0wNDc5LTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5kb2k6MTAuMTAwNy9zMTAxMDAtMDE3LTA0NzktNjwvYT5cXG48L3A+XFxuPHAgY2xhc3M9XFxcInNkLXByb2plY3QtdGVhbVxcXCI+XFxuICAgIFByb2pla3R0ZWFtOlxcbiAgICA8dWw+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL2JvZ3VtaWxrYW1pbnNraS5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Cb2d1bWnFgiBLYW1pxYRza2k8L2E+IChQcm9qZWt0bGVpdGVyKTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9zenVmZWwucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UHJ6ZW15c8WCYXcgU3p1ZmVsPC9hPiAoU3RlbGx2ZXJ0cmV0ZW5kZXIgUHJvamVrdGxlaXRlcik8L2xpPlxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9td2FzaWx1a1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1pY2hhxYIgV2FzaWx1azwvYT4gKERlc2lnbmVyKTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3d3dy5taWNoYWxqYWt1YmN6eWsucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGHFgiBKYWt1YmN6eWs8L2E+IChFbnR3aWNrbGVyKTwvbGk+XFxuICAgICAgICA8bGk+QW5uYSBXaWVydGxld3NrYSAoUHJvamVrdCBVbnRlcnN0w7x0enVuZyk8L2xpPlxcbiAgICAgICAgPGxpPk1hcmNpbiBDenVwcnluYSAoVGVzdGVyKTwvbGk+XFxuICAgIDwvdWw+XFxuPC9wPlxcbjxwPlxcbiAgICBEYXMgUHJvamVrdCB3aXJkIHZvbiBEZWNpc2lvbiBTdXBwb3J0IGFuZCBBbmFseXNpcyBEaXZpc2lvbiwgV2Fyc2F3IFNjaG9vbCBvZiBFY29ub21pY3MgZW50d2lja2VsdC48YnIvPlxcbiAgICBLb250YWt0OiBzaWx2ZXJkZWNpc2lvbnNAc2doLndhdy5wbFxcbjwvcD5cXG48cD5cXG4gICAgU2lsdmVyRGVjaXNpb25zIGlzdCBlaW4gZ2VtZWluc2NoYWZ0c2dldHJpZWJlbmVzIFByb2pla3QuIFNvbGx0ZW4gU2llIGVzIGbDvHIgSWhyZSBVbnRlcmljaHQsIEZvcnNjaHVuZyBvZGVyIGplZGUgYW5kZXJlIEFrdGl2aXTDpHQsIGRpZSBTaWUgbWl0IHVucyB0ZWlsZW4gbcO2Y2h0ZW4gdmVyd2VuZGVuLCB3aXIgd8O8cmRlbiB1bnMgZnJldWVuLCBlaW5lbiBMaW5rIHp1IElocmVuIEFrdGl2aXTDpHRlbiB6dSBkZXIgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL1NpbHZlckRlY2lzaW9ucy9TaWx2ZXJEZWNpc2lvbnMvd2lraS9TaWx2ZXJEZWNpc2lvbnMtQ29tbXVuaXR5XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+U2lsdmVyRGVjaXNpb25zIEdlbWVpbnNjaGFmdDwvYT4gU2VpdGUgaGluenVmw7xnZW4genUga8O2bm5lbi5cXG48L3A+XFxuPHA+XFxuICAgIFNvZnR3YXJlIHdpcmQgYWxzIFRlaWwgdm9uIDxhIGhyZWY9XFxcImh0dHA6Ly9yb3V0ZXRvcGEuZXUvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Uk9VVEUtVE8tUEE8L2E+IFByb2pla3QgZW50d2lja2VsdC4gRGllc2VzIFByb2pla3QgaGF0IMKgwqDCoMKgIE1pdHRlbCBhdXMgZGVtIEhvcml6b24gMjAyMCAoRm9yc2NodW5ncy0gdW5kIElubm92YXRpb25zcHJvZ3JhbW0gZGVyIEV1cm9ww6Rpc2NoZW4gVW5pb24pIGltIFJhaG1lbiBkZXIgRmluYW56aGlsZmV2ZXJlaW5iYXJ1bmcgTnIgNjQ1ODYwIGVyaGFsdGVuLiBaaWVsIGRpZXNlcyBQcm9qZWt0ZXMgaXN0IGVzLCBlaW5lIHRyYW5zcGFyZW50ZSBLb21tdW5pa2F0aW9uIHp3aXNjaGVuIGRlciDDtmZmZW50bGljaGVuIFZlcndhbHR1bmcgdW5kIGRlbiBCw7xyZ2VybiDDvGJlciBkYXMgVGhlbWEsIMO2ZmZlbnRsaWNoZSBEYXRlbiB1bmQgRW50c2NoZWlkdW5nc3Byb3plc3NlIHp1IHVudGVyc3TDvHR6ZW4uIFxcbjwvcD5cXG48cD5cXG4gICAgQWxsZSBRdWVsbGRhdGVpZW4gd2VyZGVuIHVudGVyIGRlbiBCZWRpbmd1bmdlbiBkZXIgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIFZlcnNpb24gMyBsaXplbnppZXJ0LlxcbjwvcD5cXG48cD5cXG4gICAgRsO8ciB3ZWl0ZXJlIEluZm9ybWF0aW9uZW4gYmVzdWNoZW4gU2llIGJpdHRlLCB1bnNlcmUgV2Vic2l0ZSB1bnRlciA8YSBocmVmPVxcXCJodHRwOi8vc2lsdmVyZGVjaXNpb25zLnBsL1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmh0dHA6Ly9zaWx2ZXJkZWNpc2lvbnMucGwvPC9hPi5cXG48L3A+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+XFxuICAgIDxzdHJvbmc+U2lsdmVyRGVjaXNpb25zIDwlPSB2ZXJzaW9uICU+IChidWlsZCA8JT0gYnVpbGRUaW1lc3RhbXAlPik8L3N0cm9uZz48YnIvPkEgZnJlZSBhbmQgb3BlbiBzb3VyY2UgZGVjaXNpb24gdHJlZSBzb2Z0d2FyZS5cXG48L3A+XFxuPHA+XFxuPHN0cm9uZz5DaXRhdGlvbjo8L3N0cm9uZz48YnIvPlxcbkIuIEthbWnFhHNraSwgTS4gSmFrdWJjenlrLCBQLiBTenVmZWw6IEEgZnJhbWV3b3JrIGZvciBzZW5zaXRpdml0eSBhbmFseXNpcyBvZiBkZWNpc2lvbiB0cmVlcywgQ2VudHJhbCBFdXJvcGVhbiBKb3VybmFsIG9mIE9wZXJhdGlvbnMgUmVzZWFyY2ggKDIwMTcpLjwvYnI+XFxuPGEgaHJlZj1cXFwiaHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9hcnRpY2xlLzEwLjEwMDcvczEwMTAwLTAxNy0wNDc5LTZcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5kb2k6MTAuMTAwNy9zMTAxMDAtMDE3LTA0NzktNjwvYT5cXG48L3A+XFxuPHAgY2xhc3M9XFxcInNkLXByb2plY3QtdGVhbVxcXCI+XFxuICAgIFByb2plY3QgdGVhbTpcXG4gICAgPHVsPlxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHA6Ly9ib2d1bWlsa2FtaW5za2kucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Qm9ndW1pxYIgS2FtacWEc2tpPC9hPiAocHJvamVjdCBtYW5hZ2VyKTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9zenVmZWwucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UHJ6ZW15c8WCYXcgU3p1ZmVsPC9hPiAoZGVwdXR5IHByb2plY3QgbWFuYWdlcik8L2xpPlxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9td2FzaWx1a1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1pY2hhxYIgV2FzaWx1azwvYT4gKGRldmVsb3Blcik8L2xpPlxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHA6Ly93d3cubWljaGFsamFrdWJjenlrLnBsL1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1pY2hhxYIgSmFrdWJjenlrPC9hPiAoZGVzaWduZXIpPC9saT5cXG4gICAgICAgIDxsaT5Bbm5hIFdpZXJ0bGV3c2thIChkb2N1bWVudGFsaXN0KTwvbGk+XFxuICAgICAgICA8bGk+TWFyY2luIEN6dXByeW5hICh0ZXN0ZXIpPC9saT5cXG4gICAgPC91bD5cXG48L3A+XFxuPHA+XFxuICAgIFRoZSBwcm9qZWN0IGlzIGRldmVsb3BlZCBhdCBEZWNpc2lvbiBTdXBwb3J0IGFuZCBBbmFseXNpcyBEaXZpc2lvbiwgV2Fyc2F3IFNjaG9vbCBvZiBFY29ub21pY3MuPGJyLz5cXG4gICAgQ29udGFjdDogc2lsdmVyZGVjaXNpb25zQHNnaC53YXcucGxcXG48L3A+XFxuPHA+XFxuICAgIFNpbHZlckRlY2lzaW9ucyBpcyBhIGNvbW11bml0eS1kcml2ZW4gcHJvamVjdCwgc28gaWYgeW91IHVzZSBpdCBmb3IgdGVhY2hpbmcsIHJlc2VhcmNoIG9yIGFueSBvdGhlciBhY3Rpdml0eSB0aGF0IHlvdSB3b3VsZCBiZSB3aWxsaW5nIHRvIHNoYXJlIHBsZWFzZSBsZXQgdXMga25vdy4gV2Ugd291bGQgYmUgZ2xhZCB0byBhZGQgYSBsaW5rIHRvIHlvdXIgYWN0aXZpdGllcyBvbiA8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vU2lsdmVyRGVjaXNpb25zL1NpbHZlckRlY2lzaW9ucy93aWtpL1NpbHZlckRlY2lzaW9ucy1Db21tdW5pdHlcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5TaWx2ZXJEZWNpc2lvbnMgQ29tbXVuaXR5PC9hPiBwYWdlLlxcbjwvcD5cXG48cD5cXG4gICAgU29mdHdhcmUgaXMgZGV2ZWxvcGVkIGFzIGEgcGFydCBvZiA8YSBocmVmPVxcXCJodHRwOi8vcm91dGV0b3BhLmV1L1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlJPVVRFLVRPLVBBPC9hPiBQcm9qZWN0IHRoYXQgaGFzXFxuICAgIHJlY2VpdmVkIGZ1bmRpbmcgZnJvbSB0aGUgRXVyb3BlYW4gVW5pb27igJlzIEhvcml6b24gMjAyMCByZXNlYXJjaCBhbmQgaW5ub3ZhdGlvbiBwcm9ncmFtbWUgdW5kZXIgZ3JhbnQgYWdyZWVtZW50IE5vXFxuICAgIDY0NTg2MC4gSXRzIGFpbSBpcyB0byBhbGxvdyBhIHRyYW5zcGFyZW50IGNvbW11bmljYXRpb24gYmV0d2VlbiBwdWJsaWMgYWRtaW5pc3RyYXRpb24gYW5kIGNpdGl6ZW5zIHJlZ2FyZGluZyBwdWJsaWNcXG4gICAgZGF0YSBhYm91dCBkZWNpc2lvbiBtYWtpbmcgcHJvY2Vzc2VzIHBlcmZvcm1lZCBieSBwdWJsaWMgYWRtaW5pc3RyYXRpb24uXFxuPC9wPlxcbjxwPlxcbiAgICBBbGwgdGhlIHNvdXJjZSBmaWxlcyBhcmUgbGljZW5zZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAzLlxcbjwvcD5cXG48cD5cXG4gICAgRm9yIG1vcmUgaW5mb3JtYXRpb24gdmlzaXQgb3VyIHdlYnNpdGUgYXQgPGEgaHJlZj1cXFwiaHR0cDovL3NpbHZlcmRlY2lzaW9ucy5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5odHRwOi8vc2lsdmVyZGVjaXNpb25zLnBsLzwvYT4uXFxuPC9wPlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPlxcbiAgICA8c3Ryb25nPlNpbHZlckRlY2lzaW9ucyA8JT0gdmVyc2lvbiAlPiAoYnVpbGQgPCU9IGJ1aWxkVGltZXN0YW1wJT4pPC9zdHJvbmc+PGJyLz5VbiBsb2dpY2llbCBsaWJyZSBldCBvcGVuIHNvdXJjZSBwb3VyIGZhaXJlIHNvbiBwcm9wcmUgYXJicmUgZGUgZMOpY2lzaW9uLlxcbjwvcD5cXG5cXG48cD5cXG48c3Ryb25nPkNpdGF0aW9uOjwvc3Ryb25nPjxici8+XFxuQi4gS2FtacWEc2tpLCBNLiBKYWt1YmN6eWssIFAuIFN6dWZlbDogQSBmcmFtZXdvcmsgZm9yIHNlbnNpdGl2aXR5IGFuYWx5c2lzIG9mIGRlY2lzaW9uIHRyZWVzLCBDZW50cmFsIEV1cm9wZWFuIEpvdXJuYWwgb2YgT3BlcmF0aW9ucyBSZXNlYXJjaCAoMjAxNykuPC9icj5cXG48YSBocmVmPVxcXCJodHRwczovL2xpbmsuc3ByaW5nZXIuY29tL2FydGljbGUvMTAuMTAwNy9zMTAxMDAtMDE3LTA0NzktNlxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmRvaToxMC4xMDA3L3MxMDEwMC0wMTctMDQ3OS02PC9hPlxcbjwvcD5cXG5cXG48cCBjbGFzcz1cXFwic2QtcHJvamVjdC10ZWFtXFxcIj5cXG4gICAgRXF1aXBlIGR1IHByb2pldDpcXG4gICAgPHVsPlxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHA6Ly9ib2d1bWlsa2FtaW5za2kucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Qm9ndW1pxYIgS2FtacWEc2tpPC9hPiAoY2hlZiBkZSBwcm9qZXQpPC9saT5cXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL3N6dWZlbC5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5QcnplbXlzxYJhdyBTenVmZWw8L2E+IChjaGVmIGRlIHByb2pldCBhZGpvaW50KTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL213YXNpbHVrXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGHFgiBXYXNpbHVrPC9hPiAoZMOpdmVsb3BwZXVyKTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3d3dy5taWNoYWxqYWt1YmN6eWsucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGHFgiBKYWt1YmN6eWs8L2E+IChkZXNpZ25lcik8L2xpPlxcbiAgICAgICAgPGxpPkFubmEgV2llcnRsZXdza2EgKGRvY3VtZW50YWxpc3RlKTwvbGk+XFxuXFx0PGxpPk1hcmNpbiBDenVwcnluYSAodGVzdGV1cik8L2xpPlxcbiAgICA8L3VsPlxcbjwvcD5cXG48cD5cXG4gICAgTGUgcHJvamV0IGVzdCBjb27Dp3UgZXQgZMOpdmVsb3Bww6kgcGFyIGxhIERpdmlzaW9uIGRlIGwnYWlkZSDDoCBsYSBkw6ljaXNpb24gZXQgZGUgbCdhbmFseXNlLCDDoCBsJ8OJY29sZSBkJ8OpY29ub21pZSBkZSBWYXJzb3ZpZS4gPGJyLz5Db250YWN0OiBzaWx2ZXJkZWNpc2lvbnNAc2doLndhdy5wbFxcbjwvcD5cXG48cD5cXG4gICAgU2lsdmVyRGVjaXNpb25zIGVzdCB1biBwcm9qZXQgY29tbXVuYXV0YWlyZSwgZG9uYyBzaSB2b3VzIGwndXRpbGlzZXogcG91ciBsJ2Vuc2VpZ25lbWVudCwgbGEgcmVjaGVyY2hlIG91IHRvdXRlIGF1dHJlIGFjdGl2aXTDqSBxdWUgdm91cyBhaW1lcmlleiBwYXJ0YWdlciwgXFxuICAgIGZhaXRlcy1sZSBub3VzIHNhdm9pci4gTm91cyBzZXJpb25zIGhldXJldXggZCdham91dGVyIHVuIGxpZW4gdmVycyB2b3MgYWN0aXZpdMOpcyBzdXIgbGUgc2l0ZSB3ZWIgZGUgXFxuICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9TaWx2ZXJEZWNpc2lvbnMvU2lsdmVyRGVjaXNpb25zL3dpa2kvU2lsdmVyRGVjaXNpb25zLUNvbW11bml0eVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlNpbHZlckRlY2lzaW9ucyBDb21tdW5pdHk8L2E+LlxcbjwvcD5cXG48cD4gIFxcbiAgICBMZSBsb2dpY2llbCBlc3QgZMOpdmVsb3Bww6kgZGFucyBsZSBjYWRyZSBkdSBwcm9qZXQgPGEgaHJlZj1cXFwiaHR0cDovL3JvdXRldG9wYS5ldS9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5ST1VURS1UTy1QQTwvYT4sIFxcbiAgICBmaW5hbmPDqSBwYXIgbGUgcHJvZ3JhbW1lIGRlIHJlY2hlcmNoZSBldCBkJ2lubm92YXRpb24gSG9yaXpvbiAyMDIwIGRlIGwnVW5pb24gRXVyb3DDqWVubmUgZGFucyBsZSBjYWRyZSBkZSBsJ2FjY29yZCBkZSBzdWJ2ZW50aW9uIG7CsCA2NDU4NjAuIFxcbiAgICBTb24gb2JqZWN0aWYgZXN0IHBlcm1ldHRyZSB1bmUgY29tbXVuaWNhdGlvbiB0cmFuc3BhcmVudGUgZW50cmUgbCdhZG1pbmlzdHJhdGlvbiBwdWJsaXF1ZSBldCBsZXMgY2l0b3llbnMgXFxuICAgIGNvbmNlcm5hbnQgbGVzIGRvbm7DqWVzIHB1YmxpcXVlcyAoT3BlbiBEYXRhKSBldCBsYSBwcmlzZSBkZSBkw6ljaXNpb24gZGVzIGFkbWluaXN0cmF0aW9ucy4gIFxcbjwvcD5cXG48cD5cXG4gICAgVG91cyBsZXMgZmljaGllcnMgc291cmNlIHNvbnQgc291cyBsaWNlbmNlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uIDMuXFxuPC9wPlxcbjxwPlxcbiAgICBQb3VyIHBsdXMgZCdpbmZvcm1hdGlvbnMsIHZpc2l0ZXogbm90cmUgc2l0ZSB3ZWIgw6AgPGEgaHJlZj1cXFwiaHR0cDovL3NpbHZlcmRlY2lzaW9ucy5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5odHRwOi8vc2lsdmVyZGVjaXNpb25zLnBsLzwvYT4uXFxuPC9wPlxcblxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPlxcbiAgICA8c3Ryb25nPlNpbHZlckRlY2lzaW9ucyA8JT0gdmVyc2lvbiAlPiAoY29uc3RydXppb25lIDwlPSBidWlsZFRpbWVzdGFtcCU+KTwvc3Ryb25nPjxici8+XFxuICAgIFVuIFNvZnR3YXJlIE9wZW4gU291cmNlIEZyZWUgcGVyIGdlc3RpcmUgYWxiZXJpIGRpIGRlY2lzaW9uZS5cXG48L3A+XFxuXFxuPHA+XFxuPHN0cm9uZz5DaXRhemlvbmU6PC9zdHJvbmc+PGJyLz5cXG5CLiBLYW1pxYRza2ksIE0uIEpha3ViY3p5aywgUC4gU3p1ZmVsOiBBIGZyYW1ld29yayBmb3Igc2Vuc2l0aXZpdHkgYW5hbHlzaXMgb2YgZGVjaXNpb24gdHJlZXMsIENlbnRyYWwgRXVyb3BlYW4gSm91cm5hbCBvZiBPcGVyYXRpb25zIFJlc2VhcmNoICgyMDE3KS48L2JyPlxcbjxhIGhyZWY9XFxcImh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vYXJ0aWNsZS8xMC4xMDA3L3MxMDEwMC0wMTctMDQ3OS02XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+ZG9pOjEwLjEwMDcvczEwMTAwLTAxNy0wNDc5LTY8L2E+XFxuPC9wPlxcblxcbjxwIGNsYXNzPVxcXCJzZC1wcm9qZWN0LXRlYW1cXFwiPlxcbiAgICBUZWFtIGRpIHByb2dldHRvOlxcbiAgICA8dWw+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL2JvZ3VtaWxrYW1pbnNraS5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Cb2d1bWnFgiBLYW1pxYRza2k8L2E+IChwcm9qZWN0IG1hbmFnZXIpPC9saT5cXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL3N6dWZlbC5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5QcnplbXlzxYJhdyBTenVmZWw8L2E+ICh2aWNlIHByb2plY3QgbWFuYWdlcik8L2xpPlxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9td2FzaWx1a1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1pY2hhxYIgV2FzaWx1azwvYT4gKHN2aWx1cHBvKTwvbGk+XFxuICAgICAgICA8bGk+TWFyY2luIEN6dXByeW5hICh0ZXN0KTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3d3dy5taWNoYWxqYWt1YmN6eWsucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGHFgiBKYWt1YmN6eWs8L2E+ICh0ZXN0ZXIpPC9saT5cXG4gICAgICAgIDxsaT5Bbm5hIFdpZXJ0bGV3c2thIChkb2N1bWVudGF6aW9uZSk8L2xpPlxcbiAgICA8L3VsPlxcbjwvcD5cXG48cD5cXG4gICAgSWwgcHJvZ2V0dG8gw6ggc3ZpbHVwcGF0byBwcmVzc28gbGEgRGl2aXNpb25lIOKAnFN1cHBvcnRvIGFsbGEgZGVjaXNpb25lIGVkIEFuYWxpc2nigJ0gZGVsbGEgU2N1b2xhIGRpIEVjb25vbWlhIGRlbGzigJlVbml2ZXJzaXTDoCBkaSBWYXJzYXZpYS4gPGJyLz5Db250YXR0bzpcXG4gICAgc2lsdmVyZGVjaXNpb25zQHNnaC53YXcucGxcXG48L3A+XFxuPHA+XFxuU2lsdmVyRGVjaXNpb24gw6ggdW4gUHJvZ2V0dG8gYmFzYXRvIHN1IGRpIHVuYSBDb211bml0w6AgZGkgc3ZpbHVwcG8sIHNlIGxvIHV0aWxpenppIGEgc2NvcG8gZGkgaW5zZWduYW1lbnRvLCByaWNlcmNhIG8gYWx0cmEgYXR0aXZpdMOgIGNoZSB2b3JyZXN0aSByZW5kZXJlIG5vdGEgdGllbmljaSBpbmZvcm1hdGkuIFNhcmVtbW8gbGlldGkgZGkgYWdnaXVuZ2VyZSB1biA8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vU2lsdmVyRGVjaXNpb25zL1NpbHZlckRlY2lzaW9ucy93aWtpL1NpbHZlckRlY2lzaW9ucy1Db21tdW5pdHlcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5saW5rPC9hPiBhbGxhIHR1YSBhdHRpdml0w6AuXFxuPC9wPlxcbjxwPlxcbiAgICBJbCBzb2Z0d2FyZSDDqCBzdmlsdXBwYXRvIG5lbGzigJlhbWJpdG8gZGVsIHByb2dldHRvIDxhIGhyZWY9XFxcImh0dHA6Ly9yb3V0ZXRvcGEuZXUvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Uk9VVEUtVE8tUEE8L2E+IFxcbiAgICBmaW5hbnppYXRvIGRhbCBwcm9ncmFtbWEgZGkgcmljZXJjYSBlZCBpbm5vdmF6aW9uZSBIMjAyMCBkZWxs4oCZIFVuaW9uZSBFdXJvcGVhIChjb250cmF0dG8gbi4gNjQ1ODYwKS4gXFxuICAgIFNjb3BvIGRlbCBwcm9nZXR0byDDqCBxdWVsbG8gZGkgcGVybWV0dGVyZSB1bmEgY29tdW5pY2F6aW9uZSB0cmFzcGFyZW50ZSB0cmEgUHViYmxpY2EgQW1taW5pc3RyYXppb25lIGUgY2l0dGFkaW5pIFxcbiAgICByaWd1YXJkbyBhaSBkYXRpIHB1YmJsaWNpIGVkIGFpIHByb2Nlc3NpIGRpIGRlY2lzaW9uZSBwb3J0YXRpIGF2YW50aSBkYWxsYSBzdGVzc2EgUHViYmxpY2EgQW1taW5pc3RyYXppb25lLiAgICBcXG48L3A+XFxuPHA+XFxuICAgIFR1dHRpIGkgY29kaWNpIHNvcmdlbnRlIHNvbm8gcmlsYXNjaWF0aSBzZWNvbmRvIGkgdGVybWluaSBkZWxsYSBsaWNlbnphIOKAnEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uIDNcXFwiLlxcbjwvcD5cXG48cD5cXG4gICAgUGVyIG1hZ2dpb3JpIGluZm9ybWF6aW9uaSB2aXNpdGEgaWwgc2l0byA8YSBocmVmPVxcXCJodHRwOi8vc2lsdmVyZGVjaXNpb25zLnBsL1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmh0dHA6Ly9zaWx2ZXJkZWNpc2lvbnMucGwvPC9hPi5cXG48L3A+XFxuXFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+XFxuICAgIDxzdHJvbmc+U2lsdmVyRGVjaXNpb25zIDwlPSB2ZXJzaW9uICU+IChidWlsZCA8JT0gYnVpbGRUaW1lc3RhbXAlPik8L3N0cm9uZz48YnIvPlxcbiAgICBPcHJvZ3JhbW93YW5pZSBkbyBhbmFsaXp5IGRyemV3IGRlY3l6eWpueWNoIHR5cHUgRnJlZSBPcGVuIFNvdXJjZS5cXG48L3A+XFxuXFxuPHA+XFxuPHN0cm9uZz5DeXRvd2FuaWU6PC9zdHJvbmc+PGJyLz5cXG5CLiBLYW1pxYRza2ksIE0uIEpha3ViY3p5aywgUC4gU3p1ZmVsOiBBIGZyYW1ld29yayBmb3Igc2Vuc2l0aXZpdHkgYW5hbHlzaXMgb2YgZGVjaXNpb24gdHJlZXMsIENlbnRyYWwgRXVyb3BlYW4gSm91cm5hbCBvZiBPcGVyYXRpb25zIFJlc2VhcmNoICgyMDE3KS48L2JyPlxcbjxhIGhyZWY9XFxcImh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vYXJ0aWNsZS8xMC4xMDA3L3MxMDEwMC0wMTctMDQ3OS02XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+ZG9pOjEwLjEwMDcvczEwMTAwLTAxNy0wNDc5LTY8L2E+XFxuPC9wPlxcblxcbjxwIGNsYXNzPVxcXCJzZC1wcm9qZWN0LXRlYW1cXFwiPlxcbiAgICBaZXNww7PFgiBwcm9qZWt0b3d5OlxcbiAgICA8dWw+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL2JvZ3VtaWxrYW1pbnNraS5wbC9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Cb2d1bWnFgiBLYW1pxYRza2k8L2E+IChtYW5hZ2VyIHByb2pla3R1KTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9zenVmZWwucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UHJ6ZW15c8WCYXcgU3p1ZmVsPC9hPiAoemFzdMSZcGNhIG1hbmFnZXJhIHByb2pla3R1KTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL213YXNpbHVrXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGHFgiBXYXNpbHVrPC9hPiAoZGV2ZWxvcGVyKTwvbGk+XFxuICAgICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3d3dy5taWNoYWxqYWt1YmN6eWsucGwvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGHFgiBKYWt1YmN6eWs8L2E+IChwcm9qZWt0YW50KTwvbGk+XFxuICAgICAgICA8bGk+QW5uYSBXaWVydGxld3NrYSAoZG9rdW1lbnRhbGlzdGthKTwvbGk+XFxuICAgICAgICA8bGk+TWFyY2luIEN6dXByeW5hICh0ZXN0ZXIpPC9saT5cXG4gICAgPC91bD5cXG48L3A+XFxuPHA+XFxuICAgIFByb2pla3QgamVzdCByZWFsaXpvd2FueSB3IFpha8WCYWR6aWUgV3Nwb21hZ2FuaWEgaSBBbmFsaXp5IERlY3l6amkgdyBTemtvbGUgR8WCw7N3bmVqIEhhbmRsb3dlaiB3IFdhcnN6YXdpZS48YnIvPlxcbiAgICBLb250YWt0OiBzaWx2ZXJkZWNpc2lvbnNAc2doLndhdy5wbFxcbjwvcD5cXG48cD5cXG4gICAgUm96d8OzaiBTaWx2ZXJEZWNpc2lvbnMgemFsZcW8eSBvZCBwb3RyemViIHXFvHl0a293bmlrw7N3LiBXIHp3acSFemt1IHogdHltIGplxZtsaSB3eWtvcnp5c3R1amVzeiBqZSBkbyBuYXVjemFuaWEsIGJhZGHFhCBsdWIgaW5ueWNoIGFrdHl3bm/Fm2NpLCBvIGt0w7NyeWNoIHplY2hjZXN6IG5hIHBvd2llZHppZcSHIHByb3NpbXkgbyBrb250YWt0LiBCecWCb2J5IG5hbSBiYXJkem8gbWnFgm8sIGplxZtsaSBtb2dsaWJ5xZtteSBkb2RhxIcgaW5mb3JtYWNqxJkgbyBUd29pY2ggYWt0eXdub8WbY2lhY2ggbmEgc3Ryb25pZSA8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vU2lsdmVyRGVjaXNpb25zL1NpbHZlckRlY2lzaW9ucy93aWtpL1NpbHZlckRlY2lzaW9ucy1Db21tdW5pdHlcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5TaWx2ZXJEZWNpc2lvbnMgQ29tbXVuaXR5PC9hPi5cXG48L3A+XFxuPHA+XFxuPHA+XFxuICAgIE9wcm9ncmFtb3dhbmllIGplc3Qgcm96d2lqYW5lIHcgcmFtYWNoIHByb2pla3R1IDxhIGhyZWY9XFxcImh0dHA6Ly9yb3V0ZXRvcGEuZXUvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Uk9VVEUtVE8tUEE8L2E+ICg8ZW0+UmFpc2luZ1xcbiAgICBPcGVuIGFuZCBVc2VyLWZyaWVuZGx5IFRyYW5zcGFyZW5jeS1FbmFibGluZyBUZWNobm9sb2dpZXMgZm9yIFB1YmxpYyBBZG1pbmlzdHJhdGlvbnM8L2VtPiksXFxuICAgIGt0w7NyeSBqZXN0IGZpbmFuc293YW55IHplIMWbcm9ka8OzdyBFdXJvcGVqc2tpZWdvIFByb2dyYW11IHcgWmFrcmVzaWUgQmFkYcWEIE5hdWtvd3ljaCBpIElubm93YWNqaSBIb3Jpem9uIDIwMjAgbmFcXG4gICAgcG9kc3Rhd2llIHVtb3d5IG8gZG90YWNqxJkgbnIgNjQ1ODYwLiBDZWxlbSBwcm9qZWt0dSBST1VURS1UTy1QQSBqZXN0IHVtb8W8bGl3aWVuaWUgcHJ6ZWpyenlzdGVqIGtvbXVuaWthY2ppIHBvbWnEmWR6eVxcbiAgICBhZG1pbmlzdHJhY2rEhSBwdWJsaWN6bsSFIGEgbWllc3prYcWEY2FtaSB3IHpha3Jlc2llIHB1YmxpY3pueWNoIGRhbnljaCBkb3R5Y3rEhWN5Y2ggcHJvY2VzdSBwb2Rlam1vd2FuaWEgcHJ6ZXpcXG4gICAgYWRtaW5pc3RyYWNqZSBwdWJsaWN6bmUgZGVjeXpqaS5cXG48L3A+XFxuPHA+XFxuICAgIFdzenlzdGtpZSBwbGlraSDFunLDs2TFgm93ZSBzxIUgbGljZW5jam9ub3dhbmUgemdvZG5pZSB6ZSBzxYJhYnN6xIUgcG93c3plY2huxIUgbGljZW5jasSFIHB1YmxpY3puxIUgR05VIChHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAzKS5cXG48L3A+XFxuPHA+XFxuICAgIFdpxJljZWogaW5mb3JtYWNqaSBtb8W8bmEgem5hbGXFusSHIG5hIHN0cm9uaWUgaW50ZXJuZXRvd2VqOiA8YSBocmVmPVxcXCJodHRwOi8vc2lsdmVyZGVjaXNpb25zLnBsL1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmh0dHA6Ly9zaWx2ZXJkZWNpc2lvbnMucGwvPC9hPi5cXG48L3A+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBpZD1cXFwic2QtYWJvdXQtZGlhbG9nXFxcIiBjbGFzcz1cXFwic2QtbW9kYWxcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZC1tb2RhbC1jb250ZW50XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLW1vZGFsLWhlYWRlclxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNkLW1vZGFsLWJ1dHRvbiBzZC1jbG9zZS1tb2RhbFxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5jbG9zZTwvaT48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNkLW1vZGFsLWJ1dHRvbiBzZC1leHRlbmQtbW9kYWxcXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+ZnVsbHNjcmVlbjwvaT48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNkLW1vZGFsLWJ1dHRvbiBzZC1zaHJpbmstbW9kYWxcXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+ZnVsbHNjcmVlbl9leGl0PC9pPjwvc3Bhbj5cXG4gICAgICAgICAgICA8aDI+PCU9IGkxOG4udChcXFwiYWJvdXREaWFsb2cudGl0bGVcXFwiKSU+PC9oMj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwtYm9keVxcXCI+XFxuICAgICAgICAgICAgPCUgaWYgKCBbXFxcImRlXFxcIiwgXFxcImVuXFxcIiwgXFxcImZyXFxcIiwgXFxcIml0XFxcIiwgXFxcInBsXFxcIl0uaW5kZXhPZihsbmcpICE9PSAtMSkgeyAlPlxcbiAgICAgICAgICAgICAgICA8JT0gaW5jbHVkZSgnYWJvdXRfJytsbmcsIHZhcmlhYmxlcykgJT5cXG4gICAgICAgICAgICA8JSB9IGVsc2UgeyAlPlxcbiAgICAgICAgICAgICAgICA8JT0gaW5jbHVkZSgnYWJvdXRfZW4nLCB2YXJpYWJsZXMpICU+XFxuICAgICAgICAgICAgPCUgfSAlPlxcblxcbiAgICAgICAgICAgIDwlPSBpbmNsdWRlKCdoZWxwJywgdmFyaWFibGVzKSAlPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcInNkLWRlZmluaXRpb25zLWRpYWxvZ1xcXCIgY2xhc3M9XFxcInNkLW1vZGFsXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwtY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1tb2RhbC1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZC1tb2RhbC1idXR0b24gc2QtY2xvc2UtbW9kYWxcXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+Y2xvc2U8L2k+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZC1tb2RhbC1idXR0b24gc2QtZXh0ZW5kLW1vZGFsXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmZ1bGxzY3JlZW48L2k+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZC1tb2RhbC1idXR0b24gc2Qtc2hyaW5rLW1vZGFsXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmZ1bGxzY3JlZW5fZXhpdDwvaT48L3NwYW4+XFxuICAgICAgICAgICAgPGgyPjwlPSBpMThuLnQoXFxcImRlZmluaXRpb25zRGlhbG9nLnRpdGxlXFxcIiklPjogPHNwYW4gY2xhc3M9XFxcInNkLWRlZmluaXRpb25zLWRpYWxvZy1zY29wZS1sYWJlbFxcXCI+PC9zcGFuPjwvaDI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLW1vZGFsLWJvZHlcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRlZmluaXRpb25zLWZvcm1cXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9XFxcInNkLWRlZmluaXRpb25zLWRpYWxvZy1kZWZpbml0aW9ucy1jb2RlXFxcIiBuYW1lPVxcXCJzZC1kZWZpbml0aW9ucy1jb2RlXFxcIj48L3RleHRhcmVhPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJldmFsdWF0ZWQtdmFyaWFibGVzLXByZXZpZXdcXFwiPlxcbiAgICAgICAgICAgICAgICA8aDM+PCU9IGkxOG4udCgnZGVmaW5pdGlvbnNEaWFsb2cuZXZhbHVhdGVkVmFyaWFibGVzJyklPjo8L2gzPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJzZC1kZWZpbml0aW9ucy1kaWFsb2ctdmFyaWFibGUtdmFsdWVzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhY3Rpb24tYnV0dG9uc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcInNkLWRlZmluaXRpb25zLWRpYWxvZy1yZWNhbGN1bGF0ZS1idXR0b25cXFwiIGNsYXNzPVxcXCJpY29uLWJ1dHRvblxcXCIgIHRpdGxlPVxcXCI8JT0gaTE4bi50KCdkZWZpbml0aW9uc0RpYWxvZy5idXR0b25zLnJlY2FsY3VsYXRlJyklPlxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5yZWZyZXNoPC9pPjwvYnV0dG9uPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjx0YWJsZSBjbGFzcz1cXFwic2QtZXZhbHVhdGVkLXZhcmlhYmxlc1xcXCI+XFxuICAgIDwlIGZvcihpPTA7IGk8c2NvcGVWYXJpYWJsZXMubGVuZ3RoOyArK2kpIHsgJT5cXG4gICAgPHRyPlxcbiAgICAgICAgPHRkPjwlPSBzY29wZVZhcmlhYmxlc1tpXS5rZXkgJT48L3RkPlxcbiAgICAgICAgPHRkPj08L3RkPlxcbiAgICAgICAgPHRkPjwlPSBzY29wZVZhcmlhYmxlc1tpXS52YWx1ZSAlPjwvdGQ+XFxuICAgIDwvdHI+XFxuICAgIDwlIH0gJT5cXG48L3RhYmxlPlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNkLWZ1bGxzY3JlZW4tcG9wdXBcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZC1wb3B1cC1oZWFkZXJcXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNkLWNsb3NlLXBvcHVwXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmNsb3NlPC9pPjwvc3Bhbj5cXG4gICAgICAgIDxoMj48JT0gdGl0bGUgJT48L2gyPlxcbiAgICA8L2Rpdj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2QtcG9wdXAtYm9keVxcXCI+XFxuICAgICAgICA8JT0gYm9keSAlPlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2PlxcbiAgICA8aDM+PCU9IGkxOG4udChcXFwiaGVscC5oZWFkZXJcXFwiKSU+PC9oMz5cXG4gICAgPHA+XFxuICAgICAgICA8JT0gaTE4bi50KFxcXCJoZWxwLm1vdXNlLmhlYWRlclxcXCIpJT5cXG4gICAgICAgIDx1bD5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5tb3VzZS5saXN0LjFcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5tb3VzZS5saXN0LjJcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5tb3VzZS5saXN0LjNcXFwiKSU+PC9saT5cXG4gICAgICAgIDwvdWw+XFxuICAgIDwvcD5cXG4gICAgPHA+XFxuICAgICAgICA8JT0gaTE4bi50KFxcXCJoZWxwLmtleWJvYXJkLmhlYWRlclxcXCIpJT5cXG4gICAgICAgIDx1bD5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5rZXlib2FyZC5saXN0LjFcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5rZXlib2FyZC5saXN0LjJcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5rZXlib2FyZC5saXN0LjNcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5rZXlib2FyZC5saXN0LjRcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5rZXlib2FyZC5saXN0LjVcXFwiKSU+PC9saT5cXG4gICAgICAgICAgICA8bGk+PCU9IGkxOG4udChcXFwiaGVscC5rZXlib2FyZC5saXN0LjZcXFwiKSU+PC9saT5cXG4gICAgICAgIDwvdWw+XFxuICAgIDwvcD5cXG4gICAgPHA+PCU9IGkxOG4udChcXFwiaGVscC5kb2NzXFxcIiklPjwvcD5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8aW5wdXQgaWQ9XFxcIjwlPSBpZCAlPlxcXCIgdHlwZT1cXFwiPCU9IHR5cGUgJT5cXFwiIG5hbWU9XFxcIjwlPSBuYW1lICU+XFxcIiBjbGFzcz1cXFwic2QtaW5wdXRcXFwiPlxcbjxzcGFuIGNsYXNzPVxcXCJiYXJcXFwiPjwvc3Bhbj5cXG48bGFiZWwgZm9yPVxcXCI8JT0gaWQgJT5cXFwiPjwlPSBsYWJlbCAlPjwvbGFiZWw+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiXFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwic2Qtam9iLXBhcmFtZXRlcnMtYnVpbGRlclxcXCI+XFxuXFxuPC9kaXY+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwgc2QtbGVhZ3VlLXRhYmxlLWRpYWxvZ1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNkLW1vZGFsLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwtaGVhZGVyXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2QtbW9kYWwtYnV0dG9uIHNkLWNsb3NlLW1vZGFsXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmNsb3NlPC9pPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2QtbW9kYWwtYnV0dG9uIHNkLWV4dGVuZC1tb2RhbFxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5mdWxsc2NyZWVuPC9pPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2QtbW9kYWwtYnV0dG9uIHNkLXNocmluay1tb2RhbFxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5mdWxsc2NyZWVuX2V4aXQ8L2k+PC9zcGFuPlxcblxcbiAgICAgICAgICAgIDxoMj48JT0gaTE4bi50KFxcXCJsZWFndWVUYWJsZURpYWxvZy50aXRsZVxcXCIpJT48L2gyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1tb2RhbC1ib2R5XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1sZWFndWUtdGFibGUtd2FybmluZ3NcXFwiPlxcblxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLWpvYi1wcm9ncmVzcy1iYXItY29udGFpbmVyIHNkLXByb2dyZXNzLWJhci1jb250YWluZXIgc2QtaGlkZGVuXFxcIj48ZGl2IGNsYXNzPVxcXCJzZC1wcm9ncmVzcy1iYXJcXFwiPjwvZGl2PjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLWxlYWd1ZS10YWJsZS1qb2ItcmVzdWx0cyBzZC1oaWRkZW5cXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1qb2ItcmVzdWx0LXRhYmxlLWNvbnRhaW5lclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLWpvYi1yZXN1bHQtcGxvdC1jb250YWluZXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLWxlYWd1ZS10YWJsZS1hY3Rpb24tYnV0dG9uc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcInNkLWRvd25sb2FkLWNzdi1idXR0b24gc2QtaGlkZGVuXFxcIj48JT0gaTE4bi50KCdsZWFndWVUYWJsZURpYWxvZy5idXR0b25zLmRvd25sb2FkQ3N2JyklPjwvYnV0dG9uPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNkLWxvYWRpbmctaW5kaWNhdG9yXFxcIj5cXG4gICAgPGRpdj48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2Qtc3Bpbm5lclxcXCIgdGl0bGU9XFxcImxvYWRpbmcuLi5cXFwiPjwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcInNpbHZlci1kZWNpc2lvbnNcXFwiIHRhYmluZGV4PVxcXCIwXFxcIj5cXG4gICAgPCU9IGluY2x1ZGUoJ3Rvb2xiYXInLCB2YXJpYWJsZXMpICU+XFxuICAgIDxkaXYgaWQ9XFxcIm1haW4tcmVnaW9uXFxcIj5cXG4gICAgICAgIDwlPSBpbmNsdWRlKCdzaWRlYmFyJywgdmFyaWFibGVzKSAlPlxcbiAgICAgICAgPGRpdiBpZD1cXFwidHJlZS1kZXNpZ25lci1jb250YWluZXJcXFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGlucHV0IHR5cGU9XFxcImZpbGVcXFwiIHN0eWxlPVxcXCJkaXNwbGF5Om5vbmVcXFwiIGlkPVxcXCJzZC1maWxlLWlucHV0XFxcIiBhY2NlcHQ9XFxcIi5qc29uXFxcIi8+XFxuICAgIDwlPSBpbmNsdWRlKCdzZXR0aW5nc0RpYWxvZycsIHZhcmlhYmxlcykgJT5cXG4gICAgPCU9IGluY2x1ZGUoJ2Fib3V0RGlhbG9nJywgdmFyaWFibGVzKSAlPlxcbiAgICA8JT0gaW5jbHVkZSgnZGVmaW5pdGlvbnNEaWFsb2cnLCB2YXJpYWJsZXMpICU+XFxuICAgIDwlPSBpbmNsdWRlKCdzZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nJywgdmFyaWFibGVzKSAlPlxcbiAgICA8JT0gaW5jbHVkZSgnbGVhZ3VlVGFibGVEaWFsb2cnLCB2YXJpYWJsZXMpICU+XFxuPC9kaXY+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHNlbGVjdCBpZD1cXFwiPCU9IGlkICU+XFxcIiBuYW1lPVxcXCI8JT0gbmFtZSAlPlxcXCIgY2xhc3M9XFxcInNkLWlucHV0XFxcIj5cXG4gICAgPCUgZm9yKGk9MDsgaTxvcHRpb25zLmxlbmd0aDsgKytpKSB7ICU+XFxuICAgIDxvcHRpb24gdmFsdWU9XFxcIjwlIGlmIChvcHRpb25zW2ldLnZhbHVlICE9PSB1bmRlZmluZWQpeyAlPjwlPSBvcHRpb25zW2ldLnZhbHVlICU+PCV9IGVsc2UgeyAlPjwlPSBvcHRpb25zW2ldICU+PCV9JT5cXFwiPjwlIGlmIChvcHRpb25zW2ldLmxhYmVsICE9PSB1bmRlZmluZWQpeyAlPjwlPSBvcHRpb25zW2ldLmxhYmVsICU+PCV9IGVsc2UgeyAlPjwlPSBvcHRpb25zW2ldICU+PCV9JT48L29wdGlvbj5cXG4gICAgPCUgfSAlPlxcbjwvc2VsZWN0PlxcbjxzcGFuIGNsYXNzPVxcXCJiYXJcXFwiPjwvc3Bhbj5cXG48bGFiZWwgZm9yPVxcXCI8JT0gaWQgJT5cXFwiPjwlPSBsYWJlbCAlPjwvbGFiZWw+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwgc2Qtc2Vuc2l0aXZpdHktYW5hbHlzaXMtZGlhbG9nXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwtY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1tb2RhbC1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZC1tb2RhbC1idXR0b24gc2QtY2xvc2UtbW9kYWxcXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+Y2xvc2U8L2k+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZC1tb2RhbC1idXR0b24gc2QtZXh0ZW5kLW1vZGFsXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmZ1bGxzY3JlZW48L2k+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZC1tb2RhbC1idXR0b24gc2Qtc2hyaW5rLW1vZGFsXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmZ1bGxzY3JlZW5fZXhpdDwvaT48L3NwYW4+XFxuXFxuICAgICAgICAgICAgPGgyPjwlPSBpMThuLnQoXFxcInNlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2cudGl0bGVcXFwiKSU+PC9oMj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwtYm9keVxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Qtc2Vuc2l0aXZpdHktYW5hbHlzaXMtam9iLWNvbmZpZ3VyYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1qb2Itc2VsZWN0LWlucHV0LWdyb3VwIGlucHV0LWdyb3VwXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgPCU9IGluY2x1ZGUoJ2pvYlBhcmFtZXRlcnNCdWlsZGVyJywgdmFyaWFibGVzKSAlPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLXNlbnNpdGl2aXR5LWFuYWx5c2lzLXdhcm5pbmdzXFxcIj5cXG5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1qb2ItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lciBzZC1wcm9ncmVzcy1iYXItY29udGFpbmVyIHNkLWhpZGRlblxcXCI+PGRpdiBjbGFzcz1cXFwic2QtcHJvZ3Jlc3MtYmFyXFxcIj48L2Rpdj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1zZW5zaXRpdml0eS1hbmFseXNpcy1qb2ItcmVzdWx0cyBzZC1oaWRkZW5cXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1qb2ItcmVzdWx0LXRhYmxlLWNvbnRhaW5lclxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLWpvYi1yZXN1bHQtcGxvdC1jb250YWluZXJcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLXNlbnNpdGl2aXR5LWFuYWx5c2lzLWFjdGlvbi1idXR0b25zXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwic2QtdGVybWluYXRlLWpvYi1idXR0b24gc2QtaGlkZGVuXFxcIj48JT0gaTE4bi50KCdzZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nLmJ1dHRvbnMudGVybWluYXRlSm9iJyklPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzZC1zdG9wLWpvYi1idXR0b24gc2QtaGlkZGVuXFxcIj48JT0gaTE4bi50KCdzZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nLmJ1dHRvbnMuc3RvcEpvYicpJT48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwic2QtcmVzdW1lLWpvYi1idXR0b24gc2QtaGlkZGVuXFxcIj48JT0gaTE4bi50KCdzZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nLmJ1dHRvbnMucmVzdW1lSm9iJyklPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzZC1iYWNrLWJ1dHRvbiAgc2QtaGlkZGVuXFxcIj48JT0gaTE4bi50KCdzZW5zaXRpdml0eUFuYWx5c2lzRGlhbG9nLmJ1dHRvbnMuYmFjaycpJT48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwic2QtZG93bmxvYWQtY3N2LWJ1dHRvbiBzZC1oaWRkZW5cXFwiPjwlPSBpMThuLnQoJ3NlbnNpdGl2aXR5QW5hbHlzaXNEaWFsb2cuYnV0dG9ucy5kb3dubG9hZENzdicpJT48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwic2QtY2xlYXItYnV0dG9uIFxcXCI+PCU9IGkxOG4udCgnc2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZy5idXR0b25zLmNsZWFyJyklPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzZC1ydW4tam9iLWJ1dHRvblxcXCI+PCU9IGkxOG4udCgnc2Vuc2l0aXZpdHlBbmFseXNpc0RpYWxvZy5idXR0b25zLnJ1bkpvYicpJT48L2J1dHRvbj5cXG5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJzZC1zZXR0aW5ncy1kaWFsb2dcXFwiIGNsYXNzPVxcXCJzZC1tb2RhbFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNkLW1vZGFsLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtbW9kYWwtaGVhZGVyXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2QtbW9kYWwtYnV0dG9uIHNkLWNsb3NlLW1vZGFsXFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmNsb3NlPC9pPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2QtbW9kYWwtYnV0dG9uIHNkLWV4dGVuZC1tb2RhbFxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5mdWxsc2NyZWVuPC9pPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2QtbW9kYWwtYnV0dG9uIHNkLXNocmluay1tb2RhbFxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5mdWxsc2NyZWVuX2V4aXQ8L2k+PC9zcGFuPlxcbiAgICAgICAgICAgIDxoMj48JT0gaTE4bi50KFxcXCJzZXR0aW5nc0RpYWxvZy50aXRsZVxcXCIpJT48L2gyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1tb2RhbC1ib2R5XFxcIj5cXG4gICAgICAgICAgICA8Zm9ybSBpZD1cXFwic2Qtc2V0dGluZ3MtZm9ybVxcXCI+XFxuICAgICAgICAgICAgPC9mb3JtPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCI+XFxuICAgIDxoND48JT0gaTE4bi50KFxcXCJzZXR0aW5nc0RpYWxvZy5cXFwiK25hbWUrXFxcIi50aXRsZVxcXCIpJT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2dnbGUtYnV0dG9uXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnMgaWNvbi1hcnJvdy11cFxcXCI+a2V5Ym9hcmRfYXJyb3dfdXA8L2k+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zIGljb24tYXJyb3ctZG93blxcXCI+a2V5Ym9hcmRfYXJyb3dfZG93bjwvaT5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgPC9oND5cXG48L2Rpdj5cXG48ZGl2IGNsYXNzPVxcXCJzZC1mb3JtLWdyb3VwLWNvbnRlbnRcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZC1mb3JtLWdyb3VwLWlucHV0c1xcXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNkLWZvcm0tZ3JvdXAtY2hpbGQtZ3JvdXBzXFxcIj48L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJzZC1zaWRlYmFyLWRlZmluaXRpb25zXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5cXG4gICAgICAgIDwlPSBpMThuLnQoXFxcInNpZGViYXJEZWZpbml0aW9ucy5oZWFkZXJcXFwiKSU+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwidG9nZ2xlLWJ1dHRvblxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zIGljb24tYXJyb3ctdXBcXFwiPmtleWJvYXJkX2Fycm93X3VwPC9pPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29ucyBpY29uLWFycm93LWRvd25cXFwiPmtleWJvYXJkX2Fycm93X2Rvd248L2k+XFxuICAgICAgICA8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLXZhcmlhYmxlcy1zY29wZVxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtdmFyaWFibGVzLXNjb3BlLWxhYmVsXFxcIj48JT0gaTE4bi50KCdzaWRlYmFyRGVmaW5pdGlvbnMuc2NvcGUubGFiZWwnKSU+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtdmFyaWFibGVzLXNjb3BlLXZhbHVlXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgIDx0ZXh0YXJlYSByb3dzPVxcXCIxXFxcIiBpZD1cXFwic2Qtc2lkZWJhci1kZWZpbml0aW9ucy1jb2RlXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJzaWRlYmFyLWRlZmluaXRpb25zLWNvZGVcXFwiPjwvdGV4dGFyZWE+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcInNkLXNpZGViYXItZGVmaW5pdGlvbnMtY29kZVxcXCI+PCU9IGkxOG4udChcXFwic2lkZWJhckRlZmluaXRpb25zLmNvZGVcXFwiKSAlPjwvbGFiZWw+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImV2YWx1YXRlZC12YXJpYWJsZXMtcHJldmlld1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZXZhbHVhdGVkLXZhcmlhYmxlcy1wcmV2aWV3LWhlYWRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDwlPSBpMThuLnQoJ3NpZGViYXJEZWZpbml0aW9ucy5ldmFsdWF0ZWRWYXJpYWJsZXMnKSU+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBpZD1cXFwic2Qtc2lkZWJhci1kZWZpbml0aW9ucy1ldmFsdWF0ZWQtdmFsdWVzXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2QtYWN0aW9uLWJ1dHRvbnNcXFwiPlxcbiAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcInNkLXNpZGViYXItZGVmaW5pdGlvbnMtb3Blbi1kaWFsb2ctYnV0dG9uXFxcIiBjbGFzcz1cXFwiaWNvbi1idXR0b25cXFwiICB0aXRsZT1cXFwiPCU9IGkxOG4udCgnc2lkZWJhckRlZmluaXRpb25zLmJ1dHRvbnMub3BlbkRpYWxvZycpJT5cXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+b3Blbl9pbl9uZXc8L2k+PC9idXR0b24+XFxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwic2Qtc2lkZWJhci1kZWZpbml0aW9ucy1yZWNhbGN1bGF0ZS1idXR0b25cXFwiIGNsYXNzPVxcXCJpY29uLWJ1dHRvblxcXCIgIHRpdGxlPVxcXCI8JT0gaTE4bi50KCdzaWRlYmFyRGVmaW5pdGlvbnMuYnV0dG9ucy5yZWNhbGN1bGF0ZScpJT5cXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+cmVmcmVzaDwvaT48L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJkaWFncmFtLWRldGFpbHMtYm94XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5cXG4gICAgICAgIDwlPSBpMThuLnQoXFxcImRpYWdyYW1EZXRhaWxzLmhlYWRlclxcXCIpJT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2dnbGUtYnV0dG9uXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnMgaWNvbi1hcnJvdy11cFxcXCI+a2V5Ym9hcmRfYXJyb3dfdXA8L2k+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zIGljb24tYXJyb3ctZG93blxcXCI+a2V5Ym9hcmRfYXJyb3dfZG93bjwvaT5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cXFwiZGlhZ3JhbS10aXRsZVxcXCIgdHlwZT1cXFwidGV4dFxcXCIgbmFtZT1cXFwiZGlhZ3JhbS10aXRsZVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcImRpYWdyYW0tdGl0bGVcXFwiPjwlPSBpMThuLnQoXFxcImRpYWdyYW1EZXRhaWxzLnRpdGxlXFxcIikgJT48L2xhYmVsPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgPHRleHRhcmVhIGlkPVxcXCJkaWFncmFtLWRlc2NyaXB0aW9uXFxcIiBuYW1lPVxcXCJkaWFncmFtLWRlc2NyaXB0aW9uXFxcIj48L3RleHRhcmVhPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJiYXJcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJkaWFncmFtLWRlc2NyaXB0aW9uXFxcIj48JT0gaTE4bi50KFxcXCJkaWFncmFtRGV0YWlscy5kZXNjcmlwdGlvblxcXCIpICU+PC9sYWJlbD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJsYXlvdXQtb3B0aW9uc1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCI+XFxuICAgICAgICA8JT0gaTE4bi50KFxcXCJsYXlvdXRPcHRpb25zLmhlYWRlclxcXCIpJT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2dnbGUtYnV0dG9uXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnMgaWNvbi1hcnJvdy11cFxcXCI+a2V5Ym9hcmRfYXJyb3dfdXA8L2k+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zIGljb24tYXJyb3ctZG93blxcXCI+a2V5Ym9hcmRfYXJyb3dfZG93bjwvaT5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cXFwibWFyZ2luLWhvcml6b250YWxcXFwiIG5hbWU9XFxcIm1hcmdpbi1ob3Jpem9udGFsXFxcIiB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCI1XFxcIiBtYXg9XFxcIjE1MFxcXCIgc3RlcD1cXFwiNVxcXCIvPlxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIm1hcmdpbi1ob3Jpem9udGFsXFxcIj48JT0gaTE4bi50KFxcXCJsYXlvdXRPcHRpb25zLm1hcmdpbkhvcml6b250YWxcXFwiKSU+PC9sYWJlbD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cXFwibWFyZ2luLXZlcnRpY2FsXFxcIiBuYW1lPVxcXCJtYXJnaW4tdmVydGljYWxcXFwiIHR5cGU9XFxcInJhbmdlXFxcIiBtaW49XFxcIjVcXFwiIG1heD1cXFwiMTUwXFxcIiBzdGVwPVxcXCI1XFxcIi8+XFxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwibWFyZ2luLXZlcnRpY2FsXFxcIj48JT0gaTE4bi50KFxcXCJsYXlvdXRPcHRpb25zLm1hcmdpblZlcnRpY2FsXFxcIiklPjwvbGFiZWw+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgaWQ9XFxcIm5vZGUtc2l6ZVxcXCIgbmFtZT1cXFwibm9kZS1zaXplXFxcIiB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCIyMFxcXCIgbWF4PVxcXCI2MFxcXCIgc3RlcD1cXFwiNVxcXCIvPlxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIm5vZGUtc2l6ZVxcXCI+PCU9IGkxOG4udChcXFwibGF5b3V0T3B0aW9ucy5ub2RlU2l6ZVxcXCIpJT48L2xhYmVsPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgPGlucHV0IGlkPVxcXCJlZGdlLXNsYW50LXdpZHRoLW1heFxcXCIgbmFtZT1cXFwiZWRnZS1zbGFudC13aWR0aC1tYXhcXFwiIHR5cGU9XFxcInJhbmdlXFxcIiBtaW49XFxcIjBcXFwiIG1heD1cXFwiMTUwXFxcIiBzdGVwPVxcXCI1XFxcIi8+XFxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZWRnZS1zbGFudC13aWR0aC1tYXhcXFwiPjwlPSBpMThuLnQoXFxcImxheW91dE9wdGlvbnMuZWRnZVNsYW50V2lkdGhNYXhcXFwiKSU+PC9sYWJlbD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBpZD1cXFwiYXV0by1sYXlvdXQtb3B0aW9uc1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XFxcImdyaWQtd2lkdGhcXFwiIG5hbWU9XFxcImdyaWQtd2lkdGhcXFwiIHR5cGU9XFxcInJhbmdlXFxcIiBtaW49XFxcIjEwNVxcXCIgbWF4PVxcXCIzMDBcXFwiIHN0ZXA9XFxcIjVcXFwiLz5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZ3JpZC13aWR0aFxcXCI+PCU9IGkxOG4udChcXFwibGF5b3V0T3B0aW9ucy5ncmlkV2lkdGhcXFwiKSU+PC9sYWJlbD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxpbnB1dCBpZD1cXFwiZ3JpZC1oZWlnaHRcXFwiIG5hbWU9XFxcImdyaWQtaGVpZ2h0XFxcIiB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCI1NVxcXCIgbWF4PVxcXCIxNTBcXFwiIHN0ZXA9XFxcIjVcXFwiLz5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwiZ3JpZC1oZWlnaHRcXFwiPjwlPSBpMThuLnQoXFxcImxheW91dE9wdGlvbnMuZ3JpZEhlaWdodFxcXCIpJT48L2xhYmVsPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcInNkLW11bHRpcGxlLWNyaXRlcmlhXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5cXG4gICAgICAgIDwlPSBpMThuLnQoXFxcIm11bHRpcGxlQ3JpdGVyaWEuaGVhZGVyXFxcIiklPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRvZ2dsZS1idXR0b25cXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29ucyBpY29uLWFycm93LXVwXFxcIj5rZXlib2FyZF9hcnJvd191cDwvaT5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnMgaWNvbi1hcnJvdy1kb3duXFxcIj5rZXlib2FyZF9hcnJvd19kb3duPC9pPlxcbiAgICAgICAgPC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZC1tdWx0aXBsZS1jcml0ZXJpYS1wcm9wZXJ0aWVzXFxcIj48L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNkLWFjdGlvbi1idXR0b25zXFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGlkPVxcXCJzZC1zaG93LWxlYWd1ZS10YWJsZS1idXR0b25cXFwiIGNsYXNzPVxcXCJpY29uLWJ1dHRvblxcXCIgIHRpdGxlPVxcXCI8JT0gaTE4bi50KCdtdWx0aXBsZUNyaXRlcmlhLmJ1dHRvbnMuc2hvd0xlYWd1ZVRhYmxlJyklPlxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5hc3NpZ25tZW50PC9pPjwvYnV0dG9uPlxcbiAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcInNkLWZsaXAtY3JpdGVyaWEtYnV0dG9uXFxcIiBjbGFzcz1cXFwiaWNvbi1idXR0b25cXFwiICB0aXRsZT1cXFwiPCU9IGkxOG4udCgnbXVsdGlwbGVDcml0ZXJpYS5idXR0b25zLmZsaXAnKSU+XFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPnN3YXBfdmVydDwvaT48L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJvYmplY3QtcHJvcGVydGllc1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCI+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibWFpbi1wcm9wZXJ0aWVzXFxcIj48L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImNoaWxkcmVuLXByb3BlcnRpZXNcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNoaWxkcmVuLXByb3BlcnRpZXMtaGVhZGVyXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjaGlsZHJlbi1wcm9wZXJ0aWVzLWNvbnRlbnRcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcInNkLXNpZGViYXJcXFwiPlxcbiAgICA8ZGl2IGlkPVxcXCJzZC1zaWRlYmFyLWlubmVyXFxcIj5cXG4gICAgICAgIDwlPSBpbmNsdWRlKCdsYXlvdXRPcHRpb25zJywgdmFyaWFibGVzKSAlPlxcbiAgICAgICAgPCU9IGluY2x1ZGUoJ2RpYWdyYW1EZXRhaWxzQm94JywgdmFyaWFibGVzKSAlPlxcbiAgICAgICAgPCU9IGluY2x1ZGUoJ2RlZmluaXRpb25zJywgdmFyaWFibGVzKSAlPlxcbiAgICAgICAgPCU9IGluY2x1ZGUoJ211bHRpcGxlQ3JpdGVyaWEnLCB2YXJpYWJsZXMpICU+XFxuICAgICAgICA8JT0gaW5jbHVkZSgnb2JqZWN0UHJvcGVydGllcycsIHZhcmlhYmxlcykgJT5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBpZD1cXFwic2QtdG9vbGJhclxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInRvb2xiYXItZ3JvdXBcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwibmV3LWRpYWdyYW0tYnV0dG9uXFxcIiBjbGFzcz1cXFwiaWNvbi1idXR0b25cXFwiIHRpdGxlPVxcXCI8JT0gaTE4bi50KCd0b29sYmFyLm5ld0RpYWdyYW0nKSU+XFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmluc2VydF9kcml2ZV9maWxlPC9pPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwib3Blbi1kaWFncmFtLWJ1dHRvblxcXCIgY2xhc3M9XFxcImljb24tYnV0dG9uXFxcIiB0aXRsZT1cXFwiPCU9IGkxOG4udCgndG9vbGJhci5vcGVuRGlhZ3JhbScpJT5cXFwiPjxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29uc1xcXCI+Zm9sZGVyX29wZW48L2k+PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIGlkPVxcXCJzYXZlLWRpYWdyYW0tYnV0dG9uXFxcIiBjbGFzcz1cXFwiaWNvbi1idXR0b25cXFwiIHRpdGxlPVxcXCI8JT0gaTE4bi50KCd0b29sYmFyLnNhdmVEaWFncmFtJyklPlxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5zYXZlPC9pPjwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBpZD1cXFwiZXhwb3J0LXRvb2xiYXItZ3JvdXBcXFwiIGNsYXNzPVxcXCJ0b29sYmFyLWdyb3VwXFxcIj5cXG4gICAgICAgIDxsYWJlbD48JT0gaTE4bi50KFxcXCJ0b29sYmFyLmV4cG9ydC5sYWJlbFxcXCIpJT48L2xhYmVsPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwic2F2ZUJ1dHRvblxcXCI+PCU9IGkxOG4udChcXFwidG9vbGJhci5leHBvcnQucG5nXFxcIiklPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwic2F2ZUJ1dHRvblN2Z1xcXCI+PCU9IGkxOG4udChcXFwidG9vbGJhci5leHBvcnQuc3ZnXFxcIiklPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwic2F2ZUJ1dHRvblBkZlxcXCI+PCU9IGkxOG4udChcXFwidG9vbGJhci5leHBvcnQucGRmXFxcIiklPjwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidG9vbGJhci1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWw+PCU9IGkxOG4udChcXFwidG9vbGJhci5sYXlvdXQubGFiZWxcXFwiKSU+PC9sYWJlbD5cXG4gICAgICAgIDxidXR0b24gaWQ9XFxcIm1hbnVhbExheW91dEJ1dHRvblxcXCI+PCU9IGkxOG4udChcXFwidG9vbGJhci5sYXlvdXQubWFudWFsXFxcIiklPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwidHJlZUF1dG9MYXlvdXRCdXR0b25cXFwiPjwlPSBpMThuLnQoXFxcInRvb2xiYXIubGF5b3V0LnRyZWVcXFwiKSU+PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIGlkPVxcXCJjbHVzdGVyQXV0b0xheW91dEJ1dHRvblxcXCI+PCU9IGkxOG4udChcXFwidG9vbGJhci5sYXlvdXQuY2x1c3RlclxcXCIpJT48L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcInZpZXctbW9kZS10b29sYmFyLWdyb3VwXFxcIiBjbGFzcz1cXFwidG9vbGJhci1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJ2aWV3LW1vZGUtc2VsZWN0XFxcIj48JT0gaTE4bi50KFxcXCJ0b29sYmFyLnZpZXdNb2RlLmxhYmVsXFxcIiklPjwvbGFiZWw+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cCBuby1mbG9hdGluZy1sYWJlbFxcXCIgc3R5bGU9XFxcImRpc3BsYXk6IGlubGluZS1ibG9ja1xcXCI+XFxuICAgICAgICAgICAgPHNlbGVjdCBpZD1cXFwidmlldy1tb2RlLXNlbGVjdFxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGlkPVxcXCJvYmplY3RpdmUtcnVsZS10b29sYmFyLWdyb3VwXFxcIiBjbGFzcz1cXFwidG9vbGJhci1ncm91cFxcXCI+XFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJvYmplY3RpdmUtcnVsZS1zZWxlY3RcXFwiPjwlPSBpMThuLnQoXFxcInRvb2xiYXIub2JqZWN0aXZlUnVsZS5sYWJlbFxcXCIpJT48L2xhYmVsPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgbm8tZmxvYXRpbmctbGFiZWxcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBpbmxpbmUtYmxvY2tcXFwiPlxcbiAgICAgICAgICAgIDxzZWxlY3QgaWQ9XFxcIm9iamVjdGl2ZS1ydWxlLXNlbGVjdFxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0b29sYmFyLWdyb3VwXFxcIj5cXG4gICAgICAgIDxidXR0b24gaWQ9XFxcInVuZG9CdXR0b25cXFwiIGNsYXNzPVxcXCJpY29uLWJ1dHRvblxcXCIgZGlzYWJsZWQ9XFxcImRpc2FibGVkXFxcIiB0aXRsZT1cXFwiPCU9IGkxOG4udCgndG9vbGJhci51bmRvJyklPlxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj51bmRvPC9pPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwicmVkb0J1dHRvblxcXCIgY2xhc3M9XFxcImljb24tYnV0dG9uXFxcIiBkaXNhYmxlZD1cXFwiZGlzYWJsZWRcXFwiIHRpdGxlPVxcXCI8JT0gaTE4bi50KCd0b29sYmFyLnJlZG8nKSU+XFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPnJlZG88L2k+PC9idXR0b24+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0b29sYmFyLWdyb3VwXFxcIj5cXG4gICAgICAgIDxidXR0b24gaWQ9XFxcInNlbnNpdGl2aXR5LWFuYWx5c2lzLWJ1dHRvblxcXCIgY2xhc3M9XFxcImljb24tYnV0dG9uXFxcIiB0aXRsZT1cXFwiPCU9IGkxOG4udCgndG9vbGJhci5zZW5zaXRpdml0eUFuYWx5c2lzJyklPlxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5hc3Nlc3NtZW50PC9pPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwicmVjb21wdXRlLWJ1dHRvblxcXCIgY2xhc3M9XFxcImljb24tYnV0dG9uXFxcIiB0aXRsZT1cXFwiPCU9IGkxOG4udCgndG9vbGJhci5yZWNvbXB1dGUnKSU+XFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPnJlZnJlc2g8L2k+PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIGlkPVxcXCJzZXR0aW5ncy1idXR0b25cXFwiIGNsYXNzPVxcXCJpY29uLWJ1dHRvblxcXCIgdGl0bGU9XFxcIjwlPSBpMThuLnQoJ3Rvb2xiYXIuc2V0dGluZ3MnKSU+XFxcIj48aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPnNldHRpbmdzPC9pPjwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBpZD1cXFwiYWJvdXQtYnV0dG9uXFxcIiBjbGFzcz1cXFwiaWNvbi1idXR0b25cXFwiIHRpdGxlPVxcXCI8JT0gaTE4bi50KCd0b29sYmFyLmFib3V0JyklPlxcXCI+PGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5pbmZvX291dGxpbmU8L2k+PC9idXR0b24+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNkLXdhcm5pbmctbWVzc2FnZVxcXCI+XFxuICAgIDxpIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29ucyBzZC1pY29uXFxcIj53YXJuaW5nPC9pPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZC13YXJuaW5nLW1lc3NhZ2UtdGV4dFxcXCI+XFxuICAgICAgIDwlPSBtZXNzYWdlICU+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnLi9kMydcbmltcG9ydCB7aTE4bn0gZnJvbSAnLi9pMThuL2kxOG4nXG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tICcuL2FwcC11dGlscydcbmltcG9ydCB7RXhwb3J0ZXJ9IGZyb20gJy4vZXhwb3J0ZXInXG5pbXBvcnQge0ZpbGVMb2FkZXJ9IGZyb20gJy4vZmlsZS1sb2FkZXInXG5cbmV4cG9ydCBjbGFzcyBUb29sYmFye1xuXG4gICAgYXBwO1xuICAgIGNvbnRhaW5lcjtcbiAgICBoaWRkZW5DbGFzcyA9ICdzZC1oaWRkZW4nO1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgYXBwKXtcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmluaXREaWFncmFtQnV0dG9ucygpO1xuICAgICAgICB0aGlzLmluaXRFeHBvcnRUb29sYmFyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5pbml0TGF5b3V0QnV0dG9ucygpO1xuICAgICAgICB0aGlzLmluaXRVbmRvUmVkb0J1dHRvbnMoKTtcbiAgICAgICAgdGhpcy5pbml0U2V0dGluZ3NCdXR0b24oKTtcbiAgICAgICAgdGhpcy5pbml0QWJvdXRCdXR0b24oKTtcbiAgICAgICAgdGhpcy5pbml0U2Vuc2l0aXZpdHlBbmFseXNpc0J1dHRvbigpO1xuICAgICAgICB0aGlzLmluaXRSZWNvbXB1dGVCdXR0b24oKTtcbiAgICAgICAgdGhpcy5pbml0Vmlld01vZGVUb29sYmFyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5pbml0T2JqZWN0aXZlUnVsZVRvb2xiYXJHcm91cCgpO1xuICAgIH1cblxuICAgIGluaXREaWFncmFtQnV0dG9ucygpe1xuXG5cbiAgICAgICAgdGhpcy5uZXdEaWFncmFtQnV0dG9uID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCcjbmV3LWRpYWdyYW0tYnV0dG9uJykub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgIGlmKCFjb25maXJtKGkxOG4udCgnY29uZmlybS5uZXdEaWFncmFtJykpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFwcC5uZXdEaWFncmFtKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5ld0RpYWdyYW1CdXR0b24uY2xhc3NlZCh0aGlzLmhpZGRlbkNsYXNzLCAhdGhpcy5hcHAuY29uZmlnLmJ1dHRvbnMubmV3KTtcbiAgICAgICAgdGhpcy5vcGVuRGlhZ3JhbUJ1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI29wZW4tZGlhZ3JhbS1idXR0b24nKS5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgaWYoIWNvbmZpcm0oaTE4bi50KCdjb25maXJtLm9wZW5EaWFncmFtJykpKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBGaWxlTG9hZGVyLm9wZW5GaWxlKG1vZGVsPT57XG4gICAgICAgICAgICAgICAgdGhpcy5hcHAub3BlbkRpYWdyYW0obW9kZWwpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vcGVuRGlhZ3JhbUJ1dHRvbi5jbGFzc2VkKHRoaXMuaGlkZGVuQ2xhc3MsICF0aGlzLmFwcC5jb25maWcuYnV0dG9ucy5vcGVuKTtcbiAgICAgICAgdGhpcy5zYXZlRGlhZ3JhbUJ1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3NhdmUtZGlhZ3JhbS1idXR0b24nKS5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hcHAuc2F2ZVRvRmlsZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zYXZlRGlhZ3JhbUJ1dHRvbi5jbGFzc2VkKHRoaXMuaGlkZGVuQ2xhc3MsICF0aGlzLmFwcC5jb25maWcuYnV0dG9ucy5zYXZlKTtcbiAgICB9XG5cblxuXG4gICAgaW5pdExheW91dEJ1dHRvbnMoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2VsZi5hcHAudHJlZURlc2lnbmVyLmxheW91dC5vbkF1dG9MYXlvdXRDaGFuZ2VkLnB1c2goKGxheW91dCk9PnNlbGYub25MYXlvdXRDaGFuZ2VkKGxheW91dCkpO1xuICAgICAgICB0aGlzLmxheW91dEJ1dHRvbnM9e307XG4gICAgICAgIHRoaXMubGF5b3V0QnV0dG9uc1snbWFudWFsJ10gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNtYW51YWxMYXlvdXRCdXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZihzZWxmLmFwcC50cmVlRGVzaWduZXIuY29uZmlnLmxheW91dC50eXBlPT0nbWFudWFsJyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hcHAudHJlZURlc2lnbmVyLmxheW91dC5kaXNhYmxlQXV0b0xheW91dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYXlvdXRCdXR0b25zWyd0cmVlJ10gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyN0cmVlQXV0b0xheW91dEJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmKHNlbGYuYXBwLnRyZWVEZXNpZ25lci5jb25maWcubGF5b3V0LnR5cGU9PSd0cmVlJyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hcHAudHJlZURlc2lnbmVyLmF1dG9MYXlvdXQoJ3RyZWUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGF5b3V0QnV0dG9uc1snY2x1c3RlciddID0gdGhpcy5jb250YWluZXIuc2VsZWN0KCcjY2x1c3RlckF1dG9MYXlvdXRCdXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZihzZWxmLmFwcC50cmVlRGVzaWduZXIuY29uZmlnLmxheW91dC50eXBlPT0nY2x1c3Rlcicpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuYXBwLnRyZWVEZXNpZ25lci5hdXRvTGF5b3V0KCdjbHVzdGVyJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudXBkYXRlTGF5b3V0QnV0dG9ucygpO1xuICAgIH1cblxuICAgIHVwZGF0ZUxheW91dEJ1dHRvbnMoKSB7XG4gICAgICAgIHRoaXMub25MYXlvdXRDaGFuZ2VkKHRoaXMuYXBwLnRyZWVEZXNpZ25lci5jb25maWcubGF5b3V0LnR5cGUpXG4gICAgfVxuXG4gICAgaW5pdFNldHRpbmdzQnV0dG9uKCl7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNzZXR0aW5ncy1idXR0b24nKS5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hcHAuc2V0dGluZ3NEaWFsb2cub3BlbigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0QWJvdXRCdXR0b24oKXtcbiAgICAgICAgdGhpcy5hYm91dEJ1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI2Fib3V0LWJ1dHRvbicpLm9uKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICB0aGlzLmFwcC5hYm91dERpYWxvZy5vcGVuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRSZWNvbXB1dGVCdXR0b24oKXtcbiAgICAgICAgdGhpcy5yZWNvbXB1dGVCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNyZWNvbXB1dGUtYnV0dG9uJykub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgIHRoaXMuYXBwLnJlY29tcHV0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0U2Vuc2l0aXZpdHlBbmFseXNpc0J1dHRvbigpe1xuICAgICAgICB0aGlzLnNlbnNpdGl2aXR5QW5hbHlzaXNCdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNzZW5zaXRpdml0eS1hbmFseXNpcy1idXR0b24nKS5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hcHAub3BlblNlbnNpdGl2aXR5QW5hbHlzaXMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlU2Vuc2l0aXZpdHlBbmFseXNpc0J1dHRvbigpe1xuICAgICAgICB0aGlzLnNlbnNpdGl2aXR5QW5hbHlzaXNCdXR0b24uYXR0cihcImRpc2FibGVkXCIsIHRoaXMuYXBwLmlzU2Vuc2l0aXZpdHlBbmFseXNpc0F2YWlsYWJsZSgpID8gbnVsbCA6ICdkaXNhYmxlZCcpO1xuICAgIH1cblxuXG4gICAgb25MYXlvdXRDaGFuZ2VkKGxheW91dCl7XG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubGF5b3V0QnV0dG9ucykuZm9yRWFjaChsPT57XG4gICAgICAgICAgICB0aGlzLmxheW91dEJ1dHRvbnNbbF0uY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMubGF5b3V0QnV0dG9uc1tsYXlvdXRdO1xuICAgICAgICBpZihidXR0b24pe1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdFVuZG9SZWRvQnV0dG9ucygpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLmFwcC5kYXRhTW9kZWwudW5kb1JlZG9TdGF0ZUNoYW5nZWRDYWxsYmFjayA9ICgpPT50aGlzLm9uVW5kb1JlZG9DaGFuZ2VkKCk7XG4gICAgICAgIHRoaXMudW5kb0J1dHRvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3VuZG9CdXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmFwcC51bmRvKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZG9CdXR0b24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNyZWRvQnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5hcHAucmVkbygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblVuZG9SZWRvQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVVbmRvUmVkb0J1dHRvbnMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVTZW5zaXRpdml0eUFuYWx5c2lzQnV0dG9uKCk7XG4gICAgfVxuICAgIHVwZGF0ZVVuZG9SZWRvQnV0dG9ucygpe1xuICAgICAgICB0aGlzLnVuZG9CdXR0b24uYXR0cihcImRpc2FibGVkXCIsIHRoaXMuYXBwLmRhdGFNb2RlbC5pc1VuZG9BdmFpbGFibGUoKSA/IG51bGwgOiAnZGlzYWJsZWQnKTtcbiAgICAgICAgdGhpcy5yZWRvQnV0dG9uLmF0dHIoXCJkaXNhYmxlZFwiLCB0aGlzLmFwcC5kYXRhTW9kZWwuaXNSZWRvQXZhaWxhYmxlKCkgPyBudWxsIDogJ2Rpc2FibGVkJyk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCl7XG4gICAgICAgIHRoaXMudXBkYXRlVW5kb1JlZG9CdXR0b25zKCk7XG4gICAgICAgIHRoaXMudXBkYXRlU2Vuc2l0aXZpdHlBbmFseXNpc0J1dHRvbigpO1xuICAgICAgICB0aGlzLnVwZGF0ZUxheW91dEJ1dHRvbnMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3TW9kZVZhbHVlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlT2JqZWN0aXZlUnVsZU9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVPYmplY3RpdmVSdWxlVmFsdWUoKTtcbiAgICB9XG5cbiAgICBpbml0RXhwb3J0VG9vbGJhckdyb3VwKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNleHBvcnQtdG9vbGJhci1ncm91cCcpLmNsYXNzZWQodGhpcy5oaWRkZW5DbGFzcywgIXRoaXMuYXBwLmNvbmZpZy5leHBvcnRzLnNob3cpO1xuICAgICAgICBpZighdGhpcy5hcHAuY29uZmlnLmV4cG9ydHMuc2hvdyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0RXhwb3J0VG9QbmdCdXR0b24oKTtcbiAgICAgICAgdGhpcy5pbml0RXhwb3J0U3ZnQnV0dG9uKCk7XG4gICAgICAgIHRoaXMuaW5pdEV4cG9ydFBkZkJ1dHRvbigpO1xuXG4gICAgfVxuICAgIGluaXRFeHBvcnRUb1BuZ0J1dHRvbigpIHtcbiAgICAgICAgdmFyIHN2ZyA9IHRoaXMuYXBwLnRyZWVEZXNpZ25lci5zdmc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3NhdmVCdXR0b24nKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsICgpID0+IEV4cG9ydGVyLnNhdmVBc1BuZyhzdmcsIHRoaXMuYXBwLmNvbmZpZy5leHBvcnRzKSlcbiAgICAgICAgICAgIC5jbGFzc2VkKHRoaXMuaGlkZGVuQ2xhc3MsICF0aGlzLmFwcC5jb25maWcuYnV0dG9ucy5leHBvcnRUb1BuZylcbiAgICB9XG5cbiAgICBpbml0RXhwb3J0U3ZnQnV0dG9uKCkge1xuICAgICAgICB2YXIgc3ZnID0gdGhpcy5hcHAudHJlZURlc2lnbmVyLnN2ZztcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2VsZWN0KCcjc2F2ZUJ1dHRvblN2ZycpXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKCkgPT4gRXhwb3J0ZXIuc2F2ZUFzU3ZnKHN2ZykpXG4gICAgICAgICAgICAuY2xhc3NlZCh0aGlzLmhpZGRlbkNsYXNzLCAhdGhpcy5hcHAuY29uZmlnLmJ1dHRvbnMuZXhwb3J0VG9TdmcpXG4gICAgfVxuXG4gICAgaW5pdEV4cG9ydFBkZkJ1dHRvbigpIHtcbiAgICAgICAgdmFyIHN2ZyA9IHRoaXMuYXBwLnRyZWVEZXNpZ25lci5zdmc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3NhdmVCdXR0b25QZGYnKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsICgpID0+IEV4cG9ydGVyLnNhdmVBc1BkZihzdmcsIHRoaXMuYXBwLmNvbmZpZy5leHBvcnRzKSlcbiAgICAgICAgICAgIC5jbGFzc2VkKHRoaXMuaGlkZGVuQ2xhc3MsICF0aGlzLmFwcC5jb25maWcuYnV0dG9ucy5leHBvcnRUb1BkZilcbiAgICB9XG5cbiAgICBpbml0T2JqZWN0aXZlUnVsZVRvb2xiYXJHcm91cCgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLm9iamVjdGl2ZVJ1bGVTZWxlY3QgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3QoJyNvYmplY3RpdmUtcnVsZS1zZWxlY3QnKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZU9iamVjdGl2ZVJ1bGVPcHRpb25zKClcbiAgICAgICAgdGhpcy51cGRhdGVPYmplY3RpdmVSdWxlVmFsdWUoKTtcblxuICAgICAgICB0aGlzLm9iamVjdGl2ZVJ1bGVTZWxlY3Qub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLmFwcC5zZXRPYmplY3RpdmVSdWxlKHRoaXMudmFsdWUpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHVwZGF0ZU9iamVjdGl2ZVJ1bGVPcHRpb25zKCl7XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuYXBwLmdldE9iamVjdGl2ZVJ1bGVzKCk7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vYmplY3RpdmVSdWxlU2VsZWN0LnNlbGVjdEFsbCgnb3B0aW9uJykuZGF0YShydWxlcyk7XG4gICAgICAgIG9wdGlvbnMuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgICBvcHRpb25zLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAgICAgICAubWVyZ2Uob3B0aW9ucylcbiAgICAgICAgICAgIC5hdHRyKCd2YWx1ZScsIGQ9PmQubmFtZSlcbiAgICAgICAgICAgIC50ZXh0KGQ9PmkxOG4udCgndG9vbGJhci5vYmplY3RpdmVSdWxlLm9wdGlvbnMuJytkLm5hbWUpKTtcbiAgICB9XG5cbiAgICB1cGRhdGVPYmplY3RpdmVSdWxlVmFsdWUoKXtcbiAgICAgICAgdGhpcy5vYmplY3RpdmVSdWxlU2VsZWN0Lm5vZGUoKS52YWx1ZSA9IHRoaXMuYXBwLmdldEN1cnJlbnRPYmplY3RpdmVSdWxlKCkubmFtZTtcbiAgICB9XG5cbiAgICBpbml0Vmlld01vZGVUb29sYmFyR3JvdXAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy52aWV3TW9kZVNlbGVjdCA9IHRoaXMuY29udGFpbmVyLnNlbGVjdCgnI3ZpZXctbW9kZS1zZWxlY3QnKTtcbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5hcHAuZ2V0Vmlld01vZGVzKCk7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy52aWV3TW9kZVNlbGVjdC5zZWxlY3RBbGwoJ29wdGlvbicpLmRhdGEocnVsZXMpO1xuICAgICAgICBvcHRpb25zLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAgICAgICAubWVyZ2Uob3B0aW9ucylcbiAgICAgICAgICAgIC5hdHRyKCd2YWx1ZScsIGQ9PmQubmFtZSlcbiAgICAgICAgICAgIC50ZXh0KGQ9PmkxOG4udCgndG9vbGJhci52aWV3TW9kZS5vcHRpb25zLicrZC5uYW1lKSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVWaWV3TW9kZVZhbHVlKCk7XG5cbiAgICAgICAgdGhpcy52aWV3TW9kZVNlbGVjdC5vbignY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGYuYXBwLnNldFZpZXdNb2RlQnlOYW1lKHRoaXMudmFsdWUpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHVwZGF0ZVZpZXdNb2RlVmFsdWUoKXtcbiAgICAgICAgdGhpcy52aWV3TW9kZVNlbGVjdC5ub2RlKCkudmFsdWUgPSB0aGlzLmFwcC5nZXRDdXJyZW50Vmlld01vZGUoKS5uYW1lO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VXRpbHN9IGZyb20gXCJzZC11dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgTnVtYmVySW5wdXRWYWxpZGF0b3Ige1xuXG4gICAgY29uc3RydWN0b3IobWluLCBtYXgpIHtcbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cblxuICAgIHZhbGlkYXRlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gXCJcIjtcbiAgICAgICAgaWYgKCF2YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKCFVdGlscy5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1pbiAhPT0gdW5kZWZpbmVkICYmIHZhbHVlIDwgdGhpcy5taW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhKHRoaXMubWF4ICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPiB0aGlzLm1heCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIFBheW9mZklucHV0VmFsaWRhdG9ye1xuICAgIGV4cHJlc3Npb25FbmdpbmU7XG4gICAgY29uc3RydWN0b3IoZXhwcmVzc2lvbkVuZ2luZSl7XG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbkVuZ2luZT1leHByZXNzaW9uRW5naW5lO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKHZhbHVlLCBlZGdlKXtcbiAgICAgICAgaWYodmFsdWU9PT1udWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICAgIGlmKCF2YWx1ZS50cmltKCkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuZXhwcmVzc2lvbkVuZ2luZS5jb25zdHJ1Y3Rvci5oYXNBc3NpZ25tZW50RXhwcmVzc2lvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uRW5naW5lLnZhbGlkYXRlKHZhbHVlKTtcbiAgICB9XG5cbn1cbiIsImV4cG9ydCBjbGFzcyBQcm9iYWJpbGl0eUlucHV0VmFsaWRhdG9ye1xuICAgIGV4cHJlc3Npb25FbmdpbmU7XG4gICAgY29uc3RydWN0b3IoZXhwcmVzc2lvbkVuZ2luZSl7XG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbkVuZ2luZT1leHByZXNzaW9uRW5naW5lO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKHZhbHVlLCBlZGdlKXtcbiAgICAgICAgaWYodmFsdWU9PT1udWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgKz0gXCJcIjtcbiAgICAgICAgaWYoIXZhbHVlLnRyaW0oKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLmV4cHJlc3Npb25FbmdpbmUuY29uc3RydWN0b3IuaXNIYXNoKHZhbHVlKSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuZXhwcmVzc2lvbkVuZ2luZS5jb25zdHJ1Y3Rvci5oYXNBc3NpZ25tZW50RXhwcmVzc2lvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NvcGUgPSBlZGdlLnBhcmVudE5vZGUuZXhwcmVzc2lvblNjb3BlO1xuICAgICAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uRW5naW5lLnZhbGlkYXRlKHZhbHVlLCBzY29wZSk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIFJlcXVpcmVkSW5wdXRWYWxpZGF0b3Ige1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgdmFsaWRhdGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSArPSBcIlwiO1xuICAgICAgICByZXR1cm4gISF2YWx1ZS50cmltKCk7XG4gICAgfVxuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcImJ1aWxkVGltZXN0YW1wXCI6MTUxMzc5MDIxNjIzOX1cbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2luZGV4J1xuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSBcIi4vZDNcIjtcbmltcG9ydCB7VGVtcGxhdGVzfSBmcm9tIFwiLi90ZW1wbGF0ZXNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4vaTE4bi9pMThuXCI7XG5pbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIEFwcFV0aWxzIHtcblxuICAgIHN0YXRpYyBzYW5pdGl6ZUhlaWdodCA9IGZ1bmN0aW9uIChoZWlnaHQsIGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gKGhlaWdodCB8fCBwYXJzZUludChjb250YWluZXIuc3R5bGUoJ2hlaWdodCcpLCAxMCkgfHwgNDAwKTtcbiAgICB9O1xuXG4gICAgc3RhdGljIHNhbml0aXplV2lkdGggPSBmdW5jdGlvbiAod2lkdGgsIGNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gKHdpZHRoIHx8IHBhcnNlSW50KGNvbnRhaW5lci5zdHlsZSgnd2lkdGgnKSwgMTApIHx8IDk2MCk7XG4gICAgfTtcblxuICAgIHN0YXRpYyBhdmFpbGFibGVIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0LCBjb250YWluZXIsIG1hcmdpbikge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgQXBwVXRpbHMuc2FuaXRpemVIZWlnaHQoaGVpZ2h0LCBjb250YWluZXIpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20pO1xuICAgIH07XG5cbiAgICBzdGF0aWMgYXZhaWxhYmxlV2lkdGggPSBmdW5jdGlvbiAod2lkdGgsIGNvbnRhaW5lciwgbWFyZ2luKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBBcHBVdGlscy5zYW5pdGl6ZVdpZHRoKHdpZHRoLCBjb250YWluZXIpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQpO1xuICAgIH07XG5cbiAgICAvL3BsYWNlcyB0ZXh0U3RyaW5nIGluIHRleHRPYmosIGFkZHMgYW4gZWxsaXBzaXMgaWYgdGV4dCBjYW4ndCBmaXQgaW4gd2lkdGhcbiAgICBzdGF0aWMgcGxhY2VUZXh0V2l0aEVsbGlwc2lzKHRleHREM09iaiwgdGV4dFN0cmluZywgd2lkdGgpIHtcbiAgICAgICAgdmFyIHRleHRPYmogPSB0ZXh0RDNPYmoubm9kZSgpO1xuICAgICAgICB0ZXh0T2JqLnRleHRDb250ZW50ID0gdGV4dFN0cmluZztcblxuICAgICAgICB2YXIgbWFyZ2luID0gMDtcbiAgICAgICAgdmFyIGVsbGlwc2lzTGVuZ3RoID0gOTtcbiAgICAgICAgLy9lbGxpcHNpcyBpcyBuZWVkZWRcbiAgICAgICAgaWYgKHRleHRPYmouZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCArIG1hcmdpbikge1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IHRleHRTdHJpbmcubGVuZ3RoIC0gMzsgeCA+IDA7IHggLT0gMSkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0T2JqLmdldFN1YlN0cmluZ0xlbmd0aCgwLCB4KSArIGVsbGlwc2lzTGVuZ3RoIDw9IHdpZHRoICsgbWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRPYmoudGV4dENvbnRlbnQgPSB0ZXh0U3RyaW5nLnN1YnN0cmluZygwLCB4KSArIFwiLi4uXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRPYmoudGV4dENvbnRlbnQgPSBcIi4uLlwiOyAvL2Nhbid0IHBsYWNlIGF0IGFsbFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHN0YXRpYyBwbGFjZVRleHRXaXRoRWxsaXBzaXNBbmRUb29sdGlwKHRleHREM09iaiwgdGV4dFN0cmluZywgd2lkdGgsIHRvb2x0aXApIHtcbiAgICAgICAgdmFyIGVsbGlwc2lzUGxhY2VkID0gQXBwVXRpbHMucGxhY2VUZXh0V2l0aEVsbGlwc2lzKHRleHREM09iaiwgdGV4dFN0cmluZywgd2lkdGgpO1xuICAgICAgICBpZiAoZWxsaXBzaXNQbGFjZWQgJiYgdG9vbHRpcCkge1xuICAgICAgICAgICAgdGV4dEQzT2JqLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOSk7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5odG1sKHRleHRTdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgKGQzLmV2ZW50LnBhZ2VYICsgNSkgKyBcInB4XCIpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCAoZDMuZXZlbnQucGFnZVkgLSAyOCkgKyBcInB4XCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRleHREM09iai5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Rm9udFNpemUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcImZvbnQtc2l6ZVwiKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VHJhbnNsYXRpb24odHJhbnNmb3JtKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGR1bW15IGcgZm9yIGNhbGN1bGF0aW9uIHB1cnBvc2VzIG9ubHkuIFRoaXMgd2lsbCBuZXZlclxuICAgICAgICAvLyBiZSBhcHBlbmRlZCB0byB0aGUgRE9NIGFuZCB3aWxsIGJlIGRpc2NhcmRlZCBvbmNlIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgLy8gcmV0dXJucy5cbiAgICAgICAgdmFyIGcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG5cbiAgICAgICAgLy8gU2V0IHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIHRvIHRoZSBwcm92aWRlZCBzdHJpbmcgdmFsdWUuXG4gICAgICAgIGcuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcblxuICAgICAgICAvLyBjb25zb2xpZGF0ZSB0aGUgU1ZHVHJhbnNmb3JtTGlzdCBjb250YWluaW5nIGFsbCB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgLy8gdG8gYSBzaW5nbGUgU1ZHVHJhbnNmb3JtIG9mIHR5cGUgU1ZHX1RSQU5TRk9STV9NQVRSSVggYW5kIGdldFxuICAgICAgICAvLyBpdHMgU1ZHTWF0cml4LlxuICAgICAgICB2YXIgbWF0cml4ID0gZy50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDtcblxuICAgICAgICAvLyBBcyBwZXIgZGVmaW5pdGlvbiB2YWx1ZXMgZSBhbmQgZiBhcmUgdGhlIG9uZXMgZm9yIHRoZSB0cmFuc2xhdGlvbi5cbiAgICAgICAgcmV0dXJuIFttYXRyaXguZSwgbWF0cml4LmZdO1xuICAgIH1cblxuXG4gICAgc3RhdGljIGNsb3Nlc3RQb2ludChwYXRoTm9kZSwgcG9pbnQpIHtcbiAgICAgICAgdmFyIHBhdGhMZW5ndGggPSBwYXRoTm9kZS5nZXRUb3RhbExlbmd0aCgpLFxuICAgICAgICAgICAgcHJlY2lzaW9uID0gOCxcbiAgICAgICAgICAgIGJlc3QsXG4gICAgICAgICAgICBiZXN0TGVuZ3RoLFxuICAgICAgICAgICAgYmVzdERpc3RhbmNlID0gSW5maW5pdHk7XG5cbiAgICAgICAgLy8gbGluZWFyIHNjYW4gZm9yIGNvYXJzZSBhcHByb3hpbWF0aW9uXG4gICAgICAgIGZvciAodmFyIHNjYW4sIHNjYW5MZW5ndGggPSAwLCBzY2FuRGlzdGFuY2U7IHNjYW5MZW5ndGggPD0gcGF0aExlbmd0aDsgc2Nhbkxlbmd0aCArPSBwcmVjaXNpb24pIHtcbiAgICAgICAgICAgIGlmICgoc2NhbkRpc3RhbmNlID0gZGlzdGFuY2UyKHNjYW4gPSBwYXRoTm9kZS5nZXRQb2ludEF0TGVuZ3RoKHNjYW5MZW5ndGgpKSkgPCBiZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBiZXN0ID0gc2NhbiwgYmVzdExlbmd0aCA9IHNjYW5MZW5ndGgsIGJlc3REaXN0YW5jZSA9IHNjYW5EaXN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJpbmFyeSBzZWFyY2ggZm9yIHByZWNpc2UgZXN0aW1hdGVcbiAgICAgICAgcHJlY2lzaW9uIC89IDI7XG4gICAgICAgIHdoaWxlIChwcmVjaXNpb24gPiAwLjUpIHtcbiAgICAgICAgICAgIHZhciBiZWZvcmUsXG4gICAgICAgICAgICAgICAgYWZ0ZXIsXG4gICAgICAgICAgICAgICAgYmVmb3JlTGVuZ3RoLFxuICAgICAgICAgICAgICAgIGFmdGVyTGVuZ3RoLFxuICAgICAgICAgICAgICAgIGJlZm9yZURpc3RhbmNlLFxuICAgICAgICAgICAgICAgIGFmdGVyRGlzdGFuY2U7XG4gICAgICAgICAgICBpZiAoKGJlZm9yZUxlbmd0aCA9IGJlc3RMZW5ndGggLSBwcmVjaXNpb24pID49IDAgJiYgKGJlZm9yZURpc3RhbmNlID0gZGlzdGFuY2UyKGJlZm9yZSA9IHBhdGhOb2RlLmdldFBvaW50QXRMZW5ndGgoYmVmb3JlTGVuZ3RoKSkpIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgYmVzdCA9IGJlZm9yZSwgYmVzdExlbmd0aCA9IGJlZm9yZUxlbmd0aCwgYmVzdERpc3RhbmNlID0gYmVmb3JlRGlzdGFuY2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChhZnRlckxlbmd0aCA9IGJlc3RMZW5ndGggKyBwcmVjaXNpb24pIDw9IHBhdGhMZW5ndGggJiYgKGFmdGVyRGlzdGFuY2UgPSBkaXN0YW5jZTIoYWZ0ZXIgPSBwYXRoTm9kZS5nZXRQb2ludEF0TGVuZ3RoKGFmdGVyTGVuZ3RoKSkpIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgYmVzdCA9IGFmdGVyLCBiZXN0TGVuZ3RoID0gYWZ0ZXJMZW5ndGgsIGJlc3REaXN0YW5jZSA9IGFmdGVyRGlzdGFuY2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByZWNpc2lvbiAvPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYmVzdCA9IFtiZXN0LngsIGJlc3QueV07XG4gICAgICAgIGJlc3QuZGlzdGFuY2UgPSBNYXRoLnNxcnQoYmVzdERpc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuIGJlc3Q7XG5cbiAgICAgICAgZnVuY3Rpb24gZGlzdGFuY2UyKHApIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHAueCAtIHBvaW50WzBdLFxuICAgICAgICAgICAgICAgIGR5ID0gcC55IC0gcG9pbnRbMV07XG4gICAgICAgICAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ3Jvd2wobWVzc2FnZSwgdHlwZT0naW5mbycsIHBvc2l0aW9uPSdyaWdodCcsIHRpbWUgPSAyMDAwKXtcbiAgICAgICAgdmFyIGh0bWwgPSBUZW1wbGF0ZXMuZ2V0KCdncm93bCcsIHttZXNzYWdlOm1lc3NhZ2UsIHR5cGU6dHlwZX0pXG5cbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QoJ2JvZHknKS5zZWxlY3RPckFwcGVuZCgnZGl2LnNkLWdyb3dsLWxpc3QuJytwb3NpdGlvbikuYXBwZW5kKCdkaXYnKS5odG1sKGh0bWwpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBnLnJlbW92ZSgpO1xuICAgICAgICB9LCB0aW1lKVxuICAgIH1cblxuXG4gICAgc3RhdGljIGNyZWF0ZUVsZW1lbnQodGFnLCBhdHRyaWJzLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuXG4gICAgICAgIGlmIChhdHRyaWJzKSB7XG4gICAgICAgICAgICBBcHBVdGlscy5kZWVwRXh0ZW5kKGVsLCBhdHRyaWJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9O1xuXG4gICAgc3RhdGljIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlcGxhY2VVcmxzKHRleHQpe1xuICAgICAgICBpZighdGV4dCl7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsUmVnZXhwID0gLygoZnRwfGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKSg6WzAtOV0rKT8oXFwvfFxcLyhbXFx3IyE6Lj8rPSYlQCFcXC1cXC9dKSk/KS9cblxuICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHVybFJlZ2V4cCwgJzxhIGhyZWY9XCIkMVwiIHRhcmdldD1cIl9ibGFua1wiPiQxPC9hPicpO1xuICAgIH1cblxuICAgIHN0YXRpYyBlc2NhcGVIdG1sKGh0bWwpXG4gICAge1xuICAgICAgICB2YXIgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGh0bWwpO1xuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICAgICAgcmV0dXJuIGRpdi5pbm5lckhUTUw7XG4gICAgfVxuXG4gICAgc3RhdGljIGRpc3BhdGNoSHRtbEV2ZW50KGVsZW1lbnQsIG5hbWUpe1xuICAgICAgICBpZiAoXCJjcmVhdGVFdmVudFwiIGluIGRvY3VtZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpO1xuICAgICAgICAgICAgZXZ0LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBlbGVtZW50LmZpcmVFdmVudChcIm9uXCIrbmFtZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGRpc3BhdGNoRXZlbnQobmFtZSwgZGF0YSl7XG4gICAgICAgIHZhciBldmVudDtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgZXZlbnQgPSBuZXcgIEN1c3RvbUV2ZW50KG5hbWUseyAnZGV0YWlsJzogZGF0YSB9KTtcbiAgICAgICAgfWNhdGNoIChlKXsgLy9JRVxuICAgICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChuYW1lLCBmYWxzZSwgZmFsc2UsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRWYWxpZGF0aW9uTWVzc2FnZShlcnJvcil7XG4gICAgICAgIGlmKFV0aWxzLmlzU3RyaW5nKGVycm9yKSl7XG4gICAgICAgICAgICBlcnJvciA9IHtuYW1lOiBlcnJvcn07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSA9ICd2YWxpZGF0aW9uLicgKyBlcnJvci5uYW1lO1xuICAgICAgICByZXR1cm4gaTE4bi50KGtleSwgZXJyb3IuZGF0YSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGUoc2VsZWN0aW9uKXtcbiAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHRydWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzaG93KHNlbGVjdGlvbiwgc2hvdz10cnVlKXtcbiAgICAgICAgc2VsZWN0aW9uLmNsYXNzZWQoJ3NkLWhpZGRlbicsICFzaG93KTtcbiAgICB9XG5cblxuXG4gICAgc3RhdGljIGlzSGlkZGVuKGVsLCBleGFjdCA9IHRydWUpIHtcbiAgICAgICAgaWYoIWVsKXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmKGV4YWN0KXtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgICAgIHJldHVybiAoc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoZWwub2Zmc2V0UGFyZW50ID09PSBudWxsKVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRKU09OKHVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbignZ2V0JywgdXJsLCB0cnVlKTtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh4aHIucmVzcG9uc2UsIG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBzdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIuc2VuZCgpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJy4uL2QzJ1xuXG4vKmJhc2VkIG9uOlxuICogZ2l0aHViLmNvbS9wYXRvcmprL2QzLWNvbnRleHQtbWVudSAqL1xuXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnUge1xuICAgIG9wZW5DYWxsYmFjaztcbiAgICBjbG9zZUNhbGxiYWNrO1xuXG4gICAgY29uc3RydWN0b3IobWVudSwgb3B0cykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzZWxmLm9wZW5DYWxsYmFjayA9IG9wdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgICAgIHNlbGYub3BlbkNhbGxiYWNrID0gb3B0cy5vbk9wZW47XG4gICAgICAgICAgICBzZWxmLmNsb3NlQ2FsbGJhY2sgPSBvcHRzLm9uQ2xvc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgdGhlIGRpdiBlbGVtZW50IHRoYXQgd2lsbCBob2xkIHRoZSBjb250ZXh0IG1lbnVcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcuZDMtY29udGV4dC1tZW51JykuZGF0YShbMV0pXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdkMy1jb250ZXh0LW1lbnUnKTtcblxuICAgICAgICAvLyBjbG9zZSBtZW51XG4gICAgICAgIGQzLnNlbGVjdCgnYm9keScpLm9uKCdjbGljay5kMy1jb250ZXh0LW1lbnUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QoJy5kMy1jb250ZXh0LW1lbnUnKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5jbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jbG9zZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRoaXMgZ2V0cyBleGVjdXRlZCB3aGVuIGEgY29udGV4dG1lbnUgZXZlbnQgb2NjdXJzXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBlbG0gPSB0aGlzO1xuXG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5kMy1jb250ZXh0LW1lbnUnKS5odG1sKCcnKTtcbiAgICAgICAgICAgIHZhciBsaXN0ID0gZDMuc2VsZWN0QWxsKCcuZDMtY29udGV4dC1tZW51JylcbiAgICAgICAgICAgICAgICAub24oJ2NvbnRleHRtZW51JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcuZDMtY29udGV4dC1tZW51Jykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3VsJyk7XG4gICAgICAgICAgICBsaXN0LnNlbGVjdEFsbCgnbGknKS5kYXRhKHR5cGVvZiBtZW51ID09PSAnZnVuY3Rpb24nID8gbWVudShkYXRhKSA6IG1lbnUpLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5kaXZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXQgKz0gJyBpcy1kaXZpZGVyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ICs9ICcgaXMtZGlzYWJsZWQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghZC5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldCArPSAnIGlzLWhlYWRlcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5odG1sKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLmRpdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGhyPic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyB0aXRsZSBhdHRyaWJ1dGUgc2V0LiBDaGVjayB0aGUgc3BlbGxpbmcgb2YgeW91ciBvcHRpb25zLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodHlwZW9mIGQudGl0bGUgPT09ICdzdHJpbmcnKSA/IGQudGl0bGUgOiBkLnRpdGxlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLmRpc2FibGVkKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkLmFjdGlvbikgcmV0dXJuOyAvLyBoZWFkZXJzIGhhdmUgbm8gXCJhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICBkLmFjdGlvbihlbG0sIGRhdGEsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcuZDMtY29udGV4dC1tZW51Jykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xvc2VDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHRoZSBvcGVuQ2FsbGJhY2sgYWxsb3dzIGFuIGFjdGlvbiB0byBmaXJlIGJlZm9yZSB0aGUgbWVudSBpcyBkaXNwbGF5ZWRcbiAgICAgICAgICAgIC8vIGFuIGV4YW1wbGUgdXNhZ2Ugd291bGQgYmUgY2xvc2luZyBhIHRvb2x0aXBcbiAgICAgICAgICAgIGlmIChzZWxmLm9wZW5DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wZW5DYWxsYmFjayhkYXRhLCBpbmRleCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRpc3BsYXkgY29udGV4dCBtZW51XG4gICAgICAgICAgICBkMy5zZWxlY3QoJy5kMy1jb250ZXh0LW1lbnUnKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnbGVmdCcsIChkMy5ldmVudC5wYWdlWCAtIDIpICsgJ3B4JylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ3RvcCcsIChkMy5ldmVudC5wYWdlWSAtIDIpICsgJ3B4JylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnYmxvY2snKTtcblxuICAgICAgICAgICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBzdGF0aWMgaGlkZSgpIHtcbiAgICAgICAgZDMuc2VsZWN0KCcuZDMtY29udGV4dC1tZW51Jykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHtDb250ZXh0TWVudX0gZnJvbSAnLi9jb250ZXh0LW1lbnUnXG5pbXBvcnQge2kxOG59IGZyb20gXCIuLi9pMThuL2kxOG5cIjtcblxuZXhwb3J0IGNsYXNzIEVkZ2VDb250ZXh0TWVudSBleHRlbmRzIENvbnRleHRNZW51IHtcbiAgICB0cmVlRGVzaWduZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmVlRGVzaWduZXIpIHtcbiAgICAgICAgdmFyIG1lbnUgPSBmdW5jdGlvbiAoZCkge1xuXG4gICAgICAgICAgICB2YXIgbWVudSA9IFtdO1xuXG4gICAgICAgICAgICBtZW51LnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51LmVkZ2UuaW5qZWN0RGVjaXNpb25Ob2RlJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5pbmplY3REZWNpc2lvbk5vZGUoZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1lbnUucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4udCgnY29udGV4dE1lbnUuZWRnZS5pbmplY3RDaGFuY2VOb2RlJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5pbmplY3RDaGFuY2VOb2RlKGQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIG1lbnU7XG4gICAgICAgIH07XG5cbiAgICAgICAgc3VwZXIobWVudSk7XG4gICAgICAgIHRoaXMudHJlZURlc2lnbmVyID0gdHJlZURlc2lnbmVyO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q29udGV4dE1lbnV9IGZyb20gJy4vY29udGV4dC1tZW51J1xuaW1wb3J0IHtkb21haW4gYXMgbW9kZWx9IGZyb20gJ3NkLW1vZGVsJ1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnLi4vZDMnXG5pbXBvcnQge2kxOG59IGZyb20gXCIuLi9pMThuL2kxOG5cIjtcblxuZXhwb3J0IGNsYXNzIE1haW5Db250ZXh0TWVudSBleHRlbmRzIENvbnRleHRNZW51IHtcbiAgICB0cmVlRGVzaWduZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmVlRGVzaWduZXIpIHtcbiAgICAgICAgdmFyIG1vdXNlUG9zaXRpb24gPSBudWxsO1xuICAgICAgICB2YXIgbWVudSA9IGZ1bmN0aW9uIChkKSB7XG5cbiAgICAgICAgICAgIHZhciBtZW51ID0gW107XG4gICAgICAgICAgICBtZW51LnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51Lm1haW4uYWRkRGVjaXNpb25Ob2RlJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gbmV3IG1vZGVsLkRlY2lzaW9uTm9kZShtb3VzZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLmFkZE5vZGUobmV3Tm9kZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1lbnUucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4udCgnY29udGV4dE1lbnUubWFpbi5hZGRDaGFuY2VOb2RlJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlID0gbmV3IG1vZGVsLkNoYW5jZU5vZGUobW91c2VQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5hZGROb2RlKG5ld05vZGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZW51LnB1c2goe2RpdmlkZXI6IHRydWV9KTtcbiAgICAgICAgICAgIG1lbnUucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4udCgnY29udGV4dE1lbnUubWFpbi5hZGRUZXh0JyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdUZXh0ID0gbmV3IG1vZGVsLlRleHQobW91c2VQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5hZGRUZXh0KG5ld1RleHQpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWVudS5wdXNoKHtkaXZpZGVyOiB0cnVlfSk7XG4gICAgICAgICAgICBtZW51LnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51Lm1haW4ucGFzdGUnKSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLnBhc3RlVG9OZXdMb2NhdGlvbihtb3VzZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhdHJlZURlc2lnbmVyLmNvcGllZE5vZGVzIHx8ICF0cmVlRGVzaWduZXIuY29waWVkTm9kZXMubGVuZ3RoXG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWVudS5wdXNoKHtkaXZpZGVyOiB0cnVlfSk7XG5cbiAgICAgICAgICAgIG1lbnUucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4udCgnY29udGV4dE1lbnUubWFpbi5zZWxlY3RBbGxOb2RlcycpLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGVsbSwgZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICB0cmVlRGVzaWduZXIuc2VsZWN0QWxsTm9kZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBtZW51O1xuICAgICAgICB9O1xuXG4gICAgICAgIHN1cGVyKG1lbnUsIHtvbk9wZW46ICgpID0+IHtcbiAgICAgICAgICAgIHRyZWVEZXNpZ25lci5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgbW91c2VQb3NpdGlvbiA9IG5ldyBtb2RlbC5Qb2ludChkMy5tb3VzZSh0cmVlRGVzaWduZXIuc3ZnLm5vZGUoKSkpLm1vdmUodHJlZURlc2lnbmVyLmdldE1haW5Hcm91cFRyYW5zbGF0aW9uKHRydWUpKTtcblxuICAgICAgICB9fSk7XG4gICAgICAgIHRoaXMudHJlZURlc2lnbmVyID0gdHJlZURlc2lnbmVyO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Q29udGV4dE1lbnV9IGZyb20gJy4vY29udGV4dC1tZW51J1xuaW1wb3J0IHtkb21haW4gYXMgbW9kZWx9IGZyb20gJ3NkLW1vZGVsJ1xuaW1wb3J0IHtpMThufSBmcm9tIFwiLi4vaTE4bi9pMThuXCI7XG5cbmV4cG9ydCBjbGFzcyBOb2RlQ29udGV4dE1lbnUgZXh0ZW5kcyBDb250ZXh0TWVudSB7XG4gICAgdHJlZURlc2lnbmVyO1xuXG4gICAgY29uc3RydWN0b3IodHJlZURlc2lnbmVyLCBvcGVyYXRpb25zRm9yT2JqZWN0KSB7XG4gICAgICAgIHZhciBtZW51ID0gZnVuY3Rpb24gKGQpIHtcblxuICAgICAgICAgICAgdmFyIGNvcHlNZW51SXRlbSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLmNvcHknKSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLnNlbGVjdE5vZGUoZCwgIXRyZWVEZXNpZ25lci5pc05vZGVTZWxlY3RlZChkKSk7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5jb3B5U2VsZWN0ZWROb2RlcygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICEhZC5zb3VyY2VJZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjdXRNZW51SXRlbSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLmN1dCcpLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGVsbSwgZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICB0cmVlRGVzaWduZXIuc2VsZWN0Tm9kZShkLCAhdHJlZURlc2lnbmVyLmlzTm9kZVNlbGVjdGVkKGQpKTtcbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLmN1dFNlbGVjdGVkTm9kZXMoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhIWQuc291cmNlSWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcGFzdGVNZW51SXRlbSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLnBhc3RlJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5wYXN0ZVRvTm9kZShkKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBkLnNvdXJjZUlkIHx8IGQuZm9sZGVkIHx8ICF0cmVlRGVzaWduZXIuY29waWVkTm9kZXMgfHwgIXRyZWVEZXNpZ25lci5jb3BpZWROb2Rlcy5sZW5ndGhcblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBwYXN0ZUNsb25lTWVudUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4udCgnY29udGV4dE1lbnUubm9kZS5wYXN0ZUNsb25lJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5wYXN0ZVRvTm9kZShkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBkLnNvdXJjZUlkIHx8IGQuZm9sZGVkIHx8ICF0cmVlRGVzaWduZXIuY29waWVkTm9kZXMgfHwgdHJlZURlc2lnbmVyLmNvcGllZE5vZGVzLmxlbmd0aCAhPT0gMVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgZGVsZXRlTWVudUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4udCgnY29udGV4dE1lbnUubm9kZS5kZWxldGUnKSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcblxuICAgICAgICAgICAgICAgICAgICB0cmVlRGVzaWduZXIuc2VsZWN0Tm9kZShkLCAhdHJlZURlc2lnbmVyLmlzTm9kZVNlbGVjdGVkKGQpKTtcbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLnJlbW92ZVNlbGVjdGVkTm9kZXMoKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBtZW51ID0gW107XG4gICAgICAgICAgICBpZiAoZC50eXBlID09IG1vZGVsLlRlcm1pbmFsTm9kZS4kVFlQRSkge1xuICAgICAgICAgICAgICAgIG1lbnUgPSBbY29weU1lbnVJdGVtLCBjdXRNZW51SXRlbSwgZGVsZXRlTWVudUl0ZW1dO1xuICAgICAgICAgICAgICAgIE5vZGVDb250ZXh0TWVudS5hZGROb2RlQ29udmVyc2lvbk9wdGlvbnMoZCwgbWVudSwgdHJlZURlc2lnbmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVudTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIWQuZm9sZGVkICYmICFkLnNvdXJjZUlkKXtcbiAgICAgICAgICAgICAgICBtZW51LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLmFkZERlY2lzaW9uTm9kZScpLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5hZGREZWNpc2lvbk5vZGUoZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1lbnUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51Lm5vZGUuYWRkQ2hhbmNlTm9kZScpLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5hZGRDaGFuY2VOb2RlKGQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZW51LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLmFkZFRlcm1pbmFsTm9kZScpLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5hZGRUZXJtaW5hbE5vZGUoZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1lbnUucHVzaCh7ZGl2aWRlcjogdHJ1ZX0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZW51LnB1c2goY29weU1lbnVJdGVtKTtcbiAgICAgICAgICAgIG1lbnUucHVzaChjdXRNZW51SXRlbSk7XG4gICAgICAgICAgICBtZW51LnB1c2gocGFzdGVNZW51SXRlbSk7XG4gICAgICAgICAgICBtZW51LnB1c2gocGFzdGVDbG9uZU1lbnVJdGVtKTtcbiAgICAgICAgICAgIG1lbnUucHVzaChkZWxldGVNZW51SXRlbSk7XG5cbiAgICAgICAgICAgIE5vZGVDb250ZXh0TWVudS5hZGROb2RlQ29udmVyc2lvbk9wdGlvbnMoZCwgbWVudSwgdHJlZURlc2lnbmVyKTtcbiAgICAgICAgICAgIG1lbnUucHVzaCh7ZGl2aWRlcjogdHJ1ZX0pO1xuICAgICAgICAgICAgbWVudS5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLnNlbGVjdFN1YnRyZWUnKSxcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLnNlbGVjdFN1YlRyZWUoZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogISFkLnNvdXJjZUlkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoIWQuZm9sZGVkKXtcbiAgICAgICAgICAgICAgICBtZW51LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLmZvbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlRGVzaWduZXIuZm9sZFN1YnRyZWUoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG1lbnUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51Lm5vZGUudW5mb2xkJyksXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGVsbSwgZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLmZvbGRTdWJ0cmVlKGQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihvcGVyYXRpb25zRm9yT2JqZWN0ICYmICFkLnNvdXJjZUlkKXtcbiAgICAgICAgICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnNGb3JPYmplY3QoZCk7XG4gICAgICAgICAgICAgICAgaWYob3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVudS5wdXNoKHtkaXZpZGVyOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbnMuZm9yRWFjaChvcD0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVudS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLicrb3AubmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5wZXJmb3JtT3BlcmF0aW9uKGQsIG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhb3AuY2FuUGVyZm9ybShkKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWVudTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdXBlcihtZW51KTtcbiAgICAgICAgdGhpcy50cmVlRGVzaWduZXIgPSB0cmVlRGVzaWduZXI7XG4gICAgfVxuXG4gICAgc3RhdGljIGFkZE5vZGVDb252ZXJzaW9uT3B0aW9ucyhkLCBtZW51LCB0cmVlRGVzaWduZXIpe1xuICAgICAgICB2YXIgY29udmVyc2lvbk9wdGlvbnMgPSBOb2RlQ29udGV4dE1lbnUuZ2V0Tm9kZUNvbnZlcnNpb25PcHRpb25zKGQsIHRyZWVEZXNpZ25lcik7XG4gICAgICAgIGlmKGNvbnZlcnNpb25PcHRpb25zLmxlbmd0aCl7XG4gICAgICAgICAgICBtZW51LnB1c2goe2RpdmlkZXI6IHRydWV9KTtcbiAgICAgICAgICAgIGNvbnZlcnNpb25PcHRpb25zLmZvckVhY2gobz0+bWVudS5wdXNoKG8pKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE5vZGVDb252ZXJzaW9uT3B0aW9ucyhkLCB0cmVlRGVzaWduZXIpe1xuICAgICAgICB2YXIgb3B0aW9ucyA9IFtdO1xuXG4gICAgICAgIGlmKGQuZm9sZGVkKXtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbGxBbGxvd2VkVHlwZXMgPSBbbW9kZWwuRGVjaXNpb25Ob2RlLiRUWVBFLCBtb2RlbC5DaGFuY2VOb2RlLiRUWVBFLCBtb2RlbC5UZXJtaW5hbE5vZGUuJFRZUEVdO1xuXG4gICAgICAgIGlmKCFkLmNoaWxkRWRnZXMubGVuZ3RoICYmIGQuJHBhcmVudCl7XG4gICAgICAgICAgICBhbGxBbGxvd2VkVHlwZXMuZmlsdGVyKHQ9PnQhPT1kLnR5cGUpLmZvckVhY2godHlwZT0+e1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChOb2RlQ29udGV4dE1lbnUuZ2V0Tm9kZUNvbnZlcnNpb25PcHRpb24odHlwZSwgdHJlZURlc2lnbmVyKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaWYoZCBpbnN0YW5jZW9mIG1vZGVsLkRlY2lzaW9uTm9kZSl7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKE5vZGVDb250ZXh0TWVudS5nZXROb2RlQ29udmVyc2lvbk9wdGlvbihtb2RlbC5DaGFuY2VOb2RlLiRUWVBFLCB0cmVlRGVzaWduZXIpKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKE5vZGVDb250ZXh0TWVudS5nZXROb2RlQ29udmVyc2lvbk9wdGlvbihtb2RlbC5EZWNpc2lvbk5vZGUuJFRZUEUsIHRyZWVEZXNpZ25lcikpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE5vZGVDb252ZXJzaW9uT3B0aW9uKHR5cGVUb0NvbnZlcnRUbywgdHJlZURlc2lnbmVyKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51Lm5vZGUuY29udmVydC4nK3R5cGVUb0NvbnZlcnRUbyksXG4gICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbG0sIGQsIGkpIHtcbiAgICAgICAgICAgICAgICB0cmVlRGVzaWduZXIuY29udmVydE5vZGUoZCwgdHlwZVRvQ29udmVydFRvKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge0NvbnRleHRNZW51fSBmcm9tICcuL2NvbnRleHQtbWVudSdcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4uL2kxOG4vaTE4blwiO1xuXG5leHBvcnQgY2xhc3MgVGV4dENvbnRleHRNZW51IGV4dGVuZHMgQ29udGV4dE1lbnUge1xuICAgIHRyZWVEZXNpZ25lcjtcblxuICAgIGNvbnN0cnVjdG9yKHRyZWVEZXNpZ25lcikge1xuICAgICAgICB2YXIgbWVudSA9IGZ1bmN0aW9uIChkKSB7XG5cblxuICAgICAgICAgICAgdmFyIGRlbGV0ZU1lbnVJdGVtID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLnQoJ2NvbnRleHRNZW51LnRleHQuZGVsZXRlJyksXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWxtLCBkLCBpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJlZURlc2lnbmVyLnNlbGVjdFRleHQoZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVEZXNpZ25lci5yZW1vdmVTZWxlY3RlZFRleHRzKClcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbWVudSA9IFtdO1xuICAgICAgICAgICAgbWVudS5wdXNoKGRlbGV0ZU1lbnVJdGVtKTtcbiAgICAgICAgICAgIHJldHVybiBtZW51O1xuICAgICAgICB9O1xuXG4gICAgICAgIHN1cGVyKG1lbnUpO1xuICAgICAgICB0aGlzLnRyZWVEZXNpZ25lciA9IHRyZWVEZXNpZ25lcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICcuL2QzJ1xuXG5leHBvcnQgY2xhc3MgRDNFeHRlbnNpb25zIHtcblxuICAgIHN0YXRpYyBleHRlbmQoKSB7XG5cbiAgICAgICAgZDMuc2VsZWN0aW9uLnByb3RvdHlwZS5lbnRlci5wcm90b3R5cGUuaW5zZXJ0U2VsZWN0b3IgPVxuICAgICAgICAgICAgZDMuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnNlcnRTZWxlY3RvciA9IGZ1bmN0aW9uIChzZWxlY3RvciwgYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEQzRXh0ZW5zaW9ucy5pbnNlcnRTZWxlY3Rvcih0aGlzLCBzZWxlY3RvciwgYmVmb3JlKTtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICBkMy5zZWxlY3Rpb24ucHJvdG90eXBlLmVudGVyLnByb3RvdHlwZS5hcHBlbmRTZWxlY3RvciA9XG4gICAgICAgICAgICBkMy5zZWxlY3Rpb24ucHJvdG90eXBlLmFwcGVuZFNlbGVjdG9yID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEQzRXh0ZW5zaW9ucy5hcHBlbmRTZWxlY3Rvcih0aGlzLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuZW50ZXIucHJvdG90eXBlLnNlbGVjdE9yQXBwZW5kID1cbiAgICAgICAgICAgIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0T3JBcHBlbmQgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRDNFeHRlbnNpb25zLnNlbGVjdE9yQXBwZW5kKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgZDMuc2VsZWN0aW9uLnByb3RvdHlwZS5lbnRlci5wcm90b3R5cGUuc2VsZWN0T3JJbnNlcnQgPVxuICAgICAgICAgICAgZDMuc2VsZWN0aW9uLnByb3RvdHlwZS5zZWxlY3RPckluc2VydCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEQzRXh0ZW5zaW9ucy5zZWxlY3RPckluc2VydCh0aGlzLCBzZWxlY3RvciwgYmVmb3JlKTtcbiAgICAgICAgICAgIH07XG5cblxuICAgIH1cblxuICAgIHN0YXRpYyBpbnNlcnRPckFwcGVuZFNlbGVjdG9yKHBhcmVudCwgc2VsZWN0b3IsIG9wZXJhdGlvbiwgYmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIHNlbGVjdG9yUGFydHMgPSBzZWxlY3Rvci5zcGxpdCgvKFtcXC5cXCNdKS8pO1xuICAgICAgICB2YXIgZWxlbWVudCA9IHBhcmVudFtvcGVyYXRpb25dKHNlbGVjdG9yUGFydHMuc2hpZnQoKSwgYmVmb3JlKTsvL1wiOmZpcnN0LWNoaWxkXCJcblxuICAgICAgICB3aGlsZSAoc2VsZWN0b3JQYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0b3JNb2RpZmllciA9IHNlbGVjdG9yUGFydHMuc2hpZnQoKTtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rvckl0ZW0gPSBzZWxlY3RvclBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3JNb2RpZmllciA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5jbGFzc2VkKHNlbGVjdG9ySXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yTW9kaWZpZXIgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuYXR0cignaWQnLCBzZWxlY3Rvckl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIHN0YXRpYyBpbnNlcnRTZWxlY3RvcihwYXJlbnQsIHNlbGVjdG9yLCBiZWZvcmUpIHtcbiAgICAgICAgcmV0dXJuIEQzRXh0ZW5zaW9ucy5pbnNlcnRPckFwcGVuZFNlbGVjdG9yKHBhcmVudCwgc2VsZWN0b3IsIFwiaW5zZXJ0XCIsIGJlZm9yZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGVuZFNlbGVjdG9yKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIEQzRXh0ZW5zaW9ucy5pbnNlcnRPckFwcGVuZFNlbGVjdG9yKHBhcmVudCwgc2VsZWN0b3IsIFwiYXBwZW5kXCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZWxlY3RPckFwcGVuZChwYXJlbnQsIHNlbGVjdG9yLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSBwYXJlbnQuc2VsZWN0KHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbi5lbXB0eSgpKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEQzRXh0ZW5zaW9ucy5hcHBlbmRTZWxlY3RvcihwYXJlbnQsIHNlbGVjdG9yKTtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb247XG4gICAgfTtcblxuICAgIHN0YXRpYyBzZWxlY3RPckluc2VydChwYXJlbnQsIHNlbGVjdG9yLCBiZWZvcmUpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHBhcmVudC5zZWxlY3Qoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoc2VsZWN0aW9uLmVtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBEM0V4dGVuc2lvbnMuaW5zZXJ0U2VsZWN0b3IocGFyZW50LCBzZWxlY3RvciwgYmVmb3JlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH07XG59XG4iLCJleHBvcnQgKiBmcm9tICdkMy1kaXNwYXRjaCc7XG5leHBvcnQgKiBmcm9tICdkMy1zY2FsZSc7XG5leHBvcnQgKiBmcm9tICdkMy1zZWxlY3Rpb24nO1xuZXhwb3J0ICogZnJvbSAnZDMtc2hhcGUnXG5leHBvcnQgKiBmcm9tICdkMy1kcmFnJztcbmV4cG9ydCAqIGZyb20gJ2QzLWJydXNoJ1xuZXhwb3J0ICogZnJvbSAnZDMtYXJyYXknXG5leHBvcnQgKiBmcm9tICdkMy1oaWVyYXJjaHknXG5leHBvcnQgKiBmcm9tICdkMy10aW1lLWZvcm1hdCdcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcImNvbnRleHRNZW51XCI6e1xuICAgICAgICBcIm1haW5cIjp7XG4gICAgICAgICAgICBcImFkZERlY2lzaW9uTm9kZVwiOiBcIkVudHNjaGVpZHVuZ3Nrbm90ZW4gaGluenVmw7xnZW5cIixcbiAgICAgICAgICAgIFwiYWRkQ2hhbmNlTm9kZVwiOiBcIlp1ZmFsbCBLbm90ZW4gaGluenVmw7xnZW5cIixcbiAgICAgICAgICAgIFwiYWRkVGV4dFwiOiBcIlRleHQgaGluenVmw7xnZW4gXCIsXG4gICAgICAgICAgICBcInBhc3RlXCI6IFwiRWluZsO8Z2VuXCIsXG4gICAgICAgICAgICBcInNlbGVjdEFsbE5vZGVzXCI6IFwiQWxsZSBLbm90ZW4gYXVzd8OkaGxlblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwiY29weVwiOiBcIktvcGllcmVuXCIsXG4gICAgICAgICAgICBcImN1dFwiOiBcIkF1c3NjaG5laWRlblwiLFxuICAgICAgICAgICAgXCJwYXN0ZVwiOiBcIkVpbmbDvGdlblwiLFxuICAgICAgICAgICAgXCJkZWxldGVcIjogXCJMw7ZzY2hlblwiLFxuICAgICAgICAgICAgXCJhZGREZWNpc2lvbk5vZGVcIjogXCJFbnRzY2hlaWR1bmdza25vdGVuIGhpbnp1ZsO8Z2VuXCIsXG4gICAgICAgICAgICBcImFkZENoYW5jZU5vZGVcIjogXCJadWZhbGwgS25vdGVuIGhpbnp1ZsO8Z2VuXCIsXG4gICAgICAgICAgICBcImFkZFRlcm1pbmFsTm9kZVwiOiBcIkVuZGtub3R0ZW4gaGluenVmw7xnZW5cIixcbiAgICAgICAgICAgIFwiY29udmVydFwiOntcbiAgICAgICAgICAgICAgICBcImRlY2lzaW9uXCI6IFwiQWxzIEVudHNjaGVpZHVuZ3Nrbm90ZW5cIixcbiAgICAgICAgICAgICAgICBcImNoYW5jZVwiOiBcIkFscyBadWZhbGwgS25vdGVuXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXJtaW5hbFwiOiBcIkFscyBFbmRrbm90ZW5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2VsZWN0U3VidHJlZVwiOiBcIlRlaWxiYXVtIHfDpGhsZW5cIixcbiAgICAgICAgICAgIFwiZm9sZFwiOiBcIlRlaWxiYXVtIGZhbHRlblwiLFxuICAgICAgICAgICAgXCJ1bmZvbGRcIjogXCJUZWlsYmF1bSBlbnRmYWx0ZW5cIixcblx0XHRcdFxuICAgICAgICAgICAgXCJmbGlwU3VidHJlZVwiOiBcIlRlaWxiYXVtIHVtZHJlaGVuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlZGdlXCI6e1xuICAgICAgICAgICAgXCJpbmplY3REZWNpc2lvbk5vZGVcIjogXCJFbnRzY2hlaWR1bmdza25vdGVuIEluaml6aWVyZW5cIixcbiAgICAgICAgICAgIFwiaW5qZWN0Q2hhbmNlTm9kZVwiOiBcIlp1ZmFsbCBLbm90ZW4gSW5qaXppZXJlblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGV4dFwiOntcbiAgICAgICAgICAgIFwiZGVsZXRlXCI6IFwiTMO2c2NoZW5cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZhbGlkYXRpb25cIjp7XG4gICAgICAgIFwiaW5jb21wbGV0ZVBhdGhcIjogXCJQZmFkLCBkZXIgbmljaHQgbWl0IGRlbSBFbmRrbm90ZW4gZW5kZXRcIixcbiAgICAgICAgXCJwcm9iYWJpbGl0eURvTm90U3VtVXBUbzFcIjogXCJEaWUgU3VtbWUgZGVyIFdhaHJzY2hlaW5saWNoa2VpdGVuIGlzdCBuaWNodCBnbGVpY2ggMVwiLFxuICAgICAgICBcImludmFsaWRQcm9iYWJpbGl0eVwiOiBcIlVuZ8O8bHRpZ2UgV2FocnNjaGVpbmxpY2hrZWl0IGltIFp3ZWlnICN7e251bWJlcn19XCIsXG4gICAgICAgIFwiaW52YWxpZFBheW9mZlwiOiBcIlVuZ8O8bHRpZ2UgQXVzemFobHVuZyBpbiBad2VpZyAje3tudW1iZXJ9fVwiXG4gICAgfSxcbiAgICBcImdyb3dsXCI6e1xuICAgICAgICBcImJydXNoRGlzYWJsZWRcIjogXCJBdXN3YWhsYsO8cnN0ZSBkZWFrdGl2aWVydFwiLFxuICAgICAgICBcImJydXNoRW5hYmxlZFwiOiBcIkF1c3dhaGxiw7xyc3RlIGFrdGl2aWVydFwiXG4gICAgfSxcbiAgICBcInRvb2x0aXBcIjp7XG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJBdXN6YWhsdW5nIHt7bnVtYmVyfX1cIixcbiAgICAgICAgICAgICAgICBcIm5hbWVkXCI6IFwie3tuYW1lfX1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiYWdncmVnYXRlZFBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiQWdncmVnaWVydGUgQXVzemFobHVuZyB7e251bWJlcn19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcIkFnZ3JlZ2llcnRlIHt7bmFtZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInByb2JhYmlsaXR5VG9FbnRlclwiOiBcIldhaHJzY2hlaW5saWNoa2VpdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWRnZVwiOntcbiAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJBdXN6YWhsdW5nIHt7bnVtYmVyfX06IHt7dmFsdWV9fVwiLFxuICAgICAgICAgICAgICAgIFwibmFtZWRcIjogXCJ7e25hbWV9fToge3t2YWx1ZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInByb2JhYmlsaXR5XCI6IFwiV2FocnNjaGVpbmxpY2hrZWl0OiB7e3ZhbHVlfX1cIlxuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICAgIFwiY29udGV4dE1lbnVcIjp7XG4gICAgICAgIFwibWFpblwiOntcbiAgICAgICAgICAgIFwiYWRkRGVjaXNpb25Ob2RlXCI6IFwiQWRkIERlY2lzaW9uIE5vZGVcIixcbiAgICAgICAgICAgIFwiYWRkQ2hhbmNlTm9kZVwiOiBcIkFkZCBDaGFuY2UgTm9kZVwiLFxuICAgICAgICAgICAgXCJhZGRUZXh0XCI6IFwiQWRkIFRleHRcIixcbiAgICAgICAgICAgIFwicGFzdGVcIjogXCJQYXN0ZVwiLFxuICAgICAgICAgICAgXCJzZWxlY3RBbGxOb2Rlc1wiOiBcIlNlbGVjdCBhbGwgbm9kZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5vZGVcIjp7XG4gICAgICAgICAgICBcImNvcHlcIjogXCJDb3B5XCIsXG4gICAgICAgICAgICBcImN1dFwiOiBcIkN1dFwiLFxuICAgICAgICAgICAgXCJwYXN0ZVwiOiBcIlBhc3RlXCIsXG4gICAgICAgICAgICBcImRlbGV0ZVwiOiBcIkRlbGV0ZVwiLFxuICAgICAgICAgICAgXCJhZGREZWNpc2lvbk5vZGVcIjogXCJBZGQgRGVjaXNpb24gTm9kZVwiLFxuICAgICAgICAgICAgXCJhZGRDaGFuY2VOb2RlXCI6IFwiQWRkIENoYW5jZSBOb2RlXCIsXG4gICAgICAgICAgICBcImFkZFRlcm1pbmFsTm9kZVwiOiBcIkFkZCBUZXJtaW5hbCBOb2RlXCIsXG4gICAgICAgICAgICBcImNvbnZlcnRcIjp7XG4gICAgICAgICAgICAgICAgXCJkZWNpc2lvblwiOiBcIkFzIERlY2lzaW9uIE5vZGVcIixcbiAgICAgICAgICAgICAgICBcImNoYW5jZVwiOiBcIkFzIENoYW5jZSBOb2RlXCIsXG4gICAgICAgICAgICAgICAgXCJ0ZXJtaW5hbFwiOiBcIkFzIFRlcm1pbmFsIE5vZGVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2VsZWN0U3VidHJlZVwiOiBcIlNlbGVjdCBzdWJ0cmVlXCIsXG4gICAgICAgICAgICBcImZvbGRcIjogXCJGb2xkIHN1YnRyZWVcIixcbiAgICAgICAgICAgIFwidW5mb2xkXCI6IFwiVW5mb2xkIHN1YnRyZWVcIixcbiAgICAgICAgICAgIFwiZmxpcFN1YnRyZWVcIjogXCJGbGlwIHN1YnRyZWVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVkZ2VcIjp7XG4gICAgICAgICAgICBcImluamVjdERlY2lzaW9uTm9kZVwiOiBcIkluamVjdCBEZWNpc2lvbiBOb2RlXCIsXG4gICAgICAgICAgICBcImluamVjdENoYW5jZU5vZGVcIjogXCJJbmplY3QgQ2hhbmNlIE5vZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInRleHRcIjp7XG4gICAgICAgICAgICBcImRlbGV0ZVwiOiBcIkRlbGV0ZVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidmFsaWRhdGlvblwiOntcbiAgICAgICAgXCJpbmNvbXBsZXRlUGF0aFwiOiBcIlBhdGggbm90IGVuZGluZyB3aXRoIHRlcm1pbmFsIG5vZGVcIixcbiAgICAgICAgXCJwcm9iYWJpbGl0eURvTm90U3VtVXBUbzFcIjogXCJQcm9iYWJpbGl0aWVzIGRvIG5vdCBzdW0gdXAgdG8gMVwiLFxuICAgICAgICBcImludmFsaWRQcm9iYWJpbGl0eVwiOiBcIkludmFsaWQgcHJvYmFiaWxpdHkgaW4gZWRnZSAje3tudW1iZXJ9fVwiLFxuICAgICAgICBcImludmFsaWRQYXlvZmZcIjogXCJJbnZhbGlkIHBheW9mZiBpbiBlZGdlICN7e251bWJlcn19XCJcbiAgICB9LFxuICAgIFwiZ3Jvd2xcIjp7XG4gICAgICAgIFwiYnJ1c2hEaXNhYmxlZFwiOiBcIlNlbGVjdGlvbiBicnVzaCBkaXNhYmxlZFwiLFxuICAgICAgICBcImJydXNoRW5hYmxlZFwiOiBcIlNlbGVjdGlvbiBicnVzaCBlbmFibGVkXCJcbiAgICB9LFxuICAgIFwidG9vbHRpcFwiOntcbiAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIlBheW9mZiB7e251bWJlcn19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcInt7bmFtZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImFnZ3JlZ2F0ZWRQYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkFnZ3JlZ2F0ZWQgUGF5b2ZmIHt7bnVtYmVyfX1cIixcbiAgICAgICAgICAgICAgICBcIm5hbWVkXCI6IFwiQWdncmVnYXRlZCB7e25hbWV9fVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwcm9iYWJpbGl0eVRvRW50ZXJcIjogXCJQcm9iYWJpbGl0eSB0byBlbnRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWRnZVwiOntcbiAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJQYXlvZmYge3tudW1iZXJ9fToge3t2YWx1ZX19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcInt7bmFtZX19OiB7e3ZhbHVlfX1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicHJvYmFiaWxpdHlcIjogXCJQcm9iYWJpbGl0eToge3t2YWx1ZX19XCJcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcImNvbnRleHRNZW51XCI6e1xuICAgICAgICBcIm1haW5cIjp7XG4gICAgICAgICAgICBcImFkZERlY2lzaW9uTm9kZVwiOiBcIkFqb3V0ZXIgbm91ZCBkZSBkw6ljaXNpb25cIixcbiAgICAgICAgICAgIFwiYWRkQ2hhbmNlTm9kZVwiOiBcIkFqb3V0ZXIgbm91ZCBhbMOpYXRvaXJlXCIsXG4gICAgICAgICAgICBcImFkZFRleHRcIjogXCJBam91dGVyIGR1IHRleHRlXCIsXG4gICAgICAgICAgICBcInBhc3RlXCI6IFwiQ29sbGVyXCIsXG4gICAgICAgICAgICBcInNlbGVjdEFsbE5vZGVzXCI6IFwiU8OpbGVjdGlvbm5lciB0b3VzIGxlcyBub3Vkc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwiY29weVwiOiBcIkNvcGllXCIsXG4gICAgICAgICAgICBcImN1dFwiOiBcIkNvdXBlclwiLFxuICAgICAgICAgICAgXCJwYXN0ZVwiOiBcIkNvbGxlclwiLFxuICAgICAgICAgICAgXCJkZWxldGVcIjogXCJFZmZhY2VyXCIsXG4gICAgICAgICAgICBcImFkZERlY2lzaW9uTm9kZVwiOiBcIkFqb3V0ZXIgbm91ZCBkZSBkw6ljaXNpb25cIixcbiAgICAgICAgICAgIFwiYWRkQ2hhbmNlTm9kZVwiOiBcIkFqb3V0ZXIgbm91ZCBhbMOpYXRvaXJlXCIsXG4gICAgICAgICAgICBcImFkZFRlcm1pbmFsTm9kZVwiOiBcIkFqb3V0ZXIgdW4gbm9ldWQgdGVybWluYWxcIixcbiAgICAgICAgICAgIFwiY29udmVydFwiOntcbiAgICAgICAgICAgICAgICBcImRlY2lzaW9uXCI6IFwiQ29tbWUgbm91ZCBkZSBkw6ljaXNpb25cIixcbiAgICAgICAgICAgICAgICBcImNoYW5jZVwiOiBcIkNvbW1lIG5vdWQgYWzDqWF0b2lyZVwiLFxuICAgICAgICAgICAgICAgIFwidGVybWluYWxcIjogXCJDb21tZSB1biBub2V1ZCB0ZXJtaW5hbFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJzZWxlY3RTdWJ0cmVlXCI6IFwiU8OpbGVjdGlvbm5lciB1bmUgc291cy1hcmJvcmVzY2VuY2VcIixcbiAgICAgICAgICAgIFwiZm9sZFwiOiBcIlBsaWVyIHNvdXMtYXJicmVcIixcbiAgICAgICAgICAgIFwidW5mb2xkXCI6IFwiRMOpcGxpZXIgYXJicmUgc291cy1hcmJyZVwiLFxuICAgICAgICAgICAgXCJmbGlwU3VidHJlZVwiOiBcIkJhc2N1bGVyIHNvdXMtYXJicmVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVkZ2VcIjp7XG4gICAgICAgICAgICBcImluamVjdERlY2lzaW9uTm9kZVwiOiBcIkluamVjdGVyIHVuIG5vZXVkIGRlIGTDqWNpc2lvblwiLFxuICAgICAgICAgICAgXCJpbmplY3RDaGFuY2VOb2RlXCI6IFwiSW5qZWN0ZXIgdW4gbm9ldWQgZGUgY2hhbmNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0ZXh0XCI6e1xuICAgICAgICAgICAgXCJkZWxldGVcIjogXCJFZmZhY2VyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ2YWxpZGF0aW9uXCI6e1xuICAgICAgICBcImluY29tcGxldGVQYXRoXCI6IFwiUGFyY291cnMgbm9uIHRlcm1pbsOpIHBhciBub2V1ZCB0ZXJtaW5hbFwiLFxuICAgICAgICBcInByb2JhYmlsaXR5RG9Ob3RTdW1VcFRvMVwiOiBcIkxhIHNvbW1lIGRlcyBwcm9iYWJpbGl0w6lzIG4nZXN0IHBhcyAxIG91IHBsdXNcIixcbiAgICAgICAgXCJpbnZhbGlkUHJvYmFiaWxpdHlcIjogXCJQcm9iYWJpbGl0w6kgaW52YWxpZGUgLSBsZSBib3JkICN7e251bWJlcn19XCIsXG4gICAgICAgIFwiaW52YWxpZFBheW9mZlwiOiBcIkF2YW50YWdlIGludmFsaWRlIC0gbGUgYm9yZCAje3tudW1iZXJ9fVwiXG4gICAgfSxcbiAgICBcImdyb3dsXCI6e1xuICAgICAgICBcImJydXNoRGlzYWJsZWRcIjogXCJCcm9zc2UgZGUgc8OpbGVjdGlvbiBkw6lzYWN0aXbDqWVcIixcbiAgICAgICAgXCJicnVzaEVuYWJsZWRcIjogXCJCcm9zc2UgZGUgc8OpbGVjdGlvbiBhY3RpdsOpZVwiXG4gICAgfSxcbiAgICBcInRvb2x0aXBcIjp7XG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJBdmFudGFnZSB7e251bWJlcn19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcInt7bmFtZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImFnZ3JlZ2F0ZWRQYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIkF2YW50YWdlIGFncsOpZ8OpIHt7bnVtYmVyfX1cIixcbiAgICAgICAgICAgICAgICBcIm5hbWVkXCI6IFwiQWdyw6lnw6kgIHt7bmFtZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInByb2JhYmlsaXR5VG9FbnRlclwiOiBcIlByb2JhYmlsaXTDqSBkJ2VudHLDqWVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVkZ2VcIjp7XG4gICAgICAgICAgICBcInBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiQXZhbnRhZ2Uge3tudW1iZXJ9fToge3t2YWx1ZX19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcInt7bmFtZX19OiB7e3ZhbHVlfX1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicHJvYmFiaWxpdHlcIjogXCJQcm9iYWJpbGl0w6k6IHt7dmFsdWV9fVwiXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgaTE4bmV4dCBmcm9tICdpMThuZXh0JztcbmltcG9ydCAqIGFzIGVuIGZyb20gJy4vZW4uanNvbidcbmltcG9ydCAqIGFzIHBsIGZyb20gJy4vcGwuanNvbidcbmltcG9ydCAqIGFzIGl0IGZyb20gJy4vaXQuanNvbidcbmltcG9ydCAqIGFzIGRlIGZyb20gJy4vZGUuanNvbidcbmltcG9ydCAqIGFzIGZyIGZyb20gJy4vZnIuanNvbidcblxuZXhwb3J0IGNsYXNzIGkxOG57XG5cbiAgICBzdGF0aWMgJGluc3RhbmNlO1xuICAgIHN0YXRpYyBsYW5ndWFnZTtcblxuICAgIHN0YXRpYyBpbml0KGxuZyl7XG4gICAgICAgIGkxOG4ubGFuZ3VhZ2UgPSBsbmc7XG4gICAgICAgIGxldCByZXNvdXJjZXMgPSB7XG4gICAgICAgICAgICBlbjoge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBlblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsOiB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IHBsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXQ6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogaXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZToge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBkZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZyOiB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IGZyXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGkxOG4uJGluc3RhbmNlID0gaTE4bmV4dC5jcmVhdGVJbnN0YW5jZSh7XG4gICAgICAgICAgICBsbmc6IGxuZyxcbiAgICAgICAgICAgIGZhbGxiYWNrTG5nOiAnZW4nLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXNcbiAgICAgICAgfSwgKGVyciwgdCkgPT4ge1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdChrZXksIG9wdCl7XG4gICAgICAgIHJldHVybiBpMThuLiRpbnN0YW5jZS50KGtleSwgb3B0KVxuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcImNvbnRleHRNZW51XCI6e1xuICAgICAgICBcIm1haW5cIjp7XG4gICAgICAgICAgICBcImFkZERlY2lzaW9uTm9kZVwiOiBcIkFnZ2l1bmdpIHVuIG5vZG8gZGkgZGVjaXNpb25lXCIsXG4gICAgICAgICAgICBcImFkZENoYW5jZU5vZGVcIjogXCJBZ2dpdW5naSB1biBub2RvIG9wcG9ydHVuaXTDoFwiLFxuICAgICAgICAgICAgXCJhZGRUZXh0XCI6IFwiQWdnaXVuZ2kgdGVzdG9cIixcbiAgICAgICAgICAgIFwicGFzdGVcIjogXCJJbmNvbGxhXCIsXG4gICAgICAgICAgICBcInNlbGVjdEFsbE5vZGVzXCI6IFwiU2VsZXppb25hIHR1dHRpIGkgbm9kaVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwiY29weVwiOiBcIkNvcGlhXCIsXG4gICAgICAgICAgICBcImN1dFwiOiBcIlRhZ2xpYVwiLFxuICAgICAgICAgICAgXCJwYXN0ZVwiOiBcIkluY29sbGFcIixcbiAgICAgICAgICAgIFwiZGVsZXRlXCI6IFwiQ2FuY2VsbGFcIixcbiAgICAgICAgICAgIFwiYWRkRGVjaXNpb25Ob2RlXCI6IFwiQWdnaXVuZ2kgdW4gbm9kbyBkaSBkZWNpc2lvbmVcIixcbiAgICAgICAgICAgIFwiYWRkQ2hhbmNlTm9kZVwiOiBcIkFnZ2l1bmdpIHVuIG5vZG8gb3Bwb3J0dW5pdMOgXCIsXG4gICAgICAgICAgICBcImFkZFRlcm1pbmFsTm9kZVwiOiBcIkFnZ2l1bmdpIHVuIG5vZG8gdGVybWluYWxlXCIsXG4gICAgICAgICAgICBcImNvbnZlcnRcIjp7XG4gICAgICAgICAgICAgICAgXCJkZWNpc2lvblwiOiBcIkNvbWUgRGVjaXNpb24gTm9kZVwiLFxuICAgICAgICAgICAgICAgIFwiY2hhbmNlXCI6IFwiQ29tZSBDaGFuY2UgTm9kZVwiLFxuICAgICAgICAgICAgICAgIFwidGVybWluYWxcIjogXCJDb21lIFRlcm1pbmFsIE5vZGVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2VsZWN0U3VidHJlZVwiOiBcIlNlbGV6aW9uYSBTb3R0by1hbGJlcm9cIixcbiAgICAgICAgICAgIFwiZm9sZFwiOiBcIlBpZWdhIHNvdHRvLWFsYmVyb1wiLFxuICAgICAgICAgICAgXCJ1bmZvbGRcIjogXCJEaXNwaWVnYXJzaSBzb3R0by1hbGJlcm9cIixcdFx0XHRcbiAgICAgICAgICAgIFwiZmxpcFN1YnRyZWVcIjogXCJSaWJhbHRhIHNvdHRvLWFsYmVyb1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWRnZVwiOntcbiAgICAgICAgICAgIFwiaW5qZWN0RGVjaXNpb25Ob2RlXCI6IFwiSW5pZXR0YSBub2RvIGRpIGRlY2lzaW9uZVwiLFxuICAgICAgICAgICAgXCJpbmplY3RDaGFuY2VOb2RlXCI6IFwiSW5pZXR0YSBub2RvIG9wcG9ydHVuaXTDoFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGV4dFwiOntcbiAgICAgICAgICAgIFwiZGVsZXRlXCI6IFwiQ2FuY2VsbGFcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZhbGlkYXRpb25cIjp7XG4gICAgICAgIFwiaW5jb21wbGV0ZVBhdGhcIjogXCJQZXJjb3JzbyBzZW56YSBub2RvIHRlcm1pbmFsZVwiLFxuICAgICAgICBcInByb2JhYmlsaXR5RG9Ob3RTdW1VcFRvMVwiOiBcIkxhIHNvbW1hIGRlbGxlIHByb2JhYmlsaXTDoCDDqCBkaXZlcnNhIGRhIDFcIixcbiAgICAgICAgXCJpbnZhbGlkUHJvYmFiaWxpdHlcIjogXCJQcm9iYWJpbGl0w6Agbm9uIHZhbGlkYSAtIGJvcmRvICN7e251bWJlcn19XCIsXG4gICAgICAgIFwiaW52YWxpZFBheW9mZlwiOiBcIlNhbGRvIG5vbiB2YWxpZG8gLSBib3JkbyAje3tudW1iZXJ9fVwiXG4gICAgfSxcbiAgICBcImdyb3dsXCI6e1xuICAgICAgICBcImJydXNoRGlzYWJsZWRcIjogXCJTZWxlemlvbmUgcGVubmVsbG8gZGlzYWJpbGl0YXRhXCIsXG4gICAgICAgIFwiYnJ1c2hFbmFibGVkXCI6IFwiU2VsZXppb25lIHBlbm5lbGxvIGFiaWxpdGF0YVwiXG4gICAgfSxcbiAgICBcInRvb2x0aXBcIjp7XG4gICAgICAgIFwibm9kZVwiOntcbiAgICAgICAgICAgIFwicGF5b2ZmXCI6IHtcbiAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogXCJTYWxkbyB7e251bWJlcn19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcInt7bmFtZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImFnZ3JlZ2F0ZWRQYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIlNhbGRvIGFnZ3JlZ2F0byB7e251bWJlcn19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcIkFnZ3JlZ2F0byB7e25hbWV9fVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwcm9iYWJpbGl0eVRvRW50ZXJcIjogXCJQcm9iYWJpbGl0w6AgZGEgaW5zZXJpcmVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVkZ2VcIjp7XG4gICAgICAgICAgICBcInBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiU2FsZG8ge3tudW1iZXJ9fToge3t2YWx1ZX19XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lZFwiOiBcInt7bmFtZX19OiB7e3ZhbHVlfX1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwicHJvYmFiaWxpdHlcIjogXCJQcm9iYWJpbGl0w6A6IHt7dmFsdWV9fVwiXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG5cbiAgICBcImNvbnRleHRNZW51XCI6e1xuICAgICAgICBcIm1haW5cIjp7XG4gICAgICAgICAgICBcImFkZERlY2lzaW9uTm9kZVwiOiBcIkRvZGFqIFfEmXplxYIgRGVjeXp5am55XCIsXG4gICAgICAgICAgICBcImFkZENoYW5jZU5vZGVcIjogXCJEb2RhaiBXxJl6ZcWCIExvc293eVwiLFxuICAgICAgICAgICAgXCJhZGRUZXh0XCI6IFwiRG9kYWogVGVrc3RcIixcbiAgICAgICAgICAgIFwicGFzdGVcIjogXCJXa2xlalwiLFxuICAgICAgICAgICAgXCJzZWxlY3RBbGxOb2Rlc1wiOiBcIlphem5hY3ogd3N6eXN0a2llIHfEmXrFgnlcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5vZGVcIjp7XG4gICAgICAgICAgICBcImNvcHlcIjogXCJLb3BpdWpcIixcbiAgICAgICAgICAgIFwiY3V0XCI6IFwiV3l0bmlqXCIsXG4gICAgICAgICAgICBcInBhc3RlXCI6IFwiV2tsZWpcIixcbiAgICAgICAgICAgIFwiZGVsZXRlXCI6IFwiVXN1xYRcIixcbiAgICAgICAgICAgIFwiYWRkRGVjaXNpb25Ob2RlXCI6IFwiRG9kYWogV8SZemXFgiBEZWN5enlqbnlcIixcbiAgICAgICAgICAgIFwiYWRkQ2hhbmNlTm9kZVwiOiBcIkRvZGFqIFfEmXplxYIgTG9zb3d5XCIsXG4gICAgICAgICAgICBcImFkZFRlcm1pbmFsTm9kZVwiOiBcIkRvZGFqIFfEmXplxYIgS2/FhGNvd3lcIixcbiAgICAgICAgICAgIFwiY29udmVydFwiOntcbiAgICAgICAgICAgICAgICBcImRlY2lzaW9uXCI6IFwiSmFrbyBXxJl6ZcWCIERlY3l6eWpueVwiLFxuICAgICAgICAgICAgICAgIFwiY2hhbmNlXCI6IFwiSmFrbyBXxJl6ZcWCIExvc293eVwiLFxuICAgICAgICAgICAgICAgIFwidGVybWluYWxcIjogXCJKYWtvIFfEmXplxYIgS2/FhGNvd3lcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic2VsZWN0U3VidHJlZVwiOiBcIlphem5hY3ogcG9kZHJ6ZXdvXCIsXG4gICAgICAgICAgICBcImZvbGRcIjogXCJad2nFhCBwb2Rkcnpld29cIixcbiAgICAgICAgICAgIFwidW5mb2xkXCI6IFwiUm96d2nFhCBwb2Rkcnpld29cIixcbiAgICAgICAgICAgIFwiZmxpcFN1YnRyZWVcIjogXCJQcnpld3LDs8SHIHBvZGRyemV3b1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWRnZVwiOntcbiAgICAgICAgICAgIFwiaW5qZWN0RGVjaXNpb25Ob2RlXCI6IFwiV3N0cnp5a25paiBXxJl6ZcWCIERlY3l6eWpueVwiLFxuICAgICAgICAgICAgXCJpbmplY3RDaGFuY2VOb2RlXCI6IFwiV3N0cnp5a25paiBXxJl6ZcWCIExvc293eVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGV4dFwiOntcbiAgICAgICAgICAgIFwiZGVsZXRlXCI6IFwiVXN1xYRcIlxuICAgICAgICB9XG4gICAgfSxcblxuICAgIFwidmFsaWRhdGlvblwiOntcbiAgICAgICAgXCJpbmNvbXBsZXRlUGF0aFwiOiBcIk9zdGF0bmltIHfEmXrFgmVtIHcgxZtjaWXFvGNlIHBvd2luaWVuIGJ5xIcgV8SZemXFgiBLb8WEY293eVwiLFxuICAgICAgICBcInByb2JhYmlsaXR5RG9Ob3RTdW1VcFRvMVwiOiBcIlByYXdkb3BvZG9iaWXFhHN0d2EgbmllIHN1bXVqxIUgc2llIGRvIDFcIixcbiAgICAgICAgXCJpbnZhbGlkUHJvYmFiaWxpdHlcIjogXCJOaWVwb3ByYXduZSBwcmF3ZG9wb2RvYmllxYRzdHdvIG5hIGtyYXfEmWR6aSAje3tudW1iZXJ9fVwiLFxuICAgICAgICBcImludmFsaWRQYXlvZmZcIjogXCJOaWVwb3ByYXduYSB3eXDFgmF0YSBuYSBrcmF3xJlkemkgI3t7bnVtYmVyfX1cIlxuICAgIH0sXG4gICAgXCJncm93bFwiOntcbiAgICAgICAgXCJicnVzaERpc2FibGVkXCI6IFwiWmF6bmFjemFuaWUgd3nFgsSFY3pvbmVcIixcbiAgICAgICAgXCJicnVzaEVuYWJsZWRcIjogXCJaYXpuYWN6YW5pZSB3xYLEhWN6b25lXCJcbiAgICB9LFxuICAgIFwidG9vbHRpcFwiOntcbiAgICAgICAgXCJub2RlXCI6e1xuICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIld5cMWCYXRhIHt7bnVtYmVyfX1cIixcbiAgICAgICAgICAgICAgICBcIm5hbWVkXCI6IFwie3tuYW1lfX1cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiYWdncmVnYXRlZFBheW9mZlwiOiB7XG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IFwiWmFncmVnb3dhbmEgd3lwxYJhdGEge3tudW1iZXJ9fVwiLFxuICAgICAgICAgICAgICAgIFwibmFtZWRcIjogXCJaYWdyZWdvd2FuYSB7e25hbWV9fVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwcm9iYWJpbGl0eVRvRW50ZXJcIjogXCJQcmF3ZG9wb2RvYmllxYRzdHdvIHdlasWbY2lhXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlZGdlXCI6e1xuICAgICAgICAgICAgXCJwYXlvZmZcIjoge1xuICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBcIld5cMWCYXRhIHt7bnVtYmVyfX06IHt7dmFsdWV9fVwiLFxuICAgICAgICAgICAgICAgIFwibmFtZWRcIjogXCJ7e25hbWV9fToge3t2YWx1ZX19XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInByb2JhYmlsaXR5XCI6IFwiUHJhd2RvcG9kb2JpZcWEc3R3bzoge3t2YWx1ZX19XCJcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7RDNFeHRlbnNpb25zfSBmcm9tICcuL2QzLWV4dGVuc2lvbnMnXG5EM0V4dGVuc2lvbnMuZXh0ZW5kKCk7XG5cbmV4cG9ydCAqIGZyb20gJy4vdHJlZS1kZXNpZ25lcidcbmV4cG9ydCAqIGZyb20gJy4vYXBwLXV0aWxzJ1xuZXhwb3J0ICogZnJvbSAnLi90ZW1wbGF0ZXMnXG5leHBvcnQgKiBmcm9tICcuL3Rvb2x0aXAnXG5leHBvcnQgKiBmcm9tICcuL2QzLWV4dGVuc2lvbnMnXG5leHBvcnQge2RlZmF1bHQgYXMgZDN9IGZyb20gJy4vZDMnXG5cblxuIiwiaW1wb3J0IHtVdGlsc30gZnJvbSAnc2QtdXRpbHMnXG5pbXBvcnQge2RvbWFpbiBhcyBtb2RlbH0gZnJvbSAnc2QtbW9kZWwnXG5pbXBvcnQgKiBhcyBkMyBmcm9tICcuL2QzJ1xuaW1wb3J0IGNpcmNsZVN5bWJvbCBmcm9tICcuL3N5bWJvbHMvY2lyY2xlJ1xuaW1wb3J0IHRyaWFuZ2xlU3ltYm9sIGZyb20gJy4vc3ltYm9scy90cmlhbmdsZSdcbmltcG9ydCB7QXBwVXRpbHN9IGZyb20gXCIuL2FwcC11dGlsc1wiO1xuXG4vKlRyZWUgbGF5b3V0IG1hbmFnZXIqL1xuZXhwb3J0IGNsYXNzIExheW91dHtcblxuICAgIHRyZWVEZXNpZ25lcjtcbiAgICBkYXRhO1xuICAgIGNvbmZpZztcblxuICAgIG5vZGVUeXBlVG9TeW1ib2wgPSB7XG4gICAgICAgICdkZWNpc2lvbic6IGQzLnN5bWJvbFNxdWFyZSxcbiAgICAgICAgJ2NoYW5jZSc6IGNpcmNsZVN5bWJvbCxcbiAgICAgICAgXCJ0ZXJtaW5hbFwiOiB0cmlhbmdsZVN5bWJvbCxcbiAgICAgICAgJ2Nsb25lJzogZDMuc3ltYm9sU3RhclxuICAgIH07XG5cbiAgICBzdGF0aWMgTUFOVUFMX0xBWU9VVF9OQU1FID0gJ21hbnVhbCc7XG5cblxuICAgIG9uQXV0b0xheW91dENoYW5nZWQ9W107XG5cbiAgICBub2RlVHlwZU9yZGVyID0ge1xuICAgICAgICAnZGVjaXNpb24nIDogMCxcbiAgICAgICAgJ2NoYW5jZSc6IDAsXG4gICAgICAgICd0ZXJtaW5hbCc6IDFcbiAgICB9O1xuXG4gICAgdHJlZU1hcmdpbiA9IDUwO1xuICAgIHRhcmdldFN5bWJvbFNpemU9e307XG4gICAgbm9kZVNlcGFyYXRpb24gPSAoYSwgYikgPT4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDEuMlxuXG4gICAgY29uc3RydWN0b3IodHJlZURlc2lnbmVyLCBkYXRhLCBjb25maWcpe1xuICAgICAgICB0aGlzLnRyZWVEZXNpZ25lciA9IHRyZWVEZXNpZ25lcjtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICB9XG5cbiAgICB1cGRhdGUobm9kZSl7XG4gICAgICAgIGlmKG5vZGUgJiYgbm9kZS4kcGFyZW50KXtcbiAgICAgICAgICAgIG5vZGUuJHBhcmVudC5jaGlsZEVkZ2VzLnNvcnQoKGEsYik9PmEuY2hpbGROb2RlLmxvY2F0aW9uLnkgLSBiLmNoaWxkTm9kZS5sb2NhdGlvbi55KVxuICAgICAgICB9XG4gICAgICAgIGlmKCF0aGlzLmlzTWFudWFsTGF5b3V0KCkpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0b0xheW91dCh0aGlzLmNvbmZpZy50eXBlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZihub2RlKXtcbiAgICAgICAgICAgIHRoaXMubW92ZU5vZGVUb0VtcHR5UGxhY2Uobm9kZSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy50cmVlRGVzaWduZXIucmVkcmF3KHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNNYW51YWxMYXlvdXQoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnR5cGUgPT09IExheW91dC5NQU5VQUxfTEFZT1VUX05BTUU7XG4gICAgfVxuXG4gICAgZ2V0TmV3Q2hpbGRMb2NhdGlvbihwYXJlbnQpe1xuICAgICAgICBpZighcGFyZW50KXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbW9kZWwuUG9pbnQodGhpcy5nZXROb2RlTWluWCgpLCB0aGlzLmdldE5vZGVNaW5ZKCkpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHggPSBwYXJlbnQubG9jYXRpb24ueCArIHRoaXMuY29uZmlnLmdyaWRXaWR0aDtcbiAgICAgICAgdmFyIHkgPSBwYXJlbnQubG9jYXRpb24ueTtcbiAgICAgICAgaWYocGFyZW50LmNoaWxkRWRnZXMubGVuZ3RoKXtcbiAgICAgICAgICAgIHkgPSBwYXJlbnQuY2hpbGRFZGdlc1twYXJlbnQuY2hpbGRFZGdlcy5sZW5ndGgtMV0uY2hpbGROb2RlLmxvY2F0aW9uLnkrMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgbW9kZWwuUG9pbnQoeCwgeSlcbiAgICB9XG5cbiAgICBnZXRJbmplY3RlZE5vZGVMb2NhdGlvbihlZGdlKXtcblxuICAgICAgICB2YXIgcCA9IGVkZ2UuJGxpbmVQb2ludHNbMl07XG5cbiAgICAgICAgcmV0dXJuIG5ldyBtb2RlbC5Qb2ludChwWzBdLCBwWzFdKVxuICAgIH1cblxuICAgIG1vdmVOb2RlVG9FbXB0eVBsYWNlKG5vZGUsIHJlZHJhd0lmQ2hhbmdlZD10cnVlKXtcbiAgICAgICAgdmFyIHBvc2l0aW9uTWFwID0ge307XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgbm9kZS5sb2NhdGlvbi54ID0gTWF0aC5tYXgodGhpcy5nZXROb2RlTWluWChub2RlKSwgbm9kZS5sb2NhdGlvbi54KTtcbiAgICAgICAgbm9kZS5sb2NhdGlvbi55ID0gTWF0aC5tYXgodGhpcy5nZXROb2RlTWluWShub2RlKSwgbm9kZS5sb2NhdGlvbi55KTtcblxuXG4gICAgICAgIHRoaXMubm9kZXNTb3J0ZWRCeVggPSB0aGlzLmRhdGEubm9kZXMuc2xpY2UoKTtcbiAgICAgICAgdGhpcy5ub2Rlc1NvcnRlZEJ5WC5zb3J0KChhLGIpPT5hLmxvY2F0aW9uLnggLSBiLmxvY2F0aW9uLngpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGZpbmRDb2xsaWRpbmdOb2RlKG5vZGUsIGxvY2F0aW9uKXtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5maW5kKHNlbGYubm9kZXNTb3J0ZWRCeVgsIG49PntcbiAgICAgICAgICAgICAgICBpZihub2RlID09IG4pe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG1hcmdpbiA9IHNlbGYuY29uZmlnLm5vZGVTaXplLzM7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBuLmxvY2F0aW9uLng7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSBuLmxvY2F0aW9uLnk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGxvY2F0aW9uLnggLSBtYXJnaW4gPD0geCAmJiBsb2NhdGlvbi54ICsgbWFyZ2luID49IHhcbiAgICAgICAgICAgICAgICAgICAgJiYgbG9jYXRpb24ueSAtIG1hcmdpbiA8PSB5ICYmIGxvY2F0aW9uLnkgKyBtYXJnaW4gPj0geSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0ZXBYID0gdGhpcy5jb25maWcubm9kZVNpemUvMjtcbiAgICAgICAgdmFyIHN0ZXBZID0gdGhpcy5jb25maWcubm9kZVNpemUrMTA7XG4gICAgICAgIHZhciBzdGVwWHNhbWVQYXJlbnQgPSAwO1xuICAgICAgICB2YXIgc3RlcFlzYW1lUGFyZW50ID0gNzU7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBjb2xpZGluZ05vZGU7XG4gICAgICAgIHZhciBuZXdMb2NhdGlvbiA9IG5ldyBtb2RlbC5Qb2ludChub2RlLmxvY2F0aW9uKTtcbiAgICAgICAgd2hpbGUoY29saWRpbmdOb2RlID0gZmluZENvbGxpZGluZ05vZGUobm9kZSwgbmV3TG9jYXRpb24pKXtcbiAgICAgICAgICAgIGNoYW5nZWQ9dHJ1ZTtcbiAgICAgICAgICAgIHZhciBzYW1lUGFyZW50ID0gbm9kZS4kcGFyZW50ICYmIGNvbGlkaW5nTm9kZS4kcGFyZW50ICYmIG5vZGUuJHBhcmVudD09PWNvbGlkaW5nTm9kZS4kcGFyZW50O1xuICAgICAgICAgICAgaWYoc2FtZVBhcmVudCl7XG4gICAgICAgICAgICAgICAgbmV3TG9jYXRpb24ubW92ZShzdGVwWHNhbWVQYXJlbnQsIHN0ZXBZc2FtZVBhcmVudCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBuZXdMb2NhdGlvbi5tb3ZlKHN0ZXBYLCBzdGVwWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoY2hhbmdlZCl7XG4gICAgICAgICAgICBub2RlLm1vdmVUbyhuZXdMb2NhdGlvbi54LG5ld0xvY2F0aW9uLnksIHRydWUpO1xuICAgICAgICAgICAgaWYocmVkcmF3SWZDaGFuZ2VkKXtcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5yZWRyYXcodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNhYmxlQXV0b0xheW91dCgpe1xuICAgICAgICB0aGlzLmNvbmZpZy50eXBlID0gTGF5b3V0Lk1BTlVBTF9MQVlPVVRfTkFNRTtcbiAgICAgICAgdGhpcy5fZmlyZU9uQXV0b0xheW91dENoYW5nZWRDYWxsYmFja3MoKTtcbiAgICB9XG5cblxuICAgIG5vZGVTeW1ib2xTaXplID0ge307XG4gICAgZHJhd05vZGVTeW1ib2wocGF0aCwgdHJhbnNpdGlvbil7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbm9kZVNpemUgPSB0aGlzLmNvbmZpZy5ub2RlU2l6ZTtcbiAgICAgICAgdGhpcy5ub2RlU3ltYm9sID0gZDMuc3ltYm9sKCkudHlwZShkPT4gc2VsZi5ub2RlVHlwZVRvU3ltYm9sW2QudHlwZV0pXG4gICAgICAgICAgICAuc2l6ZShkPT5zZWxmLm5vZGVTeW1ib2xTaXplW2QuaWRdID8gVXRpbHMuZ2V0KHNlbGYudGFyZ2V0U3ltYm9sU2l6ZSwgZC50eXBlK1wiWydcIitzZWxmLmNvbmZpZy5ub2RlU2l6ZStcIiddXCIsIDY0KSA6IDY0KTtcblxuICAgICAgICBwYXRoXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gcGF0aC5hdHRyKFwiZFwiKTtcbiAgICAgICAgICAgICAgICBpZighcHJldil7XG4gICAgICAgICAgICAgICAgICAgIHBhdGguYXR0cihcImRcIiwgc2VsZi5ub2RlU3ltYm9sKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSBVdGlscy5nZXQoc2VsZi50YXJnZXRTeW1ib2xTaXplLCBkLnR5cGUrXCJbJ1wiK3NlbGYuY29uZmlnLm5vZGVTaXplK1wiJ11cIik7XG4gICAgICAgICAgICAgICAgaWYoIXNpemUpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm94ID0gcGF0aC5ub2RlKCkuZ2V0QkJveCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBNYXRoLm1pbihub2RlU2l6ZSAvIGJveC53aWR0aCwgbm9kZVNpemUgLyBib3guaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IGVycm9yICogZXJyb3IgKiAoc2VsZi5ub2RlU3ltYm9sU2l6ZVtkLmlkXXx8NjQpO1xuICAgICAgICAgICAgICAgICAgICBVdGlscy5zZXQoc2VsZi50YXJnZXRTeW1ib2xTaXplLCBkLnR5cGUrXCJbJ1wiK3NlbGYuY29uZmlnLm5vZGVTaXplK1wiJ11cIiwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRyYW5zaXRpb24pe1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gIHBhdGgudHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubm9kZVN5bWJvbFNpemVbZC5pZF0gPSBzaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRoLmF0dHIoXCJkXCIsIHNlbGYubm9kZVN5bWJvbCk7XG4gICAgICAgICAgICAgICAgaWYodHJhbnNpdGlvbil7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubm9kZVN5bWJvbFNpemVbZC5pZF0gPSBzaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5vZGVMYWJlbFBvc2l0aW9uKHNlbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uXG4gICAgICAgICAgICAuYXR0cigneCcsIDApXG4gICAgICAgICAgICAuYXR0cigneScsIC10aGlzLmNvbmZpZy5ub2RlU2l6ZSAvIDIgLSA3KVxuICAgIH1cblxuICAgIG5vZGVQYXlvZmZQb3NpdGlvbihzZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIExheW91dC5zZXRIYW5naW5nUG9zaXRpb24oc2VsZWN0aW9uKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxuICAgICAgICAgICAgLmF0dHIoJ3knLCB0aGlzLmNvbmZpZy5ub2RlU2l6ZSAvIDIgKyA3KVxuICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgfVxuXG4gICAgbm9kZUFnZ3JlZ2F0ZWRQYXlvZmZQb3NpdGlvbihzZWxlY3Rpb24pIHtcbiAgICAgICAgdmFyIHggPSB0aGlzLmNvbmZpZy5ub2RlU2l6ZSAvIDIgKyA3O1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGVjdGlvblxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB4KVxuICAgICAgICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBsZXQgZm9udFNpemUgPSBwYXJzZUludChBcHBVdGlscy5nZXRGb250U2l6ZSh0aGlzKSk7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gZC5kaXNwbGF5VmFsdWUoJ2FnZ3JlZ2F0ZWRQYXlvZmYnKTtcbiAgICAgICAgICAgICAgICBsZXQgbnVtYmVyID0gVXRpbHMuaXNBcnJheShpdGVtcykgPyBpdGVtcy5maWx0ZXIoaXQ9Pml0ICE9PSB1bmRlZmluZWQpLmxlbmd0aCA6IDE7XG4gICAgICAgICAgICAgICAgaWYobnVtYmVyPjEpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLXRoaXMuZ2V0QkJveCgpLmhlaWdodC8yICsgZm9udFNpemUvMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLm1heCgyLCAxLjgqIHNlbGYuY29uZmlnLm5vZGVTaXplL2ZvbnRTaXplKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGVjdGlvbi5zZWxlY3RBbGwoJ3RzcGFuJykuYXR0cigneCcsIHgpO1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgICAgICAgICAgLy8gLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAvLyAuYXR0cignZG9taW5hbnQtYmFzZWxpbmUnLCAnaGFuZ2luZycpXG4gICAgfVxuXG4gICAgbm9kZVByb2JhYmlsaXR5VG9FbnRlclBvc2l0aW9uKHNlbGVjdGlvbikge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIExheW91dC5zZXRIYW5naW5nUG9zaXRpb24oc2VsZWN0aW9uKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNvbmZpZy5ub2RlU2l6ZSAvIDIgKyA3KVxuICAgICAgICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBsZXQgZm9udFNpemUgPSBwYXJzZUludChBcHBVdGlscy5nZXRGb250U2l6ZSh0aGlzKSk7XG4gICAgICAgICAgICAgICAgbGV0IGFnZ3JlZ2F0ZWRQYXlvZmZzID0gZC5kaXNwbGF5VmFsdWUoJ2FnZ3JlZ2F0ZWRQYXlvZmYnKTtcbiAgICAgICAgICAgICAgICBsZXQgYWdncmVnYXRlZFBheW9mZnNOdW1iZXIgPSBVdGlscy5pc0FycmF5KGFnZ3JlZ2F0ZWRQYXlvZmZzKSA/IGFnZ3JlZ2F0ZWRQYXlvZmZzLmZpbHRlcihpdD0+aXQgIT09IHVuZGVmaW5lZCkubGVuZ3RoIDogMTtcbiAgICAgICAgICAgICAgICBpZihhZ2dyZWdhdGVkUGF5b2Zmc051bWJlcj4xKXtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9udFNpemUqMC42XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDIsIDEuOCogc2VsZi5jb25maWcubm9kZVNpemUvZm9udFNpemUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgLy8gLmF0dHIoJ2RvbWluYW50LWJhc2VsaW5lJywgJ2NlbnRyYWwnKVxuICAgIH1cblxuICAgIG5vZGVJbmRpY2F0b3JQb3NpdGlvbihzZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNvbmZpZy5ub2RlU2l6ZSAvIDIgKyA4KVxuICAgICAgICAgICAgLmF0dHIoJ3knLCAtIHRoaXMuY29uZmlnLm5vZGVTaXplLzIpXG4gICAgICAgICAgICAuYXR0cignZG9taW5hbnQtYmFzZWxpbmUnLCAnY2VudHJhbCcpXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICB9XG5cbiAgICBub2RlVW5mb2xkQnV0dG9uUG9zaXRpb24oc2VsZWN0aW9uKSB7XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNvbmZpZy5ub2RlU2l6ZSAvIDIgKyA1KVxuICAgICAgICAgICAgLmF0dHIoJ3knLCAwKVxuICAgICAgICAgICAgLmF0dHIoJ2RvbWluYW50LWJhc2VsaW5lJywgJ2NlbnRyYWwnKVxuICAgIH1cblxuICAgIGVkZ2VMaW5lRChlZGdlKXtcbiAgICAgICAgdmFyIGxpbmUgPSBkMy5saW5lKClcbiAgICAgICAgICAgIC54KGQ9PiBkWzBdKVxuICAgICAgICAgICAgLnkoZD0+IGRbMV0pO1xuICAgICAgICAvLyAuY3VydmUoZDMuY3VydmVDYXRtdWxsUm9tLmFscGhhKDAuNSkpO1xuXG5cbiAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBlZGdlLnBhcmVudE5vZGU7XG4gICAgICAgIHZhciBjaGlsZE5vZGUgPSBlZGdlLmNoaWxkTm9kZTtcblxuICAgICAgICB2YXIgZFggPSBjaGlsZE5vZGUubG9jYXRpb24ueCAtIHBhcmVudE5vZGUubG9jYXRpb24ueDtcbiAgICAgICAgdmFyIGRZID0gY2hpbGROb2RlLmxvY2F0aW9uLnkgLSBwYXJlbnROb2RlLmxvY2F0aW9uLnk7XG5cbiAgICAgICAgdmFyIHNpZ24gPSBkWD49MCA/IDEgOiAtMTtcblxuICAgICAgICB2YXIgc2xhbnRTdGFydFhPZmZzZXQgPSBNYXRoLm1pbihkWC8yLCB0aGlzLmNvbmZpZy5ub2RlU2l6ZS8yKzEwKTtcbiAgICAgICAgdmFyIHNsYW50V2lkdGggPSBNYXRoLm1pbih0aGlzLmNvbmZpZy5lZGdlU2xhbnRXaWR0aE1heCwgTWF0aC5tYXgoZFgvMiAtIHNsYW50U3RhcnRYT2Zmc2V0LCAwKSk7XG5cbiAgICAgICAgdmFyIHBvaW50MSA9IFtwYXJlbnROb2RlLmxvY2F0aW9uLnggK3RoaXMuY29uZmlnLm5vZGVTaXplLzIgKyAxLCBwYXJlbnROb2RlLmxvY2F0aW9uLnldO1xuICAgICAgICB2YXIgcG9pbnQyID0gW01hdGgubWF4KHBhcmVudE5vZGUubG9jYXRpb24ueCtzbGFudFN0YXJ0WE9mZnNldCwgcG9pbnQxWzBdKSwgcGFyZW50Tm9kZS5sb2NhdGlvbi55XTtcbiAgICAgICAgdmFyIHBvaW50MyA9IFtwYXJlbnROb2RlLmxvY2F0aW9uLngrc2xhbnRTdGFydFhPZmZzZXQrc2xhbnRXaWR0aCwgY2hpbGROb2RlLmxvY2F0aW9uLnldO1xuICAgICAgICB2YXIgcG9pbnQ0ID0gW2NoaWxkTm9kZS5sb2NhdGlvbi54IC0gKHNpZ24qKE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuY29uZmlnLm5vZGVTaXplLzIrOCwgZFgvMikpKSksIGNoaWxkTm9kZS5sb2NhdGlvbi55XTtcbiAgICAgICAgLy8gdmFyIHBvaW50MiA9IFtwYXJlbnROb2RlLmxvY2F0aW9uLngrZFgvMi1zbGFudFdpZHRoLzIsIHBhcmVudE5vZGUubG9jYXRpb24ueV07XG4gICAgICAgIC8vIHZhciBwb2ludDMgPSBbY2hpbGROb2RlLmxvY2F0aW9uLngtKGRYLzItc2xhbnRXaWR0aC8yKSwgY2hpbGROb2RlLmxvY2F0aW9uLnldO1xuXG4gICAgICAgIGVkZ2UuJGxpbmVQb2ludHMgPSBbcG9pbnQxLCBwb2ludDIsIHBvaW50MywgcG9pbnQ0XTtcbiAgICAgICAgcmV0dXJuIGxpbmUoZWRnZS4kbGluZVBvaW50cyk7XG4gICAgfVxuXG4gICAgZWRnZVBheW9mZlBvc2l0aW9uKHNlbGVjdGlvbikge1xuICAgICAgICBMYXlvdXQuc2V0SGFuZ2luZ1Bvc2l0aW9uKHNlbGVjdGlvbilcbiAgICAgICAgICAgIC5hdHRyKCd4JywgZD0+ZC4kbGluZVBvaW50c1syXVswXSArIDIpXG4gICAgICAgICAgICAuYXR0cigneScsIGQ9PmQuJGxpbmVQb2ludHNbMl1bMV0gKyA3KTtcblxuICAgICAgICBzZWxlY3Rpb24uc2VsZWN0QWxsKCd0c3BhbicpLmF0dHIoJ3gnLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5kYXR1bSgpLiRsaW5lUG9pbnRzWzJdWzBdICsgMlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjtcblxuICAgIH1cblxuICAgIGVkZ2VMYWJlbFBvc2l0aW9uKHNlbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZD0+J3RyYW5zbGF0ZSgnKyhkLiRsaW5lUG9pbnRzWzJdWzBdICsgMikrJywnKyhkLiRsaW5lUG9pbnRzWzJdWzFdIC0gNykrJyknKVxuICAgICAgICAgICAgLy8gLmF0dHIoJ3gnLCBkPT5kLiRsaW5lUG9pbnRzWzJdWzBdICsgMilcbiAgICAgICAgICAgIC8vIC5hdHRyKCd5JywgZD0+ZC4kbGluZVBvaW50c1syXVsxXSAtIDcpXG5cbiAgICB9XG5cbiAgICBlZGdlUHJvYmFiaWxpdHlQb3NpdGlvbihzZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIExheW91dC5zZXRIYW5naW5nUG9zaXRpb24oc2VsZWN0aW9uKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xuICAgICAgICAgICAgICAgIHZhciBtaW4gPSBkLiRsaW5lUG9pbnRzWzJdWzBdICsgMiArIHRoaXMucHJldmlvdXNTaWJsaW5nLmNoaWxkTm9kZXNbMF0uZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgKyA3ICsgbGVuO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChtaW4sIGQuJGxpbmVQb2ludHNbM11bMF0gLSA4KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cigneScsIGQ9PmQuJGxpbmVQb2ludHNbMl1bMV0gKyA3KVxuICAgIH1cblxuICAgIGdldE1pbk1hcmdpbkJldHdlZW5Ob2Rlcygpe1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLm5vZGVTaXplICsgMzA7XG4gICAgfVxuXG5cbiAgICBnZXROb2RlTWluWChkKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZihkICYmIGQuJHBhcmVudCl7Ly8gJiYgIXNlbGYuaXNOb2RlU2VsZWN0ZWQoZC4kcGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuIGQuJHBhcmVudC5sb2NhdGlvbi54ICsgc2VsZi5nZXRNaW5NYXJnaW5CZXR3ZWVuTm9kZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZi5jb25maWcubm9kZVNpemUvMjtcbiAgICB9XG5cbiAgICBnZXROb2RlTWluWShkKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLm5vZGVTaXplLzI7XG4gICAgfVxuXG4gICAgZ2V0Tm9kZU1heFgoZCl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZihkICYmIGQuY2hpbGRFZGdlcy5sZW5ndGgpe1xuICAgICAgICAgICAgcmV0dXJuIGQzLm1pbihkLmNoaWxkRWRnZXMsIGU9PiFlLmNoaWxkTm9kZS4kaGlkZGVuID8gZS5jaGlsZE5vZGUubG9jYXRpb24ueCA6IDk5OTk5OTkpLXNlbGYuZ2V0TWluTWFyZ2luQmV0d2Vlbk5vZGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDk5OTk5OTk7XG4gICAgfVxuXG4gICAgc2V0R3JpZFdpZHRoKHdpZHRoLCB3aXRob3V0U3RhdGVTYXZpbmcpe1xuICAgICAgICB2YXIgc2VsZj10aGlzO1xuICAgICAgICBpZih0aGlzLmNvbmZpZy5ncmlkV2lkdGg9PT13aWR0aCl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYoIXdpdGhvdXRTdGF0ZVNhdmluZyl7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc2F2ZVN0YXRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgZ3JpZFdpZHRoOiBzZWxmLmNvbmZpZy5ncmlkV2lkdGhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5kbzogKGRhdGEpPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEdyaWRXaWR0aChkYXRhLmdyaWRXaWR0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblJlZG86IChkYXRhKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRHcmlkV2lkdGgod2lkdGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcuZ3JpZFdpZHRoPXdpZHRoO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHNldEdyaWRIZWlnaHQoZ3JpZEhlaWdodCwgd2l0aG91dFN0YXRlU2F2aW5nKXtcbiAgICAgICAgdmFyIHNlbGY9dGhpcztcbiAgICAgICAgaWYodGhpcy5jb25maWcuZ3JpZEhlaWdodD09PWdyaWRIZWlnaHQpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKCF3aXRob3V0U3RhdGVTYXZpbmcpe1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNhdmVTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRIZWlnaHQ6IHNlbGYuY29uZmlnLmdyaWRIZWlnaHRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5kbzogKGRhdGEpPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEdyaWRIZWlnaHQoZGF0YS5ncmlkSGVpZ2h0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uUmVkbzogKGRhdGEpPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEdyaWRIZWlnaHQoZ3JpZEhlaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmZpZy5ncmlkSGVpZ2h0PWdyaWRIZWlnaHQ7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgc2V0Tm9kZVNpemUobm9kZVNpemUsIHdpdGhvdXRTdGF0ZVNhdmluZyl7XG4gICAgICAgIHZhciBzZWxmPXRoaXM7XG4gICAgICAgIGlmKHRoaXMuY29uZmlnLm5vZGVTaXplPT09bm9kZVNpemUpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKCF3aXRob3V0U3RhdGVTYXZpbmcpe1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNhdmVTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVTaXplOiBzZWxmLmNvbmZpZy5ub2RlU2l6ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25VbmRvOiAoZGF0YSk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Tm9kZVNpemUoZGF0YS5ub2RlU2l6ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblJlZG86IChkYXRhKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXROb2RlU2l6ZShub2RlU2l6ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmZpZy5ub2RlU2l6ZT1ub2RlU2l6ZTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgaWYodGhpcy5pc01hbnVhbExheW91dCgpKXtcbiAgICAgICAgICAgIHRoaXMuZml0Tm9kZXNJblBsb3R0aW5nUmVnaW9uKHNlbGYuZGF0YS5nZXRSb290cygpKTtcbiAgICAgICAgICAgIHRoaXMudHJlZURlc2lnbmVyLnJlZHJhdyh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEVkZ2VTbGFudFdpZHRoTWF4KHdpZHRoLCB3aXRob3V0U3RhdGVTYXZpbmcpe1xuICAgICAgICB2YXIgc2VsZj10aGlzO1xuICAgICAgICBpZih0aGlzLmNvbmZpZy5lZGdlU2xhbnRXaWR0aE1heD09PXdpZHRoKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZighd2l0aG91dFN0YXRlU2F2aW5nKXtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zYXZlU3RhdGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICBlZGdlU2xhbnRXaWR0aE1heDogc2VsZi5jb25maWcuZWRnZVNsYW50V2lkdGhNYXhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5kbzogKGRhdGEpPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVkZ2VTbGFudFdpZHRoTWF4KGRhdGEuZWRnZVNsYW50V2lkdGhNYXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25SZWRvOiAoZGF0YSk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RWRnZVNsYW50V2lkdGhNYXgod2lkdGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcuZWRnZVNsYW50V2lkdGhNYXg9d2lkdGg7XG4gICAgICAgIHRoaXMudHJlZURlc2lnbmVyLnJlZHJhdyh0cnVlKTtcbiAgICB9XG5cbiAgICBhdXRvTGF5b3V0KHR5cGUsIHdpdGhvdXRTdGF0ZVNhdmluZyl7XG4gICAgICAgIHZhciBzZWxmPXRoaXM7XG5cblxuXG4gICAgICAgIGlmKCF3aXRob3V0U3RhdGVTYXZpbmcpe1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNhdmVTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgIG5ld0xheW91dDogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExheW91dDogc2VsZi5jb25maWcudHlwZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25VbmRvOiAoZGF0YSk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLnR5cGUgPSBkYXRhLmN1cnJlbnRMYXlvdXQ7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2ZpcmVPbkF1dG9MYXlvdXRDaGFuZ2VkQ2FsbGJhY2tzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblJlZG86IChkYXRhKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hdXRvTGF5b3V0KGRhdGEubmV3TGF5b3V0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbmZpZy50eXBlID0gdHlwZTtcbiAgICAgICAgaWYoIXRoaXMuZGF0YS5ub2Rlcy5sZW5ndGgpe1xuICAgICAgICAgICAgdGhpcy5fZmlyZU9uQXV0b0xheW91dENoYW5nZWRDYWxsYmFja3MoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmV2VHJlZU1heFkgPSBzZWxmLmdldE5vZGVNaW5ZKCk7XG4gICAgICAgIHRoaXMuZGF0YS5nZXRSb290cygpLmZvckVhY2gocj0+e1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBkMy5oaWVyYXJjaHkociwgZD0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmNoaWxkRWRnZXMuZmlsdGVyKGU9PiFlLiRoaWRkZW4pLm1hcChlPT5lLmNoaWxkTm9kZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gcm9vdC5zb3J0KChhLGIpPT5zZWxmLm5vZGVUeXBlT3JkZXJbYS5kYXRhLnR5cGVdLXNlbGYubm9kZVR5cGVPcmRlcltiLmRhdGEudHlwZV0pO1xuICAgICAgICAgICAgcm9vdC5zb3J0KChhLGIpPT5hLmRhdGEubG9jYXRpb24ueSAtIGIuZGF0YS5sb2NhdGlvbi55KTtcblxuXG4gICAgICAgICAgICB2YXIgbGF5b3V0O1xuICAgICAgICAgICAgaWYodHlwZT09PSdjbHVzdGVyJyl7XG4gICAgICAgICAgICAgICAgbGF5b3V0ID0gZDMuY2x1c3RlcigpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbGF5b3V0ID0gZDMudHJlZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGF5b3V0Lm5vZGVTaXplKFtzZWxmLmNvbmZpZy5ncmlkSGVpZ2h0LCBzZWxmLmNvbmZpZy5ncmlkV2lkdGhdKTtcbiAgICAgICAgICAgIGxheW91dC5zZXBhcmF0aW9uKHNlbGYubm9kZVNlcGFyYXRpb24pO1xuXG4gICAgICAgICAgICBsYXlvdXQocm9vdCk7XG4gICAgICAgICAgICB2YXIgbWluWSA9IDk5OTk5OTk5OTtcbiAgICAgICAgICAgIHJvb3QuZWFjaChkPT57XG4gICAgICAgICAgICAgICAgbWluWSA9IE1hdGgubWluKG1pblksIGQueCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGR5ID0gcm9vdC54IC0gbWluWSArIHByZXZUcmVlTWF4WTtcbiAgICAgICAgICAgIHZhciBkeCA9IHNlbGYuZ2V0Tm9kZU1pblgoKTtcbiAgICAgICAgICAgIHZhciBtYXhZPTA7XG4gICAgICAgICAgICByb290LmVhY2goZD0+e1xuICAgICAgICAgICAgICAgIGQuZGF0YS5sb2NhdGlvbi54ID0gZC55ICsgZHg7XG4gICAgICAgICAgICAgICAgZC5kYXRhLmxvY2F0aW9uLnkgPSBkLnggKyBkeTtcblxuICAgICAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBkLmRhdGEubG9jYXRpb24ueSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJldlRyZWVNYXhZID0gbWF4WSArIHNlbGYuY29uZmlnLm5vZGVTaXplK3NlbGYudHJlZU1hcmdpbjtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyB0aGlzLnRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgICB0aGlzLnRyZWVEZXNpZ25lci5yZWRyYXcodHJ1ZSk7XG4gICAgICAgIC8vIHRoaXMudHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX2ZpcmVPbkF1dG9MYXlvdXRDaGFuZ2VkQ2FsbGJhY2tzKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZpdE5vZGVzSW5QbG90dGluZ1JlZ2lvbihub2Rlcyl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHRvcFkgPSBkMy5taW4obm9kZXMsIG49Pm4ubG9jYXRpb24ueSk7XG4gICAgICAgIHZhciBtaW5ZID0gc2VsZi5nZXROb2RlTWluWSgpO1xuICAgICAgICB2YXIgZHkgPSB0b3BZIC0gbWluWTtcblxuICAgICAgICB2YXIgbWluWCA9IGQzLm1pbihub2Rlcywgbj0+bi5sb2NhdGlvbi54KTtcbiAgICAgICAgdmFyIGR4ID0gbWluWCAtIHNlbGYuZ2V0Tm9kZU1pblgoKTtcblxuICAgICAgICBpZihkeTwwIHx8ICBkeDwwKXtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2gobj0+bi5tb3ZlKC1keCwgLWR5KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlTm9kZXMobm9kZXMsIGR4LCBkeSwgcGl2b3Qpe1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBsaW1pdCA9IHNlbGYuY29uZmlnLmxpbWl0Tm9kZVBvc2l0aW9uaW5nO1xuICAgICAgICBpZihsaW1pdCl7XG4gICAgICAgICAgICBpZihkeDwwKXtcbiAgICAgICAgICAgICAgICBub2Rlcy5zb3J0KChhLGIpPT5hLmxvY2F0aW9uLngtYi5sb2NhdGlvbi54KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG5vZGVzLnNvcnQoKGEsYik9PmIubG9jYXRpb24ueC1hLmxvY2F0aW9uLngpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICB2YXIgbWluWSA9IGQzLm1pbihub2RlcywgZD0+ZC5sb2NhdGlvbi55KTtcbiAgICAgICAgaWYobWluWSArIGR5IDwgc2VsZi5nZXROb2RlTWluWSgpKXtcbiAgICAgICAgICAgIGR5ID0gc2VsZi5nZXROb2RlTWluWSgpIC0gbWluWTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVzLmZvckVhY2goZD0+e1xuICAgICAgICAgICAgaWYobGltaXQpe1xuICAgICAgICAgICAgICAgIExheW91dC5iYWNrdXBOb2RlTG9jYXRpb24oZCk7XG4gICAgICAgICAgICAgICAgdmFyIG1pblggPSBzZWxmLmdldE5vZGVNaW5YKGQpO1xuICAgICAgICAgICAgICAgIHZhciBtYXhYID0gc2VsZi5nZXROb2RlTWF4WChkKTtcblxuICAgICAgICAgICAgICAgIGQubG9jYXRpb24ueCA9IE1hdGgubWluKE1hdGgubWF4KGQubG9jYXRpb24ueCtkeCwgbWluWCksIG1heFgpO1xuICAgICAgICAgICAgICAgIGQubG9jYXRpb24ueSArPSBkeTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGQubG9jYXRpb24ueCArPWR4O1xuICAgICAgICAgICAgICAgIGQubG9jYXRpb24ueSArPSBkeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuXG4gICAgICAgIHZhciByZXZlcnRYID0gcGl2b3QgJiYgc2VsZi5jb25maWcubGltaXROb2RlUG9zaXRpb25pbmcgJiYgKHBpdm90LmxvY2F0aW9uLnggPT09IHBpdm90LiRsb2NhdGlvbi54KTtcblxuICAgICAgICBub2Rlcy5mb3JFYWNoKGQ9PntcbiAgICAgICAgICAgIGlmKHJldmVydFgpe1xuICAgICAgICAgICAgICAgIGQubG9jYXRpb24ueCA9IGQuJGxvY2F0aW9uLng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnRyZWVEZXNpZ25lci51cGRhdGVOb2RlUG9zaXRpb24oZCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9XG5cbiAgICBzdGF0aWMgYmFja3VwTm9kZUxvY2F0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS4kbG9jYXRpb24gPSBuZXcgbW9kZWwuUG9pbnQobm9kZS5sb2NhdGlvbik7XG4gICAgfVxuXG4gICAgX2ZpcmVPbkF1dG9MYXlvdXRDaGFuZ2VkQ2FsbGJhY2tzKCl7XG4gICAgICAgIHRoaXMub25BdXRvTGF5b3V0Q2hhbmdlZC5mb3JFYWNoKGM9PmModGhpcy5jb25maWcudHlwZSkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRIYW5naW5nUG9zaXRpb24oc2VsZWN0aW9uKXtcbiAgICAgICAgLy8gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICAgICAgdmFyIGggPSAgdGhpcy5nZXRCQm94KCkuaGVpZ2h0O1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdkeScsIGgpO1xuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0sMCk7XG5cbiAgICAgICAgaWYoQXBwVXRpbHMuaXNIaWRkZW4oc2VsZWN0aW9uLm5vZGUoKSkpeyAvLyBzZXR0aW5nIGhhbmdpbmcgcG9zaXRpb24gb2YgaGlkZGVuIGVsZW1lbnRzIGZhaWxzIG9uIGZpcmVmb3hcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb247XG4gICAgICAgIH1cblxuXG4gICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgaCA9ICB0aGlzLmdldEJCb3goKS5oZWlnaHQ7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cignZHknLCAnMC43NWVtJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxlY3Rpb247XG4gICAgfVxuXG59XG5cblxuIiwiaW1wb3J0IHtBcHBVdGlsc30gZnJvbSAnLi9hcHAtdXRpbHMnXG5pbXBvcnQgKiBhcyBkMyBmcm9tICcuL2QzJ1xuaW1wb3J0IHtDb250ZXh0TWVudX0gZnJvbSAnLi9jb250ZXh0LW1lbnUvY29udGV4dC1tZW51J1xuXG5leHBvcnQgY2xhc3MgTm9kZURyYWdIYW5kbGVye1xuXG4gICAgdHJlZURlc2lnbmVyO1xuICAgIGRhdGE7XG4gICAgY29uZmlnO1xuXG4gICAgZHJhZztcblxuXG4gICAgY29uc3RydWN0b3IodHJlZURlc2lnbmVyLCBkYXRhKXtcbiAgICAgICAgdGhpcy50cmVlRGVzaWduZXIgPSB0cmVlRGVzaWduZXI7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmRyYWcgPSBkMy5kcmFnKClcbiAgICAgICAgICAgIC5zdWJqZWN0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBpZihkPT1udWxsKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBldmVudC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogZXZlbnQueVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdCA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB4OiB0LmF0dHIoXCJ4XCIpICsgQXBwVXRpbHMuZ2V0VHJhbnNsYXRpb24odC5hdHRyKFwidHJhbnNmb3JtXCIpKVswXSxcbiAgICAgICAgICAgICAgICAgICAgeTogdC5hdHRyKFwieVwiKSArIEFwcFV0aWxzLmdldFRyYW5zbGF0aW9uKHQuYXR0cihcInRyYW5zZm9ybVwiKSlbMV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcInN0YXJ0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIHNlbGYuZHJhZ1N0YXJ0ZWQuY2FsbCh0aGlzLGQsIHNlbGYpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwiZHJhZ1wiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHNlbGYub25EcmFnLmNhbGwodGhpcywgZCwgc2VsZik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwiZW5kXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kcmFnRW5kZWQuY2FsbCh0aGlzLCBkLCBzZWxmKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG5cbiAgICBkcmFnU3RhcnRlZChkLHNlbGYpIHtcbiAgICAgICAgaWYoc2VsZi5pZ25vcmVEcmFnKXtcbiAgICAgICAgICAgIHNlbGYuaWdub3JlRHJhZz1mYWxzZTtcbiAgICAgICAgICAgIHNlbGYuaWdub3JlZERyYWc9dHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmlnbm9yZWREcmFnPWZhbHNlO1xuXG4gICAgICAgIC8vIHNlbGYudHJlZURlc2lnbmVyLmxheW91dC5kaXNhYmxlQXV0b0xheW91dCgpO1xuICAgICAgICBDb250ZXh0TWVudS5oaWRlKCk7XG4gICAgICAgIHZhciBub2RlID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgICAgICBpZighbm9kZS5jbGFzc2VkKFwic2VsZWN0ZWRcIikpe1xuICAgICAgICAgICAgc2VsZi50cmVlRGVzaWduZXIuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYudHJlZURlc2lnbmVyLnNlbGVjdE5vZGUoZCk7XG4gICAgICAgIG5vZGUuY2xhc3NlZChcInNlbGVjdGVkIGRyYWdnaW5nXCIsIHRydWUpO1xuICAgICAgICBzZWxmLnNlbGVjdGVkTm9kZXMgPSBzZWxmLnRyZWVEZXNpZ25lci5nZXRTZWxlY3RlZE5vZGVzKHRydWUpO1xuICAgICAgICBzZWxmLnByZXZEcmFnRXZlbnQgPSBkMy5ldmVudDtcbiAgICAgICAgc2VsZi5kcmFnRXZlbnRDb3VudCA9IDA7XG4gICAgfVxuXG4gICAgb25EcmFnKGRyYWdnZWROb2RlLCBzZWxmKXtcbiAgICAgICAgaWYoc2VsZi5pZ25vcmVkRHJhZyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZihzZWxmLmRyYWdFdmVudENvdW50PT0yKXtcbiAgICAgICAgICAgIHNlbGYuZGF0YS5zYXZlU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmRyYWdFdmVudENvdW50Kys7XG4gICAgICAgIGlmKHNlbGYuc2VsZWN0ZWROb2Rlcy5sZW5ndGg+NSAmJiBzZWxmLmRyYWdFdmVudENvdW50JTIhPTEpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGR4ID0gZDMuZXZlbnQueCAtIHNlbGYucHJldkRyYWdFdmVudC54O1xuICAgICAgICB2YXIgZHkgPSBkMy5ldmVudC55LSBzZWxmLnByZXZEcmFnRXZlbnQueTtcbiAgICAgICAgc2VsZi50cmVlRGVzaWduZXIubGF5b3V0Lm1vdmVOb2RlcyhzZWxmLnNlbGVjdGVkTm9kZXMsIGR4LCBkeSwgZHJhZ2dlZE5vZGUpO1xuXG5cbiAgICAgICAgc2VsZi5wcmV2RHJhZ0V2ZW50ID0gZDMuZXZlbnQ7XG4gICAgICAgIHNlbGYudHJlZURlc2lnbmVyLnJlZHJhd0VkZ2VzKCk7XG4gICAgICAgIHNlbGYudHJlZURlc2lnbmVyLnVwZGF0ZVBsb3R0aW5nUmVnaW9uU2l6ZSgpO1xuICAgIH1cblxuICAgIGRyYWdFbmRlZChkcmFnZ2VkTm9kZSwgc2VsZil7XG4gICAgICAgIHZhciBub2RlID0gZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJkcmFnZ2luZ1wiLCBmYWxzZSk7XG4gICAgICAgIGlmKHNlbGYuaWdub3JlZERyYWcpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYudHJlZURlc2lnbmVyLmxheW91dC51cGRhdGUoZHJhZ2dlZE5vZGUpXG4gICAgfVxuXG4gICAgY2FuY2VsRHJhZygpe1xuICAgICAgICB0aGlzLmlnbm9yZURyYWcgPSB0cnVlO1xuICAgIH1cblxufVxuXG5cbiIsInZhciBlcHNpbG9uID0gMWUtMTI7XG52YXIgcGkgPSBNYXRoLlBJO1xudmFyIGhhbGZQaSA9IHBpIC8gMjtcbnZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAvKmRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpKTtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ociwgMCk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gICAgfSovXG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuXG4gICAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBwaSk7XG4gICAgICAgIHZhciBkaXN0ID0wLjU1MjI4NDc0OTgzMSAqIHI7XG5cbiAgICAgICAgY29udGV4dC5tb3ZlVG8oLXIsIDApXG4gICAgICAgIC8vIGNvbnRleHQubGluZVRvKDIqciwgMipyKVxuICAgICAgICAvLyBjb250ZXh0LmJlemllckN1cnZlVG8oLXIsIC1kaXN0LCAtZGlzdCwgLXIsIDAsLXIpO1xuICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oLXIsIC1kaXN0LCAtZGlzdCwgLXIsIDAsLXIpO1xuXG4gICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhkaXN0LCAtciwgciwgLWRpc3QsIHIsMCk7XG5cbiAgICAgICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHIsIGRpc3QsIGRpc3QsIHIsIDAsIHIpO1xuXG4gICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbygtZGlzdCwgciwgLXIsIGRpc3QsIC1yLCAwKTtcbiAgICB9XG59O1xuIiwidmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gTWF0aC5QSSk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKC1yLCAwKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oMC45KnIsIC1yKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8oMC45KnIsIHIpO1xuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbn07XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tIFwic2QtdXRpbHNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSAnLi9pMThuL2kxOG4nXG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZXN7XG5cbiAgICBzdGF0aWMgZ3Jvd2wgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9ncm93bF9tZXNzYWdlLmh0bWwnKTtcblxuICAgIHN0YXRpYyBnZXQodGVtcGxhdGVOYW1lLCB2YXJpYWJsZXMpe1xuICAgICAgICB2YXIgY29tcGlsZWQgPSBVdGlscy50ZW1wbGF0ZShUZW1wbGF0ZXNbdGVtcGxhdGVOYW1lXSx7ICdpbXBvcnRzJzogeyAnaTE4bic6IGkxOG4sICdUZW1wbGF0ZXMnOiBUZW1wbGF0ZXMsICdpbmNsdWRlJzogZnVuY3Rpb24obiwgdikge3JldHVybiBUZW1wbGF0ZXMuZ2V0KG4sIHYpfSB9IH0pO1xuICAgICAgICBpZih2YXJpYWJsZXMpe1xuICAgICAgICAgICAgdmFyaWFibGVzLnZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB2YXJpYWJsZXMgPSB7dmFyaWFibGVzOnt9fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21waWxlZCh2YXJpYWJsZXMpXG5cbiAgICB9XG5cbiAgICBzdGF0aWMgc3R5bGVSdWxlKHNlbGVjdG9yLCBwcm9wcyl7XG4gICAgICAgIHZhciBzID0gc2VsZWN0b3IrICd7JztcbiAgICAgICAgcHJvcHMuZm9yRWFjaChwPT4gcys9VGVtcGxhdGVzLnN0eWxlUHJvcChwWzBdLCBwWzFdKSk7XG4gICAgICAgIHMrPSd9ICc7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBzdGF0aWMgc3R5bGVQcm9wKHN0eWxlTmFtZSwgdmFyaWFibGVOYW1lKXtcbiAgICAgICAgcmV0dXJuICBzdHlsZU5hbWUrJzogPCU9ICcrdmFyaWFibGVOYW1lKycgJT47ICdcbiAgICB9XG5cbiAgICBzdGF0aWMgdHJlZURlc2lnbmVyU2VsZWN0b3IgPSAnc3ZnLnNkLXRyZWUtZGVzaWduZXInO1xuICAgIHN0YXRpYyBub2RlU2VsZWN0b3IodHlwZSwgY2xhenope1xuICAgICAgICB2YXIgcyA9IFRlbXBsYXRlcy50cmVlRGVzaWduZXJTZWxlY3RvcisnIC5ub2RlJztcbiAgICAgICAgaWYodHlwZSl7XG4gICAgICAgICAgICBzKz0nLicrdHlwZSsnLW5vZGUnO1xuICAgICAgICB9XG4gICAgICAgIGlmKGNsYXp6KXtcbiAgICAgICAgICAgIHMrPScuJytjbGF6ejtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgc3RhdGljIGVkZ2VTZWxlY3RvcihjbGF6eil7XG4gICAgICAgIHZhciBzID0gVGVtcGxhdGVzLnRyZWVEZXNpZ25lclNlbGVjdG9yKycgLmVkZ2UnO1xuICAgICAgICBpZihjbGF6eil7XG4gICAgICAgICAgICBzKz0nLicrY2xheno7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuXG4gICAgc3RhdGljIHRyZWVEZXNpZ25lclN0eWxlcyA9XG5cbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMudHJlZURlc2lnbmVyU2VsZWN0b3IsW1xuICAgICAgICAgICAgWydmb250LXNpemUnLCAnZm9udFNpemUnXSxcbiAgICAgICAgICAgIFsnZm9udC1mYW1pbHknLCAnZm9udEZhbWlseSddLFxuICAgICAgICAgICAgWydmb250LXdlaWdodCcsICdmb250V2VpZ2h0J10sXG4gICAgICAgICAgICBbJ2ZvbnQtc3R5bGUnLCAnZm9udFN0eWxlJ11cbiAgICAgICAgXSkrXG4gICAgICAgIC8vICAgbm9kZVxuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5ub2RlU2VsZWN0b3IoKSsnIHBhdGgnLFtcbiAgICAgICAgICAgIFsnZmlsbCcsICdub2RlLmZpbGwnXSxcbiAgICAgICAgICAgIFsnc3Ryb2tlLXdpZHRoJywgJ25vZGUuc3Ryb2tlV2lkdGgnXVxuICAgICAgICBdKStcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMubm9kZVNlbGVjdG9yKCdkZWNpc2lvbicsICdvcHRpbWFsJykrJyBwYXRoLCAnK1RlbXBsYXRlcy5ub2RlU2VsZWN0b3IoJ2NoYW5jZScsICdvcHRpbWFsJykrJyBwYXRoLCcgK1RlbXBsYXRlcy5ub2RlU2VsZWN0b3IoJ3Rlcm1pbmFsJywgJ29wdGltYWwnKSsnIHBhdGgnLFtcbiAgICAgICAgICAgIFsnc3Ryb2tlJywgJ25vZGUub3B0aW1hbC5zdHJva2UnXSxcbiAgICAgICAgICAgIFsnc3Ryb2tlLXdpZHRoJywgJ25vZGUub3B0aW1hbC5zdHJva2VXaWR0aCddXG4gICAgICAgIF0pK1xuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5ub2RlU2VsZWN0b3IoKSsnIC5sYWJlbCcsW1xuICAgICAgICAgICAgWydmb250LXNpemUnLCAnbm9kZS5sYWJlbC5mb250U2l6ZSddLFxuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUubGFiZWwuY29sb3InXVxuICAgICAgICBdKStcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMubm9kZVNlbGVjdG9yKCkrJyAucGF5b2ZmJyxbXG4gICAgICAgICAgICBbJ2ZvbnQtc2l6ZScsICdub2RlLnBheW9mZi5mb250U2l6ZSddLFxuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUucGF5b2ZmLmNvbG9yJ10sXG4gICAgICAgIF0pK1xuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5ub2RlU2VsZWN0b3IoKSsnIC5wYXlvZmYubmVnYXRpdmUnLFtcbiAgICAgICAgICAgIFsnZmlsbCcsICdub2RlLnBheW9mZi5uZWdhdGl2ZUNvbG9yJ10sXG4gICAgICAgIF0pK1xuXG4gICAgICAgIC8vICAgIGRlY2lzaW9uIG5vZGVcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMubm9kZVNlbGVjdG9yKCdkZWNpc2lvbicpKycgcGF0aCcsW1xuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUuZGVjaXNpb24uZmlsbCddLFxuICAgICAgICAgICAgWydzdHJva2UnLCAnbm9kZS5kZWNpc2lvbi5zdHJva2UnXVxuICAgICAgICBdKStcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMubm9kZVNlbGVjdG9yKCdkZWNpc2lvbicsICdzZWxlY3RlZCcpKycgcGF0aCcsW1xuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUuZGVjaXNpb24uc2VsZWN0ZWQuZmlsbCddXG4gICAgICAgIF0pK1xuXG4gICAgICAgIC8vICAgIGNoYW5jZSBub2RlXG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLm5vZGVTZWxlY3RvcignY2hhbmNlJykrJyBwYXRoJyxbXG4gICAgICAgICAgICBbJ2ZpbGwnLCAnbm9kZS5jaGFuY2UuZmlsbCddLFxuICAgICAgICAgICAgWydzdHJva2UnLCAnbm9kZS5jaGFuY2Uuc3Ryb2tlJ11cbiAgICAgICAgXSkrXG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLm5vZGVTZWxlY3RvcignY2hhbmNlJywgJ3NlbGVjdGVkJykrJyBwYXRoJyxbXG4gICAgICAgICAgICBbJ2ZpbGwnLCAnbm9kZS5jaGFuY2Uuc2VsZWN0ZWQuZmlsbCddXG4gICAgICAgIF0pK1xuXG4gICAgICAgIC8vICAgIHRlcm1pbmFsIG5vZGVcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMubm9kZVNlbGVjdG9yKCd0ZXJtaW5hbCcpKycgcGF0aCcsW1xuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUudGVybWluYWwuZmlsbCddLFxuICAgICAgICAgICAgWydzdHJva2UnLCAnbm9kZS50ZXJtaW5hbC5zdHJva2UnXVxuICAgICAgICBdKStcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMubm9kZVNlbGVjdG9yKCd0ZXJtaW5hbCcsICdzZWxlY3RlZCcpKycgcGF0aCcsW1xuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUudGVybWluYWwuc2VsZWN0ZWQuZmlsbCddXG4gICAgICAgIF0pK1xuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5ub2RlU2VsZWN0b3IoJ3Rlcm1pbmFsJykrJyAuYWdncmVnYXRlZC1wYXlvZmYnLFtcbiAgICAgICAgICAgIFsnZm9udC1zaXplJywgJ25vZGUudGVybWluYWwucGF5b2ZmLmZvbnRTaXplJ10sXG4gICAgICAgICAgICBbJ2ZpbGwnLCAnbm9kZS50ZXJtaW5hbC5wYXlvZmYuY29sb3InXSxcbiAgICAgICAgXSkrXG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLm5vZGVTZWxlY3RvcigndGVybWluYWwnKSsnIC5hZ2dyZWdhdGVkLXBheW9mZi5uZWdhdGl2ZScsW1xuICAgICAgICAgICAgWydmaWxsJywgJ25vZGUudGVybWluYWwucGF5b2ZmLm5lZ2F0aXZlQ29sb3InXSxcbiAgICAgICAgXSkrXG5cblxuICAgICAgICAvL3Byb2JhYmlsaXR5XG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLnRyZWVEZXNpZ25lclNlbGVjdG9yKycgLm5vZGUgLnByb2JhYmlsaXR5LXRvLWVudGVyLCAnK1RlbXBsYXRlcy50cmVlRGVzaWduZXJTZWxlY3RvcisnIC5lZGdlIC5wcm9iYWJpbGl0eScsW1xuICAgICAgICAgICAgWydmb250LXNpemUnLCAncHJvYmFiaWxpdHkuZm9udFNpemUnXSxcbiAgICAgICAgICAgIFsnZmlsbCcsICdwcm9iYWJpbGl0eS5jb2xvciddXG4gICAgICAgIF0pK1xuXG4gICAgICAgIC8vZWRnZVxuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5lZGdlU2VsZWN0b3IoKSsnIHBhdGgnLFtcbiAgICAgICAgICAgIFsnc3Ryb2tlJywgJ2VkZ2Uuc3Ryb2tlJ10sXG4gICAgICAgICAgICBbJ3N0cm9rZS13aWR0aCcsICdlZGdlLnN0cm9rZVdpZHRoJ11cbiAgICAgICAgXSkrXG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLnRyZWVEZXNpZ25lclNlbGVjdG9yKycgbWFya2VyI2Fycm93IHBhdGgnLFtcbiAgICAgICAgICAgIFsnZmlsbCcsICdlZGdlLnN0cm9rZSddLFxuICAgICAgICBdKStcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMuZWRnZVNlbGVjdG9yKCdvcHRpbWFsJykrJyBwYXRoJyxbXG4gICAgICAgICAgICBbJ3N0cm9rZScsICdlZGdlLm9wdGltYWwuc3Ryb2tlJ10sXG4gICAgICAgICAgICBbJ3N0cm9rZS13aWR0aCcsICdlZGdlLm9wdGltYWwuc3Ryb2tlV2lkdGgnXVxuICAgICAgICBdKStcbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMudHJlZURlc2lnbmVyU2VsZWN0b3IrJyBtYXJrZXIjYXJyb3ctb3B0aW1hbCBwYXRoJyxbXG4gICAgICAgICAgICBbJ2ZpbGwnLCAnZWRnZS5vcHRpbWFsLnN0cm9rZSddLFxuICAgICAgICBdKStcblxuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5lZGdlU2VsZWN0b3IoJ3NlbGVjdGVkJykrJyBwYXRoJyxbXG4gICAgICAgICAgICBbJ3N0cm9rZScsICdlZGdlLnNlbGVjdGVkLnN0cm9rZSddLFxuICAgICAgICAgICAgWydzdHJva2Utd2lkdGgnLCAnZWRnZS5zZWxlY3RlZC5zdHJva2VXaWR0aCddXG4gICAgICAgIF0pK1xuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy50cmVlRGVzaWduZXJTZWxlY3RvcisnIG1hcmtlciNhcnJvdy1zZWxlY3RlZCBwYXRoJyxbXG4gICAgICAgICAgICBbJ2ZpbGwnLCAnZWRnZS5zZWxlY3RlZC5zdHJva2UnXSxcbiAgICAgICAgXSkrXG5cbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMuZWRnZVNlbGVjdG9yKCkrJyAubGFiZWwnLFtcbiAgICAgICAgICAgIFsnZm9udC1zaXplJywgJ2VkZ2UubGFiZWwuZm9udFNpemUnXSxcbiAgICAgICAgICAgIFsnZmlsbCcsICdlZGdlLmxhYmVsLmNvbG9yJ11cbiAgICAgICAgXSkrXG5cbiAgICAgICAgVGVtcGxhdGVzLnN0eWxlUnVsZShUZW1wbGF0ZXMuZWRnZVNlbGVjdG9yKCkrJyAucGF5b2ZmJyxbXG4gICAgICAgICAgICBbJ2ZvbnQtc2l6ZScsICdlZGdlLnBheW9mZi5mb250U2l6ZSddLFxuICAgICAgICAgICAgWydmaWxsJywgJ2VkZ2UucGF5b2ZmLmNvbG9yJ10sXG4gICAgICAgIF0pK1xuICAgICAgICBUZW1wbGF0ZXMuc3R5bGVSdWxlKFRlbXBsYXRlcy5lZGdlU2VsZWN0b3IoKSsnIC5wYXlvZmYubmVnYXRpdmUnLFtcbiAgICAgICAgICAgIFsnZmlsbCcsICdlZGdlLnBheW9mZi5uZWdhdGl2ZUNvbG9yJ10sXG4gICAgICAgIF0pK1xuXG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLnRyZWVEZXNpZ25lclNlbGVjdG9yKycgLnNkLXRpdGxlLWNvbnRhaW5lciB0ZXh0LnNkLXRpdGxlJyxbXG4gICAgICAgICAgICBbJ2ZvbnQtc2l6ZScsICd0aXRsZS5mb250U2l6ZSddLFxuICAgICAgICAgICAgWydmb250LXdlaWdodCcsICd0aXRsZS5mb250V2VpZ2h0J10sXG4gICAgICAgICAgICBbJ2ZvbnQtc3R5bGUnLCAndGl0bGUuZm9udFN0eWxlJ10sXG4gICAgICAgICAgICBbJ2ZpbGwnLCAndGl0bGUuY29sb3InXVxuICAgICAgICBdKSArXG4gICAgICAgIFRlbXBsYXRlcy5zdHlsZVJ1bGUoVGVtcGxhdGVzLnRyZWVEZXNpZ25lclNlbGVjdG9yKycgLnNkLXRpdGxlLWNvbnRhaW5lciB0ZXh0LnNkLWRlc2NyaXB0aW9uJyxbXG4gICAgICAgICAgICBbJ2ZvbnQtc2l6ZScsICdkZXNjcmlwdGlvbi5mb250U2l6ZSddLFxuICAgICAgICAgICAgWydmb250LXdlaWdodCcsICdkZXNjcmlwdGlvbi5mb250V2VpZ2h0J10sXG4gICAgICAgICAgICBbJ2ZvbnQtc3R5bGUnLCAnZGVzY3JpcHRpb24uZm9udFN0eWxlJ10sXG4gICAgICAgICAgICBbJ2ZpbGwnLCAnZGVzY3JpcHRpb24uY29sb3InXVxuICAgICAgICBdKVxufVxuXG5cblxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwic2QtZ3Jvd2wtbWVzc2FnZSA8JT10eXBlJT5cXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZC1ncm93bC1tZXNzYWdlLXRleHRcXFwiPlxcbiAgICAgICAgPCU9IG1lc3NhZ2UgJT5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCI7XG4iLCJpbXBvcnQge0FwcFV0aWxzfSBmcm9tICcuL2FwcC11dGlscydcbmltcG9ydCAqIGFzIGQzIGZyb20gJy4vZDMnXG5pbXBvcnQge0NvbnRleHRNZW51fSBmcm9tICcuL2NvbnRleHQtbWVudS9jb250ZXh0LW1lbnUnXG5cbmV4cG9ydCBjbGFzcyBUZXh0RHJhZ0hhbmRsZXJ7XG5cbiAgICB0cmVlRGVzaWduZXI7XG4gICAgZGF0YTtcbiAgICBjb25maWc7XG5cbiAgICBkcmFnO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcih0cmVlRGVzaWduZXIsIGRhdGEpe1xuICAgICAgICB0aGlzLnRyZWVEZXNpZ25lciA9IHRyZWVEZXNpZ25lcjtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuZHJhZyA9IGQzLmRyYWcoKVxuICAgICAgICAgICAgLnN1YmplY3QoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGlmKGQ9PW51bGwpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGV2ZW50LngsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBldmVudC55XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0ID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHQuYXR0cihcInhcIikgKyBBcHBVdGlscy5nZXRUcmFuc2xhdGlvbih0LmF0dHIoXCJ0cmFuc2Zvcm1cIikpWzBdLFxuICAgICAgICAgICAgICAgICAgICB5OiB0LmF0dHIoXCJ5XCIpICsgQXBwVXRpbHMuZ2V0VHJhbnNsYXRpb24odC5hdHRyKFwidHJhbnNmb3JtXCIpKVsxXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwic3RhcnRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgc2VsZi5kcmFnU3RhcnRlZC5jYWxsKHRoaXMsZCwgc2VsZilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJkcmFnXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vbkRyYWcuY2FsbCh0aGlzLCBkLCBzZWxmKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJlbmRcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRyYWdFbmRlZC5jYWxsKHRoaXMsIGQsIHNlbGYpO1xuICAgICAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGRyYWdTdGFydGVkKGQsc2VsZikge1xuICAgICAgICAvLyBzZWxmLnRyZWVEZXNpZ25lci5sYXlvdXQuZGlzYWJsZUF1dG9MYXlvdXQoKTtcbiAgICAgICAgQ29udGV4dE1lbnUuaGlkZSgpO1xuICAgICAgICB2YXIgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgaWYoIXRleHQuY2xhc3NlZChcInNlbGVjdGVkXCIpKXtcbiAgICAgICAgICAgIHNlbGYudHJlZURlc2lnbmVyLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnRyZWVEZXNpZ25lci5zZWxlY3RUZXh0KGQpO1xuICAgICAgICB0ZXh0LmNsYXNzZWQoXCJzZWxlY3RlZCBkcmFnZ2luZ1wiLCB0cnVlKTtcbiAgICAgICAgc2VsZi5zZWxlY3RlZE5vZGVzID0gc2VsZi50cmVlRGVzaWduZXIuZ2V0U2VsZWN0ZWROb2RlcygpO1xuICAgICAgICBzZWxmLnByZXZEcmFnRXZlbnQgPSBkMy5ldmVudDtcbiAgICAgICAgc2VsZi5kcmFnRXZlbnRDb3VudCA9IDA7XG4gICAgfVxuXG4gICAgb25EcmFnKGRyYWdnZWRUZXh0LCBzZWxmKXtcbiAgICAgICAgaWYoc2VsZi5kcmFnRXZlbnRDb3VudD09Mil7XG4gICAgICAgICAgICBzZWxmLmRhdGEuc2F2ZVN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5kcmFnRXZlbnRDb3VudCsrO1xuXG4gICAgICAgIHZhciBkeCA9IGQzLmV2ZW50LnggLSBzZWxmLnByZXZEcmFnRXZlbnQueDtcbiAgICAgICAgdmFyIGR5ID0gZDMuZXZlbnQueS0gc2VsZi5wcmV2RHJhZ0V2ZW50Lnk7XG5cbiAgICAgICAgZHJhZ2dlZFRleHQubG9jYXRpb24ubW92ZShkeCwgZHkpO1xuICAgICAgICBzZWxmLnRyZWVEZXNpZ25lci51cGRhdGVUZXh0UG9zaXRpb24oZHJhZ2dlZFRleHQpO1xuXG4gICAgICAgIHNlbGYucHJldkRyYWdFdmVudCA9IGQzLmV2ZW50O1xuICAgICAgICBzZWxmLnRyZWVEZXNpZ25lci51cGRhdGVQbG90dGluZ1JlZ2lvblNpemUoKTtcbiAgICB9XG5cbiAgICBkcmFnRW5kZWQoZHJhZ2dlZE5vZGUsIHNlbGYpe1xuICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJkcmFnZ2luZ1wiLCBmYWxzZSk7XG4gICAgfVxuXG59XG5cblxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnLi9kMydcbmltcG9ydCB7VXRpbHN9IGZyb20gJ3NkLXV0aWxzJ1xuXG5leHBvcnQgY2xhc3MgVG9vbHRpcCB7XG4gICAgc3RhdGljIGdldENvbnRhaW5lcigpe1xuICAgICAgICByZXR1cm4gZDMuc2VsZWN0KFwiYm9keVwiKS5zZWxlY3RPckFwcGVuZCgnZGl2LnNkLXRvb2x0aXAnKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2hvdyhodG1sLCB4T2Zmc2V0ID0gNSwgeU9mZnNldCA9IDI4LCBldmVudCwgZHVyYXRpb249bnVsbCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gVG9vbHRpcC5nZXRDb250YWluZXIoKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcbiAgICAgICAgY29udGFpbmVyLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgLjk4KTtcbiAgICAgICAgY29udGFpbmVyLmh0bWwoaHRtbCk7XG4gICAgICAgIFRvb2x0aXAudXBkYXRlUG9zaXRpb24oeE9mZnNldCwgeU9mZnNldCwgZXZlbnQpO1xuICAgICAgICBpZihkdXJhdGlvbil7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgVG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9LCBkdXJhdGlvbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVQb3NpdGlvbih4T2Zmc2V0ID0gNSwgeU9mZnNldCA9IDI4LCBldmVudCkge1xuICAgICAgICBldmVudCA9IGV2ZW50IHx8IGQzLmV2ZW50O1xuICAgICAgICBUb29sdGlwLmdldENvbnRhaW5lcigpXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIChldmVudC5wYWdlWCArIHhPZmZzZXQpICsgXCJweFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChldmVudC5wYWdlWSAtIHlPZmZzZXQpICsgXCJweFwiKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGlkZShkdXJhdGlvbiA9IDUwMCkge1xuICAgICAgICB2YXIgdCA9IFRvb2x0aXAuZ2V0Q29udGFpbmVyKCk7XG4gICAgICAgIGlmKGR1cmF0aW9uKXtcbiAgICAgICAgICAgIHQgPSB0LnRyYW5zaXRpb24oKS5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgfVxuICAgICAgICB0LnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXR0YWNoKHRhcmdldCwgaHRtbE9yRm4sIHhPZmZzZXQsIHlPZmZzZXQpIHtcbiAgICAgICAgdGFyZ2V0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgdmFyIGh0bWwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKFV0aWxzLmlzRnVuY3Rpb24oaHRtbE9yRm4pKSB7XG4gICAgICAgICAgICAgICAgaHRtbCA9IGh0bWxPckZuKGQsIGkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBodG1sID0gaHRtbE9yRm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChodG1sICE9PSBudWxsICYmIGh0bWwgIT09IHVuZGVmaW5lZCAmJiBodG1sICE9PSAnJykge1xuICAgICAgICAgICAgICAgIFRvb2x0aXAuc2hvdyhodG1sLCB4T2Zmc2V0LCB5T2Zmc2V0KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIFRvb2x0aXAuaGlkZSgwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KS5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIFRvb2x0aXAudXBkYXRlUG9zaXRpb24oeE9mZnNldCwgeU9mZnNldCk7XG4gICAgICAgIH0pLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIFRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiLi9kM1wiO1xuaW1wb3J0IHtVdGlsc30gZnJvbSBcInNkLXV0aWxzXCI7XG5pbXBvcnQge0FwcFV0aWxzfSBmcm9tIFwiLi9hcHAtdXRpbHNcIjtcbmltcG9ydCB7ZG9tYWluIGFzIG1vZGVsfSBmcm9tIFwic2QtbW9kZWxcIjtcbmltcG9ydCB7Q29udGV4dE1lbnV9IGZyb20gXCIuL2NvbnRleHQtbWVudS9jb250ZXh0LW1lbnVcIjtcbmltcG9ydCB7TWFpbkNvbnRleHRNZW51fSBmcm9tIFwiLi9jb250ZXh0LW1lbnUvbWFpbi1jb250ZXh0LW1lbnVcIjtcbmltcG9ydCB7Tm9kZUNvbnRleHRNZW51fSBmcm9tIFwiLi9jb250ZXh0LW1lbnUvbm9kZS1jb250ZXh0LW1lbnVcIjtcbmltcG9ydCB7TGF5b3V0fSBmcm9tIFwiLi9sYXlvdXRcIjtcbmltcG9ydCB7Tm9kZURyYWdIYW5kbGVyfSBmcm9tIFwiLi9ub2RlLWRyYWctaGFuZGxlclwiO1xuaW1wb3J0IHtUb29sdGlwfSBmcm9tIFwiLi90b29sdGlwXCI7XG5pbXBvcnQge1RlbXBsYXRlc30gZnJvbSBcIi4vdGVtcGxhdGVzXCI7XG5pbXBvcnQge1RleHREcmFnSGFuZGxlcn0gZnJvbSBcIi4vdGV4dC1kcmFnLWhhbmRsZXJcIjtcbmltcG9ydCB7VGV4dENvbnRleHRNZW51fSBmcm9tIFwiLi9jb250ZXh0LW1lbnUvdGV4dC1jb250ZXh0LW1lbnVcIjtcbmltcG9ydCB7RWRnZUNvbnRleHRNZW51fSBmcm9tIFwiLi9jb250ZXh0LW1lbnUvZWRnZS1jb250ZXh0LW1lbnVcIjtcbmltcG9ydCAqIGFzIEhhbW1lciBmcm9tIFwiaGFtbWVyanNcIjtcbmltcG9ydCB7aTE4bn0gZnJvbSBcIi4vaTE4bi9pMThuXCI7XG5cblxuZXhwb3J0IGNsYXNzIFRyZWVEZXNpZ25lckNvbmZpZyB7XG4gICAgd2lkdGggPSB1bmRlZmluZWQ7XG4gICAgaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIG1hcmdpbiA9IHtcbiAgICAgICAgbGVmdDogMjUsXG4gICAgICAgIHJpZ2h0OiAyNSxcbiAgICAgICAgdG9wOiAyNSxcbiAgICAgICAgYm90dG9tOiAyNVxuICAgIH07XG4gICAgbG5nID0gJ2VuJztcbiAgICBsYXlvdXQ9IHtcbiAgICAgICAgdHlwZTogJ3RyZWUnLFxuICAgICAgICBub2RlU2l6ZTogNDAsXG4gICAgICAgIGxpbWl0Tm9kZVBvc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBncmlkSGVpZ2h0OiA3NSxcbiAgICAgICAgZ3JpZFdpZHRoOiAxNTAsXG4gICAgICAgIGVkZ2VTbGFudFdpZHRoTWF4OiAyMFxuICAgIH07XG4gICAgZm9udEZhbWlseSA9ICdzYW5zLXNlcmlmJztcbiAgICBmb250U2l6ZSA9ICcxMnB4JztcbiAgICBmb250V2VpZ2h0ID0gJ25vcm1hbCc7XG4gICAgZm9udFN0eWxlID0gJ25vcm1hbCc7XG4gICAgbm9kZSA9IHtcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcxcHgnLFxuICAgICAgICBvcHRpbWFsOiB7XG4gICAgICAgICAgICBzdHJva2U6ICcjMDA2ZjAwJyxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMS41cHgnLFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgZm9udFNpemU6ICcxZW0nLFxuICAgICAgICAgICAgY29sb3I6ICdibGFjaydcbiAgICAgICAgfSxcbiAgICAgICAgcGF5b2ZmOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogJzFlbScsXG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIG5lZ2F0aXZlQ29sb3I6ICcjYjYwMDAwJ1xuICAgICAgICB9LFxuICAgICAgICBkZWNpc2lvbjoge1xuICAgICAgICAgICAgZmlsbDogJyNmZjc3NzcnLFxuICAgICAgICAgICAgc3Ryb2tlOiAnIzY2MDAwMCcsXG5cbiAgICAgICAgICAgIHNlbGVjdGVkOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogJyNhYTMzMzMnLFxuICAgICAgICAgICAgICAgIC8vIHN0cm9rZTogJyM2NjY2MDAnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5jZToge1xuICAgICAgICAgICAgZmlsbDogJyNmZmZmNDQnLFxuICAgICAgICAgICAgc3Ryb2tlOiAnIzY2NjYwMCcsXG5cbiAgICAgICAgICAgIHNlbGVjdGVkOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogJyNhYWFhMDAnLFxuICAgICAgICAgICAgICAgIC8vIHN0cm9rZTogJyM2NjY2MDAnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRlcm1pbmFsOntcbiAgICAgICAgICAgIGZpbGw6ICcjNDRmZjQ0JyxcbiAgICAgICAgICAgIHN0cm9rZTogJ2JsYWNrJyxcbiAgICAgICAgICAgIHNlbGVjdGVkOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogJyMwMGFhMDAnLFxuICAgICAgICAgICAgICAgIC8vIHN0cm9rZTogJ2JsYWNrJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBheW9mZjoge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMWVtJyxcbiAgICAgICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgICAgICBuZWdhdGl2ZUNvbG9yOiAnI2I2MDAwMCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGVkZ2U9e1xuICAgICAgICBzdHJva2U6ICcjNDI0MjQyJyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcxLjUnLFxuICAgICAgICBvcHRpbWFsOntcbiAgICAgICAgICAgIHN0cm9rZTogJyMwMDZmMDAnLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcyLjQnLFxuICAgICAgICB9LFxuICAgICAgICBzZWxlY3RlZDp7XG4gICAgICAgICAgICBzdHJva2U6ICcjMDQ1YWQxJyxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMy41JyxcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMWVtJyxcbiAgICAgICAgICAgIGNvbG9yOiAnYmFjaydcbiAgICAgICAgfSxcbiAgICAgICAgcGF5b2ZmOntcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMWVtJyxcbiAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgbmVnYXRpdmVDb2xvcjogJyNiNjAwMDAnXG4gICAgICAgIH1cblxuICAgIH07XG4gICAgcHJvYmFiaWxpdHkgPSB7XG4gICAgICAgIGZvbnRTaXplOiAnMWVtJyxcbiAgICAgICAgY29sb3I6ICcjMDAwMGQ3J1xuICAgIH07XG4gICAgdGl0bGUgPSB7XG4gICAgICAgIGZvbnRTaXplOiAnMTZweCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgbWFyZ2luOntcbiAgICAgICAgICAgIHRvcDogMTUsXG4gICAgICAgICAgICBib3R0b206IDEwXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGRlc2NyaXB0aW9uID0ge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgIG1hcmdpbjp7XG4gICAgICAgICAgICB0b3A6IDUsXG4gICAgICAgICAgICBib3R0b206IDEwXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVhZE9ubHk9IGZhbHNlO1xuICAgIGRpc2FibGVBbmltYXRpb25zPWZhbHNlO1xuICAgIGZvcmNlRnVsbEVkZ2VSZWRyYXc9ZmFsc2U7XG4gICAgaGlkZUxhYmVscz1mYWxzZTtcbiAgICBoaWRlUGF5b2Zmcz1mYWxzZTtcbiAgICBoaWRlUHJvYmFiaWxpdGllcz1mYWxzZTtcbiAgICByYXc9ZmFsc2U7XG5cblxuICAgIHBheW9mZk51bWJlckZvcm1hdHRlciA9ICh2LCBpKT0+IHY7XG4gICAgcHJvYmFiaWxpdHlOdW1iZXJGb3JtYXR0ZXIgID0gKHYpPT4gdjtcblxuICAgIG9uTm9kZVNlbGVjdGVkID0gKG5vZGUpID0+IHt9O1xuICAgIG9uRWRnZVNlbGVjdGVkID0gKGVkZ2UpID0+IHt9O1xuICAgIG9uVGV4dFNlbGVjdGVkID0gKHRleHQpID0+IHt9O1xuICAgIG9uU2VsZWN0aW9uQ2xlYXJlZCA9ICgpID0+IHt9O1xuXG4gICAgb3BlcmF0aW9uc0Zvck9iamVjdCA9IChvKSA9PiBbXTtcblxuICAgIHBheW9mZk5hbWVzID0gW251bGwsIG51bGxdO1xuICAgIG1heFBheW9mZnNUb0Rpc3BsYXkgPSAxO1xuXG4gICAgY29uc3RydWN0b3IoY3VzdG9tKSB7XG4gICAgICAgIGlmIChjdXN0b20pIHtcbiAgICAgICAgICAgIFV0aWxzLmRlZXBFeHRlbmQodGhpcywgY3VzdG9tKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5leHBvcnQgY2xhc3MgVHJlZURlc2lnbmVyIHtcblxuICAgIGNvbmZpZztcbiAgICBjb250YWluZXI7XG4gICAgZGF0YTsgLy9kYXRhIG1vZGVsIG1hbmFnZXJcbiAgICBzdmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGRhdGFNb2RlbCwgY29uZmlnKXtcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YU1vZGVsO1xuICAgICAgICB0aGlzLmluaXRDb250YWluZXIoY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgc2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IG5ldyBUcmVlRGVzaWduZXJDb25maWcoY29uZmlnKTtcbiAgICAgICAgaWYodGhpcy5sYXlvdXQpe1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQuY29uZmlnPXRoaXMuY29uZmlnLmxheW91dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUN1c3RvbVN0eWxlcygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbml0KCl7XG5cbiAgICAgICAgdGhpcy5pbml0U3ZnKCk7XG4gICAgICAgIHRoaXMuaW5pdExheW91dCgpO1xuICAgICAgICB0aGlzLmluaXRJMThuKCk7XG4gICAgICAgIHRoaXMuaW5pdEJydXNoKCk7XG4gICAgICAgIHRoaXMuaW5pdEVkZ2VNYXJrZXJzKCk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVDdXN0b21TdHlsZXMoKTtcbiAgICAgICAgaWYoIXRoaXMuY29uZmlnLnJlYWRPbmx5KXtcbiAgICAgICAgICAgIHRoaXMuaW5pdE1haW5Db250ZXh0TWVudSgpO1xuICAgICAgICAgICAgdGhpcy5pbml0Tm9kZUNvbnRleHRNZW51KCk7XG4gICAgICAgICAgICB0aGlzLmluaXRFZGdlQ29udGV4dE1lbnUoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdE5vZGVEcmFnSGFuZGxlcigpO1xuICAgICAgICAgICAgdGhpcy5pbml0VGV4dERyYWdIYW5kbGVyKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRUZXh0Q29udGV4dE1lbnUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgIH1cblxuICAgIGluaXRJMThuKCkge1xuICAgICAgICBpMThuLmluaXQodGhpcy5jb25maWcubG5nKTtcbiAgICB9XG5cblxuICAgIHVwZGF0ZUN1c3RvbVN0eWxlcygpe1xuICAgICAgICBkMy5zZWxlY3QoJ2hlYWQnKS5zZWxlY3RPckFwcGVuZCgnc3R5bGUjc2QtdHJlZS1kZXNpZ25lci1zdHlsZScpLmh0bWwoVGVtcGxhdGVzLmdldCgndHJlZURlc2lnbmVyU3R5bGVzJywgdGhpcy5jb25maWcpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW5pdExheW91dCgpe1xuICAgICAgICB0aGlzLmxheW91dCA9IG5ldyBMYXlvdXQodGhpcywgdGhpcy5kYXRhLCB0aGlzLmNvbmZpZy5sYXlvdXQpO1xuICAgIH1cblxuICAgIGluaXROb2RlRHJhZ0hhbmRsZXIoKXtcbiAgICAgICAgdGhpcy5ub2RlRHJhZ0hhbmRsZXIgPSBuZXcgTm9kZURyYWdIYW5kbGVyKHRoaXMsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgaW5pdFRleHREcmFnSGFuZGxlcigpe1xuICAgICAgICB0aGlzLnRleHREcmFnSGFuZGxlciA9IG5ldyBUZXh0RHJhZ0hhbmRsZXIodGhpcywgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICByZWRyYXcod2l0aFRyYW5zaXRpb25zPWZhbHNlKXtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHdpdGhUcmFuc2l0aW9ucyA9ICFzZWxmLmNvbmZpZy5kaXNhYmxlQW5pbWF0aW9ucyAmJiB3aXRoVHJhbnNpdGlvbnM7XG4gICAgICAgIHRoaXMucmVkcmF3RGlhZ3JhbVRpdGxlKCk7XG4gICAgICAgIHRoaXMucmVkcmF3RGlhZ3JhbURlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTWFyZ2luKHdpdGhUcmFuc2l0aW9ucyk7XG4gICAgICAgIGlmKHdpdGhUcmFuc2l0aW9ucyl7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXRpb25QcmV2ID0gc2VsZi50cmFuc2l0aW9uO1xuICAgICAgICAgICAgc2VsZi50cmFuc2l0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZHJhd05vZGVzKCk7XG4gICAgICAgIHRoaXMucmVkcmF3RWRnZXMoKTtcbiAgICAgICAgdGhpcy5yZWRyYXdGbG9hdGluZ1RleHRzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsaWRhdGlvbk1lc3NhZ2VzKCk7XG4gICAgICAgIGlmKHdpdGhUcmFuc2l0aW9ucyl7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXRpb24gPSAgc2VsZi50cmFuc2l0aW9uUHJldjtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVBsb3R0aW5nUmVnaW9uU2l6ZSgpO1xuICAgICAgICB9LDEwKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb21wdXRlQXZhaWxhYmxlU3BhY2UoKXtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVIZWlnaHQgPSBBcHBVdGlscy5zYW5pdGl6ZUhlaWdodCh0aGlzLmNvbmZpZy5oZWlnaHQsIHRoaXMuY29udGFpbmVyLCB0aGlzLmNvbmZpZy5tYXJnaW4pO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZVdpZHRoID0gQXBwVXRpbHMuc2FuaXRpemVXaWR0aCh0aGlzLmNvbmZpZy53aWR0aCwgdGhpcy5jb250YWluZXIsIHRoaXMuY29uZmlnLm1hcmdpbik7XG4gICAgfVxuXG4gICAgaW5pdFN2ZygpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29tcHV0ZUF2YWlsYWJsZVNwYWNlKCk7XG4gICAgICAgIHRoaXMuc3ZnID0gdGhpcy5jb250YWluZXIuc2VsZWN0T3JBcHBlbmQoJ3N2Zy5zZC10cmVlLWRlc2lnbmVyJyk7XG4gICAgICAgIHRoaXMuc3ZnLmF0dHIoJ3dpZHRoJywgdGhpcy5hdmFpbGFibGVXaWR0aCkuYXR0cignaGVpZ2h0JywgdGhpcy5hdmFpbGFibGVIZWlnaHQpO1xuXG4gICAgICAgIHRoaXMubWFpbkdyb3VwID0gdGhpcy5zdmcuc2VsZWN0T3JBcHBlbmQoJ2cubWFpbi1ncm91cCcpO1xuICAgICAgICB0aGlzLnVwZGF0ZU1hcmdpbigpO1xuXG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy53aWR0aCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KHdpbmRvdylcbiAgICAgICAgICAgICAgICAub24oXCJyZXNpemUudHJlZS1kZXNpZ25lclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUGxvdHRpbmdSZWdpb25TaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVkcmF3RGlhZ3JhbVRpdGxlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWMgPSBuZXcgSGFtbWVyLk1hbmFnZXIodGhpcy5zdmcubm9kZSgpLCB7dG91Y2hBY3Rpb24gOiAnYXV0byd9KTtcbiAgICAgICAgbWMuYWRkKG5ldyBIYW1tZXIuUHJlc3Moe1xuICAgICAgICAgICAgcG9pbnRlclR5cGU6ICd0b3VjaCdcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIG1jLmFkZChuZXcgSGFtbWVyLlBpbmNoKHtcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAndG91Y2gnXG4gICAgICAgIH0pKTtcblxuICAgICAgICB2YXIgY2FuY2VsO1xuICAgICAgICBtYy5vbigncGluY2hzdGFydCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLmRpc2FibGVCcnVzaCgpO1xuICAgICAgICB9KVxuICAgICAgICBtYy5vbigncGluY2gnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY2FuY2VsID0gVXRpbHMud2FpdEZvckZpbmFsRXZlbnQoKCk9PnNlbGYuZW5hYmxlQnJ1c2goKSwgJ3BpbmNoZW5kJywgNTAwMClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB1cGRhdGVNYXJnaW4od2l0aFRyYW5zaXRpb25zKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbWFyZ2luID0gdGhpcy5jb25maWcubWFyZ2luO1xuICAgICAgICB2YXIgZ3JvdXAgPSB0aGlzLm1haW5Hcm91cDtcbiAgICAgICAgaWYod2l0aFRyYW5zaXRpb25zKXtcbiAgICAgICAgICAgIGdyb3VwID0gZ3JvdXAudHJhbnNpdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b3BNYXJnaW4gPSBtYXJnaW4udG9wO1xuICAgICAgICBpZih0aGlzLmRpYWdyYW1UaXRsZXx8dGhpcy5kaWFncmFtRGVzY3JpcHRpb24pe1xuICAgICAgICAgICAgdGhpcy50b3BNYXJnaW4gPSBwYXJzZUludCh0aGlzLmRpYWdyYW1UaXRsZSA/IHRoaXMuY29uZmlnLnRpdGxlLm1hcmdpbi50b3AgOiAwKSArIHRoaXMuZ2V0VGl0bGVHcm91cEhlaWdodCgpXG4gICAgICAgICAgICAgICAgKyAgTWF0aC5tYXgodGhpcy50b3BNYXJnaW4sIHBhcnNlSW50KHRoaXMuY29uZmlnLnRpdGxlLm1hcmdpbi5ib3R0b20pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyb3VwLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgdGhpcy50b3BNYXJnaW4gKyBcIilcIikub24oXCJlbmRcIiwgKCk9PiBzZWxmLnVwZGF0ZVBsb3R0aW5nUmVnaW9uU2l6ZSgpKTtcbiAgICB9XG5cbiAgICBzZXRNYXJnaW4obWFyZ2luLCB3aXRob3V0U3RhdGVTYXZpbmcpe1xuICAgICAgICB2YXIgc2VsZj10aGlzO1xuICAgICAgICBpZighd2l0aG91dFN0YXRlU2F2aW5nKXtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zYXZlU3RhdGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IFV0aWxzLmNsb25lKHNlbGYuY29uZmlnLm1hcmdpbilcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5kbzogKGRhdGEpPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldE1hcmdpbihkYXRhLm1hcmdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblJlZG86IChkYXRhKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRNYXJnaW4obWFyZ2luLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBVdGlscy5kZWVwRXh0ZW5kKHRoaXMuY29uZmlnLm1hcmdpbiwgbWFyZ2luKTtcbiAgICAgICAgdGhpcy5yZWRyYXdEaWFncmFtVGl0bGUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVNYXJnaW4odHJ1ZSk7XG4gICAgfVxuXG4gICAgaW5pdENvbnRhaW5lcihjb250YWluZXJJZE9yRWxlbSkge1xuICAgICAgICBpZiAoVXRpbHMuaXNTdHJpbmcoY29udGFpbmVySWRPckVsZW0pKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBjb250YWluZXJJZE9yRWxlbS50cmltKCk7XG5cbiAgICAgICAgICAgIGlmICghVXRpbHMuc3RhcnRzV2l0aChzZWxlY3RvciwgJyMnKSAmJiAhVXRpbHMuc3RhcnRzV2l0aChzZWxlY3RvciwgJy4nKSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gJyMnICsgc2VsZWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGQzLnNlbGVjdChzZWxlY3Rvcik7XG4gICAgICAgIH0gZWxzZSBpZihjb250YWluZXJJZE9yRWxlbS5fcGFyZW50cyl7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcklkT3JFbGVtXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVySWRPckVsZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlUGxvdHRpbmdSZWdpb25TaXplKCkge1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbXB1dGVBdmFpbGFibGVTcGFjZSgpO1xuICAgICAgICB2YXIgbWFyZ2luID0gdGhpcy5jb25maWcubWFyZ2luO1xuICAgICAgICB2YXIgc3ZnV2lkdGggPSB0aGlzLnN2Zy5hdHRyKCd3aWR0aCcpO1xuICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gdGhpcy5zdmcuYXR0cignaGVpZ2h0Jyk7XG4gICAgICAgIHZhciBtYWluR3JvdXBCb3ggPSB0aGlzLm1haW5Hcm91cC5ub2RlKCkuZ2V0QkJveCgpO1xuICAgICAgICB2YXIgbmV3U3ZnV2lkdGggPSBtYWluR3JvdXBCb3gud2lkdGgrbWFpbkdyb3VwQm94LngrbWFyZ2luLmxlZnQrbWFyZ2luLnJpZ2h0O1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc2VkKCd3aXRoLW92ZXJmbG93LXgnLCBuZXdTdmdXaWR0aD49dGhpcy5hdmFpbGFibGVXaWR0aCk7XG4gICAgICAgIG5ld1N2Z1dpZHRoID0gTWF0aC5tYXgobmV3U3ZnV2lkdGgsIHRoaXMuYXZhaWxhYmxlV2lkdGgpO1xuICAgICAgICBpZihzdmdXaWR0aCE9bmV3U3ZnV2lkdGgpe1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN2Zy5hdHRyKCd3aWR0aCcsIG5ld1N2Z1dpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3U3ZnSGVpZ2h0ID0gbWFpbkdyb3VwQm94LmhlaWdodCttYWluR3JvdXBCb3gueSt0aGlzLnRvcE1hcmdpbittYXJnaW4uYm90dG9tO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzZWQoJ3dpdGgtb3ZlcmZsb3cteScsIG5ld1N2Z0hlaWdodD49dGhpcy5hdmFpbGFibGVIZWlnaHQpO1xuICAgICAgICBuZXdTdmdIZWlnaHQgPSBNYXRoLm1heChuZXdTdmdIZWlnaHQsIHRoaXMuYXZhaWxhYmxlSGVpZ2h0KTtcbiAgICAgICAgaWYoc3ZnSGVpZ2h0IT1uZXdTdmdIZWlnaHQpe1xuICAgICAgICAgICAgY2hhbmdlZD10cnVlO1xuICAgICAgICAgICAgdGhpcy5zdmcuYXR0cignaGVpZ2h0JywgbmV3U3ZnSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZihjaGFuZ2VkKXtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQnJ1c2hFeHRlbnQoKVxuICAgICAgICB9XG5cblxuICAgIH1cblxuICAgIHJlZHJhd05vZGVzKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cblxuICAgICAgICB2YXIgbm9kZXNDb250YWluZXIgPSB0aGlzLm1haW5Hcm91cC5zZWxlY3RPckFwcGVuZCgnZy5ub2RlcycpO1xuICAgICAgICB2YXIgbm9kZXMgPSBub2Rlc0NvbnRhaW5lci5zZWxlY3RBbGwoJy5ub2RlJykuZGF0YSh0aGlzLmRhdGEubm9kZXMuZmlsdGVyKGQ9PiFkLiRoaWRkZW4pLCAoZCxpKT0+IGQuaWQpO1xuICAgICAgICBub2Rlcy5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIHZhciBub2Rlc0VudGVyID0gbm9kZXMuZW50ZXIoKS5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgZD0+J25vZGUtJytkLmlkKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZD0+ZC50eXBlKyctbm9kZSBub2RlJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkPT4ndHJhbnNsYXRlKCcgKyBkLmxvY2F0aW9uLnggKyAnICAnICsgZC5sb2NhdGlvbi55ICsgJyknKTtcbiAgICAgICAgbm9kZXNFbnRlci5hcHBlbmQoJ3BhdGgnKTtcblxuICAgICAgICB2YXIgbGFiZWxFbnRlciA9IG5vZGVzRW50ZXIuYXBwZW5kKCd0ZXh0JykuYXR0cignY2xhc3MnLCAnbGFiZWwnKTtcbiAgICAgICAgdmFyIHBheW9mZkVudGVyID0gbm9kZXNFbnRlci5hcHBlbmQoJ3RleHQnKS5hdHRyKCdjbGFzcycsICdwYXlvZmYgY29tcHV0ZWQnKTtcbiAgICAgICAgdmFyIGluZGljYXRvckVudGVyID0gbm9kZXNFbnRlci5hcHBlbmQoJ3RleHQnKS5hdHRyKCdjbGFzcycsICdlcnJvci1pbmRpY2F0b3InKS50ZXh0KCchIScpO1xuICAgICAgICB2YXIgYWdncmVnYXRlZFBheW9mZkVudGVyID0gbm9kZXNFbnRlci5hcHBlbmQoJ3RleHQnKS5hdHRyKCdjbGFzcycsICdhZ2dyZWdhdGVkLXBheW9mZicpO1xuICAgICAgICB2YXIgcHJvYmFiaWxpdHlUb0VudGVyRW50ZXIgPSBub2Rlc0VudGVyLmFwcGVuZCgndGV4dCcpLmF0dHIoJ2NsYXNzJywgJ3Byb2JhYmlsaXR5LXRvLWVudGVyJyk7XG5cbiAgICAgICAgdmFyIG5vZGVzTWVyZ2UgPSBub2Rlc0VudGVyLm1lcmdlKG5vZGVzKTtcbiAgICAgICAgbm9kZXNNZXJnZS5jbGFzc2VkKCdvcHRpbWFsJywgKGQpPT5zZWxmLmlzT3B0aW1hbChkKSk7XG5cbiAgICAgICAgdmFyIG5vZGVzTWVyZ2VUID0gbm9kZXNNZXJnZTtcbiAgICAgICAgaWYodGhpcy50cmFuc2l0aW9uKXtcbiAgICAgICAgICAgIG5vZGVzTWVyZ2VUID0gbm9kZXNNZXJnZS50cmFuc2l0aW9uKCk7XG4gICAgICAgICAgICBub2Rlc01lcmdlVC5vbignZW5kJywgKCk9PiBzZWxmLnVwZGF0ZVBsb3R0aW5nUmVnaW9uU2l6ZSgpKVxuICAgICAgICB9XG4gICAgICAgIG5vZGVzTWVyZ2VUXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZD0+J3RyYW5zbGF0ZSgnICsgZC5sb2NhdGlvbi54ICsgJyAgJyArIGQubG9jYXRpb24ueSArICcpJylcblxuICAgICAgICB2YXIgcGF0aCA9IG5vZGVzTWVyZ2Uuc2VsZWN0KCdwYXRoJyk7XG4gICAgICAgIHRoaXMubGF5b3V0LmRyYXdOb2RlU3ltYm9sKHBhdGgsdGhpcy50cmFuc2l0aW9uKTtcblxuICAgICAgICAvKnBhdGhcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGQ9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYoc2VsZi5pc05vZGVTZWxlY3RlZChkKSl7XG4gICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiBzZWxmLmNvbmZpZy5ub2RlW2QudHlwZV0uc2VsZWN0ZWQuZmlsbFxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcubm9kZVtkLnR5cGVdLmZpbGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGQ9PiBzZWxmLmNvbmZpZy5ub2RlW2QudHlwZV0uc3Ryb2tlKVxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBkPT4ge1xuICAgICAgICAgICAgICAgIGlmKHNlbGYuY29uZmlnLm5vZGVbZC50eXBlXS5zdHJva2VXaWR0aCE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy5ub2RlW2QudHlwZV0uc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy5ub2RlLnN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICovXG4gICAgICAgIHRoaXMubGF5b3V0Lm5vZGVMYWJlbFBvc2l0aW9uKGxhYmVsRW50ZXIpO1xuICAgICAgICB2YXIgbGFiZWxNZXJnZSA9IG5vZGVzTWVyZ2Uuc2VsZWN0KCd0ZXh0LmxhYmVsJyk7XG4gICAgICAgIGxhYmVsTWVyZ2UuY2xhc3NlZCgnc2QtaGlkZGVuJywgdGhpcy5jb25maWcuaGlkZUxhYmVscyk7XG4gICAgICAgIHZhciBsYWJlbE1lcmdlVCA9IG5vZGVzTWVyZ2VULnNlbGVjdCgndGV4dC5sYWJlbCcpO1xuICAgICAgICBsYWJlbE1lcmdlVC5lYWNoKHRoaXMudXBkYXRlVGV4dExpbmVzKTtcbiAgICAgICAgdGhpcy5sYXlvdXQubm9kZUxhYmVsUG9zaXRpb24obGFiZWxNZXJnZVQpXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcblxuICAgICAgICB2YXIgcGF5b2ZmID0gbm9kZXNNZXJnZS5zZWxlY3QoJ3RleHQucGF5b2ZmJyk7XG5cbiAgICAgICAgdmFyIHBheW9mZlRzcGFucyA9IHBheW9mZi5zZWxlY3RBbGwoJ3RzcGFuJykuZGF0YShkPT57XG4gICAgICAgICAgICBsZXQgaXRlbSA9IGQuZGlzcGxheVZhbHVlKCdjaGlsZHJlblBheW9mZicpO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmlzQXJyYXkoaXRlbSkgPyBpdGVtLmZpbHRlcihpPT5pICE9PSB1bmRlZmluZWQpIDogW2l0ZW1dXG4gICAgICAgIH0pO1xuICAgICAgICBwYXlvZmZUc3BhbnMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIHZhciBwYXlvZmZUc3BhbnNNID0gcGF5b2ZmVHNwYW5zLmVudGVyKCkuYXBwZW5kKCd0c3BhbicpLm1lcmdlKHBheW9mZlRzcGFucyk7XG4gICAgICAgIHBheW9mZlRzcGFuc01cbiAgICAgICAgICAgIC8vIC5hdHRyKCdkb21pbmFudC1iYXNlbGluZScsICdoYW5naW5nJylcbiAgICAgICAgICAgIC5hdHRyKCdkeScsIChkLGkpPT5pPjAgPyAnMS4xZW0nOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAuYXR0cigneCcsICcwJylcbiAgICAgICAgICAgIC5jbGFzc2VkKCduZWdhdGl2ZScsIGQ9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQhPT1udWxsICYmIGQ8MDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2xhc3NlZCgnc2QtaGlkZGVuJywgdGhpcy5jb25maWcuaGlkZVBheW9mZnMgfHwgdGhpcy5jb25maWcucmF3KVxuICAgICAgICAgICAgLnRleHQoKGQsIGkpPT4ge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBkXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsIT09bnVsbCA/IChpc05hTih2YWwpID8gdmFsIDogc2VsZi5jb25maWcucGF5b2ZmTnVtYmVyRm9ybWF0dGVyKHZhbCwgaSkpOiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXR0YWNoUGF5b2ZmVG9vbHRpcChwYXlvZmZUc3BhbnNNKTtcblxuXG4gICAgICAgIHZhciBwYXlvZmZUID0gcGF5b2ZmO1xuICAgICAgICBpZih0aGlzLnRyYW5zaXRpb24pe1xuICAgICAgICAgICAgcGF5b2ZmVCA9IHBheW9mZi50cmFuc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxheW91dC5ub2RlUGF5b2ZmUG9zaXRpb24ocGF5b2ZmRW50ZXIpO1xuICAgICAgICB0aGlzLmxheW91dC5ub2RlUGF5b2ZmUG9zaXRpb24ocGF5b2ZmVCk7XG5cbiAgICAgICAgdmFyIGFnZ3JlZ2F0ZWRQYXlvZmYgPSBub2Rlc01lcmdlLnNlbGVjdCgndGV4dC5hZ2dyZWdhdGVkLXBheW9mZicpO1xuICAgICAgICB2YXIgYWdncmVnYXRlZFBheW9mZlRzcGFucyA9IGFnZ3JlZ2F0ZWRQYXlvZmYuc2VsZWN0QWxsKCd0c3BhbicpLmRhdGEoZD0+e1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBkLmRpc3BsYXlWYWx1ZSgnYWdncmVnYXRlZFBheW9mZicpO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmlzQXJyYXkoaXRlbSkgPyBpdGVtLmZpbHRlcihpPT5pICE9PSB1bmRlZmluZWQpIDogW2l0ZW1dXG4gICAgICAgIH0pO1xuICAgICAgICBhZ2dyZWdhdGVkUGF5b2ZmVHNwYW5zLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgdmFyIGFnZ3JlZ2F0ZWRQYXlvZmZUc3BhbnNNID0gYWdncmVnYXRlZFBheW9mZlRzcGFucy5lbnRlcigpLmFwcGVuZCgndHNwYW4nKS5tZXJnZShhZ2dyZWdhdGVkUGF5b2ZmVHNwYW5zKVxuICAgICAgICAgICAgLmF0dHIoJ2R5JywgKGQsaSk9Pmk+MCA/ICcwLjk1ZW0nOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAuY2xhc3NlZCgnbmVnYXRpdmUnLCBkPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkIT09bnVsbCAmJiBkPDA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHRoaXMuY29uZmlnLmhpZGVQYXlvZmZzIHx8IHRoaXMuY29uZmlnLnJhdylcbiAgICAgICAgICAgIC50ZXh0KCh2YWwsIGkpPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWwhPT1udWxsID8gKGlzTmFOKHZhbCkgPyB2YWwgOiBzZWxmLmNvbmZpZy5wYXlvZmZOdW1iZXJGb3JtYXR0ZXIodmFsLCBpKSk6ICcnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmF0dGFjaFBheW9mZlRvb2x0aXAoYWdncmVnYXRlZFBheW9mZlRzcGFuc00sICdhZ2dyZWdhdGVkUGF5b2ZmJyk7XG5cbiAgICAgICAgdmFyIGFnZ3JlZ2F0ZWRQYXlvZmZUID0gYWdncmVnYXRlZFBheW9mZjtcbiAgICAgICAgaWYodGhpcy50cmFuc2l0aW9uKXtcbiAgICAgICAgICAgIGFnZ3JlZ2F0ZWRQYXlvZmZUID0gYWdncmVnYXRlZFBheW9mZi50cmFuc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxheW91dC5ub2RlQWdncmVnYXRlZFBheW9mZlBvc2l0aW9uKGFnZ3JlZ2F0ZWRQYXlvZmZFbnRlcik7XG4gICAgICAgIHRoaXMubGF5b3V0Lm5vZGVBZ2dyZWdhdGVkUGF5b2ZmUG9zaXRpb24oYWdncmVnYXRlZFBheW9mZlQpO1xuXG4gICAgICAgIHZhciBwcm9iYWJpbGl0eVRvRW50ZXIgPSBub2Rlc01lcmdlLnNlbGVjdCgndGV4dC5wcm9iYWJpbGl0eS10by1lbnRlcicpXG4gICAgICAgICAgICAudGV4dChkPT57XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IGQuZGlzcGxheVZhbHVlKCdwcm9iYWJpbGl0eVRvRW50ZXInKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsIT09bnVsbCA/IChpc05hTih2YWwpID8gdmFsIDogc2VsZi5jb25maWcucHJvYmFiaWxpdHlOdW1iZXJGb3JtYXR0ZXIodmFsKSk6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHRoaXMuY29uZmlnLmhpZGVQcm9iYWJpbGl0aWVzIHx8IHRoaXMuY29uZmlnLnJhdyk7XG4gICAgICAgIFRvb2x0aXAuYXR0YWNoKHByb2JhYmlsaXR5VG9FbnRlciwgaTE4bi50KCd0b29sdGlwLm5vZGUucHJvYmFiaWxpdHlUb0VudGVyJykpO1xuXG5cbiAgICAgICAgdmFyIHByb2JhYmlsaXR5VG9FbnRlclQgPSBwcm9iYWJpbGl0eVRvRW50ZXI7XG4gICAgICAgIGlmKHRoaXMudHJhbnNpdGlvbil7XG4gICAgICAgICAgICBwcm9iYWJpbGl0eVRvRW50ZXJUID0gcHJvYmFiaWxpdHlUb0VudGVyLnRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheW91dC5ub2RlUHJvYmFiaWxpdHlUb0VudGVyUG9zaXRpb24ocHJvYmFiaWxpdHlUb0VudGVyRW50ZXIpO1xuICAgICAgICB0aGlzLmxheW91dC5ub2RlUHJvYmFiaWxpdHlUb0VudGVyUG9zaXRpb24ocHJvYmFiaWxpdHlUb0VudGVyVCk7XG5cblxuICAgICAgICB2YXIgaW5kaWNhdG9yID0gbm9kZXNNZXJnZS5zZWxlY3QoJ3RleHQuZXJyb3ItaW5kaWNhdG9yJyk7XG4gICAgICAgIGluZGljYXRvci5jbGFzc2VkKCdzZC1oaWRkZW4nLCB0aGlzLmNvbmZpZy5yYXcpXG4gICAgICAgIHRoaXMubGF5b3V0Lm5vZGVJbmRpY2F0b3JQb3NpdGlvbihpbmRpY2F0b3JFbnRlcik7XG4gICAgICAgIHRoaXMubGF5b3V0Lm5vZGVJbmRpY2F0b3JQb3NpdGlvbihpbmRpY2F0b3IpO1xuXG4gICAgICAgIGlmKHRoaXMubm9kZURyYWdIYW5kbGVyKXtcbiAgICAgICAgICAgIG5vZGVzTWVyZ2UuY2FsbCh0aGlzLm5vZGVEcmFnSGFuZGxlci5kcmFnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVzTWVyZ2Uub24oJ2NvbnRleHRtZW51JywgdGhpcy5ub2RlQ29udGV4dE1lbnUpO1xuICAgICAgICBub2Rlc01lcmdlLm9uKCdkYmxjbGljaycsIHRoaXMubm9kZUNvbnRleHRNZW51KVxuICAgICAgICBub2Rlc01lcmdlLmVhY2goZnVuY3Rpb24oZCwgaSl7XG4gICAgICAgICAgICB2YXIgbm9kZUVsZW0gPSB0aGlzO1xuICAgICAgICAgICAgdmFyIG1jID0gbmV3IEhhbW1lci5NYW5hZ2VyKG5vZGVFbGVtKTtcbiAgICAgICAgICAgIG1jLmFkZChuZXcgSGFtbWVyLlByZXNzKHtcbiAgICAgICAgICAgICAgICBwb2ludGVyVHlwZTogJ3RvdWNoJ1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgbWMub24oJ3ByZXNzJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgaWYoZS5wb2ludGVyVHlwZT09J3RvdWNoJyl7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubm9kZURyYWdIYW5kbGVyLmNhbmNlbERyYWcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgICAgIGlmKGQuZm9sZGVkKXtcbiAgICAgICAgICAgICAgICBsZXQgYnV0dG9uID0gZDMuc2VsZWN0KG5vZGVFbGVtKS5zZWxlY3RPckFwcGVuZCgndGV4dC5zZC11bmZvbGQtYnV0dG9uJylcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoXCJbK11cIilcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljayBkYmNsaWNrIG1vdXNlZG93bicsICgpPT5zZWxmLmZvbGRTdWJ0cmVlKGQsIGZhbHNlKSk7IC8vZmlyZWZveCBkZXRlY3RzIG9ubHkgbW91c2Vkb3duIGV2ZW50IC0gcmVsYXRlZCB0byBkcmFnIGhhbmRsZXJcblxuICAgICAgICAgICAgICAgIHNlbGYubGF5b3V0Lm5vZGVVbmZvbGRCdXR0b25Qb3NpdGlvbihidXR0b24pO1xuICAgICAgICAgICAgICAgIFRvb2x0aXAuYXR0YWNoKGJ1dHRvbiwgaTE4bi50KCdjb250ZXh0TWVudS5ub2RlLnVuZm9sZCcpKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChub2RlRWxlbSkuc2VsZWN0KCcuc2QtdW5mb2xkLWJ1dHRvbicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXR0YWNoUGF5b2ZmVG9vbHRpcChzZWxlY3Rpb24sIHBheW9mZkZpbGVkTmFtZSA9ICdwYXlvZmYnLCBvYmplY3Q9J25vZGUnKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBUb29sdGlwLmF0dGFjaChzZWxlY3Rpb24sIChkLCBpKT0+e1xuICAgICAgICAgICAgaWYoc2VsZi5jb25maWcucGF5b2ZmTmFtZXMubGVuZ3RoPmkgJiYgc2VsZi5jb25maWcucGF5b2ZmTmFtZXNbaV0gIT09IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBpMThuLnQoJ3Rvb2x0aXAuJytvYmplY3QrJy4nK3BheW9mZkZpbGVkTmFtZSsnLm5hbWVkJyx7dmFsdWU6IGQucGF5b2ZmLCBudW1iZXI6IGkrMSwgbmFtZTogc2VsZi5jb25maWcucGF5b2ZmTmFtZXNbaV19KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGkxOG4udCgndG9vbHRpcC4nK29iamVjdCsnLicrcGF5b2ZmRmlsZWROYW1lKycuZGVmYXVsdCcse3ZhbHVlOiBkLnBheW9mZiwgbnVtYmVyOiBzZWxmLmNvbmZpZy5tYXhQYXlvZmZzVG9EaXNwbGF5IDwgMiA/ICcnIDogaSsxfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlVGV4dExpbmVzKGQpeyAvL2hlbHBlciBtZXRob2QgZm9yIHNwbGl0dGluZyB0ZXh0IHRvIHRzcGFuc1xuICAgICAgICB2YXIgbGluZXMgPSBkLm5hbWUgPyBkLm5hbWUuc3BsaXQoJ1xcbicpIDogW107XG4gICAgICAgIGxpbmVzLnJldmVyc2UoKTtcbiAgICAgICAgdmFyIHRzcGFucyA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoJ3RzcGFuJykuZGF0YShsaW5lcyk7XG4gICAgICAgIHRzcGFucy5lbnRlcigpLmFwcGVuZCgndHNwYW4nKVxuICAgICAgICAgICAgLm1lcmdlKHRzcGFucylcbiAgICAgICAgICAgIC50ZXh0KGw9PmwpXG4gICAgICAgICAgICAuYXR0cignZHknLCAoZCxpKT0+aT4wID8gJy0xLjFlbSc6IHVuZGVmaW5lZClcbiAgICAgICAgICAgIC5hdHRyKCd4JywgJzAnKTtcblxuICAgICAgICB0c3BhbnMuZXhpdCgpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGlzT3B0aW1hbChkKXtcbiAgICAgICAgcmV0dXJuIGQuZGlzcGxheVZhbHVlKCdvcHRpbWFsJyk7XG4gICAgfVxuXG4gICAgcmVkcmF3RWRnZXMoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIGVkZ2VzQ29udGFpbmVyID0gdGhpcy5tYWluR3JvdXAuc2VsZWN0T3JBcHBlbmQoJ2cuZWRnZXMnKTtcbiAgICAgICAgaWYoc2VsZi5jb25maWcuZm9yY2VGdWxsRWRnZVJlZHJhdyl7XG4gICAgICAgICAgICBlZGdlc0NvbnRhaW5lci5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVkZ2VzID0gZWRnZXNDb250YWluZXIuc2VsZWN0QWxsKCcuZWRnZScpLmRhdGEodGhpcy5kYXRhLmVkZ2VzLmZpbHRlcihlPT4hZS4kaGlkZGVuKSwgKGQsaSk9PiBkLmlkKTtcbiAgICAgICAgZWRnZXMuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgICB2YXIgZWRnZXNFbnRlciA9IGVkZ2VzLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQ9PidlZGdlLScrZC5pZClcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdlZGdlJyk7XG5cblxuICAgICAgICBlZGdlc0VudGVyLmFwcGVuZCgncGF0aCcpO1xuICAgICAgICB2YXIgbGFiZWxFbnRlciA9IGVkZ2VzRW50ZXIuYXBwZW5kU2VsZWN0b3IoJ2cubGFiZWwtZ3JvdXAnKTtcbiAgICAgICAgbGFiZWxFbnRlci5hcHBlbmQoJ3RleHQnKS5hdHRyKCdjbGFzcycsICdsYWJlbCcpO1xuICAgICAgICB2YXIgcGF5b2ZmRW50ZXIgPSBlZGdlc0VudGVyLmFwcGVuZCgndGV4dCcpLmF0dHIoJ2NsYXNzJywgJ3BheW9mZicpO1xuICAgICAgICB2YXIgcHJvYmFiaWxpdHlFbnRlciA9IGVkZ2VzRW50ZXIuYXBwZW5kKCd0ZXh0JykuYXR0cignY2xhc3MnLCAncHJvYmFiaWxpdHknKTtcblxuXG4gICAgICAgIHZhciBlZGdlc01lcmdlID0gZWRnZXNFbnRlci5tZXJnZShlZGdlcyk7XG5cblxuICAgICAgICB2YXIgb3B0aW1hbENsYXNzTmFtZSA9ICdvcHRpbWFsJztcbiAgICAgICAgZWRnZXNNZXJnZS5jbGFzc2VkKG9wdGltYWxDbGFzc05hbWUsIChkKT0+c2VsZi5pc09wdGltYWwoZCkpO1xuXG4gICAgICAgIHZhciBlZGdlc01lcmdlVCA9IGVkZ2VzTWVyZ2U7XG4gICAgICAgIGlmKHRoaXMudHJhbnNpdGlvbil7XG4gICAgICAgICAgICBlZGdlc01lcmdlVCA9IGVkZ2VzTWVyZ2UudHJhbnNpdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWRnZXNNZXJnZVQuc2VsZWN0KCdwYXRoJylcbiAgICAgICAgICAgIC5hdHRyKCdkJywgZD0+IHRoaXMubGF5b3V0LmVkZ2VMaW5lRChkKSlcbiAgICAgICAgICAgIC8vIC5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIilcbiAgICAgICAgICAgIC8vIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDIpXG4gICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5jbGFzc2VkKCdzZWxlY3RlZCcpID8gJy1zZWxlY3RlZCcgOiAoc2VsZi5pc09wdGltYWwoZCk/Jy1vcHRpbWFsJzonJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNhcnJvd1wiKyBzdWZmaXgrXCIpXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJvcHRpbWl6ZVF1YWxpdHlcIilcblxuXG4gICAgICAgIGVkZ2VzTWVyZ2Uub24oJ2NsaWNrJywgZD0+e1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RFZGdlKGQsIHRydWUpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubGF5b3V0LmVkZ2VMYWJlbFBvc2l0aW9uKGxhYmVsRW50ZXIpO1xuICAgICAgICBlZGdlc01lcmdlVC5zZWxlY3QoJ3RleHQubGFiZWwnKS5lYWNoKHRoaXMudXBkYXRlVGV4dExpbmVzKTtcbiAgICAgICAgdmFyIGxhYmVsTWVyZ2UgPSBlZGdlc01lcmdlLnNlbGVjdCgnZy5sYWJlbC1ncm91cCcpO1xuICAgICAgICBsYWJlbE1lcmdlLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHRoaXMuY29uZmlnLmhpZGVMYWJlbHMpO1xuICAgICAgICB2YXIgbGFiZWxNZXJnZVQgPSBlZGdlc01lcmdlVC5zZWxlY3QoJ2cubGFiZWwtZ3JvdXAnKTtcbiAgICAgICAgdGhpcy5sYXlvdXQuZWRnZUxhYmVsUG9zaXRpb24obGFiZWxNZXJnZVQpO1xuICAgICAgICAgICAgLy8gLnRleHQoZD0+ZC5uYW1lKTtcblxuICAgICAgICB2YXIgcGF5b2ZmID0gZWRnZXNNZXJnZS5zZWxlY3QoJ3RleHQucGF5b2ZmJyk7XG5cbiAgICAgICAgdmFyIHBheW9mZlRzcGFucyA9IHBheW9mZi5zZWxlY3RBbGwoJ3RzcGFuJykuZGF0YShkID0+IHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gZC5kaXNwbGF5VmFsdWUoJ3BheW9mZicpO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmlzQXJyYXkoaXRlbSkgPyBpdGVtLnNsaWNlKDAsIE1hdGgubWluKGl0ZW0ubGVuZ3RoLCBzZWxmLmNvbmZpZy5tYXhQYXlvZmZzVG9EaXNwbGF5KSkubWFwKF89PmQpIDogW2RdO1xuICAgICAgICB9KTtcbiAgICAgICAgcGF5b2ZmVHNwYW5zLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICB2YXIgcGF5b2ZmVHNwYW5zTSA9IHBheW9mZlRzcGFucy5lbnRlcigpLmFwcGVuZCgndHNwYW4nKS5tZXJnZShwYXlvZmZUc3BhbnMpO1xuICAgICAgICBwYXlvZmZUc3BhbnNNXG4gICAgICAgIC8vIC5hdHRyKCdkb21pbmFudC1iYXNlbGluZScsICdoYW5naW5nJylcbiAgICAgICAgICAgIC5hdHRyKCdkeScsIChkLGkpPT5pPjAgPyAnMS4xZW0nOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAvLyAuYXR0cigneCcsICcwJylcblxuICAgICAgICAgICAgLy8gLmF0dHIoJ2RvbWluYW50LWJhc2VsaW5lJywgJ2hhbmdpbmcnKVxuICAgICAgICAgICAgLmNsYXNzZWQoJ25lZ2F0aXZlJywgKGQsIGkpPT4ge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBkLmRpc3BsYXlQYXlvZmYodW5kZWZpbmVkLCBpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsIT09bnVsbCAmJiB2YWw8MDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2xhc3NlZCgnc2QtaGlkZGVuJywgdGhpcy5jb25maWcuaGlkZVBheW9mZnMpXG4gICAgICAgICAgICAvLyAudGV4dChkPT4gaXNOYU4oZC5wYXlvZmYpID8gZC5wYXlvZmYgOiBzZWxmLmNvbmZpZy5wYXlvZmZOdW1iZXJGb3JtYXR0ZXIoZC5wYXlvZmYpKVxuICAgICAgICAgICAgLnRleHQoKGQsIGkpPT57XG4gICAgICAgICAgICAgICAgaWYodGhpcy5jb25maWcucmF3KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQucGF5b2ZmW2ldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gZC5kaXNwbGF5VmFsdWUoJ3BheW9mZicpO1xuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFV0aWxzLmlzQXJyYXkoaXRlbSkgPyBpdGVtIDogW2l0ZW1dO1xuXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcucGF5b2ZmTnVtYmVyRm9ybWF0dGVyKHZhbCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWxzLmlzU3RyaW5nKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZC5wYXlvZmZbaV0gIT09IG51bGwgJiYgIWlzTmFOKGQucGF5b2ZmW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLnBheW9mZk51bWJlckZvcm1hdHRlcihkLnBheW9mZltpXSwgaSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wYXlvZmZbaV07XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIFRvb2x0aXAuYXR0YWNoKHBheW9mZlRzcGFuc00sIChkLCBpKT0+e1xuICAgICAgICAgICAgaWYoc2VsZi5jb25maWcucGF5b2ZmTmFtZXMubGVuZ3RoPmkgJiYgc2VsZi5jb25maWcucGF5b2ZmTmFtZXNbaV0gIT09IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBpMThuLnQoJ3Rvb2x0aXAuZWRnZS5wYXlvZmYubmFtZWQnLHt2YWx1ZTogZC5wYXlvZmZbaV0sIG51bWJlcjogaSsxLCBuYW1lOiBzZWxmLmNvbmZpZy5wYXlvZmZOYW1lc1tpXX0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaTE4bi50KCd0b29sdGlwLmVkZ2UucGF5b2ZmLmRlZmF1bHQnLHt2YWx1ZTogZC5wYXlvZmZbaV0sIG51bWJlcjogc2VsZi5jb25maWcubWF4UGF5b2Zmc1RvRGlzcGxheSA8IDIgPyAnJyA6IGkrMX0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBwYXlvZmZUZXh0VCA9IHBheW9mZjtcbiAgICAgICAgaWYodGhpcy50cmFuc2l0aW9uKXtcbiAgICAgICAgICAgIHBheW9mZlRleHRUID0gcGF5b2ZmLnRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheW91dC5lZGdlUGF5b2ZmUG9zaXRpb24ocGF5b2ZmRW50ZXIpO1xuICAgICAgICB0aGlzLmxheW91dC5lZGdlUGF5b2ZmUG9zaXRpb24ocGF5b2ZmVGV4dFQpO1xuXG4gICAgICAgIFRvb2x0aXAuYXR0YWNoKGVkZ2VzTWVyZ2Uuc2VsZWN0KCd0ZXh0LnByb2JhYmlsaXR5JyksIGQ9PmkxOG4udCgndG9vbHRpcC5lZGdlLnByb2JhYmlsaXR5Jyx7dmFsdWU6IGQucHJvYmFiaWxpdHk9PT0gdW5kZWZpbmVkID8gZC5kaXNwbGF5UHJvYmFiaWxpdHkoKSA6IGQucHJvYmFiaWxpdHl9KSk7XG5cbiAgICAgICAgZWRnZXNNZXJnZS5zZWxlY3QoJ3RleHQucHJvYmFiaWxpdHknKVxuICAgICAgICAgICAgLmNsYXNzZWQoJ3NkLWhpZGRlbicsIHRoaXMuY29uZmlnLmhpZGVQcm9iYWJpbGl0aWVzKTtcbiAgICAgICAgdmFyIHByb2JhYmlsaXR5TWVyZ2UgPSBlZGdlc01lcmdlLnNlbGVjdCgndGV4dC5wcm9iYWJpbGl0eScpO1xuICAgICAgICBwcm9iYWJpbGl0eU1lcmdlXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnZW5kJylcbiAgICAgICAgICAgIC50ZXh0KGQ9PntcbiAgICAgICAgICAgICAgICBpZih0aGlzLmNvbmZpZy5yYXcpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9iYWJpbGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IGQuZGlzcGxheVByb2JhYmlsaXR5KCk7XG5cbiAgICAgICAgICAgICAgICBpZih2YWwhPT1udWxsKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWlzTmFOKHZhbCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLnByb2JhYmlsaXR5TnVtYmVyRm9ybWF0dGVyKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoVXRpbHMuaXNTdHJpbmcodmFsKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoZC5wcm9iYWJpbGl0eSE9PW51bGwgJiYgIWlzTmFOKGQucHJvYmFiaWxpdHkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcucHJvYmFiaWxpdHlOdW1iZXJGb3JtYXR0ZXIoZC5wcm9iYWJpbGl0eSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9iYWJpbGl0eTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB2YXIgcHJvYmFiaWxpdHlNZXJnZVQgPSBwcm9iYWJpbGl0eU1lcmdlO1xuICAgICAgICBpZih0aGlzLnRyYW5zaXRpb24pe1xuICAgICAgICAgICAgcHJvYmFiaWxpdHlNZXJnZVQgPSBwcm9iYWJpbGl0eU1lcmdlLnRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGF5b3V0LmVkZ2VQcm9iYWJpbGl0eVBvc2l0aW9uKHByb2JhYmlsaXR5RW50ZXIpO1xuICAgICAgICB0aGlzLmxheW91dC5lZGdlUHJvYmFiaWxpdHlQb3NpdGlvbihwcm9iYWJpbGl0eU1lcmdlVCk7XG5cblxuICAgICAgICBlZGdlc0NvbnRhaW5lci5zZWxlY3RBbGwoJy5lZGdlLicrb3B0aW1hbENsYXNzTmFtZSkucmFpc2UoKTtcblxuICAgICAgICBlZGdlc01lcmdlLm9uKCdjb250ZXh0bWVudScsIHRoaXMuZWRnZUNvbnRleHRNZW51KTtcbiAgICAgICAgZWRnZXNNZXJnZS5vbignZGJsY2xpY2snLCB0aGlzLmVkZ2VDb250ZXh0TWVudSk7XG4gICAgICAgIGVkZ2VzTWVyZ2UuZWFjaChmdW5jdGlvbihkLCBpKXtcbiAgICAgICAgICAgIHZhciBlbGVtID0gdGhpcztcbiAgICAgICAgICAgIHZhciBtYyA9IG5ldyBIYW1tZXIuTWFuYWdlcihlbGVtKTtcbiAgICAgICAgICAgIG1jLmFkZChuZXcgSGFtbWVyLlByZXNzKHtcbiAgICAgICAgICAgICAgICBwb2ludGVyVHlwZTogSGFtbWVyLlBPSU5URVJfVE9VQ0hcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICByZWRyYXdGbG9hdGluZ1RleHRzKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cblxuICAgICAgICB2YXIgdGV4dHNDb250YWluZXIgPSB0aGlzLm1haW5Hcm91cC5zZWxlY3RPckFwcGVuZCgnZy5mbG9hdGluZy10ZXh0cycpO1xuICAgICAgICB2YXIgdGV4dHMgPSB0ZXh0c0NvbnRhaW5lci5zZWxlY3RBbGwoJy5mbG9hdGluZy10ZXh0JykuZGF0YSh0aGlzLmRhdGEudGV4dHMsIChkLGkpPT4gZC5pZCk7XG4gICAgICAgIHRleHRzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgdmFyIHRleHRzRW50ZXIgPSB0ZXh0cy5lbnRlcigpLmFwcGVuZFNlbGVjdG9yKCdnLmZsb2F0aW5nLXRleHQnKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgZD0+J3RleHQtJytkLmlkKTtcblxuXG4gICAgICAgIHZhciByZWN0V2lkdGggPSA0MDtcbiAgICAgICAgdmFyIHJlY3RIZWlnaHQgPSAyMDtcblxuICAgICAgICB0ZXh0c0VudGVyLmFwcGVuZCgncmVjdCcpLmF0dHIoJ3gnLCAtNSkuYXR0cigneScsIC0xNikuYXR0cignZmlsbC1vcGFjaXR5JywgMCk7XG4gICAgICAgIHRleHRzRW50ZXIuYXBwZW5kKCd0ZXh0Jyk7XG5cbiAgICAgICAgdmFyIHRleHRzTWVyZ2UgPSB0ZXh0c0VudGVyLm1lcmdlKHRleHRzKTtcbiAgICAgICAgdmFyIHRleHRzTWVyZ2VUID0gdGV4dHNNZXJnZTtcbiAgICAgICAgaWYodGhpcy50cmFuc2l0aW9uKXtcbiAgICAgICAgICAgIHRleHRzTWVyZ2VUID0gdGV4dHNNZXJnZS50cmFuc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0ZXh0c01lcmdlVC5hdHRyKCd0cmFuc2Zvcm0nLCBkPT4ndHJhbnNsYXRlKCcgKyBkLmxvY2F0aW9uLnggKyAnICAnICsgZC5sb2NhdGlvbi55ICsgJyknKTtcblxuICAgICAgICB2YXIgdHNwYW5zID0gdGV4dHNNZXJnZS5zZWxlY3QoJ3RleHQnKS5zZWxlY3RBbGwoJ3RzcGFuJykuZGF0YShkPT5kLnZhbHVlID8gZC52YWx1ZS5zcGxpdCgnXFxuJykgOiBbXSk7XG5cbiAgICAgICAgdHNwYW5zLmVudGVyKCkuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgICAubWVyZ2UodHNwYW5zKVxuICAgICAgICAgICAgLmh0bWwobD0+QXBwVXRpbHMucmVwbGFjZVVybHMoQXBwVXRpbHMuZXNjYXBlSHRtbChsKSkpXG4gICAgICAgICAgICAuYXR0cignZHknLCAoZCxpKT0+aT4wID8gJzEuMWVtJzogdW5kZWZpbmVkKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAnMCcpO1xuXG4gICAgICAgIHRzcGFucy5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIHRleHRzTWVyZ2UuY2xhc3NlZCgnc2QtZW1wdHknLCBkPT4hZC52YWx1ZSB8fCAhZC52YWx1ZS50cmltKCkpO1xuICAgICAgICB0ZXh0c01lcmdlLnNlbGVjdCgncmVjdCcpLmF0dHIoJ3dpZHRoJywgcmVjdFdpZHRoKS5hdHRyKCdoZWlnaHQnLCByZWN0SGVpZ2h0KTtcblxuICAgICAgICB0ZXh0c01lcmdlLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBpZighZC52YWx1ZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJiID0gZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgndGV4dCcpLm5vZGUoKS5nZXRCQm94KCk7XG4gICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3QoJ3JlY3QnKVxuICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBiYi55LTUpXG4gICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCBNYXRoLm1heChiYi53aWR0aCsxMCwgcmVjdFdpZHRoKSlcbiAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBNYXRoLm1heChiYi5oZWlnaHQrMTAsIHJlY3RIZWlnaHQpKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZih0aGlzLnRleHREcmFnSGFuZGxlcil7XG4gICAgICAgICAgICB0ZXh0c01lcmdlLmNhbGwodGhpcy50ZXh0RHJhZ0hhbmRsZXIuZHJhZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dHNNZXJnZS5vbignY29udGV4dG1lbnUnLCB0aGlzLnRleHRDb250ZXh0TWVudSk7XG4gICAgICAgIHRleHRzTWVyZ2Uub24oJ2RibGNsaWNrJywgdGhpcy50ZXh0Q29udGV4dE1lbnUpO1xuICAgICAgICB0ZXh0c01lcmdlLmVhY2goZnVuY3Rpb24oZCwgaSl7XG4gICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgbWMgPSBuZXcgSGFtbWVyLk1hbmFnZXIoZWxlbSk7XG4gICAgICAgICAgICBtYy5hZGQobmV3IEhhbW1lci5QcmVzcyh7XG4gICAgICAgICAgICAgICAgcG9pbnRlclR5cGU6ICd0b3VjaCdcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIHVwZGF0ZVZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5tYWluR3JvdXAuc2VsZWN0QWxsKCcubm9kZScpO1xuICAgICAgICBub2Rlcy5jbGFzc2VkKCdlcnJvcicsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmRhdGEudmFsaWRhdGlvblJlc3VsdHMuZm9yRWFjaCh2YWxpZGF0aW9uUmVzdWx0PT57XG4gICAgICAgICAgICBpZih2YWxpZGF0aW9uUmVzdWx0LmlzVmFsaWQoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWxpZGF0aW9uUmVzdWx0Lm9iamVjdElkVG9FcnJvcikuZm9yRWFjaChpZD0+e1xuICAgICAgICAgICAgICAgIHZhciBlcnJvcnMgPSB2YWxpZGF0aW9uUmVzdWx0Lm9iamVjdElkVG9FcnJvcltpZF07XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVTZWxlY3Rpb24gPSB0aGlzLmdldE5vZGVEM1NlbGVjdGlvbkJ5SWQoaWQpO1xuICAgICAgICAgICAgICAgIG5vZGVTZWxlY3Rpb24uY2xhc3NlZCgnZXJyb3InLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgdG9vbHRpcEh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICBlcnJvcnMuZm9yRWFjaChlPT57XG4gICAgICAgICAgICAgICAgICAgIGlmKHRvb2x0aXBIdG1sKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBIdG1sKz0nPGJyLz4nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcEh0bWwrPUFwcFV0aWxzLmdldFZhbGlkYXRpb25NZXNzYWdlKGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgVG9vbHRpcC5hdHRhY2gobm9kZVNlbGVjdGlvbi5zZWxlY3QoJy5lcnJvci1pbmRpY2F0b3InKSwgdG9vbHRpcEh0bWwpO1xuXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgaW5pdEVkZ2VNYXJrZXJzKCkge1xuICAgICAgICB2YXIgZGVmcyA9IHRoaXMuc3ZnLmFwcGVuZChcInN2ZzpkZWZzXCIpO1xuXG4gICAgICAgIHRoaXMuaW5pdEFycm93TWFya2VyKFwiYXJyb3dcIik7XG4gICAgICAgIHRoaXMuaW5pdEFycm93TWFya2VyKFwiYXJyb3ctb3B0aW1hbFwiKTtcbiAgICAgICAgdGhpcy5pbml0QXJyb3dNYXJrZXIoXCJhcnJvdy1zZWxlY3RlZFwiKTtcbiAgICB9XG5cbiAgICBpbml0QXJyb3dNYXJrZXIoaWQpIHtcblxuICAgICAgICB2YXIgZGVmcyA9IHRoaXMuc3ZnLnNlbGVjdChcImRlZnNcIik7XG4gICAgICAgIGRlZnMuYXBwZW5kKFwibWFya2VyXCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsaWQpXG4gICAgICAgICAgICAuYXR0cihcInZpZXdCb3hcIixcIjAgLTUgMTAgMTBcIilcbiAgICAgICAgICAgIC5hdHRyKFwicmVmWFwiLDUpXG4gICAgICAgICAgICAuYXR0cihcInJlZllcIiwwKVxuICAgICAgICAgICAgLmF0dHIoXCJtYXJrZXJXaWR0aFwiLDQpXG4gICAgICAgICAgICAuYXR0cihcIm1hcmtlckhlaWdodFwiLDQpXG4gICAgICAgICAgICAuYXR0cihcIm9yaWVudFwiLFwiYXV0b1wiKVxuICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJhcnJvd0hlYWRcIik7XG4gICAgfVxuXG4gICAgdXBkYXRlQnJ1c2hFeHRlbnQoKSB7XG4gICAgICAgIHZhciBzZWxmID10aGlzO1xuICAgICAgICB0aGlzLmJydXNoLmV4dGVudChbWzAsIDBdLCBbc2VsZi5zdmcuYXR0cignd2lkdGgnKSwgc2VsZi5zdmcuYXR0cignaGVpZ2h0JyldXSk7XG4gICAgICAgIHRoaXMuYnJ1c2hDb250YWluZXIuY2FsbCh0aGlzLmJydXNoKTtcbiAgICB9XG4gICAgaW5pdEJydXNoKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJydXNoQ29udGFpbmVyID0gc2VsZi5icnVzaENvbnRhaW5lciA9IHRoaXMuYnJ1c2hDb250YWluZXI9IHRoaXMuc3ZnLnNlbGVjdE9ySW5zZXJ0KFwiZy5icnVzaFwiLCBcIjpmaXJzdC1jaGlsZFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpO1xuXG4gICAgICAgIHZhciBicnVzaCA9IHRoaXMuYnJ1c2ggPSBkMy5icnVzaCgpXG4gICAgICAgICAgICAub24oXCJzdGFydFwiLCBicnVzaHN0YXJ0KVxuICAgICAgICAgICAgLm9uKFwiYnJ1c2hcIiwgYnJ1c2htb3ZlKVxuICAgICAgICAgICAgLm9uKFwiZW5kXCIsIGJydXNoZW5kKTtcblxuXG5cbiAgICAgICAgdGhpcy51cGRhdGVCcnVzaEV4dGVudCgpO1xuXG4gICAgICAgIGJydXNoQ29udGFpbmVyLnNlbGVjdCgnLm92ZXJsYXknKS5vbihcIm1vdXNlbW92ZS5lZGdlU2VsZWN0aW9uXCIsIG1vdXNlbW92ZWQpO1xuICAgICAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgICAgICAgdmFyIG0gPSBkMy5tb3VzZSh0aGlzKTtcbiAgICAgICAgICAgIHZhciBtZ3QgPSBzZWxmLmdldE1haW5Hcm91cFRyYW5zbGF0aW9uKCk7XG4gICAgICAgICAgICB2YXIgbWFyZ2luID0gMTA7XG5cbiAgICAgICAgICAgIHZhciBjbG9zZXN0ID0gW251bGwsIDk5OTk5OTk5OV07XG4gICAgICAgICAgICB2YXIgY2xvc2VFZGdlcyA9IFtdO1xuICAgICAgICAgICAgc2VsZi5tYWluR3JvdXAuc2VsZWN0QWxsKCcuZWRnZScpLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uY2xhc3NlZCgnc2QtaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhOb2RlID0gc2VsZWN0aW9uLnNlbGVjdCgncGF0aCcpLm5vZGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IHBhdGhOb2RlLmdldEJCb3goKTtcbiAgICAgICAgICAgICAgICBpZihiLngrbWd0WzBdIDw9bVswXSAmJiBiLngrYi53aWR0aCttZ3RbMF0gPj0gbVswXSAmJlxuICAgICAgICAgICAgICAgICAgIGIueSttZ3RbMV0tbWFyZ2luIDw9bVsxXSAmJiBiLnkrYi5oZWlnaHQrbWd0WzFdK21hcmdpbiA+PSBtWzFdKXtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY3AgPSBBcHBVdGlscy5jbG9zZXN0UG9pbnQocGF0aE5vZGUsIFttWzBdLW1ndFswXSwgbVsxXS1tZ3RbMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY3AuZGlzdGFuY2UgPCBtYXJnaW4gJiYgY3AuZGlzdGFuY2U8Y2xvc2VzdFsxXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gW3NlbGVjdGlvbiwgY3AuZGlzdGFuY2VdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi5ob3ZlcmVkRWRnZSA9IG51bGw7XG4gICAgICAgICAgICBpZihjbG9zZXN0WzBdKXtcbiAgICAgICAgICAgICAgICBjbG9zZXN0WzBdLmNsYXNzZWQoJ3NkLWhvdmVyJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5ob3ZlcmVkRWRnZSA9IGNsb3Nlc3RbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoIWQzLmV2ZW50LnNlbGVjdGlvbikgcmV0dXJuO1xuICAgICAgICAgICAgaWYoc2VsZi5ob3ZlcmVkRWRnZSl7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RFZGdlKHNlbGYuaG92ZXJlZEVkZ2UuZGF0dW0oKSwgdHJ1ZSlcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENvbnRleHRNZW51LmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgc2VsZWN0ZWQgbm9kZXMuXG4gICAgICAgIGZ1bmN0aW9uIGJydXNobW92ZSgpIHtcbiAgICAgICAgICAgIHZhciBzID0gZDMuZXZlbnQuc2VsZWN0aW9uO1xuICAgICAgICAgICAgaWYoIXMpcmV0dXJuO1xuXG4gICAgICAgICAgICBzZWxmLm1haW5Hcm91cC5zZWxlY3RBbGwoXCIubm9kZVwiKS5jbGFzc2VkKCdzZWxlY3RlZCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1haW5Hcm91cFRyYW5zbGF0aW9uID0gc2VsZi5nZXRNYWluR3JvdXBUcmFuc2xhdGlvbigpO1xuICAgICAgICAgICAgICAgIHZhciB4ID0gZC5sb2NhdGlvbi54K21haW5Hcm91cFRyYW5zbGF0aW9uWzBdO1xuICAgICAgICAgICAgICAgIHZhciB5ID0gZC5sb2NhdGlvbi55K21haW5Hcm91cFRyYW5zbGF0aW9uWzFdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlU2l6ZSA9IHNlbGYuY29uZmlnLmxheW91dC5ub2RlU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gbm9kZVNpemUqMC4yNTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc1swXVswXSA8PSB4K29mZnNldCAmJiB4LW9mZnNldCA8PSBzWzFdWzBdXG4gICAgICAgICAgICAgICAgICAgICYmIHNbMF1bMV0gPD0geStvZmZzZXQgJiYgeS1vZmZzZXQgPD0gc1sxXVsxXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBicnVzaCBpcyBlbXB0eSwgc2VsZWN0IGFsbCBjaXJjbGVzLlxuICAgICAgICBmdW5jdGlvbiBicnVzaGVuZCgpIHtcbiAgICAgICAgICAgIGlmICghZDMuZXZlbnQuc2VsZWN0aW9uKSByZXR1cm47XG4gICAgICAgICAgICBicnVzaC5tb3ZlKGJydXNoQ29udGFpbmVyLCBudWxsKTtcblxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZXMgPSBzZWxmLmdldFNlbGVjdGVkTm9kZXMoKTtcbiAgICAgICAgICAgIGlmKHNlbGVjdGVkTm9kZXMgJiYgc2VsZWN0ZWROb2Rlcy5sZW5ndGggPT09IDEpe1xuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0Tm9kZShzZWxlY3RlZE5vZGVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmICghZDMuZXZlbnQuc2VsZWN0aW9uKSBzZWxmLm1haW5Hcm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0ZWRcIikuY2xhc3NlZCgnc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNhYmxlQnJ1c2goKXtcbiAgICAgICAgaWYoIXRoaXMuYnJ1c2hEaXNhYmxlZCl7XG4gICAgICAgICAgICBBcHBVdGlscy5ncm93bChpMThuLnQoJ2dyb3dsLmJydXNoRGlzYWJsZWQnKSwgJ2luZm8nLCAnbGVmdCcpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5icnVzaERpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5icnVzaENvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBlbmFibGVCcnVzaCgpe1xuICAgICAgICBpZih0aGlzLmJydXNoRGlzYWJsZWQpe1xuICAgICAgICAgICAgQXBwVXRpbHMuZ3Jvd2woaTE4bi50KCdncm93bC5icnVzaEVuYWJsZWQnKSwgJ2luZm8nLCAnbGVmdCcpXG4gICAgICAgICAgICB0aGlzLmluaXRCcnVzaCgpO1xuICAgICAgICAgICAgdGhpcy5icnVzaERpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgZ2V0TWFpbkdyb3VwVHJhbnNsYXRpb24oaW52ZXJ0KSB7XG4gICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IEFwcFV0aWxzLmdldFRyYW5zbGF0aW9uKHRoaXMubWFpbkdyb3VwLmF0dHIoXCJ0cmFuc2Zvcm1cIikpO1xuICAgICAgICBpZihpbnZlcnQpe1xuICAgICAgICAgICAgdHJhbnNsYXRpb25bMF0gPSAtdHJhbnNsYXRpb25bMF07XG4gICAgICAgICAgICB0cmFuc2xhdGlvblsxXSA9IC10cmFuc2xhdGlvblsxXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbjtcbiAgICB9XG5cbiAgICBpbml0Tm9kZUNvbnRleHRNZW51KCkge1xuICAgICAgICB0aGlzLm5vZGVDb250ZXh0TWVudSA9IG5ldyBOb2RlQ29udGV4dE1lbnUodGhpcywgdGhpcy5jb25maWcub3BlcmF0aW9uc0Zvck9iamVjdCk7XG4gICAgfVxuXG4gICAgaW5pdEVkZ2VDb250ZXh0TWVudSgpIHtcbiAgICAgICAgdGhpcy5lZGdlQ29udGV4dE1lbnUgPSBuZXcgRWRnZUNvbnRleHRNZW51KHRoaXMpO1xuICAgIH1cblxuICAgIGluaXRUZXh0Q29udGV4dE1lbnUoKSB7XG4gICAgICAgIHRoaXMudGV4dENvbnRleHRNZW51ID0gbmV3IFRleHRDb250ZXh0TWVudSh0aGlzKTtcbiAgICB9XG5cblxuXG4gICAgaW5pdE1haW5Db250ZXh0TWVudSgpIHtcbiAgICAgICAgdGhpcy5tYWluQ29udGV4dE1lbnUgPSBuZXcgTWFpbkNvbnRleHRNZW51KHRoaXMpO1xuICAgICAgICB0aGlzLnN2Zy5vbignY29udGV4dG1lbnUnLHRoaXMubWFpbkNvbnRleHRNZW51KTtcbiAgICAgICAgdGhpcy5zdmcub24oJ2RibGNsaWNrJyx0aGlzLm1haW5Db250ZXh0TWVudSk7XG4gICAgfVxuXG4gICAgYWRkVGV4dCh0ZXh0KXtcbiAgICAgICAgdGhpcy5kYXRhLnNhdmVTdGF0ZSgpO1xuICAgICAgICB0aGlzLmRhdGEuYWRkVGV4dCh0ZXh0KTtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RUZXh0KHRleHQpO1xuICAgIH1cblxuICAgIGFkZE5vZGUobm9kZSwgcGFyZW50LCByZWRyYXc9ZmFsc2Upe1xuICAgICAgICB0aGlzLmRhdGEuc2F2ZVN0YXRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5hZGROb2RlKG5vZGUsIHBhcmVudCk7XG4gICAgICAgIHRoaXMucmVkcmF3KHRydWUpO1xuICAgICAgICB0aGlzLmxheW91dC51cGRhdGUobm9kZSk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIGFkZERlY2lzaW9uTm9kZShwYXJlbnQpe1xuICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBtb2RlbC5EZWNpc2lvbk5vZGUodGhpcy5sYXlvdXQuZ2V0TmV3Q2hpbGRMb2NhdGlvbihwYXJlbnQpKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5ld05vZGUsIHBhcmVudClcbiAgICB9XG4gICAgYWRkQ2hhbmNlTm9kZShwYXJlbnQpe1xuICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBtb2RlbC5DaGFuY2VOb2RlKHRoaXMubGF5b3V0LmdldE5ld0NoaWxkTG9jYXRpb24ocGFyZW50KSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShuZXdOb2RlLCBwYXJlbnQpXG4gICAgfVxuICAgIGFkZFRlcm1pbmFsTm9kZShwYXJlbnQpe1xuICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ldyBtb2RlbC5UZXJtaW5hbE5vZGUodGhpcy5sYXlvdXQuZ2V0TmV3Q2hpbGRMb2NhdGlvbihwYXJlbnQpKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5ld05vZGUsIHBhcmVudClcbiAgICB9XG5cbiAgICBpbmplY3ROb2RlKG5vZGUsIGVkZ2Upe1xuICAgICAgICB0aGlzLmRhdGEuc2F2ZVN0YXRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5pbmplY3ROb2RlKG5vZGUsIGVkZ2UpO1xuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgICAgICB0aGlzLmxheW91dC51cGRhdGUobm9kZSk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIGluamVjdERlY2lzaW9uTm9kZShlZGdlKXtcbiAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgbW9kZWwuRGVjaXNpb25Ob2RlKHRoaXMubGF5b3V0LmdldEluamVjdGVkTm9kZUxvY2F0aW9uKGVkZ2UpKTtcbiAgICAgICAgdGhpcy5pbmplY3ROb2RlKG5ld05vZGUsIGVkZ2UpO1xuXG4gICAgfVxuXG4gICAgaW5qZWN0Q2hhbmNlTm9kZShlZGdlKXtcbiAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgbW9kZWwuQ2hhbmNlTm9kZSh0aGlzLmxheW91dC5nZXRJbmplY3RlZE5vZGVMb2NhdGlvbihlZGdlKSk7XG4gICAgICAgIHRoaXMuaW5qZWN0Tm9kZShuZXdOb2RlLCBlZGdlKTtcbiAgICB9XG5cbiAgICByZW1vdmVOb2RlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5kYXRhLnNhdmVTdGF0ZSgpO1xuICAgICAgICB0aGlzLmRhdGEucmVtb3ZlTm9kZShub2RlKTtcblxuXG4gICAgICAgIGlmKCF0aGlzLmxheW91dC5pc01hbnVhbExheW91dCgpKXtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LnVwZGF0ZSgpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVTZWxlY3RlZE5vZGVzKCkge1xuICAgICAgICB2YXIgc2VsZWN0ZWROb2RlcyA9IHRoaXMuZ2V0U2VsZWN0ZWROb2RlcygpO1xuICAgICAgICBpZighc2VsZWN0ZWROb2Rlcy5sZW5ndGgpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5zYXZlU3RhdGUoKTtcbiAgICAgICAgdGhpcy5kYXRhLnJlbW92ZU5vZGVzKHNlbGVjdGVkTm9kZXMpO1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgICAgIHRoaXMubGF5b3V0LnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHJlbW92ZVNlbGVjdGVkVGV4dHMoKXtcbiAgICAgICAgdmFyIHNlbGVjdGVkVGV4dHMgPSB0aGlzLmdldFNlbGVjdGVkVGV4dHMoKTtcblxuICAgICAgICBpZighc2VsZWN0ZWRUZXh0cy5sZW5ndGgpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5zYXZlU3RhdGUoKTtcbiAgICAgICAgdGhpcy5kYXRhLnJlbW92ZVRleHRzKHNlbGVjdGVkVGV4dHMpO1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuXG4gICAgY29weU5vZGUoZCwgbm90Q2xlYXJQcmV2U2VsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuZGF0YS5jbG9uZVN1YnRyZWUoZCk7XG4gICAgICAgIGlmKG5vdENsZWFyUHJldlNlbGVjdGlvbil7XG4gICAgICAgICAgICBpZighdGhpcy5jb3BpZWROb2Rlcyl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3BpZWROb2Rlcz1bXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29waWVkTm9kZXMucHVzaChjbG9uZSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5jb3BpZWROb2RlcyA9IFtjbG9uZV07XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGN1dE5vZGUoZCkge1xuICAgICAgICB0aGlzLmNvcHlOb2RlKGQpO1xuICAgICAgICB0aGlzLnJlbW92ZU5vZGUoZCk7XG4gICAgfVxuXG4gICAgY3V0U2VsZWN0ZWROb2Rlcygpe1xuICAgICAgICB2YXIgc2VsZWN0ZWROb2RlcyA9IHRoaXMuZ2V0U2VsZWN0ZWROb2RlcygpO1xuICAgICAgICB2YXIgc2VsZWN0ZWRSb290cyA9IHRoaXMuZGF0YS5maW5kU3VidHJlZVJvb3RzKHNlbGVjdGVkTm9kZXMpO1xuICAgICAgICB0aGlzLmNvcHlOb2RlcyhzZWxlY3RlZFJvb3RzKTtcbiAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3RlZE5vZGVzKCk7XG4gICAgfVxuXG4gICAgY29weVNlbGVjdGVkTm9kZXMoKSB7XG4gICAgICAgIHZhciBzZWxmO1xuICAgICAgICB2YXIgc2VsZWN0ZWROb2RlcyA9IHRoaXMuZ2V0U2VsZWN0ZWROb2RlcygpO1xuXG4gICAgICAgIHZhciBzZWxlY3RlZFJvb3RzID0gdGhpcy5kYXRhLmZpbmRTdWJ0cmVlUm9vdHMoc2VsZWN0ZWROb2Rlcyk7XG4gICAgICAgIHRoaXMuY29weU5vZGVzKHNlbGVjdGVkUm9vdHMpO1xuXG5cbiAgICB9XG5cbiAgICBjb3B5Tm9kZXMobm9kZXMpe1xuICAgICAgICBpZih0aGlzLmNvcGllZE5vZGVzICE9PSBub2Rlcyl7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsQ29waWVkTm9kZXMgPSBub2RlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvcGllZE5vZGVzID0gbm9kZXMubWFwKGQ9PnRoaXMuZGF0YS5jbG9uZVN1YnRyZWUoZCkpO1xuXG4gICAgfVxuXG4gICAgZ2V0VHJhY2tlZENsb25lc09mQ29waWVkTm9kZXMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxDb3BpZWROb2Rlcy5tYXAoZD0+dGhpcy5kYXRhLmNsb25lU3VidHJlZShkLCBmYWxzZSwgdHJ1ZSkpO1xuICAgIH1cblxuXG4gICAgcGFzdGVUb05vZGUobm9kZSwgYXNUcmFja2VkQ2xvbmUgPSBmYWxzZSkge1xuICAgICAgICBpZighdGhpcy5jb3BpZWROb2RlcyB8fCAhdGhpcy5jb3BpZWROb2Rlcy5sZW5ndGgpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5zYXZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIHZhciBub2Rlc1RvQXR0YWNoID0gdGhpcy5jb3BpZWROb2RlcztcbiAgICAgICAgaWYoYXNUcmFja2VkQ2xvbmUpe1xuICAgICAgICAgICAgbm9kZXNUb0F0dGFjaCA9IHNlbGYuZ2V0VHJhY2tlZENsb25lc09mQ29waWVkTm9kZXMoKVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHNlbGYuY29weU5vZGVzKHRoaXMuY29waWVkTm9kZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZXNUb0F0dGFjaC5mb3JFYWNoKHRvQXR0YWNoPT57XG4gICAgICAgICAgICB2YXIgYXR0YWNoZWQgPSB0aGlzLmRhdGEuYXR0YWNoU3VidHJlZSh0b0F0dGFjaCwgbm9kZSkuY2hpbGROb2RlO1xuICAgICAgICAgICAgYXR0YWNoZWQuZm9sZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGF0dGFjaGVkLmZvbGRlZCl7XG4gICAgICAgICAgICAgICAgc2VsZi5mb2xkU3VidHJlZShhdHRhY2hlZCwgYXR0YWNoZWQuZm9sZGVkLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBzZWxmLmxheW91dC5nZXROZXdDaGlsZExvY2F0aW9uKG5vZGUpO1xuICAgICAgICAgICAgYXR0YWNoZWQubW92ZVRvKGxvY2F0aW9uLngsIGxvY2F0aW9uLnksIHRydWUpO1xuICAgICAgICAgICAgc2VsZi5sYXlvdXQubW92ZU5vZGVUb0VtcHR5UGxhY2UoYXR0YWNoZWQsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGYubGF5b3V0LmZpdE5vZGVzSW5QbG90dGluZ1JlZ2lvbih0aGlzLmRhdGEuZ2V0QWxsRGVzY2VuZGFudE5vZGVzKGF0dGFjaGVkKSk7XG5cbiAgICAgICAgICAgIHNlbGYuc2VsZWN0U3ViVHJlZShhdHRhY2hlZCwgZmFsc2UsIG5vZGVzVG9BdHRhY2gubGVuZ3RoPjEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZihub2RlLmZvbGRlZCl7XG4gICAgICAgICAgICBzZWxmLmZvbGRTdWJ0cmVlKG5vZGUsIG5vZGUuZm9sZGVkLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICAgICAgc2VsZi5sYXlvdXQudXBkYXRlKCk7XG4gICAgICAgIH0sMTApXG5cbiAgICB9XG5cbiAgICBwYXN0ZVRvTmV3TG9jYXRpb24ocG9pbnQpIHtcbiAgICAgICAgdGhpcy5kYXRhLnNhdmVTdGF0ZSgpO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgdmFyIG5vZGVzVG9BdHRhY2ggPSB0aGlzLmNvcGllZE5vZGVzO1xuICAgICAgICBzZWxmLmNvcHlOb2Rlcyh0aGlzLmNvcGllZE5vZGVzKTtcbiAgICAgICAgbm9kZXNUb0F0dGFjaC5mb3JFYWNoKHRvQXR0YWNoPT4ge1xuICAgICAgICAgICAgdmFyIGF0dGFjaGVkID0gdGhpcy5kYXRhLmF0dGFjaFN1YnRyZWUodG9BdHRhY2gpO1xuICAgICAgICAgICAgaWYoYXR0YWNoZWQuZm9sZGVkKXtcbiAgICAgICAgICAgICAgICBzZWxmLmZvbGRTdWJ0cmVlKGF0dGFjaGVkLCBhdHRhY2hlZC5mb2xkZWQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dGFjaGVkLm1vdmVUbyhwb2ludC54LCBwb2ludC55LCB0cnVlKTtcbiAgICAgICAgICAgIHNlbGYubGF5b3V0Lm1vdmVOb2RlVG9FbXB0eVBsYWNlKGF0dGFjaGVkLCBmYWxzZSk7XG4gICAgICAgICAgICBzZWxmLmxheW91dC5maXROb2Rlc0luUGxvdHRpbmdSZWdpb24odGhpcy5kYXRhLmdldEFsbERlc2NlbmRhbnROb2RlcyhhdHRhY2hlZCkpO1xuXG4gICAgICAgICAgICBzZWxmLnNlbGVjdFN1YlRyZWUoYXR0YWNoZWQsIGZhbHNlLCBub2Rlc1RvQXR0YWNoLmxlbmd0aD4xKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgICAgIHNlbGYubGF5b3V0LnVwZGF0ZSgpO1xuICAgICAgICB9LDEwKVxuXG4gICAgfVxuXG4gICAgY29udmVydE5vZGUobm9kZSwgdHlwZVRvQ29udmVydFRvKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmRhdGEuc2F2ZVN0YXRlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5jb252ZXJ0Tm9kZShub2RlLCB0eXBlVG9Db252ZXJ0VG8pO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLnJlZHJhdyh0cnVlKTtcbiAgICAgICAgfSwxMClcbiAgICB9XG5cbiAgICBwZXJmb3JtT3BlcmF0aW9uKG9iamVjdCwgb3BlcmF0aW9uKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmRhdGEuc2F2ZVN0YXRlKCk7XG4gICAgICAgIG9wZXJhdGlvbi5wZXJmb3JtKG9iamVjdCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgICAgICBzZWxmLmxheW91dC51cGRhdGUoKTtcbiAgICAgICAgfSwxMClcbiAgICB9XG5cbiAgICBmb2xkU3VidHJlZShub2RlLCBmb2xkID0gdHJ1ZSwgcmVkcmF3PXRydWUpe1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIG5vZGUuZm9sZGVkID0gZm9sZDtcblxuICAgICAgICB0aGlzLmRhdGEuZ2V0QWxsRGVzY2VuZGFudE5vZGVzKG5vZGUpLmZvckVhY2gobj0+e1xuICAgICAgICAgICAgbi4kaGlkZGVuID0gZm9sZDtcbiAgICAgICAgICAgIG4uZm9sZGVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRhdGEuZ2V0QWxsRGVzY2VuZGFudEVkZ2VzKG5vZGUpLmZvckVhY2goZT0+ZS4kaGlkZGVuID0gZm9sZCk7XG5cbiAgICAgICAgaWYoIXJlZHJhdyl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgICAgIHNlbGYubGF5b3V0LnVwZGF0ZSgpO1xuICAgICAgICB9LDEwKVxuICAgIH1cblxuICAgIHVwZGF0ZVZpc2liaWxpdHkobm9kZSA9IG51bGwpe1xuICAgICAgICBpZighbm9kZSl7XG4gICAgICAgICAgICB0aGlzLmRhdGEuZ2V0Um9vdHMoKS5mb3JFYWNoKG49PnRoaXMudXBkYXRlVmlzaWJpbGl0eShuKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZihub2RlLmZvbGRlZCl7XG4gICAgICAgICAgICB0aGlzLmZvbGRTdWJ0cmVlKG5vZGUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUuY2hpbGRFZGdlcy5mb3JFYWNoKGUgPT4gdGhpcy51cGRhdGVWaXNpYmlsaXR5KGUuY2hpbGROb2RlKSk7XG5cbiAgICB9XG5cbiAgICBtb3ZlTm9kZVRvKHgseSl7XG5cbiAgICB9XG5cbiAgICB1cGRhdGVOb2RlUG9zaXRpb24obm9kZSkge1xuICAgICAgICB0aGlzLmdldE5vZGVEM1NlbGVjdGlvbihub2RlKS5yYWlzZSgpLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJytub2RlLmxvY2F0aW9uLngrJyAnK25vZGUubG9jYXRpb24ueSsnKScpO1xuICAgIH1cblxuICAgIHVwZGF0ZVRleHRQb3NpdGlvbih0ZXh0KSB7XG4gICAgICAgIHRoaXMuZ2V0VGV4dEQzU2VsZWN0aW9uKHRleHQpLnJhaXNlKCkuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnK3RleHQubG9jYXRpb24ueCsnICcrdGV4dC5sb2NhdGlvbi55KycpJyk7XG4gICAgfVxuXG4gICAgZ2V0Tm9kZUQzU2VsZWN0aW9uKG5vZGUpe1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2RlRDNTZWxlY3Rpb25CeUlkKG5vZGUuaWQpO1xuICAgIH1cblxuICAgIGdldE5vZGVEM1NlbGVjdGlvbkJ5SWQoaWQpe1xuICAgICAgICByZXR1cm4gdGhpcy5tYWluR3JvdXAuc2VsZWN0KCcjbm9kZS0nK2lkKTtcbiAgICB9XG4gICAgZ2V0VGV4dEQzU2VsZWN0aW9uKHRleHQpe1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUZXh0RDNTZWxlY3Rpb25CeUlkKHRleHQuaWQpO1xuICAgIH1cbiAgICBnZXRUZXh0RDNTZWxlY3Rpb25CeUlkKGlkKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFpbkdyb3VwLnNlbGVjdCgnI3RleHQtJytpZCk7XG4gICAgfVxuXG4gICAgZ2V0U2VsZWN0ZWROb2Rlcyh2aXNpYmxlT25seSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBzZWxlY3RlZFZpc2libGUgPSB0aGlzLm1haW5Hcm91cC5zZWxlY3RBbGwoXCIubm9kZS5zZWxlY3RlZFwiKS5kYXRhKCk7XG4gICAgICAgIGlmKHZpc2libGVPbmx5KXtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZFZpc2libGU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYWxsU2VsZWN0ZWQgID0gW107XG4gICAgICAgIGFsbFNlbGVjdGVkLnB1c2goLi4uc2VsZWN0ZWRWaXNpYmxlKTtcblxuICAgICAgICBzZWxlY3RlZFZpc2libGUuZm9yRWFjaChuPT57XG4gICAgICAgICAgICBpZihuLmZvbGRlZCl7XG4gICAgICAgICAgICAgICAgbGV0IGRlc2NlbmRhbnRzID0gdGhpcy5kYXRhLmdldEFsbERlc2NlbmRhbnROb2RlcyhuKTtcbiAgICAgICAgICAgICAgICBpZihkZXNjZW5kYW50cyl7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNlbGVjdGVkLnB1c2goLi4uZGVzY2VuZGFudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGFsbFNlbGVjdGVkO1xuICAgIH1cblxuICAgIGdldFNlbGVjdGVkVGV4dHMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFpbkdyb3VwLnNlbGVjdEFsbChcIi5mbG9hdGluZy10ZXh0LnNlbGVjdGVkXCIpLmRhdGEoKTtcbiAgICB9XG5cbiAgICBjbGVhclNlbGVjdGlvbigpe1xuICAgICAgICB0aGlzLm1haW5Hcm91cC5zZWxlY3RBbGwoXCIuZWRnZS5zZWxlY3RlZFwiKS5zZWxlY3QoJ3BhdGgnKS5hdHRyKFwibWFya2VyLWVuZFwiLCBkID0+IFwidXJsKCNhcnJvd1wiKyh0aGlzLmlzT3B0aW1hbChkKT8nLW9wdGltYWwnOicnKStcIilcIilcbiAgICAgICAgdGhpcy5tYWluR3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGVkXCIpLmNsYXNzZWQoJ3NlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbmZpZy5vblNlbGVjdGlvbkNsZWFyZWQoKTtcbiAgICB9XG5cbiAgICBzZWxlY3RFZGdlKGVkZ2UsIGNsZWFyU2VsZWN0aW9uQmVmb3JlU2VsZWN0KXtcbiAgICAgICAgaWYoY2xlYXJTZWxlY3Rpb25CZWZvcmVTZWxlY3Qpe1xuICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uZmlnLm9uRWRnZVNlbGVjdGVkKGVkZ2UpO1xuICAgICAgICB0aGlzLm1haW5Hcm91cC5zZWxlY3QoJyNlZGdlLScrZWRnZS5pZClcbiAgICAgICAgICAgIC5jbGFzc2VkKCdzZWxlY3RlZCcsIHRydWUpXG4gICAgICAgICAgICAuc2VsZWN0KCdwYXRoJylcbiAgICAgICAgICAgIC5hdHRyKFwibWFya2VyLWVuZFwiLCBkID0+IFwidXJsKCNhcnJvdy1zZWxlY3RlZClcIilcbiAgICB9XG5cbiAgICBpc05vZGVTZWxlY3RlZChub2RlKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZUQzU2VsZWN0aW9uKG5vZGUpLmNsYXNzZWQoJ3NlbGVjdGVkJyk7XG4gICAgfVxuXG4gICAgc2VsZWN0Tm9kZShub2RlLCBjbGVhclNlbGVjdGlvbkJlZm9yZVNlbGVjdCwgc2tpcENhbGxiYWNrKXtcbiAgICAgICAgaWYoY2xlYXJTZWxlY3Rpb25CZWZvcmVTZWxlY3Qpe1xuICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIXNraXBDYWxsYmFjayl7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5vbk5vZGVTZWxlY3RlZChub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0Tm9kZUQzU2VsZWN0aW9uQnlJZChub2RlLmlkKS5jbGFzc2VkKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIHNlbGVjdFRleHQodGV4dCwgY2xlYXJTZWxlY3Rpb25CZWZvcmVTZWxlY3QsIHNraXBDYWxsYmFjayl7XG4gICAgICAgIGlmKGNsZWFyU2VsZWN0aW9uQmVmb3JlU2VsZWN0KXtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCFza2lwQ2FsbGJhY2spe1xuICAgICAgICAgICAgdGhpcy5jb25maWcub25UZXh0U2VsZWN0ZWQodGV4dClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0VGV4dEQzU2VsZWN0aW9uQnlJZCh0ZXh0LmlkKS5jbGFzc2VkKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIHNlbGVjdFN1YlRyZWUobm9kZSwgY2xlYXJTZWxlY3Rpb25CZWZvcmVTZWxlY3Qsc2tpcENhbGxiYWNrKSB7XG4gICAgICAgIGlmKGNsZWFyU2VsZWN0aW9uQmVmb3JlU2VsZWN0KXtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdE5vZGUobm9kZSwgZmFsc2UsIHNraXBDYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY2hpbGRFZGdlcy5mb3JFYWNoKGU9PnRoaXMuc2VsZWN0U3ViVHJlZShlLmNoaWxkTm9kZSwgZmFsc2UsIHRydWUpKTtcbiAgICB9XG5cbiAgICBzZWxlY3RBbGxOb2RlcygpIHtcbiAgICAgICAgdGhpcy5tYWluR3JvdXAuc2VsZWN0QWxsKFwiLm5vZGVcIikuY2xhc3NlZCgnc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBhdXRvTGF5b3V0KHR5cGUsIHdpdGhvdXRTdGF0ZVNhdmluZyl7XG4gICAgICAgIHRoaXMubGF5b3V0LmF1dG9MYXlvdXQodHlwZSwgd2l0aG91dFN0YXRlU2F2aW5nKTtcbiAgICB9XG5cbiAgICB1cGRhdGVEaWFncmFtVGl0bGUodGl0bGVWYWx1ZSl7XG4gICAgICAgIGlmKCF0aXRsZVZhbHVlKXtcbiAgICAgICAgICAgIHRpdGxlVmFsdWUgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpYWdyYW1UaXRsZSA9IHRpdGxlVmFsdWU7XG4gICAgICAgIHRoaXMucmVkcmF3RGlhZ3JhbVRpdGxlKCk7XG4gICAgICAgIHRoaXMucmVkcmF3RGlhZ3JhbURlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTWFyZ2luKHRydWUpO1xuICAgIH1cblxuICAgIHJlZHJhd0RpYWdyYW1UaXRsZSgpe1xuICAgICAgICB2YXIgc3ZnV2lkdGggPSB0aGlzLnN2Zy5hdHRyKCd3aWR0aCcpO1xuICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gdGhpcy5zdmcuYXR0cignaGVpZ2h0Jyk7XG4gICAgICAgIHRoaXMudGl0bGVDb250YWluZXIgPSB0aGlzLnN2Zy5zZWxlY3RPckFwcGVuZCgnZy5zZC10aXRsZS1jb250YWluZXInKTtcblxuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLnRpdGxlQ29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKCd0ZXh0LnNkLXRpdGxlJyk7XG4gICAgICAgIHRpdGxlLnRleHQodGhpcy5kaWFncmFtVGl0bGUpO1xuICAgICAgICBMYXlvdXQuc2V0SGFuZ2luZ1Bvc2l0aW9uKHRpdGxlKTtcblxuICAgICAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VJbnQodGhpcy5jb25maWcudGl0bGUubWFyZ2luLnRvcCk7XG4gICAgICAgIHRoaXMudGl0bGVDb250YWluZXIuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnKyhzdmdXaWR0aC8yKSsnLCcrKCBtYXJnaW5Ub3ApKycpJyk7XG4gICAgfVxuICAgIHJlZHJhd0RpYWdyYW1EZXNjcmlwdGlvbigpe1xuICAgICAgICB2YXIgc3ZnV2lkdGggPSB0aGlzLnN2Zy5hdHRyKCd3aWR0aCcpO1xuICAgICAgICB2YXIgc3ZnSGVpZ2h0ID0gdGhpcy5zdmcuYXR0cignaGVpZ2h0Jyk7XG4gICAgICAgIHRoaXMudGl0bGVDb250YWluZXIgPSB0aGlzLnN2Zy5zZWxlY3RPckFwcGVuZCgnZy5zZC10aXRsZS1jb250YWluZXInKTtcblxuICAgICAgICB2YXIgZGVzYyA9IHRoaXMudGl0bGVDb250YWluZXIuc2VsZWN0T3JBcHBlbmQoJ3RleHQuc2QtZGVzY3JpcHRpb24nKTtcblxuICAgICAgICBpZighdGhpcy5jb25maWcuZGVzY3JpcHRpb24uc2hvdyl7XG4gICAgICAgICAgICBkZXNjLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxpbmVzID0gdGhpcy5kaWFncmFtRGVzY3JpcHRpb24gPyB0aGlzLmRpYWdyYW1EZXNjcmlwdGlvbi5zcGxpdCgnXFxuJykgOiBbXTtcbiAgICAgICAgdmFyIHRzcGFucyA9IGRlc2Muc2VsZWN0QWxsKCd0c3BhbicpLmRhdGEobGluZXMpO1xuICAgICAgICB0c3BhbnMuZW50ZXIoKS5hcHBlbmQoJ3RzcGFuJylcbiAgICAgICAgICAgIC5tZXJnZSh0c3BhbnMpXG4gICAgICAgICAgICAuaHRtbChsPT5BcHBVdGlscy5yZXBsYWNlVXJscyhBcHBVdGlscy5lc2NhcGVIdG1sKGwpKSlcbiAgICAgICAgICAgIC5hdHRyKCdkeScsIChkLGkpPT5pPjAgPyAnMS4xZW0nOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAuYXR0cigneCcsICcwJyk7XG5cbiAgICAgICAgdHNwYW5zLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgTGF5b3V0LnNldEhhbmdpbmdQb3NpdGlvbihkZXNjKTtcblxuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLnRpdGxlQ29udGFpbmVyLnNlbGVjdE9yQXBwZW5kKCd0ZXh0LnNkLXRpdGxlJyk7XG5cbiAgICAgICAgdmFyIG1hcmdpblRvcCA9IDA7XG4gICAgICAgIGlmKHRoaXMuZGlhZ3JhbVRpdGxlKXtcbiAgICAgICAgICAgIG1hcmdpblRvcCArPSB0aXRsZS5ub2RlKCkuZ2V0QkJveCgpLmhlaWdodDtcbiAgICAgICAgICAgIG1hcmdpblRvcCs9IE1hdGgubWF4KHBhcnNlSW50KHRoaXMuY29uZmlnLmRlc2NyaXB0aW9uLm1hcmdpbi50b3ApLCAwKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZGVzYy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJysoIG1hcmdpblRvcCkrJyknKTtcbiAgICB9XG5cbiAgICB1cGRhdGVEaWFncmFtRGVzY3JpcHRpb24oZGVzY3JpcHRpb25WYWx1ZSl7XG4gICAgICAgIGlmKCFkZXNjcmlwdGlvblZhbHVlKXtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uVmFsdWUgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpYWdyYW1EZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uVmFsdWU7XG4gICAgICAgIHRoaXMucmVkcmF3RGlhZ3JhbVRpdGxlKCk7XG4gICAgICAgIHRoaXMucmVkcmF3RGlhZ3JhbURlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTWFyZ2luKHRydWUpO1xuICAgIH1cblxuXG4gICAgZ2V0VGl0bGVHcm91cEhlaWdodCh3aXRoTWFyZ2lucyl7XG4gICAgICAgIGlmKCF0aGlzLnRpdGxlQ29udGFpbmVyKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoID0gdGhpcy50aXRsZUNvbnRhaW5lci5ub2RlKCkuZ2V0QkJveCgpLmhlaWdodDtcbiAgICAgICAgaWYod2l0aE1hcmdpbnMpe1xuICAgICAgICAgICAgaCs9IHBhcnNlSW50KHRoaXMuY29uZmlnLnRpdGxlLm1hcmdpbi5ib3R0b20pO1xuICAgICAgICAgICAgaCs9IHBhcnNlSW50KHRoaXMuY29uZmlnLnRpdGxlLm1hcmdpbi50b3ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoO1xuICAgIH1cblxufVxuIl19
